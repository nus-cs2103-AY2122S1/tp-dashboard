[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T11-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T11-3/tp/actions)","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"# PlannerMD","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"* PlannerMD is an all-in-one desktop application to help clinic receptionists manage patients and appointments in a clinic.","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"* PlannerMD helps clinic receptionists seamlessly integrate the daily doctor appointments and the unique requirements of each patient into a single application.","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"* PlannerMD also expedites the manual processes found in a clinic and saves the receptionists plenty of time while reducing human error.","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"* PlannerMD is designed primarily for advanced computer users who prefer typing over using a mouse as most user interactions happen through a Command Line Interface (CLI).","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"## Site Map","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"* [User Guide](docs/UserGuide.md)","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"* [Developer Guide](docs/DeveloperGuide.md)","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"* [About Us](docs/AboutUs.md)","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"## Acknowledgements","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"-":3,"jiayi1129":18}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"mainClassName \u003d \u0027seedu.plannermd.Main\u0027","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"hpkoh"},"content":"run {","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"hpkoh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"    archiveName \u003d \u0027plannermd.jar\u0027","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"hpkoh":4,"-":70,"jiayi1129":2}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"### Jia Yi","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"\u003cimg src\u003d\"images/jiayi1129.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"[[github](https://github.com/jiayi1129)]","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"[[portfolio](team/jiayi1129.md)]","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"* Role: Team Lead","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"* Responsibilities: Responsible for overall project coordination.","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"### Pua Li Xue","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"\u003cimg src\u003d\"images/pualixue.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"[[github](http://github.com/pualixue)]","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"[[portfolio](team/pualixue.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"* Role: Code Quality","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"* Responsibilities: Looks after code quality, ensures adherence to coding standards.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"### Tey Hao Ze","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"\u003cimg src\u003d\"images/haozeee.png\" width\u003d\"200\"\u003e","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"[[github](https://github.com/haozeee)]","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"[[portfolio](team/haozeee.md)]","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"* Role: Scheduling and tracking","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"* Responsibilities: In charge of defining, assigning and tracking project tasks","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"### Koh Hong Po","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"\u003cimg src\u003d\"images/hpkoh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"[[github](https://github.com/hpkoh)]","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"[[portfolio](team/hpkoh.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"* Role: Testing","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"* Responsibilities: Ensures the testing of the project is done properly and on time","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"### Chuang Zhe Quan","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"\u003cimg src\u003d\"images/chuangzhequan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"[[github](http://github.com/ChuangZheQuan)]","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"[[portfolio](team/ChuangZheQuan.md)]","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"* Role: Documentation","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"* Responsibilities: Responsible for the quality of various project documents.","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"Haozeee":6,"hpkoh":6,"pualixue":6,"ChuangZheQuan":6,"-":28,"jiayi1129":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"PlannerMD is an easy-to-use command-line interface (CLI) application that helps clinic receptionists seamlessly integrate the daily appointments and the unique requirements of each patient into a single application. PlannerMD expedites the manual processes found in a clinic and saves clinics receptionists plenty of time while also reducing human error.","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"The purpose of the Developer Guide is to guide you through the architecture of our program, so you can familiarise yourself with its underlying structure.","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"## Navigating this Developer Guide","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"Take note of some syntax we will frequently use throughout the Developer Guide:","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"| Syntax | Description |","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"|--------|------------|","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"| **Bold** | keywords |","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"| :bulb: **Tip:** | Useful tips |","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"| `markdown` | Classes or methods |","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"    - [Acknowledgements](#acknowledgements) ","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"    - [Setting up, getting started](#setting-up)","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"    - [Design](#design)","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Architecture](#architecture)","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"        - [UI Component](#ui)","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Logic Component](#logic)","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Model Component](#model)","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Storage Component](#storage) ","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Common classes](#common-classes)","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"    - [Implementation](#implementation)","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    - [Documentation, logging, testing, configuration, dev-ops](#documentation)","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"    - [Appendix: Requirements](#appendix-requirements)","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Product scope](#product-scope)","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"        - [User stories](#user-stories)","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Use cases](#use-cases)","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Non-functional Requirements](#nfr)","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Glossary](#glossary)","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    - [Appendix: Instructions for manual testing](#appendix-instructions-for-manual-testing)","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Launch and shutdown](#launch-and-shutdown)","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Deleting a person](#delete-person)","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"        - [Saving data](#saving-data)","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"## **Acknowledgements** \u003ca name\u003d\"acknowledgements\"/\u003e ","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"## **Setting up, getting started** \u003ca name\u003d\"setting-up\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"## **Design** \u003ca name\u003d\"design\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"### Architecture \u003ca name\u003d\"architecture\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2122S1-CS2103T-T11-3/tp/blob/master/src/main/java/seedu/plannermd/Main.java) and [`MainApp`](https://github.com/AY2122S1-CS2103T-T11-3/tp/blob/master/src/main/java/seedu/plannermd/MainApp.java). It is responsible for,","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"* [**`UI`**](#ui): The UI of the App.","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"* [**`Logic`**](#logic): The command executor.","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"* [**`Model`**](#model): Holds the data of the App in memory.","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"* [**`Storage`**](#storage): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"### UI component \u003ca name\u003d\"ui\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonTab`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"The `PersonTab` is a tab layout that consists of a `PatientListPanel` and a `DoctorListPanel`. Only one of the tabs is displayed to the user at a particular time, and the user can toggle between the 2 tabs.","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"### Logic component \u003ca name\u003d\"logic\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"1. When `Logic` is called upon to execute a command, it gets the current state (i.e. whether the user is on the `Patients` or `Doctors` tab) from the `Model`.","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"2. It then uses the `PlannerMdParser` class to parse the user command.","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"3. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddPatientCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"4. The command can communicate with the `Model` when it is executed (e.g. to add a patient).","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"5. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"* When called upon to parse a user command, the `PlannerMdParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddPatientCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddPatientCommand`) which the `PlannerMdParser` returns back as a `Command` object.","lastModifiedDate":"2021-10-20"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"* If the `PlannerMdParser` parses an appointment command (e.g., `appt -a`, `appt -e`, ...), it first creates an `AppointmentCommandParser` to parse the flags given (e.g., `-a`, `-e`, ...). The `AppointmentCommandParser` then creates an `XYZCommandParser` (e.g., `AddAppointmentCommandParser`) to parse the remaining user command.","lastModifiedDate":"2021-10-30"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"* All `XYZCommandParser` classes (e.g., `AddPatientCommandParser`, `DeleteDoctorCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-10-20"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"ChuangZheQuan"},"content":"### Model component \u003ca name\u003d\"model\"/\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":154,"author":{"gitId":"hpkoh"},"content":"**API** : [`Model.java`](https://github.com/AY2122S1-CS2103T-T11-3/tp/blob/master/src/main/java/seedu/plannermd/model/Model.java)","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"hpkoh"},"content":"* stores the plannerMd data i.e., all `Patient` and `Doctor` objects (which are contained in `UniquePersonList\u003cPatient\u003e` and `UniquePersonList\u003cDoctor\u003e` respectively).","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"hpkoh"},"content":"* stores the currently active `State` (which determines which list of Person, `Patient` or `Doctor`, to interact with)","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"hpkoh"},"content":"* stores the currently \u0027selected\u0027 `Patient` or `Doctor`  objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as unmodifiable `ObservableList\u003cPatient\u003e` and `ObservableList\u003cDoctor\u003e` respectively that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":166,"author":{"gitId":"ChuangZheQuan"},"content":"### Storage component \u003ca name\u003d\"storage\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"**API** : [`Storage.java`](https://github.com/AY2122S1-CS2103T-T11-3/tp/blob/master/src/main/java/seedu/plannermd/storage/Storage.java)","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"* can save both PlannerMD data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"* inherits from both `PlannerMdStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"ChuangZheQuan"},"content":"### Common classes  \u003ca name\u003d\"common-classes\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"## **Implementation** \u003ca name\u003d\"implementation\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"Haozeee"},"content":"### Stateful PlannerMd","lastModifiedDate":"2021-10-28"},{"lineNumber":188,"author":{"gitId":"Haozeee"},"content":"With the introduction of two types of `Person` (`Patient` and `Doctor`) and their respective lists,","lastModifiedDate":"2021-10-28"},{"lineNumber":189,"author":{"gitId":"Haozeee"},"content":"a state is used to determine which list should be interacted with.","lastModifiedDate":"2021-10-28"},{"lineNumber":190,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":191,"author":{"gitId":"Haozeee"},"content":"The state is maintained in `ModelManager`","lastModifiedDate":"2021-10-28"},{"lineNumber":192,"author":{"gitId":"pualixue"},"content":"* Two possible states (`State.PATIENT` and `State.DOCTOR`)","lastModifiedDate":"2021-10-30"},{"lineNumber":193,"author":{"gitId":"Haozeee"},"content":"* `ModelManager::toggleState` is used to switch between states","lastModifiedDate":"2021-10-28"},{"lineNumber":194,"author":{"gitId":"Haozeee"},"content":"* The UI displays the list according to the state. (eg. if the state is `State.PATIENT`, UI displays the filtered list of patients)","lastModifiedDate":"2021-10-28"},{"lineNumber":195,"author":{"gitId":"Haozeee"},"content":"* Commands are parsed based on the state. (eg. if a valid \u0027add\u0027 command is parsed and the state is `State.PATIENT`, an `AddPatientCommand` is executed)","lastModifiedDate":"2021-10-28"},{"lineNumber":196,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":197,"author":{"gitId":"Haozeee"},"content":"### \\[Upcoming\\] Propagating Person Changes to Appointment List","lastModifiedDate":"2021-10-28"},{"lineNumber":198,"author":{"gitId":"Haozeee"},"content":"Since specific patients and doctors within the records are directly referenced in appointments,","lastModifiedDate":"2021-10-28"},{"lineNumber":199,"author":{"gitId":"Haozeee"},"content":"changes in patients and doctors through user command or otherwise needs to be propagated through the Appointment list.","lastModifiedDate":"2021-10-28"},{"lineNumber":200,"author":{"gitId":"Haozeee"},"content":"* When patients or doctor details are changed, these changes will be reflected in appointments they are a part of.","lastModifiedDate":"2021-10-28"},{"lineNumber":201,"author":{"gitId":"Haozeee"},"content":"* When patients or doctor deleted, appointments they are a part of will be deleted as well.","lastModifiedDate":"2021-10-28"},{"lineNumber":202,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":203,"author":{"gitId":"Haozeee"},"content":"The Sequence Diagram below illustrates the interactions within the Model component for the deletePatient(target) API call.","lastModifiedDate":"2021-10-28"},{"lineNumber":204,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":205,"author":{"gitId":"Haozeee"},"content":"\u003cimg src\u003d\"images/PropagateChangesDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":206,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":207,"author":{"gitId":"Haozeee"},"content":"### Adding an appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":208,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":209,"author":{"gitId":"Haozeee"},"content":"### Deleting an appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":210,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":211,"author":{"gitId":"Haozeee"},"content":"### Editing an appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":212,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":213,"author":{"gitId":"pualixue"},"content":"Edits the details of an existing appointment.","lastModifiedDate":"2021-10-30"},{"lineNumber":214,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":215,"author":{"gitId":"pualixue"},"content":"The edit appointment command accepts at least one of the following parameters:","lastModifiedDate":"2021-10-30"},{"lineNumber":216,"author":{"gitId":"pualixue"},"content":"* Patient index","lastModifiedDate":"2021-10-30"},{"lineNumber":217,"author":{"gitId":"pualixue"},"content":"* Doctor index","lastModifiedDate":"2021-10-30"},{"lineNumber":218,"author":{"gitId":"pualixue"},"content":"* Start date and time","lastModifiedDate":"2021-10-30"},{"lineNumber":219,"author":{"gitId":"pualixue"},"content":"* Duration (in minutes)","lastModifiedDate":"2021-10-30"},{"lineNumber":220,"author":{"gitId":"pualixue"},"content":"* Remark","lastModifiedDate":"2021-10-30"},{"lineNumber":221,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":222,"author":{"gitId":"pualixue"},"content":"#### Implementation","lastModifiedDate":"2021-10-30"},{"lineNumber":223,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":224,"author":{"gitId":"pualixue"},"content":"1. An `EditAppointmentCommandParser` is used to parse the edit appointment command. It checks if the patient and doctor indices are not out of bounds (based on the current filtered patient and doctor lists). The validity and format of the date and time as well as duration are also checked.","lastModifiedDate":"2021-10-30"},{"lineNumber":225,"author":{"gitId":"pualixue"},"content":"2. If the inputs are valid, an `EditAppointmentCommand` is created. The command is executed and attempts to edit the fields as specified in the user input. The edited appointment will be reflected in the filtered appointment list in `Model`.","lastModifiedDate":"2021-10-30"},{"lineNumber":226,"author":{"gitId":"pualixue"},"content":"3. Whenever an edited appointment results in a clash with existing appointments, the command is aborted and an error message is shown to the user.","lastModifiedDate":"2021-10-30"},{"lineNumber":227,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":228,"author":{"gitId":"pualixue"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component for the `execute(\"appt -e 2 p/1 dur/30\")` API call.","lastModifiedDate":"2021-10-30"},{"lineNumber":229,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":230,"author":{"gitId":"pualixue"},"content":"![EditAppointmentSequenceDiagram](images/EditAppointmentSequenceDiagram.png)","lastModifiedDate":"2021-10-30"},{"lineNumber":231,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":232,"author":{"gitId":"pualixue"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `AppointmentCommandParser` and `EditAppointmentCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-10-30"},{"lineNumber":233,"author":{"gitId":"pualixue"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":234,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":235,"author":{"gitId":"Haozeee"},"content":"### Filtering appointments","lastModifiedDate":"2021-10-28"},{"lineNumber":236,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":237,"author":{"gitId":"Haozeee"},"content":"#### What it is","lastModifiedDate":"2021-10-28"},{"lineNumber":238,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":239,"author":{"gitId":"Haozeee"},"content":"Filters through the appointment records in PlannerMd and shows the appointments that matches the filter parameters.","lastModifiedDate":"2021-10-29"},{"lineNumber":240,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":241,"author":{"gitId":"Haozeee"},"content":"There are 4 possible parameters provided to a filter appointment command are:","lastModifiedDate":"2021-10-29"},{"lineNumber":242,"author":{"gitId":"Haozeee"},"content":"* Patient keywords (Filters appointments whose patient\u0027s name contains one of the keywords provided)","lastModifiedDate":"2021-10-29"},{"lineNumber":243,"author":{"gitId":"Haozeee"},"content":"* Doctor keywords (Filters appointments whose doctor\u0027s name contains one of the keywords provided)","lastModifiedDate":"2021-10-29"},{"lineNumber":244,"author":{"gitId":"Haozeee"},"content":"* Start date (Filters appointments which has a starting date greater or equal to the start date provided)","lastModifiedDate":"2021-10-29"},{"lineNumber":245,"author":{"gitId":"Haozeee"},"content":"* End date (Filters appointment which has a starting date lesser or equal to the end date provided)","lastModifiedDate":"2021-10-29"},{"lineNumber":246,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":247,"author":{"gitId":"Haozeee"},"content":"If no parameters are provided, the command simply lists all appointments in the appointment records.","lastModifiedDate":"2021-10-29"},{"lineNumber":248,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":249,"author":{"gitId":"Haozeee"},"content":"#### Implementation","lastModifiedDate":"2021-10-28"},{"lineNumber":250,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":251,"author":{"gitId":"Haozeee"},"content":"Upon entry of a filter appointment command, it is parsed by a `FilterAppointmentCommandParser` to check if the input parameters are valid (Dates are formatted correctly, `startDate` \u003c\u003d `endDate` if both parameters are provided). If the inputs are valid, an \u0027AppointmentFilters\u0027 is created and the filter parameters are stored in it. An \u0027AppointmentFilters\u0027 is an object that stores the different filter conditions a user can provide.","lastModifiedDate":"2021-10-29"},{"lineNumber":252,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":253,"author":{"gitId":"Haozeee"},"content":"After that, the filter is used to create a `FilterAppointmentCommand`. When executed, the `FilterAppointmentCommand` takes the `AppointmentFilters` and converts it into a single predicate based on the filter parameters provided. The predicate is then used to update the filtered appointment list in `Model`.","lastModifiedDate":"2021-10-29"},{"lineNumber":254,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":255,"author":{"gitId":"Haozeee"},"content":"Given below, is an example of a filter appointment command with the patient keywords and start date parameter provided.","lastModifiedDate":"2021-10-29"},{"lineNumber":256,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":257,"author":{"gitId":"Haozeee"},"content":"A clearer view of this sequence diagram can be found [here](images/AppointmentFilterSequenceDiagram.png).","lastModifiedDate":"2021-10-29"},{"lineNumber":258,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":259,"author":{"gitId":"Haozeee"},"content":"![FilterAppointmentCommand](images/AppointmentFilterSequenceDiagram.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":260,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":261,"author":{"gitId":"Haozeee"},"content":"![ConfigureAppointmentFilters](images/ConfigureAppointmentFilters.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":262,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":263,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":264,"author":{"gitId":"Haozeee"},"content":"### Storage","lastModifiedDate":"2021-10-28"},{"lineNumber":265,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":266,"author":{"gitId":"Haozeee"},"content":"--- ","lastModifiedDate":"2021-10-28"},{"lineNumber":267,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":268,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"ChuangZheQuan"},"content":"## **Documentation, logging, testing, configuration, dev-ops**  \u003ca name\u003d\"documentation\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":353,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":354,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":355,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":356,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"ChuangZheQuan"},"content":"## **Appendix: Requirements**  \u003ca name\u003d\"appendix-requirements\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"ChuangZheQuan"},"content":"### Product scope  \u003ca name\u003d\"product-scope\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"ChuangZheQuan"},"content":"* has a need to manage a significant number of patients","lastModifiedDate":"2021-09-22"},{"lineNumber":367,"author":{"gitId":"ChuangZheQuan"},"content":"* needs quick access to a patient\u0027s data and profile","lastModifiedDate":"2021-09-22"},{"lineNumber":368,"author":{"gitId":"ChuangZheQuan"},"content":"* needs to arrange/deconflict appointments for doctors","lastModifiedDate":"2021-09-23"},{"lineNumber":369,"author":{"gitId":"ChuangZheQuan"},"content":"* prefers desktop applications over other types","lastModifiedDate":"2021-09-22"},{"lineNumber":370,"author":{"gitId":"ChuangZheQuan"},"content":"* can type fast and prefers typing to mouse interactions","lastModifiedDate":"2021-09-22"},{"lineNumber":371,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":375,"author":{"gitId":"ChuangZheQuan"},"content":"**Value proposition**: easily manage patients\u0027 information and doctors\u0027 appointments faster than a typical mouse/GUI driven app","lastModifiedDate":"2021-09-22"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"ChuangZheQuan"},"content":"### User stories  \u003ca name\u003d\"user-stories\"/\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":379,"author":{"gitId":"ChuangZheQuan"},"content":"These are some user stories we took into account when designing PlannerMD:","lastModifiedDate":"2021-10-27"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | add a new patient              |                                                                        |","lastModifiedDate":"2021-09-22"},{"lineNumber":387,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | delete a patient               | remove entries that I no longer need                                   |","lastModifiedDate":"2021-09-22"},{"lineNumber":388,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | view a patient\u0027s personal details| view his/her personal details to better understand them and contact them |","lastModifiedDate":"2021-09-22"},{"lineNumber":389,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | view a patient\u0027s risk profile| view his/her risk |","lastModifiedDate":"2021-09-22"},{"lineNumber":390,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | edit a patient\u0027s personal details| change his/her personal details should it change|","lastModifiedDate":"2021-09-22"},{"lineNumber":391,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | edit a patient\u0027s risk profile| change his/her risk profile should it change |","lastModifiedDate":"2021-09-22"},{"lineNumber":392,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | find a patient by name         | locate details of patients without having to go through the entire list |","lastModifiedDate":"2021-09-22"},{"lineNumber":393,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | add a doctor |     |","lastModifiedDate":"2021-09-22"},{"lineNumber":394,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | view a doctor\u0027s personal details| view his/her personal details to contact him/her |","lastModifiedDate":"2021-09-22"},{"lineNumber":395,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | edit a doctor\u0027s personal details| edit his/her details should it change |","lastModifiedDate":"2021-09-22"},{"lineNumber":396,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | delete a doctor | remove entries that I no longer need |","lastModifiedDate":"2021-09-22"},{"lineNumber":397,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | view a doctor\u0027s schedule | schedule appointments during available times                                  |","lastModifiedDate":"2021-09-22"},{"lineNumber":398,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | add an appointment |                                                 |","lastModifiedDate":"2021-09-22"},{"lineNumber":399,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | delete an appointment | cancel the appointment |","lastModifiedDate":"2021-09-22"},{"lineNumber":400,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | edit an appointment | reschedule the appointment when the patient or doctor asks for it |","lastModifiedDate":"2021-10-27"},{"lineNumber":401,"author":{"gitId":"ChuangZheQuan"},"content":"| `* * *`  | clinic receptionist                        | view the appointments that have been scheduled | see what appointments the clinic has at any time|","lastModifiedDate":"2021-09-22"},{"lineNumber":402,"author":{"gitId":"ChuangZheQuan"},"content":"| `* *`    | clinic receptionist with many patients to manage| sort patients by name     | locate a patient easily                                                |","lastModifiedDate":"2021-09-22"},{"lineNumber":403,"author":{"gitId":"ChuangZheQuan"},"content":"| `* *`    | clinic receptionist with many patients to manage| sort patients by risk     | locate a patient easily                                                |","lastModifiedDate":"2021-09-22"},{"lineNumber":404,"author":{"gitId":"pualixue"},"content":"| `* *`    | clinic receptionist with many doctors to manage| sort doctors by name      | locate a doctor easily                                                |","lastModifiedDate":"2021-10-31"},{"lineNumber":405,"author":{"gitId":"ChuangZheQuan"},"content":"| `* *`    | clinic receptionist | add remarks for a patient | add additional information about the patient |            |","lastModifiedDate":"2021-09-22"},{"lineNumber":406,"author":{"gitId":"ChuangZheQuan"},"content":"| `* *`    | clinic receptionist | edit remarks for a patient| change any additional information about the patient                                             |","lastModifiedDate":"2021-09-23"},{"lineNumber":407,"author":{"gitId":"ChuangZheQuan"},"content":"| `*`      | clinic receptionist                        | hide private contact details   | minimize chance of someone else seeing them by accident                |","lastModifiedDate":"2021-09-22"},{"lineNumber":408,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"ChuangZheQuan"},"content":"### Use cases  \u003ca name\u003d\"use-cases\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":410,"author":{"gitId":"ChuangZheQuan"},"content":"These are some use cases to familiarise with the flow of our application: ","lastModifiedDate":"2021-10-27"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"ChuangZheQuan"},"content":"(For all use cases below, the **System** is `PlannerMD` and the **Actor** is the `receptionist`, unless specified otherwise)","lastModifiedDate":"2021-09-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"pualixue"},"content":"**Use case: Adding a patient/doctor**","lastModifiedDate":"2021-10-31"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"pualixue"},"content":"1. Receptionist requests to add a patient/doctor by typing in their details","lastModifiedDate":"2021-10-20"},{"lineNumber":419,"author":{"gitId":"pualixue"},"content":"2. PlannerMD adds the patient/doctor which is reflected immediately in the list","lastModifiedDate":"2021-10-20"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":421,"author":{"gitId":"pualixue"},"content":"    Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":422,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":423,"author":{"gitId":"pualixue"},"content":"**Extensions**","lastModifiedDate":"2021-10-20"},{"lineNumber":424,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":425,"author":{"gitId":"pualixue"},"content":"* 1a. PlannerMD detects that compulsory details are missing.","lastModifiedDate":"2021-10-20"},{"lineNumber":426,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":427,"author":{"gitId":"pualixue"},"content":"    * 1a1. PlannerMD shows an error message.","lastModifiedDate":"2021-10-20"},{"lineNumber":428,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":429,"author":{"gitId":"pualixue"},"content":"    Use case resumes at step 1.","lastModifiedDate":"2021-10-20"},{"lineNumber":430,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":431,"author":{"gitId":"pualixue"},"content":"* 1b. PlannerMD detects data entered with invalid format.","lastModifiedDate":"2021-10-20"},{"lineNumber":432,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":433,"author":{"gitId":"pualixue"},"content":"    * 1b1. PlannerMD shows an error message stating the required format.","lastModifiedDate":"2021-10-20"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":435,"author":{"gitId":"pualixue"},"content":"    Use case resumes at step 1.","lastModifiedDate":"2021-10-20"},{"lineNumber":436,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":437,"author":{"gitId":"pualixue"},"content":"**Use case: Deleting a patient/doctor**","lastModifiedDate":"2021-10-31"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":439,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-10-20"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":441,"author":{"gitId":"pualixue"},"content":"1.  Receptionist requests to list patients/doctors","lastModifiedDate":"2021-10-20"},{"lineNumber":442,"author":{"gitId":"pualixue"},"content":"2.  PlannerMD shows a list of patients/doctors","lastModifiedDate":"2021-10-20"},{"lineNumber":443,"author":{"gitId":"pualixue"},"content":"3.  Receptionist requests to delete a specific patient/doctor in the list","lastModifiedDate":"2021-10-20"},{"lineNumber":444,"author":{"gitId":"pualixue"},"content":"4.  PlannerMD deletes the patient/doctor which is reflected immediately in the list","lastModifiedDate":"2021-10-20"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":446,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":448,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":450,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-22"},{"lineNumber":451,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":452,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2021-10-20"},{"lineNumber":453,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":454,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-22"},{"lineNumber":455,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":456,"author":{"gitId":"ChuangZheQuan"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-22"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":458,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":459,"author":{"gitId":"pualixue"},"content":"  ","lastModifiedDate":"2021-10-20"},{"lineNumber":460,"author":{"gitId":"ChuangZheQuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":462,"author":{"gitId":"pualixue"},"content":"**Use case: Adding a risk profile to a patient**","lastModifiedDate":"2021-10-20"},{"lineNumber":463,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":464,"author":{"gitId":"ChuangZheQuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":465,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":466,"author":{"gitId":"ChuangZheQuan"},"content":"1.  Receptionist requests to find a certain patient by typing his/her name in the CLI","lastModifiedDate":"2021-09-23"},{"lineNumber":467,"author":{"gitId":"ChuangZheQuan"},"content":"2.  PlannerMD shows a list of patients with that name","lastModifiedDate":"2021-09-22"},{"lineNumber":468,"author":{"gitId":"ChuangZheQuan"},"content":"3.  Receptionist requests to add a risk profile to a specific person in the list","lastModifiedDate":"2021-09-23"},{"lineNumber":469,"author":{"gitId":"ChuangZheQuan"},"content":"4.  PlannerMD adds the risk profile which is reflected immediately in the list","lastModifiedDate":"2021-09-22"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":471,"author":{"gitId":"ChuangZheQuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":473,"author":{"gitId":"ChuangZheQuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":474,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":475,"author":{"gitId":"ChuangZheQuan"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-22"},{"lineNumber":476,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":477,"author":{"gitId":"ChuangZheQuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":478,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":479,"author":{"gitId":"ChuangZheQuan"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-22"},{"lineNumber":480,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":481,"author":{"gitId":"ChuangZheQuan"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-22"},{"lineNumber":482,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":483,"author":{"gitId":"ChuangZheQuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":484,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":485,"author":{"gitId":"pualixue"},"content":"**Use case: Editing the risk profile of a patient**","lastModifiedDate":"2021-10-31"},{"lineNumber":486,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":487,"author":{"gitId":"ChuangZheQuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":488,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":489,"author":{"gitId":"ChuangZheQuan"},"content":"1.  Receptionist requests to find a certain patient by typing his/her name in the CLI","lastModifiedDate":"2021-09-23"},{"lineNumber":490,"author":{"gitId":"ChuangZheQuan"},"content":"2.  PlannerMD shows a list of patients with that name","lastModifiedDate":"2021-09-22"},{"lineNumber":491,"author":{"gitId":"ChuangZheQuan"},"content":"3.  Receptionist requests to add a risk profile tag of a specific person in the list","lastModifiedDate":"2021-09-23"},{"lineNumber":492,"author":{"gitId":"ChuangZheQuan"},"content":"4.  PlannerMD adds the risk profile tag which is reflected immediately in the list","lastModifiedDate":"2021-09-22"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"ChuangZheQuan"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-22"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":508,"author":{"gitId":"pualixue"},"content":"**Use case: Adding a tag to a patient**","lastModifiedDate":"2021-09-30"},{"lineNumber":509,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":510,"author":{"gitId":"pualixue"},"content":"**MSS**","lastModifiedDate":"2021-09-30"},{"lineNumber":511,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":512,"author":{"gitId":"pualixue"},"content":"1.  Receptionist requests to list patients","lastModifiedDate":"2021-09-30"},{"lineNumber":513,"author":{"gitId":"pualixue"},"content":"2.  PlannerMD shows a list of patients","lastModifiedDate":"2021-09-30"},{"lineNumber":514,"author":{"gitId":"pualixue"},"content":"3.  Receptionist requests to add a tag to a specific person in the list","lastModifiedDate":"2021-09-30"},{"lineNumber":515,"author":{"gitId":"pualixue"},"content":"4.  PlannerMD adds the tag which is reflected immediately in the list","lastModifiedDate":"2021-09-30"},{"lineNumber":516,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":517,"author":{"gitId":"pualixue"},"content":"    Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":518,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":519,"author":{"gitId":"pualixue"},"content":"**Extensions**","lastModifiedDate":"2021-09-30"},{"lineNumber":520,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":521,"author":{"gitId":"pualixue"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-30"},{"lineNumber":522,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":523,"author":{"gitId":"pualixue"},"content":"  Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":524,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":525,"author":{"gitId":"pualixue"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-30"},{"lineNumber":526,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":527,"author":{"gitId":"pualixue"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":528,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":529,"author":{"gitId":"pualixue"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":530,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":531,"author":{"gitId":"pualixue"},"content":"* 3b. The given tag is invalid.","lastModifiedDate":"2021-09-30"},{"lineNumber":532,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":533,"author":{"gitId":"pualixue"},"content":"    * 3b1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":534,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":535,"author":{"gitId":"pualixue"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":536,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":537,"author":{"gitId":"pualixue"},"content":"**Use case: Deleting a tag from a patient**","lastModifiedDate":"2021-09-30"},{"lineNumber":538,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":539,"author":{"gitId":"pualixue"},"content":"**MSS**","lastModifiedDate":"2021-09-30"},{"lineNumber":540,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":541,"author":{"gitId":"pualixue"},"content":"1.  Receptionist requests to list patients","lastModifiedDate":"2021-09-30"},{"lineNumber":542,"author":{"gitId":"pualixue"},"content":"2.  PlannerMD shows a list of patients","lastModifiedDate":"2021-09-30"},{"lineNumber":543,"author":{"gitId":"pualixue"},"content":"3.  Receptionist requests to delete a tag from a specific person in the list","lastModifiedDate":"2021-09-30"},{"lineNumber":544,"author":{"gitId":"pualixue"},"content":"4.  PlannerMD deletes the tag which is reflected immediately in the list","lastModifiedDate":"2021-09-30"},{"lineNumber":545,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":546,"author":{"gitId":"pualixue"},"content":"    Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":547,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":548,"author":{"gitId":"pualixue"},"content":"**Extensions**","lastModifiedDate":"2021-09-30"},{"lineNumber":549,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":550,"author":{"gitId":"pualixue"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-30"},{"lineNumber":551,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":552,"author":{"gitId":"pualixue"},"content":"  Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":553,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":554,"author":{"gitId":"pualixue"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-30"},{"lineNumber":555,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":556,"author":{"gitId":"pualixue"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":557,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":558,"author":{"gitId":"pualixue"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":559,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":560,"author":{"gitId":"pualixue"},"content":"* 3b. The given tag is non-existent.","lastModifiedDate":"2021-10-05"},{"lineNumber":561,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":562,"author":{"gitId":"pualixue"},"content":"    * 3b1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":563,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":564,"author":{"gitId":"pualixue"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":565,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":566,"author":{"gitId":"pualixue"},"content":"**Use case: Editing personal details of a patient**","lastModifiedDate":"2021-10-31"},{"lineNumber":567,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":568,"author":{"gitId":"ChuangZheQuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":569,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":570,"author":{"gitId":"ChuangZheQuan"},"content":"1.  Receptionist requests to find a certain patient by typing his/her name in the CLI","lastModifiedDate":"2021-09-23"},{"lineNumber":571,"author":{"gitId":"ChuangZheQuan"},"content":"2.  PlannerMD shows a list of patients with that name","lastModifiedDate":"2021-09-22"},{"lineNumber":572,"author":{"gitId":"pualixue"},"content":"3.  Receptionist requests to edit the personal details of a specific patient in the list","lastModifiedDate":"2021-10-31"},{"lineNumber":573,"author":{"gitId":"ChuangZheQuan"},"content":"4.  PlannerMD edits the patient\u0027s personal details which is reflected immediately","lastModifiedDate":"2021-09-23"},{"lineNumber":574,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":575,"author":{"gitId":"ChuangZheQuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":576,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":577,"author":{"gitId":"ChuangZheQuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":578,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":579,"author":{"gitId":"pualixue"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-10-31"},{"lineNumber":580,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":581,"author":{"gitId":"pualixue"},"content":"  Use case ends.","lastModifiedDate":"2021-10-31"},{"lineNumber":582,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":583,"author":{"gitId":"pualixue"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-10-31"},{"lineNumber":584,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":585,"author":{"gitId":"pualixue"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-10-31"},{"lineNumber":586,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":587,"author":{"gitId":"pualixue"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-31"},{"lineNumber":588,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":589,"author":{"gitId":"pualixue"},"content":"**Use case: Editing personal details of a doctor**","lastModifiedDate":"2021-10-31"},{"lineNumber":590,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":591,"author":{"gitId":"pualixue"},"content":"**MSS**","lastModifiedDate":"2021-10-31"},{"lineNumber":592,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":593,"author":{"gitId":"pualixue"},"content":"1.  Receptionist requests to find a certain doctor by typing his/her name in the CLI","lastModifiedDate":"2021-10-31"},{"lineNumber":594,"author":{"gitId":"pualixue"},"content":"2.  PlannerMD shows a list of doctors with that name","lastModifiedDate":"2021-10-31"},{"lineNumber":595,"author":{"gitId":"pualixue"},"content":"3.  Receptionist requests to edit the personal details of a specific doctor in the list","lastModifiedDate":"2021-10-31"},{"lineNumber":596,"author":{"gitId":"pualixue"},"content":"4.  PlannerMD edits the doctor\u0027s personal details which is reflected immediately","lastModifiedDate":"2021-10-31"},{"lineNumber":597,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":598,"author":{"gitId":"pualixue"},"content":"    Use case ends.","lastModifiedDate":"2021-10-31"},{"lineNumber":599,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":600,"author":{"gitId":"pualixue"},"content":"**Extensions**","lastModifiedDate":"2021-10-31"},{"lineNumber":601,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":602,"author":{"gitId":"ChuangZheQuan"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-22"},{"lineNumber":603,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":604,"author":{"gitId":"ChuangZheQuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":605,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":606,"author":{"gitId":"ChuangZheQuan"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-22"},{"lineNumber":607,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":608,"author":{"gitId":"ChuangZheQuan"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-22"},{"lineNumber":609,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":610,"author":{"gitId":"ChuangZheQuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":611,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":612,"author":{"gitId":"ChuangZheQuan"},"content":"**Use case: Scheduling an appointment**","lastModifiedDate":"2021-10-27"},{"lineNumber":613,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":614,"author":{"gitId":"ChuangZheQuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":615,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":616,"author":{"gitId":"ChuangZheQuan"},"content":"1.  Receptionist requests to find a certain doctor by typing his/her name in the CLI","lastModifiedDate":"2021-09-23"},{"lineNumber":617,"author":{"gitId":"ChuangZheQuan"},"content":"2.  PlannerMD shows a list of doctors with that name and the corresponding appointments","lastModifiedDate":"2021-09-22"},{"lineNumber":618,"author":{"gitId":"ChuangZheQuan"},"content":"3.  Receptionist sees that doctor is available and requests to schedule the appointment","lastModifiedDate":"2021-09-23"},{"lineNumber":619,"author":{"gitId":"ChuangZheQuan"},"content":"4.  PlannerMD updates the doctor\u0027s schedule which is reflected immediately","lastModifiedDate":"2021-09-22"},{"lineNumber":620,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":621,"author":{"gitId":"ChuangZheQuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":622,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":623,"author":{"gitId":"ChuangZheQuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":624,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":625,"author":{"gitId":"ChuangZheQuan"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-22"},{"lineNumber":626,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":627,"author":{"gitId":"ChuangZheQuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":628,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":629,"author":{"gitId":"ChuangZheQuan"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-22"},{"lineNumber":630,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":631,"author":{"gitId":"ChuangZheQuan"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-09-22"},{"lineNumber":632,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":633,"author":{"gitId":"ChuangZheQuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":634,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":635,"author":{"gitId":"ChuangZheQuan"},"content":"* 4a. The appointment time clashes with the doctor\u0027s schedule","lastModifiedDate":"2021-09-22"},{"lineNumber":636,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":637,"author":{"gitId":"ChuangZheQuan"},"content":"    * 4a1. Receptionist decides to reschedule to a different time.","lastModifiedDate":"2021-09-23"},{"lineNumber":638,"author":{"gitId":"ChuangZheQuan"},"content":"    * 4a2. Receptionist requests to reschedule to a different time.","lastModifiedDate":"2021-09-23"},{"lineNumber":639,"author":{"gitId":"ChuangZheQuan"},"content":"    * 4a3. PlannerMD updates the doctor\u0027s schedule which is reflected immediately.","lastModifiedDate":"2021-09-22"},{"lineNumber":640,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":641,"author":{"gitId":"ChuangZheQuan"},"content":"      Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":642,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":643,"author":{"gitId":"ChuangZheQuan"},"content":"**Use case: Deleting an appointment**","lastModifiedDate":"2021-10-27"},{"lineNumber":644,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":645,"author":{"gitId":"ChuangZheQuan"},"content":"**MSS**","lastModifiedDate":"2021-10-27"},{"lineNumber":646,"author":{"gitId":"ChuangZheQuan"},"content":"1. Receptionist requests to list appointments","lastModifiedDate":"2021-10-27"},{"lineNumber":647,"author":{"gitId":"ChuangZheQuan"},"content":"2. PlannerMD shows the list of appointments","lastModifiedDate":"2021-10-27"},{"lineNumber":648,"author":{"gitId":"pualixue"},"content":"3. Receptionist requests to delete an appointment","lastModifiedDate":"2021-10-31"},{"lineNumber":649,"author":{"gitId":"pualixue"},"content":"4. PlannerMD deletes the appointment from the appointment list which is reflected immediately","lastModifiedDate":"2021-10-31"},{"lineNumber":650,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":651,"author":{"gitId":"pualixue"},"content":"    Use case ends.","lastModifiedDate":"2021-10-31"},{"lineNumber":652,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":653,"author":{"gitId":"pualixue"},"content":"**Extensions**","lastModifiedDate":"2021-10-31"},{"lineNumber":654,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":655,"author":{"gitId":"pualixue"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-10-31"},{"lineNumber":656,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":657,"author":{"gitId":"pualixue"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-10-31"},{"lineNumber":658,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":659,"author":{"gitId":"pualixue"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-31"},{"lineNumber":660,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":661,"author":{"gitId":"pualixue"},"content":"**Use case: Editing an appointment**","lastModifiedDate":"2021-10-31"},{"lineNumber":662,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":663,"author":{"gitId":"pualixue"},"content":"**MSS**","lastModifiedDate":"2021-10-31"},{"lineNumber":664,"author":{"gitId":"pualixue"},"content":"1. Receptionist requests to list appointments","lastModifiedDate":"2021-10-31"},{"lineNumber":665,"author":{"gitId":"pualixue"},"content":"2. PlannerMD shows the list of appointments","lastModifiedDate":"2021-10-31"},{"lineNumber":666,"author":{"gitId":"pualixue"},"content":"3. Receptionist requests to edit a specific appointment","lastModifiedDate":"2021-10-31"},{"lineNumber":667,"author":{"gitId":"pualixue"},"content":"4. PlannerMD edits the appointment which is reflected immediately","lastModifiedDate":"2021-10-31"},{"lineNumber":668,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":669,"author":{"gitId":"ChuangZheQuan"},"content":"    Use case ends.","lastModifiedDate":"2021-10-27"},{"lineNumber":670,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":671,"author":{"gitId":"ChuangZheQuan"},"content":"**Extensions**","lastModifiedDate":"2021-10-27"},{"lineNumber":672,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":673,"author":{"gitId":"pualixue"},"content":"* 1a. The appointment list is empty.","lastModifiedDate":"2021-10-31"},{"lineNumber":674,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":675,"author":{"gitId":"pualixue"},"content":"    Use case ends.","lastModifiedDate":"2021-10-31"},{"lineNumber":676,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":677,"author":{"gitId":"ChuangZheQuan"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-10-27"},{"lineNumber":678,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":679,"author":{"gitId":"ChuangZheQuan"},"content":"    * 3a1. PlannerMD shows an error message.","lastModifiedDate":"2021-10-27"},{"lineNumber":680,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":681,"author":{"gitId":"ChuangZheQuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-27"},{"lineNumber":682,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":683,"author":{"gitId":"pualixue"},"content":"* 3b. The given parameters are invalid.","lastModifiedDate":"2021-10-31"},{"lineNumber":684,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":685,"author":{"gitId":"pualixue"},"content":"    * 3b1. PlannerMD shows an error message.","lastModifiedDate":"2021-10-31"},{"lineNumber":686,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":687,"author":{"gitId":"pualixue"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-31"},{"lineNumber":688,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":689,"author":{"gitId":"pualixue"},"content":"* 3c. The edited appointment date or time clashes with an existing appointment.","lastModifiedDate":"2021-10-31"},{"lineNumber":690,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":691,"author":{"gitId":"pualixue"},"content":"    * 3c1. PlannerMD shows an error message and lists the clashing appointment(s).","lastModifiedDate":"2021-10-31"},{"lineNumber":692,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":693,"author":{"gitId":"pualixue"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-31"},{"lineNumber":694,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":695,"author":{"gitId":"ChuangZheQuan"},"content":"### Non-Functional Requirements  \u003ca name\u003d\"nfr\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":696,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":697,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":698,"author":{"gitId":"pualixue"},"content":"2. Should work independent of network connection.","lastModifiedDate":"2021-09-22"},{"lineNumber":699,"author":{"gitId":"pualixue"},"content":"3. Should respond to users\u0027 commands within two seconds.","lastModifiedDate":"2021-09-22"},{"lineNumber":700,"author":{"gitId":"pualixue"},"content":"4. Should be able to store 5000 unique entries of patients and doctors.","lastModifiedDate":"2021-09-22"},{"lineNumber":701,"author":{"gitId":"pualixue"},"content":"5. The data should be stored on the user\u0027s local machine.","lastModifiedDate":"2021-09-22"},{"lineNumber":702,"author":{"gitId":"pualixue"},"content":"6. The data should be available for backup and portable to another computer.","lastModifiedDate":"2021-09-22"},{"lineNumber":703,"author":{"gitId":"pualixue"},"content":"7. The user interface should be simple and intuitive enough for any users.","lastModifiedDate":"2021-09-22"},{"lineNumber":704,"author":{"gitId":"pualixue"},"content":"8. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-09-22"},{"lineNumber":705,"author":{"gitId":"pualixue"},"content":"9. The project is expected to adhere to a schedule that delivers a feature set every two weeks.","lastModifiedDate":"2021-09-22"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":707,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":708,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"ChuangZheQuan"},"content":"### Glossary \u003ca name\u003d\"glossary\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":710,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"pualixue"},"content":"* **Appointment**: Arrangement to meet between a doctor and a patient","lastModifiedDate":"2021-09-22"},{"lineNumber":712,"author":{"gitId":"pualixue"},"content":"* **CLI**: Command Line Interface","lastModifiedDate":"2021-09-22"},{"lineNumber":713,"author":{"gitId":"pualixue"},"content":"* **GUI**: Graphical User Interface","lastModifiedDate":"2021-09-22"},{"lineNumber":714,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":715,"author":{"gitId":"pualixue"},"content":"* **Patient**: The individual that visits the clinic","lastModifiedDate":"2021-09-22"},{"lineNumber":716,"author":{"gitId":"ChuangZheQuan"},"content":"* **Personal details** personal information including a name, contact number, email, address, date of birth, whatever tags the receptionist gives","lastModifiedDate":"2021-09-28"},{"lineNumber":717,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":718,"author":{"gitId":"pualixue"},"content":"* **Risk profile**: The health status and severity of the condition of a patient","lastModifiedDate":"2021-09-22"},{"lineNumber":719,"author":{"gitId":"pualixue"},"content":"* **Tag**: A label attached to a patient for easy identification or providing additional information","lastModifiedDate":"2021-09-30"},{"lineNumber":720,"author":{"gitId":"ChuangZheQuan"},"content":"* **MSS**: Main Success Scenario in the use cases.","lastModifiedDate":"2021-10-27"},{"lineNumber":721,"author":{"gitId":"ChuangZheQuan"},"content":"* **Extensions**: \"Add-ons\" to the MSS that describes an exceptional/alternative flow of events. ","lastModifiedDate":"2021-10-27"},{"lineNumber":722,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":723,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":724,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":725,"author":{"gitId":"ChuangZheQuan"},"content":"## **Appendix: Instructions for manual testing** \u003ca name\u003d\"appendix-instructions-for-manual-testing\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":726,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":727,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":728,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":729,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":730,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":731,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":732,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":733,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":734,"author":{"gitId":"ChuangZheQuan"},"content":"### Launch and shutdown  \u003ca name\u003d\"launch-and-shutdown\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":735,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":736,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":737,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":738,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":739,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":740,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":741,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":742,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":743,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":744,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":745,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":746,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":747,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":748,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":749,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":750,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":751,"author":{"gitId":"Haozeee"},"content":"### Adding a patient \u003ca name\u003d\"add-patient\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":752,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":753,"author":{"gitId":"Haozeee"},"content":"### Deleting a patient  \u003ca name\u003d\"delete-patient\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":754,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":755,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":756,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":757,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":758,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":759,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":760,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":761,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":762,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":763,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":764,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":765,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":766,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":767,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":768,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":769,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":770,"author":{"gitId":"Haozeee"},"content":"### Editing a patient \u003ca name\u003d\"edit-patient\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":771,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":772,"author":{"gitId":"Haozeee"},"content":"### Finding a patient \u003ca name\u003d\"find-patient\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":773,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":774,"author":{"gitId":"Haozeee"},"content":"### Listing all patients \u003ca name\u003d\"list-patients\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":775,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":776,"author":{"gitId":"Haozeee"},"content":"### Adding a doctor \u003ca name\u003d\"add-doctor\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":777,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":778,"author":{"gitId":"Haozeee"},"content":"### Deleting a doctor  \u003ca name\u003d\"delete-doctor\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":779,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":780,"author":{"gitId":"Haozeee"},"content":"### Editing a doctor \u003ca name\u003d\"edit-doctor\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":781,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":782,"author":{"gitId":"pualixue"},"content":"1. Editing a doctor while all doctors are being shown","lastModifiedDate":"2021-10-31"},{"lineNumber":783,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":784,"author":{"gitId":"pualixue"},"content":"    1. Prerequisites: `toggle` to the `Doctors` tab. List all doctors using the `list` command.","lastModifiedDate":"2021-10-31"},{"lineNumber":785,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":786,"author":{"gitId":"pualixue"},"content":"    2. Test case: `edit 1 hp/91234567 eml/johndoe@example.com`\u003cbr\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":787,"author":{"gitId":"pualixue"},"content":"       Expected: First doctor\u0027s phone and email are edited to `91234567` and `johndoe@example.com` respectively. Details of the edited contact are shown in the status message.","lastModifiedDate":"2021-10-31"},{"lineNumber":788,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":789,"author":{"gitId":"pualixue"},"content":"    3. Test case: `edit 0 hp/91234567`\u003cbr\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":790,"author":{"gitId":"pualixue"},"content":"       Expected: No doctor is edited. Error details are shown in the status message.","lastModifiedDate":"2021-10-31"},{"lineNumber":791,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":792,"author":{"gitId":"pualixue"},"content":"    4. Other incorrect edit commands to try: `edit`, `edit x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":793,"author":{"gitId":"pualixue"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2021-10-31"},{"lineNumber":794,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":795,"author":{"gitId":"pualixue"},"content":"2. Editing a doctor while some doctors are being shown","lastModifiedDate":"2021-10-31"},{"lineNumber":796,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":797,"author":{"gitId":"pualixue"},"content":"    1. Prerequisites: `toggle` to the `Doctors` tab. List some doctors using `find XYZ` (XYZ is the name of an existing doctor).","lastModifiedDate":"2021-10-31"},{"lineNumber":798,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":799,"author":{"gitId":"pualixue"},"content":"    2. Test cases are similar to those above.","lastModifiedDate":"2021-10-31"},{"lineNumber":800,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":801,"author":{"gitId":"Haozeee"},"content":"### Finding a doctor \u003ca name\u003d\"find-doctor\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":802,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":803,"author":{"gitId":"Haozeee"},"content":"### Listing all doctors \u003ca name\u003d\"list-doctors\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":804,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":805,"author":{"gitId":"Haozeee"},"content":"### Adding an appointment \u003ca name\u003d\"appointment\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":806,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":807,"author":{"gitId":"Haozeee"},"content":"### Deleting an appointment  \u003ca name\u003d\"delete-appointment\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":808,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":809,"author":{"gitId":"Haozeee"},"content":"### Editing an appointment \u003ca name\u003d\"edit-appointment\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":810,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":811,"author":{"gitId":"pualixue"},"content":"1. Editing an appointment while all appointments are being shown","lastModifiedDate":"2021-10-31"},{"lineNumber":812,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":813,"author":{"gitId":"pualixue"},"content":"    1. Prerequisites: Use `appt -f` to list all appointments.","lastModifiedDate":"2021-10-31"},{"lineNumber":814,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":815,"author":{"gitId":"pualixue"},"content":"    2. Test case: `appt -e 1 p/1 s/31/12/2021 10:00 dur/30`\u003cbr\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":816,"author":{"gitId":"pualixue"},"content":"       Expected: First appointment\u0027s patient is edited to the first patient in the filtered patient list. The date and session are edited to `31 Dec 21, Fri` and `10:00 - 10:30` respectively. Details of the edited appointment are shown in the status message.","lastModifiedDate":"2021-10-31"},{"lineNumber":817,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":818,"author":{"gitId":"pualixue"},"content":"    3. Test case: `appt -e 0 dur/30`\u003cbr\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":819,"author":{"gitId":"pualixue"},"content":"       Expected: No appointment is edited. Error details are shown in the status message.","lastModifiedDate":"2021-10-31"},{"lineNumber":820,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":821,"author":{"gitId":"pualixue"},"content":"    4. Other incorrect edit appointment commands to try: `appt -e`, `appt -e x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":822,"author":{"gitId":"pualixue"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2021-10-31"},{"lineNumber":823,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":824,"author":{"gitId":"pualixue"},"content":"    5. Test case: Edit a patient/doctor\u0027s appointment to clash with their existing appointments (edit the date and time to be the same or overlapping with an existing appointment).\u003cbr\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":825,"author":{"gitId":"pualixue"},"content":"        Expected: Similar to previous.","lastModifiedDate":"2021-10-31"},{"lineNumber":826,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":827,"author":{"gitId":"pualixue"},"content":"3. Editing an appointment while some appointments are being shown","lastModifiedDate":"2021-10-31"},{"lineNumber":828,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":829,"author":{"gitId":"pualixue"},"content":"    1. Prerequisites: Use `appt -f [p/PATIENT_KEYWORD] [d/DOCTOR_KEYWORD] [s/START_DATE] [e/END_DATE]` to list only some appointments. E.g., `appt -f s/01/11/2021` to list only appointments after `01/11/2021`.","lastModifiedDate":"2021-10-31"},{"lineNumber":830,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":831,"author":{"gitId":"pualixue"},"content":"    2. Test cases are similar to those above.","lastModifiedDate":"2021-10-31"},{"lineNumber":832,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":833,"author":{"gitId":"Haozeee"},"content":"### Filtering all appointments \u003ca name\u003d\"filter-all-appointments\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":834,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":835,"author":{"gitId":"Haozeee"},"content":"### Filtering upcoming appointments \u003ca name\u003d\"filter-upcoming-appointments\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":836,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":837,"author":{"gitId":"Haozeee"},"content":"### Listing all appointments for today \u003ca name\u003d\"list-appointments\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":838,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":839,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":840,"author":{"gitId":"ChuangZheQuan"},"content":"### Saving data  \u003ca name\u003d\"saving-data\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":841,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":842,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":843,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":844,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":845,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":846,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Haozeee":102,"hpkoh":4,"pualixue":232,"ChuangZheQuan":182,"-":323,"jiayi1129":3}},{"path":"docs/Documentation.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Documentation guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"**Setting up and maintaining the project website:**","lastModifiedDate":"2020-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* We use [**Jekyll**](https://jekyllrb.com/) to manage documentation.","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* The `docs/` folder is used for documentation.","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* To learn how set it up and maintain the project website, follow the guide [_[se-edu/guides] **Using Jekyll for project documentation**_](https://se-education.org/guides/tutorials/jekyll.html).","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Note these points when adapting the documentation to a different project/product:","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  * The \u0027Site-wide settings\u0027 section of the page linked above has information on how to update site-wide elements such as the top navigation bar.","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"  * :bulb: In addition to updating content files, you might have to update the config files `docs\\_config.yml` and `docs\\_sass\\minima\\_base.scss` (which contains a reference to `PlannerMD` that comes into play when converting documentation pages to PDF format).","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are using Intellij for editing documentation files, you can consider enabling \u0027soft wrapping\u0027 for `*.md` files, as explained in [_[se-edu/guides] **Intellij IDEA: Useful settings**_](https://se-education.org/guides/tutorials/intellijUsefulSettings.html#enabling-soft-wrapping)","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Style guidance:**","lastModifiedDate":"2020-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Follow the [**_Google developer documentation style guide_**](https://developers.google.com/style).","lastModifiedDate":"2020-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)","lastModifiedDate":"2020-06-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**Diagrams:**","lastModifiedDate":"2020-06-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* See the [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)","lastModifiedDate":"2020-06-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"**Converting a document to the PDF format:**","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)","lastModifiedDate":"2020-06-07"}],"authorContributionMap":{"-":28,"jiayi1129":1}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"   1. Run the `seedu.plannermd.Main` and try a few commands.","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"-":54,"jiayi1129":1}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"   e.g. `seedu.plannermd.commons.StringUtilTest`","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"   e.g. `seedu.plannermd.storage.StorageManagerTest`","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"   e.g. `seedu.plannermd.logic.LogicManagerTest`","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"-":33,"jiayi1129":3}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"PlannerMD is an easy-to-use command-line interface (CLI) application that helps clinic receptionists seamlessly integrate the daily appointments and the unique requirements of each patient into a single application. PlannerMD expedites the manual processes found in a clinic and saves clinics receptionists plenty of time while also reducing human error.","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"If you are new, this guide is meant to introduce you to PlannerMD as well as guide you through our features and how to use them. If you are already ","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"experienced with PlannerMD, we hope that our comprehensive user guide will help clarify any queries you have! Refer to our [table of contents](#toc) to see what","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"we have to offer!","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"## Common Syntax","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"Take note of some syntax we will frequently use throughout the User Guide:","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"| Syntax | Description |","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"|--------|------------|","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"| **Bold** | keywords |","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"| :bulb: **Tip:** | Useful tips |","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"| :exclamation: **Caution:** | Possible pitfalls |","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"| `markdown` | Commands or examples |","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"| Format: | the format to write the commands in the application|","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"## Table Of Contents \u003ca name\u003d\"toc\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"* [Quick start](#quick-start)","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"* [What is Command-line Interface (CLI)?](#what-is-cli)","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"* [Features](#features)","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"  * [General](#general)","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    * [help](#help)","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"    * [toggle](#toggle) ","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"    * [clear](#clear)","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"    * [exit](#exit)","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"  * [Managing Patients](#managing-patients)","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"    * [add](#add-patient)","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    * [list](#list-patient)","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    * [edit](#edit-patient)","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"    * [remark](#remark-patient)","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"    * [find](#find-patient)","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"    * [delete](#delete-patient)","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"    * [Managing Tags](#managing-patient-tag)","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        * [add](#add-patient-tag)","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"        * [delete](#delete-patient-tag)","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"  * [Managing Doctors](#managing-doctors)","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"      * [add](#add-doctor)","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"      * [list](#list-doctor)","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"      * [edit](#edit-doctor)","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"      * [remark](#remark-doctor)","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"      * [find](#find-doctor)","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"      * [delete](#delete-doctor)","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"      * [Managing Tags](#managing-doctor-tag)","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"          * [add](#add-doctor-tag)","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"          * [delete](#delete-doctor-tag)","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"  * [Managing Appointments](#managing-appointments)","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"    * [add](#add-appointment)","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"    * [edit](#edit-appointment)","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"    * [delete](#delete-appointment)","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"    * [find](#find-appointments)","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"    * [find upcoming](#upcoming-appointments)","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"    * [list](#list-appointments)","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"* [Save data](#save-data)","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"* [Edit data](#edit-data)","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"* [FAQs](#faq)","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"* [Command Summary](#command-summary)","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"## Quick start \u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"1. Ensure you have Java `11` or above installed in your Computer. If you haven\u0027t installed, refer to these guides based on your operating software: \\","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"   [Windows](https://www.codejava.net/java-se/download-and-install-java-11-openjdk-and-oracle-jdk) \\","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"   [macOS](https://docs.oracle.com/en/java/javase/11/install/installation-jdk-macos.html#GUID-F575EB4A-70D3-4AB4-A20E-DBE95171AB5F)","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"2. Download the latest `plannermd.jar` from [here](https://github.com/AY2122S1-CS2103T-T11-3/tp/releases).","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for plannerMD.","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"4. Double-click the file to start the app. The GUI similar to the image displayed below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)    ","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"    ","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"   * **`list`** : Lists all patients.","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"   * **`add`**`n/John Doe hp/98765432 eml/johnd@example.com a/John street, block 123, #01-01 dob/25/12/2021` : Adds a patient named `John Doe` to the application.","lastModifiedDate":"2021-10-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"   * **`edit`**`3 a/Bob street, block 123, #01-01 dob/25/12/1964` : Edits 3rd patient\u0027s address and date of birth.","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"   * **`delete`**`2` : Deletes the 2nd patient as shown in the current list.","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"   * **`clear`** : Deletes all patients, doctors and appointments.","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"   * **`toggle`** : Toggles between the patients and doctors tabs.","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"## What is Command-line Interface (CLI?) \u003ca name\u003d\"what-is-cli\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"A Command-line interface helps process commands that you enter through text. Instead of clicking buttons, to execute a certain command,","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"you would type the command in text in the command box, and the programme will execute your command, and reflect its response in the response box.","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"![get format](images/user-guide/commandBox.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"### Why CLI?","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"We want to give you an experience that is as similar as writing with pen-and-paper, to help you clinic receptionists adapt easily. With a CLI,","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"you can imagine the keyboard as your pen, and a command box as your paper. To clinic receptionists who are already using a different application","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"with a Graphical User Interface (GUI), our application removes the need to constantly access your mouse and speed up your arduous process of managing","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"patients, doctors and appointments.","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"### How to use a CLI?","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"Just type your command in the command box with the format we have provided. Simple as that!","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"You can type the command keyword and leave the details blank and click enter to access the template so you don\u0027t have to remember","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"all the details!\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"![get format](images/user-guide/tipGetFormat.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"## Features \u003ca name\u003d\"features\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"**Notes about the command format**\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"* `Format:` shows the format to type the respective commands","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"  e.g. if the command specifies `n/NAME hp/PHONE_NUMBER`, `hp/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2021-10-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"  e.g. if you specify `hp/12341234 hp/56785678`, only `hp/56785678` will be taken.","lastModifiedDate":"2021-10-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":150,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":152,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"ChuangZheQuan"},"content":"### Viewing help : `help` \u003ca name\u003d\"help\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"hpkoh"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2021-09-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"ChuangZheQuan"},"content":"![help message](images/user-guide/helpMessage.png)","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"ChuangZheQuan"},"content":"Alternatively, you can click on the help button in the top left","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"ChuangZheQuan"},"content":"corner.","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"ChuangZheQuan"},"content":"![help button](images/user-guide/helpButton.png)","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"hpkoh"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":168,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":169,"author":{"gitId":"ChuangZheQuan"},"content":"### Toggling between tabs: `toggle` \u003ca name\u003d\"toggle\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":171,"author":{"gitId":"hpkoh"},"content":"Toggles between `Patients` and `Doctors` tab.\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"hpkoh"},"content":"Commands enters only applies on the currently displayed tab. (eg. If the currently displayed tab the `add` command will add a patient to the records.)","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"Format: `toggle`","lastModifiedDate":"2021-10-16"},{"lineNumber":175,"author":{"gitId":"hpkoh"},"content":"* toggles to the other tab (eg. if the currently displayed tab is the patient tab, `toggle` switches the displayed tab to the doctor tab)","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":177,"author":{"gitId":"hpkoh"},"content":"![toggleTabs](images/toggleTabs.png)","lastModifiedDate":"2021-10-31"},{"lineNumber":178,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"ChuangZheQuan"},"content":"### Clearing all entries : `clear` \u003ca name\u003d\"clear\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"ChuangZheQuan"},"content":"Clears all patient, doctor and appointment entries.","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"Format: `clear`","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"ChuangZheQuan"},"content":"Examples:","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"Typing `clear` in the removes all patient, doctor and appointment entries.","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"ChuangZheQuan"},"content":"### Exiting the program : `exit` \u003ca name\u003d\"exit\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"ChuangZheQuan"},"content":"Exits the program.","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"ChuangZheQuan"},"content":"Format: `exit`","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"pualixue"},"content":"---","lastModifiedDate":"2021-10-16"},{"lineNumber":195,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":196,"author":{"gitId":"ChuangZheQuan"},"content":"## Managing Patients \u003ca name\u003d\"managing-patients\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"hpkoh"},"content":"To use commands for managing patients, toggle the displayed list to the patient list using the [toggle](#toggle) command. \u003cbr\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":198,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":199,"author":{"gitId":"hpkoh"},"content":"![patient tab\u0027](images/patientTab.png)","lastModifiedDate":"2021-10-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"ChuangZheQuan"},"content":"### Adding a patient: `add` \u003ca name\u003d\"add-patient\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"ChuangZheQuan"},"content":"Adds a patient to the patient records. ","lastModifiedDate":"2021-10-19"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"ChuangZheQuan"},"content":"Format: `add n/NAME hp/PHONE_NUMBER eml/EMAIL a/ADDRESS dob/DATE_OF_BIRTH [t/TAG]…​ [risk/RISK]`","lastModifiedDate":"2021-10-30"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"pualixue"},"content":"A patient can have any number of tags (including 0)\u003cbr\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":209,"author":{"gitId":"pualixue"},"content":":bulb: **Tip:**","lastModifiedDate":"2021-10-16"},{"lineNumber":210,"author":{"gitId":"pualixue"},"content":"The risk is optional and should be either HIGH, MEDIUM or LOW.","lastModifiedDate":"2021-10-16"},{"lineNumber":211,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"ChuangZheQuan"},"content":"* `add n/John Doe hp/98765432 eml/johnd@example.com a/John street, block 123, #01-01 dob/20/07/1964`","lastModifiedDate":"2021-10-30"},{"lineNumber":215,"author":{"gitId":"ChuangZheQuan"},"content":"* `add n/Betsy Crowe t/friend eml/betsycrowe@example.com a/Bukit Merah hp/1234567 dob/20/07/1964 t/COVID risk/HIGH` ","lastModifiedDate":"2021-10-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"ChuangZheQuan"},"content":"### Listing all patients : `list` \u003ca name\u003d\"list-patient\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"hpkoh"},"content":"Shows a list of all patients in the patient records.","lastModifiedDate":"2021-09-22"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"ChuangZheQuan"},"content":"### Editing a patient\u0027s information : `edit` \u003ca name\u003d\"edit-patient\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"hpkoh"},"content":"Edits an existing patient in the patient records.","lastModifiedDate":"2021-09-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"ChuangZheQuan"},"content":"Format: `edit INDEX [n/NAME] [hp/PHONE] [eml/EMAIL] [a/ADDRESS] [dob/DATE_OF_BIRTH] [t/TAG]…​ [risk/RISK]`","lastModifiedDate":"2021-10-30"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"hpkoh"},"content":"* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2021-09-23"},{"lineNumber":230,"author":{"gitId":"hpkoh"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-09-22"},{"lineNumber":231,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"hpkoh"},"content":"* When editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2021-09-23"},{"lineNumber":234,"author":{"gitId":"hpkoh"},"content":"* You can remove all the patient’s tags by typing `t/` without","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"  specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"pualixue"},"content":"* The risk should be either `HIGH`, `MEDIUM`, or `LOW`. If an empty risk is provided, eg. `risk/`, the risk of the patient will be removed.","lastModifiedDate":"2021-10-16"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"ChuangZheQuan"},"content":"*  `edit 1 hp/91234567 eml/johndoe@example.com` Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2021-10-30"},{"lineNumber":240,"author":{"gitId":"ChuangZheQuan"},"content":"*  `edit 2 n/Betsy dob/20/07/1964 Crower t/` Edits the name and date of birth of the 2nd patient to be `Betsy Crower` and `20/07/1964` respectively, and clears all existing tags.","lastModifiedDate":"2021-09-28"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"ChuangZheQuan"},"content":"### Adding a remark to a patient\u0027s information : `remark` \u003ca name\u003d\"remark-patient\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":244,"author":{"gitId":"hpkoh"},"content":"Adds a remark to an existing patient in the patient records.","lastModifiedDate":"2021-10-05"},{"lineNumber":245,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":246,"author":{"gitId":"hpkoh"},"content":"Format: `remark INDEX r/REMARK`","lastModifiedDate":"2021-10-05"},{"lineNumber":247,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":248,"author":{"gitId":"hpkoh"},"content":"* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2021-10-05"},{"lineNumber":249,"author":{"gitId":"hpkoh"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-05"},{"lineNumber":250,"author":{"gitId":"hpkoh"},"content":"* Existing remark will be updated to the input remark.","lastModifiedDate":"2021-10-05"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":252,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-10-05"},{"lineNumber":253,"author":{"gitId":"pualixue"},"content":"*  `remark 1 r/` Edits the remark of the 1st patient to be blank.","lastModifiedDate":"2021-10-16"},{"lineNumber":254,"author":{"gitId":"hpkoh"},"content":"*  `remark 2 r/Chronic diabetic, monthly insulin pick up` Edits the remark of the 2nd patient to be `Chronic diabetic, monthly insulin pick up`.","lastModifiedDate":"2021-10-05"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":256,"author":{"gitId":"ChuangZheQuan"},"content":"### Locating patients by name: `find` \u003ca name\u003d\"find-patient\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"hpkoh"},"content":"Finds patients whose names contain any of the given keywords","lastModifiedDate":"2021-09-22"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"hpkoh"},"content":"* The search is case-insensitive. e.g `john` will match `John`","lastModifiedDate":"2021-09-22"},{"lineNumber":263,"author":{"gitId":"hpkoh"},"content":"* The order of the keywords does not matter. e.g. `John Lee` will match `Lee","lastModifiedDate":"2021-09-22"},{"lineNumber":264,"author":{"gitId":"hpkoh"},"content":"  John`","lastModifiedDate":"2021-09-22"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"hpkoh"},"content":"* Patients matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2021-09-22"},{"lineNumber":268,"author":{"gitId":"hpkoh"},"content":"  e.g. `John` will return `John Lee`, `John Tan`","lastModifiedDate":"2021-09-22"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"ChuangZheQuan"},"content":"### Deleting a patient : `delete` \u003ca name\u003d\"delete-patient\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":277,"author":{"gitId":"pualixue"},"content":"Deletes a patient record from the list.","lastModifiedDate":"2021-10-16"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"hpkoh"},"content":"* Deletes the patient at the specified `INDEX`.","lastModifiedDate":"2021-09-22"},{"lineNumber":282,"author":{"gitId":"hpkoh"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2021-09-22"},{"lineNumber":283,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"hpkoh"},"content":"* `list` followed by `delete 2` deletes the 2nd patient in the patient records.","lastModifiedDate":"2021-09-23"},{"lineNumber":287,"author":{"gitId":"hpkoh"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st patient in the results of the `find` command.","lastModifiedDate":"2021-09-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"ChuangZheQuan"},"content":"### Managing Tags `tag` \u003ca name\u003d\"managing-patient-tag\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":291,"author":{"gitId":"ChuangZheQuan"},"content":"### Adding tags to a patient: `tag -a` \u003ca name\u003d\"add-patient-tag\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":293,"author":{"gitId":"pualixue"},"content":"Adds a new tag to a patient’s record.","lastModifiedDate":"2021-09-30"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":295,"author":{"gitId":"Haozeee"},"content":"Format: `tag -a INDEX t/TAG`","lastModifiedDate":"2021-10-21"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":297,"author":{"gitId":"pualixue"},"content":"* Adds a `TAG` to the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2021-09-30"},{"lineNumber":298,"author":{"gitId":"pualixue"},"content":"* The index must be a **positive integer** 1, 2, 3, ...","lastModifiedDate":"2021-09-30"},{"lineNumber":299,"author":{"gitId":"pualixue"},"content":"* Tags must be alphanumeric. Whitespace and special characters are not allowed (eg. `t/covid!`, `t/covid 19` are invalid tags).","lastModifiedDate":"2021-09-30"},{"lineNumber":300,"author":{"gitId":"pualixue"},"content":"* Adding a tag will not overwrite existing tags.","lastModifiedDate":"2021-09-30"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":303,"author":{"gitId":"hpkoh"},"content":"Examples:","lastModifiedDate":"2021-09-22"},{"lineNumber":304,"author":{"gitId":"Haozeee"},"content":"`tag -a 1 t/Covid` tags the first patient with a *Covid* tag.","lastModifiedDate":"2021-10-21"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":306,"author":{"gitId":"ChuangZheQuan"},"content":"### Deleting a patient\u0027s tags : `tag -d` \u003ca name\u003d\"delete-patient-tag\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":308,"author":{"gitId":"pualixue"},"content":"Deletes a tag from a patient\u0027s record.","lastModifiedDate":"2021-09-30"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":310,"author":{"gitId":"Haozeee"},"content":"Format: `tag -d INDEX t/TAG`","lastModifiedDate":"2021-10-21"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":312,"author":{"gitId":"pualixue"},"content":"* Deletes the `TAG` from the patient at the specified `INDEX`.","lastModifiedDate":"2021-09-30"},{"lineNumber":313,"author":{"gitId":"pualixue"},"content":"* The `TAG` must match one of the patient\u0027s existing tags.","lastModifiedDate":"2021-09-30"},{"lineNumber":314,"author":{"gitId":"pualixue"},"content":"* Deleting non-existent tags would not be allowed.","lastModifiedDate":"2021-10-16"},{"lineNumber":315,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":316,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":317,"author":{"gitId":"hpkoh"},"content":"Examples:","lastModifiedDate":"2021-09-22"},{"lineNumber":318,"author":{"gitId":"pualixue"},"content":"* `tag -d 1 t/Covid` deletes the *Covid* tag from first patient.","lastModifiedDate":"2021-10-26"},{"lineNumber":319,"author":{"gitId":"pualixue"},"content":"![deletePatientTag](images/deletePatientTag.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":320,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":321,"author":{"gitId":"hpkoh"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"ChuangZheQuan"},"content":"## Managing Doctors \u003ca name\u003d\"managing-doctors\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":324,"author":{"gitId":"jiayi1129"},"content":"To use commands for managing doctors, toggle the displayed list to the doctor list using the [toggle](#toggle) command.","lastModifiedDate":"2021-10-31"},{"lineNumber":325,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":326,"author":{"gitId":"hpkoh"},"content":"![doctor tab\u0027](images/doctorTab.png)","lastModifiedDate":"2021-10-31"},{"lineNumber":327,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":328,"author":{"gitId":"ChuangZheQuan"},"content":"### Adding a doctor: `add` \u003ca name\u003d\"add-doctor\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":329,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":330,"author":{"gitId":"ChuangZheQuan"},"content":"Adds a doctor to the doctor records.","lastModifiedDate":"2021-10-19"},{"lineNumber":331,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":332,"author":{"gitId":"ChuangZheQuan"},"content":"Format: `add n/NAME hp/PHONE_NUMBER eml/EMAIL a/ADDRESS dob/DATE_OF_BIRTH [t/TAG]…​`","lastModifiedDate":"2021-10-30"},{"lineNumber":333,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":334,"author":{"gitId":"pualixue"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-16"},{"lineNumber":335,"author":{"gitId":"ChuangZheQuan"},"content":"A doctor can have any number of tags (including 0).","lastModifiedDate":"2021-10-25"},{"lineNumber":336,"author":{"gitId":"pualixue"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":337,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":338,"author":{"gitId":"pualixue"},"content":"Examples:","lastModifiedDate":"2021-10-16"},{"lineNumber":339,"author":{"gitId":"ChuangZheQuan"},"content":"* `add n/John Doe hp/98765432 eml/johnd@example.com a/John street, block 123, #01-01 dob/20/07/1964`","lastModifiedDate":"2021-10-30"},{"lineNumber":340,"author":{"gitId":"ChuangZheQuan"},"content":"* `add n/Betsy Crowe t/friend eml/betsycrowe@example.com a/Bukit Merah hp/1234567 dob/20/07/1964 t/COVID`","lastModifiedDate":"2021-10-30"},{"lineNumber":341,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":342,"author":{"gitId":"ChuangZheQuan"},"content":"### Listing all doctors : `list` \u003ca name\u003d\"list-doctor\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":343,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":344,"author":{"gitId":"pualixue"},"content":"Shows a list of all doctors in the doctor records.","lastModifiedDate":"2021-10-16"},{"lineNumber":345,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":346,"author":{"gitId":"pualixue"},"content":"Format: `list`","lastModifiedDate":"2021-10-16"},{"lineNumber":347,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":348,"author":{"gitId":"ChuangZheQuan"},"content":"### Editing a doctor\u0027s information : `edit` \u003ca name\u003d\"edit-doctor\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":349,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":350,"author":{"gitId":"pualixue"},"content":"Edits an existing doctor in the doctor records.","lastModifiedDate":"2021-10-16"},{"lineNumber":351,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":352,"author":{"gitId":"ChuangZheQuan"},"content":"Format: `edit INDEX [n/NAME] [hp/PHONE] [eml/EMAIL] [a/ADDRESS] [dob/DATE_OF_BIRTH] [t/TAG]…​`","lastModifiedDate":"2021-10-30"},{"lineNumber":353,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":354,"author":{"gitId":"pualixue"},"content":"* Edits the doctor at the specified `INDEX`. The index refers to the index number shown in the displayed doctor list.","lastModifiedDate":"2021-10-16"},{"lineNumber":355,"author":{"gitId":"pualixue"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-16"},{"lineNumber":356,"author":{"gitId":"pualixue"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-10-16"},{"lineNumber":357,"author":{"gitId":"pualixue"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-10-16"},{"lineNumber":358,"author":{"gitId":"pualixue"},"content":"* When editing tags, the existing tags of the doctor will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2021-10-16"},{"lineNumber":359,"author":{"gitId":"pualixue"},"content":"* You can remove all the doctor’s tags by typing `t/` without","lastModifiedDate":"2021-10-16"},{"lineNumber":360,"author":{"gitId":"pualixue"},"content":"  specifying any tags after it.","lastModifiedDate":"2021-10-16"},{"lineNumber":361,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":362,"author":{"gitId":"pualixue"},"content":"Examples:","lastModifiedDate":"2021-10-16"},{"lineNumber":363,"author":{"gitId":"ChuangZheQuan"},"content":"* `edit 1 hp/91234567 eml/johndoe@example.com` Edits the phone number and email address of the 1st doctor to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2021-10-30"},{"lineNumber":364,"author":{"gitId":"pualixue"},"content":"* `edit 2 n/Betsy Crower dob/20/07/1964 t/` Edits the name and date of birth of the 2nd doctor to be `Betsy Crower` and `20/07/1964` respectively, and clears all existing tags.","lastModifiedDate":"2021-10-26"},{"lineNumber":365,"author":{"gitId":"pualixue"},"content":"* After executing `edit 2 n/Betsy Crower dob/20/07/1964 t/`:","lastModifiedDate":"2021-10-26"},{"lineNumber":366,"author":{"gitId":"pualixue"},"content":"![editDoctor](images/editDoctor.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":367,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":368,"author":{"gitId":"ChuangZheQuan"},"content":"### Adding a remark to a doctor\u0027s information : `remark` \u003ca name\u003d\"remark-doctor\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":369,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":370,"author":{"gitId":"pualixue"},"content":"Adds a remark to an existing doctor in the doctor records.","lastModifiedDate":"2021-10-16"},{"lineNumber":371,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":372,"author":{"gitId":"pualixue"},"content":"Format: `remark INDEX r/REMARK`","lastModifiedDate":"2021-10-16"},{"lineNumber":373,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":374,"author":{"gitId":"pualixue"},"content":"* Edits the doctor at the specified `INDEX`. The index refers to the index number shown in the displayed doctor list.","lastModifiedDate":"2021-10-16"},{"lineNumber":375,"author":{"gitId":"pualixue"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-16"},{"lineNumber":376,"author":{"gitId":"pualixue"},"content":"* Existing remark will be updated to the input remark.","lastModifiedDate":"2021-10-16"},{"lineNumber":377,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":378,"author":{"gitId":"pualixue"},"content":"Examples:","lastModifiedDate":"2021-10-16"},{"lineNumber":379,"author":{"gitId":"pualixue"},"content":"*  `remark 1 r/` Edits the remark of the 1st doctor to be blank.","lastModifiedDate":"2021-10-16"},{"lineNumber":380,"author":{"gitId":"pualixue"},"content":"*  `remark 2 r/Comes at 8am` Edits the remark of the 2nd doctor to be `Comes at 8am`.","lastModifiedDate":"2021-10-16"},{"lineNumber":381,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":382,"author":{"gitId":"ChuangZheQuan"},"content":"### Locating doctors by name: `find` \u003ca name\u003d\"find-doctor\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":383,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":384,"author":{"gitId":"pualixue"},"content":"Finds doctors whose names contain any of the given keywords","lastModifiedDate":"2021-10-16"},{"lineNumber":385,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":386,"author":{"gitId":"pualixue"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-10-16"},{"lineNumber":387,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":388,"author":{"gitId":"pualixue"},"content":"* The search is case-insensitive. e.g `john` will match `John`","lastModifiedDate":"2021-10-16"},{"lineNumber":389,"author":{"gitId":"pualixue"},"content":"* The order of the keywords does not matter. e.g. `John Lee` will match `Lee","lastModifiedDate":"2021-10-16"},{"lineNumber":390,"author":{"gitId":"pualixue"},"content":"  John`","lastModifiedDate":"2021-10-16"},{"lineNumber":391,"author":{"gitId":"pualixue"},"content":"* Only the name is searched.","lastModifiedDate":"2021-10-16"},{"lineNumber":392,"author":{"gitId":"pualixue"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2021-10-16"},{"lineNumber":393,"author":{"gitId":"pualixue"},"content":"* Doctors matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2021-10-16"},{"lineNumber":394,"author":{"gitId":"pualixue"},"content":"  e.g. `John` will return `John Lee`, `John Tan`","lastModifiedDate":"2021-10-16"},{"lineNumber":395,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":396,"author":{"gitId":"pualixue"},"content":"Examples:","lastModifiedDate":"2021-10-16"},{"lineNumber":397,"author":{"gitId":"pualixue"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2021-10-16"},{"lineNumber":398,"author":{"gitId":"pualixue"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":399,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":400,"author":{"gitId":"ChuangZheQuan"},"content":"### Deleting a doctor : `delete` \u003ca name\u003d\"delete-doctor\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":401,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":402,"author":{"gitId":"pualixue"},"content":"Deletes a doctor record from the list.","lastModifiedDate":"2021-10-16"},{"lineNumber":403,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":404,"author":{"gitId":"pualixue"},"content":"Format: `delete INDEX`","lastModifiedDate":"2021-10-16"},{"lineNumber":405,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":406,"author":{"gitId":"pualixue"},"content":"* Deletes the doctor at the specified `INDEX`.","lastModifiedDate":"2021-10-16"},{"lineNumber":407,"author":{"gitId":"pualixue"},"content":"* The index refers to the index number shown in the displayed doctor list.","lastModifiedDate":"2021-10-16"},{"lineNumber":408,"author":{"gitId":"pualixue"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-16"},{"lineNumber":409,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":410,"author":{"gitId":"pualixue"},"content":"Examples:","lastModifiedDate":"2021-10-16"},{"lineNumber":411,"author":{"gitId":"pualixue"},"content":"* `list` followed by `delete 2` deletes the 2nd doctor in the doctor records.","lastModifiedDate":"2021-10-16"},{"lineNumber":412,"author":{"gitId":"pualixue"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st doctor in the results of the `find` command.","lastModifiedDate":"2021-10-16"},{"lineNumber":413,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":414,"author":{"gitId":"ChuangZheQuan"},"content":"### Managing Tags `tag` \u003ca name\u003d\"managing-doctor-tag\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":415,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":416,"author":{"gitId":"ChuangZheQuan"},"content":"### Adding tags to a doctor: `tag -a` \u003ca name\u003d\"add-doctor-tag\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":417,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":418,"author":{"gitId":"pualixue"},"content":"Adds a new tag to a doctor’s record.","lastModifiedDate":"2021-10-16"},{"lineNumber":419,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":420,"author":{"gitId":"Haozeee"},"content":"Format: `tag -a INDEX t/TAG`","lastModifiedDate":"2021-10-21"},{"lineNumber":421,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":422,"author":{"gitId":"pualixue"},"content":"* Adds a `TAG` to the doctor at the specified `INDEX`. The index refers to the index number shown in the displayed doctor list.","lastModifiedDate":"2021-10-16"},{"lineNumber":423,"author":{"gitId":"pualixue"},"content":"* The index must be a **positive integer** 1, 2, 3, ...","lastModifiedDate":"2021-10-16"},{"lineNumber":424,"author":{"gitId":"pualixue"},"content":"* Tags must be alphanumeric. Whitespace and special characters are not allowed (eg. `t/covid!`, `t/covid 19` are invalid tags).","lastModifiedDate":"2021-10-16"},{"lineNumber":425,"author":{"gitId":"pualixue"},"content":"* Adding a tag will not overwrite existing tags.","lastModifiedDate":"2021-10-16"},{"lineNumber":426,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":427,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":428,"author":{"gitId":"pualixue"},"content":"Examples:","lastModifiedDate":"2021-10-16"},{"lineNumber":429,"author":{"gitId":"Haozeee"},"content":"`tag -a 1 t/Pediatrician` tags the first doctor with a *Pediatrician* tag.","lastModifiedDate":"2021-10-21"},{"lineNumber":430,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":431,"author":{"gitId":"ChuangZheQuan"},"content":"### Deleting a doctor\u0027s tags : `tag -d` \u003ca name\u003d\"delete-doctor-tag\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":432,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":433,"author":{"gitId":"pualixue"},"content":"Deletes a tag from a doctor\u0027s record.","lastModifiedDate":"2021-10-16"},{"lineNumber":434,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":435,"author":{"gitId":"Haozeee"},"content":"Format: `tag -d INDEX t/TAG`","lastModifiedDate":"2021-10-21"},{"lineNumber":436,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":437,"author":{"gitId":"pualixue"},"content":"* Deletes the `TAG` from the doctor at the specified `INDEX`.","lastModifiedDate":"2021-10-16"},{"lineNumber":438,"author":{"gitId":"pualixue"},"content":"* The `TAG` must match one of the doctor\u0027s existing tags.","lastModifiedDate":"2021-10-16"},{"lineNumber":439,"author":{"gitId":"pualixue"},"content":"* Deleting non-existent tags would not be allowed.","lastModifiedDate":"2021-10-16"},{"lineNumber":440,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":441,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":442,"author":{"gitId":"pualixue"},"content":"Examples:","lastModifiedDate":"2021-10-16"},{"lineNumber":443,"author":{"gitId":"Haozeee"},"content":"`tag -d 1 t/Pediatrician` deletes the *Pediatrician* tag from the first doctor.","lastModifiedDate":"2021-10-21"},{"lineNumber":444,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":445,"author":{"gitId":"pualixue"},"content":"---","lastModifiedDate":"2021-10-16"},{"lineNumber":446,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":447,"author":{"gitId":"ChuangZheQuan"},"content":"## Managing Appointments `appt` \u003ca name\u003d\"managing-appointments\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":448,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":449,"author":{"gitId":"ChuangZheQuan"},"content":"### Adding an appointment: `appt -a` \u003ca name\u003d\"add-appointment\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":450,"author":{"gitId":"ChuangZheQuan"},"content":"Creates an appointment. ","lastModifiedDate":"2021-10-27"},{"lineNumber":451,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":452,"author":{"gitId":"ChuangZheQuan"},"content":"Format: `appt -a p/INDEX_OF_PATIENT d/INDEX_OF_DOCTOR s/DATE_AND_TIME [dur/DURATION]","lastModifiedDate":"2021-10-27"},{"lineNumber":453,"author":{"gitId":"ChuangZheQuan"},"content":" [r/REMARK]`","lastModifiedDate":"2021-10-27"},{"lineNumber":454,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":455,"author":{"gitId":"ChuangZheQuan"},"content":"Examples: `appt -a p/1 d/2 s/12/11/2021 20:00 dur/20 r/Patient wants a blood test`","lastModifiedDate":"2021-10-31"},{"lineNumber":456,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":457,"author":{"gitId":"ChuangZheQuan"},"content":"* Both patient\u0027s and doctor\u0027s index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-27"},{"lineNumber":458,"author":{"gitId":"ChuangZheQuan"},"content":"* `DATE_AND_TIME` accepts the format `DD/MM/YYYY HH:MM` e.g. `12/11/2021 20:00`.","lastModifiedDate":"2021-10-30"},{"lineNumber":459,"author":{"gitId":"ChuangZheQuan"},"content":"* If you did not include the duration, it will be automatically be set to **10** minutes.","lastModifiedDate":"2021-10-27"},{"lineNumber":460,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":461,"author":{"gitId":"ChuangZheQuan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-27"},{"lineNumber":462,"author":{"gitId":"ChuangZheQuan"},"content":"You can find the PATIENT_INDEX or DOCTOR_INDEX by toggling to the patient/doctor tab using the `toggle` command.","lastModifiedDate":"2021-10-27"},{"lineNumber":463,"author":{"gitId":"ChuangZheQuan"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":464,"author":{"gitId":"ChuangZheQuan"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":465,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":466,"author":{"gitId":"ChuangZheQuan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-27"},{"lineNumber":467,"author":{"gitId":"ChuangZheQuan"},"content":"You can also add appointments that have happened already! This is especially useful if you just started using PlannerMD","lastModifiedDate":"2021-10-27"},{"lineNumber":468,"author":{"gitId":"ChuangZheQuan"},"content":"and would like to store your entire history of appointments!","lastModifiedDate":"2021-10-27"},{"lineNumber":469,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":470,"author":{"gitId":"ChuangZheQuan"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":472,"author":{"gitId":"Haozeee"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-30"},{"lineNumber":473,"author":{"gitId":"Haozeee"},"content":"After adding an appointment, the appointment list is updated to show all appointments on the date of the added appointment. To go back to the default appointment view which shows appointments for the current day, enter `appt -l`","lastModifiedDate":"2021-10-30"},{"lineNumber":474,"author":{"gitId":"ChuangZheQuan"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":475,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":476,"author":{"gitId":"ChuangZheQuan"},"content":"### Editing an appointment: `appt -e` \u003ca name\u003d\"edit-appointment\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":477,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":478,"author":{"gitId":"pualixue"},"content":"Edits an existing appointment in the appointment list.","lastModifiedDate":"2021-10-25"},{"lineNumber":479,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":480,"author":{"gitId":"pualixue"},"content":"Format: `appt -e INDEX [p/PATIENT_INDEX] [d/DOCTOR_INDEX] [s/START_DATE_TIME] [dur/MINUTES] [r/REMARK]`","lastModifiedDate":"2021-10-25"},{"lineNumber":481,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":482,"author":{"gitId":"pualixue"},"content":"* Edits the appointment at the specified `INDEX`. The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2021-10-25"},{"lineNumber":483,"author":{"gitId":"pualixue"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-25"},{"lineNumber":484,"author":{"gitId":"pualixue"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-10-25"},{"lineNumber":485,"author":{"gitId":"pualixue"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-10-25"},{"lineNumber":486,"author":{"gitId":"pualixue"},"content":"* `PATIENT_INDEX` refers to the index of the patient in the displayed patient list.","lastModifiedDate":"2021-10-25"},{"lineNumber":487,"author":{"gitId":"pualixue"},"content":"* `DOCTOR_INDEX` refers to the index of the doctor in the displayed doctor list.","lastModifiedDate":"2021-10-25"},{"lineNumber":488,"author":{"gitId":"ChuangZheQuan"},"content":"* `START_DATE_TIME` accepts a format of `DD/MM/YYYY HH:MM` e.g. `20/07/2022 12:00`.","lastModifiedDate":"2021-10-30"},{"lineNumber":489,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":490,"author":{"gitId":"pualixue"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-25"},{"lineNumber":491,"author":{"gitId":"pualixue"},"content":"You can find the PATIENT_INDEX or DOCTOR_INDEX by toggling to the patient/doctor tab using the `toggle` command.","lastModifiedDate":"2021-10-25"},{"lineNumber":492,"author":{"gitId":"pualixue"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":493,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":494,"author":{"gitId":"pualixue"},"content":"Examples:","lastModifiedDate":"2021-10-25"},{"lineNumber":495,"author":{"gitId":"pualixue"},"content":"* `appt -e 1 p/2 r/Blood test` Edits the patient and remark of the 1st appointment to be the `second patient` in the patient list and `Blood test` respectively.","lastModifiedDate":"2021-10-25"},{"lineNumber":496,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":497,"author":{"gitId":"pualixue"},"content":"![editAppointment](images/editAppointment.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":498,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":499,"author":{"gitId":"ChuangZheQuan"},"content":"### Deleting an appointment: `appt -d` \u003ca name\u003d\"delete-appointment\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":500,"author":{"gitId":"jiayi1129"},"content":"Deletes an appointment from the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":501,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":502,"author":{"gitId":"jiayi1129"},"content":"Format: `appt -d INDEX`","lastModifiedDate":"2021-10-28"},{"lineNumber":503,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":504,"author":{"gitId":"jiayi1129"},"content":"* Deletes the appointment at the specified `INDEX`","lastModifiedDate":"2021-10-28"},{"lineNumber":505,"author":{"gitId":"jiayi1129"},"content":"* The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2021-10-28"},{"lineNumber":506,"author":{"gitId":"jiayi1129"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-28"},{"lineNumber":507,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":508,"author":{"gitId":"jiayi1129"},"content":"Examples:","lastModifiedDate":"2021-10-28"},{"lineNumber":509,"author":{"gitId":"ChuangZheQuan"},"content":"* `appt -l` followed by `appt -d 2` deletes the 2nd appointment in the appointment list.","lastModifiedDate":"2021-10-30"},{"lineNumber":510,"author":{"gitId":"ChuangZheQuan"},"content":"* `appt -f p/Betsy` followed by `appt -d 1` deletes the 1st appointment in the results of the filter command.","lastModifiedDate":"2021-10-30"},{"lineNumber":511,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":512,"author":{"gitId":"ChuangZheQuan"},"content":"### Filtering all appointments: `appt -f` \u003ca name\u003d\"find-appointments\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":513,"author":{"gitId":"Haozeee"},"content":"Searches and lists all appointments in the appointment records that match the given filter conditions.","lastModifiedDate":"2021-10-26"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":515,"author":{"gitId":"Haozeee"},"content":"Format: `appt -f [p/PATIENT_KEYWORD] [d/DOCTOR_KEYWORD] [s/START_DATE] [e/END_DATE]`","lastModifiedDate":"2021-10-26"},{"lineNumber":516,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":517,"author":{"gitId":"Haozeee"},"content":"* `PATIENT_KEYWORDS` and `DOCTOR_KEYWORDS` can be 1 or more words. ","lastModifiedDate":"2021-10-26"},{"lineNumber":518,"author":{"gitId":"Haozeee"},"content":"* Keyword search behave similarly to that of [FindCommand](#find-patient).","lastModifiedDate":"2021-10-26"},{"lineNumber":519,"author":{"gitId":"Haozeee"},"content":"* The `START_DATE` and `END_DATE` should be entered with the format `dd/mm/yyyy`.","lastModifiedDate":"2021-10-26"},{"lineNumber":520,"author":{"gitId":"Haozeee"},"content":"* The `START_DATE` and `END_DATE` filters are inclusive of the entered date.","lastModifiedDate":"2021-10-26"},{"lineNumber":521,"author":{"gitId":"Haozeee"},"content":"* Entering the command with no filter parameters will list all appointments from the appointment records.","lastModifiedDate":"2021-10-26"},{"lineNumber":522,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":523,"author":{"gitId":"Haozeee"},"content":"Examples:","lastModifiedDate":"2021-10-26"},{"lineNumber":524,"author":{"gitId":"Haozeee"},"content":"* `appt -f` will list all appointments in the appointment records","lastModifiedDate":"2021-10-26"},{"lineNumber":525,"author":{"gitId":"Haozeee"},"content":"* `appt -f s/24/08/2021 e/24/09/2021` will list all appointments in the appointment records that has a starting date between 24 Aug 2021(inclusive) and 24 Sep 2021(inclusive).","lastModifiedDate":"2021-10-26"},{"lineNumber":526,"author":{"gitId":"Haozeee"},"content":"* `appt -f s/24/08/2021 e/24/09/2021 p/Alice d/Carl` will list all appointments in the appointment records which contains patients with the name `Alice`, doctors with the name `Carl` and has a starting date between 24 Aug 2021(inclusive) and 24 Sep 2021(inclusive).","lastModifiedDate":"2021-10-26"},{"lineNumber":527,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":528,"author":{"gitId":"ChuangZheQuan"},"content":"### Filtering upcoming appointments: `appt -u` \u003ca name\u003d\"upcoming-appointments\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":529,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":530,"author":{"gitId":"Haozeee"},"content":"Searches and lists all upcoming appointments in the appointment records that match the given filter conditions.","lastModifiedDate":"2021-10-26"},{"lineNumber":531,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":532,"author":{"gitId":"Haozeee"},"content":"Format: `appt -u [p/PATIENT_KEYWORD] [d/DOCTOR_KEYWORD]`","lastModifiedDate":"2021-10-26"},{"lineNumber":533,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":534,"author":{"gitId":"Haozeee"},"content":"* An appointment is considered upcoming if its starting date and time is after the current date and time. eg. If the current time is 18:00, any appointment today that starts at 18:00 or later is considered upcoming while earlier appointments on the same day are not.","lastModifiedDate":"2021-10-26"},{"lineNumber":535,"author":{"gitId":"Haozeee"},"content":"* `PATIENT_KEYWORDS` and `DOCTOR_KEYWORDS` can be 1 or more words.","lastModifiedDate":"2021-10-26"},{"lineNumber":536,"author":{"gitId":"Haozeee"},"content":"* Keyword search behave similarly to that of [FindCommand](#find-patient).","lastModifiedDate":"2021-10-26"},{"lineNumber":537,"author":{"gitId":"Haozeee"},"content":"* Entering the command with no filter parameters will list all upcoming appointments from the appointment records.","lastModifiedDate":"2021-10-26"},{"lineNumber":538,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":539,"author":{"gitId":"Haozeee"},"content":"Examples:","lastModifiedDate":"2021-10-26"},{"lineNumber":540,"author":{"gitId":"Haozeee"},"content":"* `appt -u` will list all upcoming appointments in the appointment records","lastModifiedDate":"2021-10-26"},{"lineNumber":541,"author":{"gitId":"Haozeee"},"content":"* `appt -u p/Alice d/Carl` will list all upcoming appointments in the appointment records which contains patients with the name `Alice`and doctors with the name `Carl`.","lastModifiedDate":"2021-10-26"},{"lineNumber":542,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":543,"author":{"gitId":"ChuangZheQuan"},"content":"### Listing appointments today: `appt -l` \u003ca name\u003d\"list-appointments\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":544,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":545,"author":{"gitId":"Haozeee"},"content":"Show all of today\u0027s appointments.","lastModifiedDate":"2021-10-26"},{"lineNumber":546,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":547,"author":{"gitId":"Haozeee"},"content":"Format: `appt -l`","lastModifiedDate":"2021-10-26"},{"lineNumber":548,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":549,"author":{"gitId":"pualixue"},"content":"---","lastModifiedDate":"2021-10-16"},{"lineNumber":550,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":551,"author":{"gitId":"ChuangZheQuan"},"content":"### Saving the data \u003ca name\u003d\"save-data\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":552,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"hpkoh"},"content":"PlannerMD data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-09-22"},{"lineNumber":554,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"ChuangZheQuan"},"content":"### Editing the data file \u003ca name\u003d\"edit-data\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":557,"author":{"gitId":"pualixue"},"content":"PlannerMD data are saved as a JSON file `[JAR file location]/data/plannermd.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-10-16"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":559,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":560,"author":{"gitId":"pualixue"},"content":"If your changes to the data file makes its format invalid, PlannerMD will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-10-16"},{"lineNumber":561,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":563,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"ChuangZheQuan"},"content":"## FAQ \u003ca name\u003d\"faq\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":566,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"ChuangZheQuan"},"content":"## Command summary \u003ca name\u003d\"command-summary\"/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":573,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"ChuangZheQuan"},"content":"**Add appointment** | `appt -a p/INDEX_OF_PATIENT d/INDEX_OF_DOCTOR s/DATE_AND_TIME [dur/DURATION] [r/REMARK]` \u003cbr\u003e e.g., `appt -a p/1 d/2 s/12/11/2021 20:00 dur/20 r/Patient wants a blood test`|","lastModifiedDate":"2021-10-30"},{"lineNumber":577,"author":{"gitId":"ChuangZheQuan"},"content":"**Add doctor** | `add n/NAME hp/PHONE_NUMBER eml/EMAIL a/ADDRESS dob/DATE_OF_BIRTH [t/TAG]…​`\u003cbr\u003e e.g., `add n/John Doe hp/98765432 eml/johnd@example.com a/John street, block 123, #01-01 dob/20/07/1964`","lastModifiedDate":"2021-10-31"},{"lineNumber":578,"author":{"gitId":"pualixue"},"content":"**Add patient** | `add n/NAME hp/PHONE_NUMBER eml/EMAIL a/ADDRESS dob/DATE_OF_BIRTH [t/TAG]…​ [risk/RISK]` \u003cbr\u003e e.g., `add n/James Ho hp/98989898 eml/jamesho@example.com a/123, Clementi Rd, 123466 dob/20/07/1964 t/vaccinated t/diabetic risk/LOW`","lastModifiedDate":"2021-10-31"},{"lineNumber":579,"author":{"gitId":"ChuangZheQuan"},"content":"**Add tag** | `tag id/INDEX t/TAG`\u003cbr\u003e e.g, `tag id/1 t/Unvaccinated`","lastModifiedDate":"2021-10-30"},{"lineNumber":580,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"jiayi1129"},"content":"**Delete appointment** | `appt -d INDEX`\u003cbr\u003e e.g., `appt -d 3`","lastModifiedDate":"2021-10-28"},{"lineNumber":582,"author":{"gitId":"pualixue"},"content":"**Delete patient/doctor** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2021-10-16"},{"lineNumber":583,"author":{"gitId":"pualixue"},"content":"**Delete Tag** | `tag -d id/INDEX t/TAG`\u003cbr\u003e e.g, `tag -d id/1 t/Unvaccinated`","lastModifiedDate":"2021-10-16"},{"lineNumber":584,"author":{"gitId":"pualixue"},"content":"**Edit appointment** | `appt -e INDEX [p/PATIENT_INDEX] [d/DOCTOR_INDEX] [s/START_DATE_TIME] [dur/MINUTES] [r/REMARK]`\u003cbr\u003e e.g., `appt -e 1 p/2 r/Blood test`","lastModifiedDate":"2021-10-27"},{"lineNumber":585,"author":{"gitId":"pualixue"},"content":"**Edit doctor** | `edit INDEX [n/NAME] [hp/PHONE] [eml/EMAIL] [a/ADDRESS] [dob/DATE_OF_BIRTH] [t/TAG]…​`\u003cbr\u003e e.g., `edit 2 hp/98989898 eml/john@example.com`","lastModifiedDate":"2021-10-31"},{"lineNumber":586,"author":{"gitId":"pualixue"},"content":"**Edit patient** | `edit INDEX [n/NAME] [hp/PHONE_NUMBER] [eml/EMAIL] [a/ADDRESS] [dob/DATE_OF_BIRTH] [t/TAG]…​ [risk/RISK]`\u003cbr\u003e e.g.,`edit 2 n/James Lee eml/jameslee@example.com`","lastModifiedDate":"2021-10-31"},{"lineNumber":587,"author":{"gitId":"pualixue"},"content":"**Exit** | `exit`","lastModifiedDate":"2021-10-16"},{"lineNumber":588,"author":{"gitId":"Haozeee"},"content":"**Filter all appointments** | `appt -f [p/PATIENT_KEYWORDS] [d/DOCTOR_KEYWORDS] [s/START_DATE] [e/END_DATE]` \u003cbr\u003e e.g., `appt -f s/24/08/2021 e/24/09/2021 p/Alice d/Carl`","lastModifiedDate":"2021-10-26"},{"lineNumber":589,"author":{"gitId":"Haozeee"},"content":"**Filter upcoming appointments** | `appt -u [p/PATIENT_KEYWORDS] [d/DOCTOR_KEYWORDS]` \u003cbr\u003e e.g., `appt -u p/Alice d/Carl`","lastModifiedDate":"2021-10-26"},{"lineNumber":590,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":592,"author":{"gitId":"Haozeee"},"content":"**List appointments today** | `appt -l`","lastModifiedDate":"2021-10-26"},{"lineNumber":593,"author":{"gitId":"pualixue"},"content":"**List patients/doctors** | `list`","lastModifiedDate":"2021-10-16"},{"lineNumber":594,"author":{"gitId":"pualixue"},"content":"**Remark** | `remark INDEX r/REMARK`\u003cbr\u003e e.g.,`remark 2 r/Chronic diabetic, monthly insulin pick up`","lastModifiedDate":"2021-10-16"},{"lineNumber":595,"author":{"gitId":"ChuangZheQuan"},"content":"**Toggle between patients and doctors** | `toggle`","lastModifiedDate":"2021-10-30"}],"authorContributionMap":{"Haozeee":47,"hpkoh":43,"pualixue":169,"ChuangZheQuan":182,"-":143,"jiayi1129":11}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"jiayi1129"},"content":"    content: \"PlannerMD\";","lastModifiedDate":"2021-09-21"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"-":294,"jiayi1129":1}},{"path":"docs/diagrams/AppointmentFilterSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"@startuml","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"!include style.puml","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"participant \":PlannerMdParser\" as PlannerMdParser LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"participant \":AppointmentCommandParser\" as AppointmentCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"participant \":FilterAppointmentCommandParser\" as FilterAppointmentCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"participant \"filter:AppointmentFilters\" as AppointmentFilters LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"participant \"f:FilterAppointmentCommand\" as FilterAppointmentCommand LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"end box","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"end box","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"[-\u003e LogicManager : execute(\"appt -f p/Alice s/19/10/2021\")","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"activate LogicManager","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"LogicManager -\u003e Model : getState()","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"activate Model","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"Model --\u003e LogicManager : state","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"deactivate Model","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"LogicManager -\u003e PlannerMdParser : parseCommand(\"appt -f p/Alice s/19/10/2021\", State.PATIENT)","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"activate PlannerMdParser","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"create AppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"PlannerMdParser -\u003e AppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"activate AppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"\u0027Hidden arrow to increase the length of the activation bar so that the diagram is taller and easier to see","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"AppointmentCommandParser -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"AppointmentCommandParser -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"AppointmentCommandParser --\u003e PlannerMdParser","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"deactivate AppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"PlannerMdParser -\u003e AppointmentCommandParser : parse(\"appt -f p/Alice s/19/10/2021\")","lastModifiedDate":"2021-10-31"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"activate AppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"create FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"AppointmentCommandParser -\u003e FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"activate FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"\u0027Hidden arrow to increase the length of the activation bar so that the diagram is taller and easier to see","lastModifiedDate":"2021-10-31"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-31"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommand -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-31"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser --\u003e AppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"deactivate FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"AppointmentCommandParser -\u003e FilterAppointmentCommandParser : parse(\"p/Alice s/19/10/2021)","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"activate FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"create AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"activate AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"AppointmentFilters --\u003e FilterAppointmentCommandParser : filter","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"deactivate AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"ref over FilterAppointmentCommandParser, AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"configure appointment filters","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"end ref","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"create FilterAppointmentCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e FilterAppointmentCommand : FilterAppointmentCommand(filter)","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"activate FilterAppointmentCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"\u0027Hidden arrow to increase the length of the activation bar so that the diagram is taller and easier to see","lastModifiedDate":"2021-10-31"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommand -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-31"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommand -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-31"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommand --\u003e FilterAppointmentCommandParser : f","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"deactivate FilterAppointmentCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser --\u003e AppointmentCommandParser : f","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"deactivate FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"destroy FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"AppointmentCommandParser --\u003e PlannerMdParser : f","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"deactivate AppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"AppointmentCommandParser -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"destroy AppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"PlannerMdParser --\u003e LogicManager : f","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"deactivate PlannerMdParser","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"LogicManager -\u003e FilterAppointmentCommand : execute()","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"activate FilterAppointmentCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommand -\u003e AppointmentFilters : collectAllFilters()","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"activate AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"AppointmentFilters --\u003e FilterAppointmentCommand : predicate","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"deactivate AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"AppointmentFilters -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"destroy AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommand -\u003e Model : updateFilteredAppointmentList(predicate)","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"activate Model","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"Model --\u003e FilterAppointmentCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"deactivate Model","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"create CommandResult","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommand -\u003e CommandResult","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"activate CommandResult","lastModifiedDate":"2021-10-28"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"\u0027Hidden arrow to increase the length of the activation bar so that the diagram is taller and easier to see","lastModifiedDate":"2021-10-31"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"CommandResult -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-31"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"CommandResult -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-31"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"CommandResult --\u003e FilterAppointmentCommand : result","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-28"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-28"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"deactivate FilterAppointmentCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-28"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"@enduml","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"Haozeee":128}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"logic -[LOGIC_COLOR]\u003e model : getState()","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"model -[MODEL_COLOR]-\u003e logic : State.PATIENT","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"deactivate model","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"logic -[LOGIC_COLOR]\u003e model : deletePatient(p)","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"logic -[LOGIC_COLOR]\u003e storage : savePlannerMd(plannerMd)","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ChuangZheQuan":7,"-":36}},{"path":"docs/diagrams/ConfigureAppointmentFilters.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"@startuml","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"!include style.puml","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"participant \":FilterAppointmentCommandParser\" as FilterAppointmentCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"participant \":AppointmentContainsPatientPredicate\" as AppointmentContainsPatientPredicate LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"participant \"\u003c\u003cclass\u003e\u003e\\nParserUtil\" as ParserUtil LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"participant \":AppointmentIsAfterPredicate\" as AppointmentIsAfterPredicate LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"participant \":AppointmentFilters\" as AppointmentFilters LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"mainframe **sd** configure appointment filters","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"activate FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e FilterAppointmentCommandParser : stringToList(\"Alice\")","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"activate FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e FilterAppointmentCommandParser : stringList","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"deactivate FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"create AppointmentContainsPatientPredicate","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e AppointmentContainsPatientPredicate : AppointmentContainsPatientPredicate(stringList)","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"activate AppointmentContainsPatientPredicate","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"AppointmentContainsPatientPredicate --\u003e FilterAppointmentCommandParser : containsPatientPredicate","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"deactivate AppointmentContainsPatientPredicate","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e AppointmentFilters : setHasPatients(containsPatientPredicate)","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"activate AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"AppointmentFilters --\u003e FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"deactivate AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e ParserUtil : stringToDate(\"19/10/2021\")","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"activate ParserUtil","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"ParserUtil -\u003e FilterAppointmentCommandParser : localDate","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"deactivate ParserUtil","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"create AppointmentIsAfterPredicate","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e AppointmentIsAfterPredicate : AppointmentIsAfterPredicate(localDate)","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"activate AppointmentIsAfterPredicate","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"AppointmentIsAfterPredicate --\u003e FilterAppointmentCommandParser : isAfterPredicate","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"deactivate AppointmentIsAfterPredicate","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"FilterAppointmentCommandParser -\u003e AppointmentFilters : setStartAfter(isAfterPredicate)","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"activate AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"AppointmentFilters --\u003e FilterAppointmentCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"deactivate AppointmentFilters","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"@enduml","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"Haozeee":51}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"participant \":PlannerMdParser\" as PlannerMdParser LOGIC_COLOR","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"participant \":DeletePatientCommandParser\" as DeletePatientCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"participant \"d:DeletePatientCommand\" as DeletePatientCommand LOGIC_COLOR","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"LogicManager -\u003e Model : getState()","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"Model --\u003e LogicManager : state","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"LogicManager -\u003e PlannerMdParser : parseCommand(\"delete 1\", State.PATIENT)","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"activate PlannerMdParser","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"create DeletePatientCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"PlannerMdParser -\u003e DeletePatientCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"activate DeletePatientCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"DeletePatientCommandParser --\u003e PlannerMdParser","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"deactivate DeletePatientCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"PlannerMdParser -\u003e DeletePatientCommandParser : parse(\"1\")","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"activate DeletePatientCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"create DeletePatientCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"DeletePatientCommandParser -\u003e DeletePatientCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"activate DeletePatientCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"DeletePatientCommand --\u003e DeletePatientCommandParser : d","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"deactivate DeletePatientCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"DeletePatientCommandParser --\u003e PlannerMdParser : d","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"deactivate DeletePatientCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"DeletePatientCommandParser -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"destroy DeletePatientCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"PlannerMdParser --\u003e LogicManager : d","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"deactivate PlannerMdParser","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"LogicManager -\u003e DeletePatientCommand : execute()","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"activate DeletePatientCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"DeletePatientCommand -\u003e Model : deletePatient(1)","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"Model --\u003e DeletePatientCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"DeletePatientCommand -\u003e CommandResult","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"CommandResult --\u003e DeletePatientCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"DeletePatientCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"deactivate DeletePatientCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"pualixue":37,"-":38}},{"path":"docs/diagrams/EditAppointmentSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"@startuml","lastModifiedDate":"2021-10-30"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"!include style.puml","lastModifiedDate":"2021-10-30"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-30"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-30"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"participant \":PlannerMdParser\" as PlannerMdParser LOGIC_COLOR","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"participant \":AppointmentCommandParser\" as AppointmentCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-30"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"participant \":EditAppointmentCommandParser\" as EditAppointmentCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"participant \"e:EditAppointmentCommand\" as EditAppointmentCommand LOGIC_COLOR","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"end box","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"end box","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"[-\u003e LogicManager : execute(\"appt -e 2 p/1 dur/30\")","lastModifiedDate":"2021-10-30"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"activate LogicManager","lastModifiedDate":"2021-10-30"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"LogicManager -\u003e Model : getState()","lastModifiedDate":"2021-10-30"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"activate Model","lastModifiedDate":"2021-10-30"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"Model --\u003e LogicManager : state","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"deactivate Model","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"LogicManager -\u003e PlannerMdParser : parseCommand(\"appt -e 2 p/1 dur/30\", State.PATIENT)","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"activate PlannerMdParser","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"create AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"PlannerMdParser -\u003e AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"activate AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"AppointmentCommandParser --\u003e PlannerMdParser","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"deactivate AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"PlannerMdParser -\u003e AppointmentCommandParser : parseAppointmentCommand(\"-e 2 p/1 dur/30\")","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"activate AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"create EditAppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"AppointmentCommandParser -\u003e EditAppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"activate EditAppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"EditAppointmentCommandParser --\u003e AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"deactivate EditAppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"AppointmentCommandParser -\u003e EditAppointmentCommandParser : parse(\"2 p/1 dur/30\")","lastModifiedDate":"2021-10-30"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"activate EditAppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"create EditAppointmentCommand","lastModifiedDate":"2021-10-30"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"EditAppointmentCommandParser -\u003e EditAppointmentCommand","lastModifiedDate":"2021-10-30"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"activate EditAppointmentCommand","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"EditAppointmentCommand --\u003e EditAppointmentCommandParser : e","lastModifiedDate":"2021-10-30"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"deactivate EditAppointmentCommand","lastModifiedDate":"2021-10-30"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"EditAppointmentCommandParser --\u003e AppointmentCommandParser : e","lastModifiedDate":"2021-10-30"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"deactivate EditAppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-30"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"EditAppointmentCommandParser -[hidden]-\u003e AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"destroy EditAppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"AppointmentCommandParser --\u003e PlannerMdParser : e","lastModifiedDate":"2021-10-30"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"deactivate AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-30"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"AppointmentCommandParser -[hidden]-\u003e PlannerMdParser","lastModifiedDate":"2021-10-30"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"destroy AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"PlannerMdParser --\u003e LogicManager : e","lastModifiedDate":"2021-10-30"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"deactivate PlannerMdParser","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"LogicManager -\u003e EditAppointmentCommand : execute()","lastModifiedDate":"2021-10-30"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"activate EditAppointmentCommand","lastModifiedDate":"2021-10-30"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"EditAppointmentCommand -\u003e Model : setAppointment()","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"activate Model","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"Model --\u003e EditAppointmentCommand","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"deactivate Model","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"create CommandResult","lastModifiedDate":"2021-10-30"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"EditAppointmentCommand -\u003e CommandResult","lastModifiedDate":"2021-10-30"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"activate CommandResult","lastModifiedDate":"2021-10-30"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"CommandResult --\u003e EditAppointmentCommand : result","lastModifiedDate":"2021-10-30"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-30"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"EditAppointmentCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-30"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"deactivate EditAppointmentCommand","lastModifiedDate":"2021-10-30"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-30"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-30"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"@enduml","lastModifiedDate":"2021-10-30"}],"authorContributionMap":{"pualixue":93}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Logic {","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"Class PlannerMdParser","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Interface Logic \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"package Model{","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"LogicManager .right.|\u003e Logic","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"LogicManager -right-\u003e\"1\" PlannerMdParser","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"PlannerMdParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"LogicManager .left.\u003e Command : executes \u003e","lastModifiedDate":"2019-07-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager --\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Storage --[hidden] Model","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Command .[hidden]up.\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Command .right.\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"note right of XYZCommand: XYZCommand \u003d AddPatientCommand, \\nFindDoctorCommand, etc","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult : produces \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"pualixue":4,"-":42}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"Interface ReadOnlyPlannerMd \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-05-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"Enum State \u003c\u003cenumeration\u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"Class PlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"Class ReadOnlyPlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class Model","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"Class UniquePatientList","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"Class UniqueDoctorList","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"Class Patient","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"Class Doctor","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"Class DOB","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"Class Remark","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"Class Risk","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"Model .down.\u003e State","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"Model .left.\u003e ReadOnlyPlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"ModelManager -left-\u003e \"1\" PlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"PlannerMd .up.|\u003e ReadOnlyPlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"Patient .down.|\u003e Person","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"Doctor .down.|\u003e Person","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"PlannerMd *--\u003e \"1\" UniquePatientList","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"PlannerMd *--\u003e \"1\" UniqueDoctorList","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"UniquePatientList .down.|\u003e UniquePersonList","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"UniqueDoctorList .down.|\u003e UniquePersonList","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"UniquePatientList --\u003e \"~* all\" Patient","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"UniqueDoctorList --\u003e \"~* all\" Doctor","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Person *--\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"Person *--\u003e DOB","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"Person *--\u003e Remark","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"hpkoh"},"content":"Patient *--\u003e Risk","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"ModelManager --\u003e\"~* filtered\" Patient","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"hpkoh"},"content":"ModelManager --\u003e\"~* filtered\" Doctor","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hpkoh":29,"-":45}},{"path":"docs/diagrams/ParserClasses.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2021-07-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2021-07-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-07-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2021-07-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2021-07-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"package \"Parser classes\"{","lastModifiedDate":"2021-07-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Interface Parser \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"Class PlannerMdParser","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"Class AppointmentCommandParser","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"HiddenOutside ..\u003e PlannerMdParser","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"PlannerMdParser .down.\u003e XYZCommandParser: creates \u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"PlannerMdParser .down.\u003e AppointmentCommandParser: creates \u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"AppointmentCommandParser .down.\u003e XYZCommandParser: creates \u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"PlannerMdParser ..\u003e Command : returns \u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"XYZCommandParser .up.|\u003e Parser","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2021-07-31"}],"authorContributionMap":{"pualixue":7,"-":34}},{"path":"docs/diagrams/PropagateChangesDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"!include style.puml","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"participant \":ModelManager\" as ModelManager MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"participant \":PlannerMd\" as PlannerMd MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"participant \":UniquePersonList\u003cPatient\u003e\" as UniquePersonList MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"participant \":UniqueAppointmentList\" as UniqueAppointmentList MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"end box","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"[-\u003e ModelManager : deletePatient(target)","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"activate ModelManager","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"ModelManager -\u003e PlannerMd : removePatient(target)","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"activate PlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"PlannerMd -\u003e UniquePersonList : remove(target)","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"activate UniquePersonList","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"UniquePersonList -\u003e PlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"deactivate UniquePersonList","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"PlannerMd -\u003e ModelManager","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"deactivate PlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"ModelManager -\u003e PlannerMd : removeAppointmentWithPatient(target)","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"activate PlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"PlannerMd -\u003e UniqueAppointmentList : removeWithPatient(target)","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"activate UniqueAppointmentList","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"loop through entire list","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"    opt target matches   targetAppointment","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"        UniqueAppointmentList -\u003e UniqueAppointmentList: remove(targetAppointment)","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"        activate UniqueAppointmentList","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        UniqueAppointmentList -\u003e UniqueAppointmentList:","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        deactivate UniqueAppointmentList","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"    end","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"UniqueAppointmentList -\u003e PlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"deactivate UniqueAppointmentList","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"PlannerMd -\u003e ModelManager","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"deactivate PlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"[\u003c--ModelManager","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"deactivate ModelManager","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"hpkoh":50}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"package \"PlannerMD Storage\" #F4F6F6{","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"Interface PlannerMdStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"Class JsonPlannerMdStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"Class JsonSerializablePlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"class JsonAdaptedDoctor","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"class JsonAdaptedPatient","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"StorageManager -up-\u003e \"1\" PlannerMdStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"Storage -right-|\u003e PlannerMdStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"JsonPlannerMdStorage .up.|\u003e PlannerMdStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"JsonPlannerMdStorage ..\u003e JsonSerializablePlannerMd","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"JsonSerializablePlannerMd --\u003e \"*\" JsonAdaptedDoctor","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"JsonSerializablePlannerMd --\u003e \"*\" JsonAdaptedPatient","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"JsonAdaptedDoctor --|\u003e JsonAdaptedPerson","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"JsonAdaptedPatient --|\u003e JsonAdaptedPerson","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":34,"jiayi1129":14}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface Ui \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"Class PersonTab","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"Class DoctorListPanel","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"Class DoctorCard","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"Class PatientListPanel","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"Class PatientCard","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"Class AppointmentListPanel","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"Class AppointmentCard","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"MainWindow *-down--\u003e  \"1\" CommandBox","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"MainWindow *-down--\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"MainWindow *-down--\u003e \"1\" PersonTab","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"MainWindow -down--\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"MainWindow *-down--\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"MainWindow *-down--\u003e \"1\" AppointmentListPanel","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"AppointmentListPanel -down-\u003e \"*\" AppointmentCard","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"PersonTab -down-\u003e \"1\" DoctorListPanel","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"PersonTab -down-\u003e \"1\" PatientListPanel","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"PatientListPanel -down-\u003e \"*\" PatientCard","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"DoctorListPanel -down--\u003e \"*\" DoctorCard","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"ResultDisplay ----|\u003e UiPart","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"CommandBox ----|\u003e UiPart","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"PersonTab ----|\u003e UiPart","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"PatientListPanel ----|\u003e UiPart","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"DoctorListPanel ----|\u003e UiPart","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"PatientCard ----|\u003e UiPart","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"DoctorCard ----|\u003e UiPart","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"StatusBarFooter ----|\u003e UiPart","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"HelpWindow -down---|\u003e UiPart","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"AppointmentListPanel ----|\u003e UiPart","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"AppointmentCard ------|\u003e UiPart","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"PatientCard .\u003e Model","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"DoctorCard .\u003e Model","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Haozeee":32,"-":45}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"ecp -\u003e ec ++: index, editPatientDescriptor","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"-":20,"jiayi1129":1}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"title: PlannerMD","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T11-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T11-3/tp/actions)","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T11-3/tp/branch/master/graph/badge.svg?token\u003dIOPOXZTGCI)](https://codecov.io/gh/AY2122S1-CS2103T-T11-3/tp)","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"**PlannerMD is an all-in-one desktop application to help clinic receptionists manage patients and appointments in a clinic.** ","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"* If you are interested in using PlannerMD, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.md#quick-start).","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"* If you are interested about developing PlannerMD, the [**Developer Guide**](DeveloperGuide.md) is a good place to start.","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":14,"jiayi1129":6}},{"path":"docs/team/chuangzhequan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"title: Chuang Zhe Quan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"### Project: PlannerMD","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"PlannerMD is an all-in-one desktop application to help clinic receptionists manage patients and appointments in a clinic. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"* **New Feature**: ","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"* **Project management**:","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"  * Added Date of Birth field into the Person class and test cases to test the validity of the date ","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"  * Added command to add doctor","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"  * Added test cases for adding doctor","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"  * Added Appointment class test builders to be used for testing the Appointment class and its features","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"  * Added test cases for Appointment class","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"  * Added command to add appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"  * Added test cases for adding appointment","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"  * User Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    * Updated all commands relating to Patient\u0027s personal details with the Birth Date field","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"    * Added target user profile","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"    * Added value propositions","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"    * Added user stories","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"    * Added use cases","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    * Added Birth Date field to Person class","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    * Updated the Architecture section to reflect state changes between PATIENT and DOCTOR","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"* **Tools**:","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"  * Used Figma to design a [mockup](https://www.figma.com/file/LA0OQ6FUXr87X3lZMcs15E/CS2103T-tP?node-id\u003d0%3A1) for the application ","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"ChuangZheQuan":40,"jiayi1129":1}},{"path":"docs/team/haozeee.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"### Project: PlannerMD","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"PlannerMD is an all-in-one desktop application to help clinic receptionists manage patients and appointments in a clinic. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"* **New Feature**:","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"* **Project management**:","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    * User Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"        * Updated the user guide to match current project [\\#16](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/16)","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"* **Tools**:","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"Haozeee":23}},{"path":"docs/team/hpkoh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"title: Hong Po\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"### Project: PlannerMD","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"PlannerMD is an all-in-one desktop application to help clinic receptionists manage patients and appointments in a clinic. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"* **New Feature**:","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"* **Project management**:","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"    * User Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"        * Updated User Guide features for v1.2 [\\#18](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/18)","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"* **Tools**:","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"    * Used Figma to design a [mockup](https://www.figma.com/file/LA0OQ6FUXr87X3lZMcs15E/CS2103T-tP?node-id\u003d0%3A1) for the application","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"hpkoh":27}},{"path":"docs/team/jiayi1129.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"layout: page","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"title: Jia Yi\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"### Project: PlannerMD","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"PlannerMD is an all-in-one desktop application to help clinic receptionists manage patients and appointments in a clinic. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"* **New Feature**:","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"* **Project management**:","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"  * README:","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    * Updated documentation to match current project [\\#10](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/10)","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"  * Site Wide Settings:","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    * Updated `Documentation.md`, `_config.yml`, `_base.scss` and `index.md` files to match current project [\\#11](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/11)","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"* **Community**:","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"* **Tools**:","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"  * Used Figma to design a [mockup](https://www.figma.com/file/LA0OQ6FUXr87X3lZMcs15E/CS2103T-tP?node-id\u003d0%3A1) for the application ","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"jiayi1129":29}},{"path":"docs/team/pualixue.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"title: Li Xue\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"### Project: PlannerMD","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"PlannerMD is an all-in-one desktop application to help clinic receptionists manage patients and appointments in a clinic. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"* **New Feature**:","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"* **Project management**:","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"  * Allowed adding and deleting individual tags from a patient\u0027s record [\\#40](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/40)","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"    * User Guide:","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"      * Updated commands for adding and deleting tags [\\#40](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/40)","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"      * Added non-functional requirements and glossary [\\#20](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/20)","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"      * Updated use cases for adding and deleting tags [\\#40](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/40)","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"  * Reviewed Pull Requests: ","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"  [\\#14](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/14),","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"  [\\#15](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/15),","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"  [\\#18](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/18),","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"  [\\#19](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/19),","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"  [\\#34](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/34),","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"  [\\#35](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/35),","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"  [\\#38](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/38),","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"  [\\#39](https://github.com/AY2122S1-CS2103T-T11-3/tp/pull/39)","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"* **Tools**:","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"    * Used Figma to design a [mockup](https://www.figma.com/file/LA0OQ6FUXr87X3lZMcs15E/CS2103T-tP?node-id\u003d0%3A1) for the application","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"pualixue":40}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"Create a `RemarkCommandParser` class in the `seedu.plannermd.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"Create a new `Remark` in `seedu.plannermd.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2021-09-26"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"jiayi1129"},"content":"Simply add the following to [`seedu.plannermd.ui.PatientCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-09-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2021-08-01"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"-":395,"jiayi1129":6}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"The `address` field in `Person` is actually an instance of the `seedu.plannermd.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":111,"jiayi1129":1}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.plannermd.logic.Logic`.","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"A quick look at the `seedu.plannermd.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editedPersonDescriptor);","lastModifiedDate":"2021-10-02"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":298,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.FileUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"-":61,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"-":24,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Config;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Version;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.ConfigUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.StringUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.Logic;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.LogicManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.util.SampleDataUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.JsonPlannerMdStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.PlannerMdStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.Storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.StorageManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.UserPrefsStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.ui.Ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.ui.UiManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PlannerMD ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        PlannerMdStorage plannerMdStorage \u003d new JsonPlannerMdStorage(userPrefs.getPlannerMdFilePath());","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        storage \u003d new StorageManager(plannerMdStorage, userPrefsStorage);","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s plannermd and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"     * The data from the sample plannermd will be used instead if {@code storage}\u0027s plannermd is not found,","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"     * or an empty plannermd will be used instead if errors occur when reading {@code storage}\u0027s plannermd.","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        Optional\u003cReadOnlyPlannerMd\u003e plannerMdOptional;","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"        ReadOnlyPlannerMd initialData;","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"            plannerMdOptional \u003d storage.readPlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"            if (!plannerMdOptional.isPresent()) {","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"                logger.info(\"Data file not found. Will be starting with a sample PlannerMd\");","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"            initialData \u003d plannerMdOptional.orElseGet(SampleDataUtil::getSamplePlannerMd);","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty PlannerMd\");","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"            initialData \u003d new PlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty PlannerMd\");","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"            initialData \u003d new PlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        Model model \u003d new ModelManager(initialData, userPrefs);","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"        model.updateFilteredAppointmentList(Model.PREDICATE_SHOW_TODAY_APPOINTMENT);","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        return model;","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty PlannerMd\");","lastModifiedDate":"2021-09-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"        logger.info(\"Starting PlannerMd \" + MainApp.VERSION);","lastModifiedDate":"2021-09-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PlannerMD ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-09-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Haozeee":3,"-":138,"jiayi1129":44}},{"path":"src/main/java/seedu/plannermd/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":62,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":78,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private static final String LOG_FILE \u003d \"plannermd.log\";","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":110,"jiayi1129":2}},{"path":"src/main/java/seedu/plannermd/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_UNKNOWN_FLAG \u003d \"Unknown flag\";","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX \u003d \"The doctor index provided is invalid\";","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_DOCTORS_LISTED_OVERVIEW \u003d \"%1$d doctors listed!\";","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_APPOINTMENTS_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hpkoh":2,"Haozeee":2,"ChuangZheQuan":2,"-":10,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":115,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core.index;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"-":53,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.exceptions;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":10,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.exceptions;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":20,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.MainApp;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":40,"jiayi1129":2}},{"path":"src/main/java/seedu/plannermd/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":34,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Config;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":20,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":82,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":140,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":66,"jiayi1129":2}},{"path":"src/main/java/seedu/plannermd/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model.State;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"     * Returns the State of Model","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"     * @see seedu.plannermd.model.Model#getState()","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"    State getState();","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"     * Returns the PlannerMd.","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"     * @see seedu.plannermd.model.Model#getPlannerMd()","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    ReadOnlyPlannerMd getPlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    /** Returns an unmodifiable view of the filtered list of patients */","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    /** Returns an unmodifiable view of the filtered list of doctors */","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"    ObservableList\u003cDoctor\u003e getFilteredDoctorList();","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"     * Returns the user prefs\u0027 plannermd file path.","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    Path getPlannerMdFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"hpkoh":11,"-":36,"jiayi1129":19}},{"path":"src/main/java/seedu/plannermd/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.PlannerMdParser;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model.State;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.Storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    private final PlannerMdParser plannerMdParser;","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        plannerMdParser \u003d new PlannerMdParser();","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        Command command \u003d plannerMdParser.parseCommand(commandText, model.getState());","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"            storage.savePlannerMd(model.getPlannerMd());","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"    public State getState() {","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"        return model.getState();","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"    public ReadOnlyPlannerMd getPlannerMd() {","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        return model.getPlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        return model.getFilteredPatientList();","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":75,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"hpkoh"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"        return model.getFilteredDoctorList();","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"    public Path getPlannerMdFilePath() {","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        return model.getPlannerMdFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"hpkoh":13,"-":58,"jiayi1129":28}},{"path":"src/main/java/seedu/plannermd/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":" * Clears the PlannerMD.","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"PlannerMD has been cleared!\";","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"        model.setPlannerMd(new PlannerMd());","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":17,"jiayi1129":6}},{"path":"src/main/java/seedu/plannermd/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":17,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    /** The application should toggle the state. */","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"    private final boolean toggle;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean toggle, boolean exit) {","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"        this.toggle \u003d toggle;","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        this(feedbackToUser, false, false, false);","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"    public boolean isToggle() {","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"        return toggle;","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"hpkoh"},"content":"                \u0026\u0026 toggle \u003d\u003d otherCommandResult.toggle","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"        return Objects.hash(feedbackToUser, toggle, showHelp, exit);","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hpkoh":12,"-":67,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PlannerMD as requested ...\";","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"hpkoh":1,"-":15,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hpkoh":1,"-":18,"jiayi1129":2}},{"path":"src/main/java/seedu/plannermd/logic/commands/ToggleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"public class ToggleCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"    public static final String COMMAND_WORD \u003d \"toggle\";","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_TOGGLE_SUCCESS \u003d \"Showing list of %s\";","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"        model.toggleState();","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"        return new CommandResult(String.format(MESSAGE_TOGGLE_SUCCESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"                model.getState().toString().toLowerCase() + \"s\"), false, true, false);","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"hpkoh":17}},{"path":"src/main/java/seedu/plannermd/logic/commands/addcommand/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.addcommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":" * Represents an Add command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/logic/commands/addcommand/AddDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.logic.commands.addcommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddDoctorCommand extends AddCommand {","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a doctor to PlannerMD \"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Parameters: \" + PREFIX_NAME + \"NAME \" + PREFIX_PHONE + \"PHONE \" + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \" + PREFIX_BIRTH_DATE + \"BIRTH_DATE \"","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \" + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_NAME + \"John Doe \" + PREFIX_PHONE + \"98765432 \" + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \" + PREFIX_BIRTH_DATE + \"20/07/1964 \" + PREFIX_TAG","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"friends \" + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New doctor added: %1$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"This doctor already exists in PlannerMD\";","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    private final Doctor toAdd;","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"     * Creates an AddDoctorCommand to add the specified {@code Doctor}.","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"    public AddDoctorCommand(Doctor doctor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"        toAdd \u003d doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"        if (model.hasDoctor(toAdd)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"        model.addDoctor(toAdd);","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"                || (other instanceof AddDoctorCommand // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 toAdd.equals(((AddDoctorCommand) other).toAdd));","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"pualixue":2,"ChuangZheQuan":56}},{"path":"src/main/java/seedu/plannermd/logic/commands/addcommand/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.addcommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_RISK;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":" * Adds a patient to the plannermd.","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"public class AddPatientCommand extends AddCommand {","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to PlannerMD \"","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Parameters: \" + PREFIX_NAME + \"NAME \" + PREFIX_PHONE + \"PHONE \" + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \" + PREFIX_BIRTH_DATE + \"BIRTH_DATE \"","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \" + \"[\" + PREFIX_RISK + \"RISK]\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_NAME + \"John Doe \" + PREFIX_PHONE + \"98765432 \" + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \" + PREFIX_BIRTH_DATE + \"20/07/1964 \" + PREFIX_TAG","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"friends \" + PREFIX_TAG + \"owesMoney \" + PREFIX_RISK + \"LOW\";","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in PlannerMD\";","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    private final Patient toAdd;","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"     * Creates an AddPatientCommand to add the specified {@code Patient}.","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    public AddPatientCommand(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        if (model.hasPatient(toAdd)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"                || (other instanceof AddPatientCommand // instanceof handles nulls","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"                        \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd));","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"pualixue":2,"ChuangZheQuan":8,"jiayi1129":52}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"public class AddAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + FLAG_ADD + \": Adds an appointment to PlannerMD \"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Parameters: \" + PREFIX_PATIENT + \"INDEX_OF_PATIENT \" + PREFIX_DOCTOR + \"INDEX_OF_DOCTOR \"","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_START + \"DATE_AND_TIME\" + \" [\" + PREFIX_DURATION + \"DURATION\" + \"] \" + \"[\"","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_REMARK + \" REMARK\" + \"]\\n\" + \"Example: \" + COMMAND_WORD + \" \" + FLAG_ADD + \" \"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_PATIENT + \"1 \"","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_DOCTOR + \"2 \" + PREFIX_START + \"12/11/2021 20:00 \"","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_DURATION + \"45 \" + PREFIX_REMARK + \"Patient wants a blood test\";","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %s\\nThe appointment list now shows \"","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"            + \"all appointments on %s.\";","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_CONFLICTING_APPOINTMENT \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"            \"This appointment cannot be added due to a clash in timings.\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"                    + \"The clashing appointments are shown in the appointment list.\";","lastModifiedDate":"2021-10-30"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"            \"This appointment already exists in PlannerMD.\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"                    + \"The duplicate appointment is shown in the appointment list.\";","lastModifiedDate":"2021-10-30"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_WRONG_DATE_TIME \u003d \"Sessions should be of the format DD/MM/YYYY HH:MM \"","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"1. Must be a valid date\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"2. Day must be between 1-31 (0 in front of single digit is optional)\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"3. Month must be between 1-12 (0 in front of single digit is optional)\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"4. Year must be 4 characters.\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"            + \"5. Hour must be between 0-23\\n\"","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"            + \"6. Minute must be between 0-59.\";","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"    private Index patientIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"    private Index doctorIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"    private AddAppointmentDescriptor addAppointmentDescriptor;","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"     * Creates an AddAppointmentCommand to add the specified {@code Appointment}.","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"    public AddAppointmentCommand(Index patientIndex, Index doctorIndex,","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"                                 AddAppointmentDescriptor addAppointmentDescriptor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(patientIndex);","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(doctorIndex);","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(addAppointmentDescriptor);","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"        this.doctorIndex \u003d doctorIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"        this.addAppointmentDescriptor \u003d new AddAppointmentDescriptor(addAppointmentDescriptor);","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"        List\u003cPatient\u003e patientList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"        List\u003cDoctor\u003e doctorList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d patientList.size()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"        if (doctorIndex.getZeroBased() \u003e\u003d doctorList.size()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient patientToAdd \u003d patientList.get(patientIndex.getZeroBased());","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor doctorToAdd \u003d doctorList.get(doctorIndex.getZeroBased());","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment toAdd \u003d new Appointment(patientToAdd, doctorToAdd, addAppointmentDescriptor.getAppointmentDate(),","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"                addAppointmentDescriptor.getSession(), addAppointmentDescriptor.getRemark());","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"        if (model.hasAppointment(toAdd)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"            // Show the duplicate appointment to the user","lastModifiedDate":"2021-10-30"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"            model.updateFilteredAppointmentList(x -\u003e x.isSameAppointment(toAdd));","lastModifiedDate":"2021-10-30"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"        if (model.isClashAppointment(toAdd)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"            // Show the clashing appointment to the user","lastModifiedDate":"2021-10-30"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"            model.updateFilteredAppointmentList(x -\u003e x.isClash(toAdd));","lastModifiedDate":"2021-10-30"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new CommandException(MESSAGE_CONFLICTING_APPOINTMENT);","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"        model.addAppointment(toAdd);","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        LocalDate apptDate \u003d toAdd.getAppointmentDate().date;","lastModifiedDate":"2021-10-30"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        model.updateFilteredAppointmentList(AppointmentFilters.appointmentFiltersAtDate(apptDate).collectAllFilters());","lastModifiedDate":"2021-10-30"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd,","lastModifiedDate":"2021-10-30"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"                AppointmentDate.DISPLAYED_DATE_FORMATTER.format(toAdd.getAppointmentDate().date)));","lastModifiedDate":"2021-10-30"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 patientIndex.equals(((AddAppointmentCommand) other).patientIndex)","lastModifiedDate":"2021-10-23"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 doctorIndex.equals(((AddAppointmentCommand) other).doctorIndex)","lastModifiedDate":"2021-10-23"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 addAppointmentDescriptor.equals(((AddAppointmentCommand) other).addAppointmentDescriptor)","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"                );","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"    public String toString() {","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"        return (patientIndex.getZeroBased() + \" \" + doctorIndex.getZeroBased() + addAppointmentDescriptor.toString());","lastModifiedDate":"2021-10-23"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"ChuangZheQuan"},"content":"     * Stores the details of Appointment less patient and doctor.","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"    public static class AddAppointmentDescriptor {","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"        private AppointmentDate appointmentDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"        private Session session;","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"        private Remark remark;","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"        public AddAppointmentDescriptor() {","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"        /**","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"         */","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"        public AddAppointmentDescriptor(AddAppointmentCommand.AddAppointmentDescriptor toCopy) {","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"            setAppointmentDate(toCopy.appointmentDate);","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"            setSession(toCopy.session);","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"            setRemark(toCopy.remark);","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setAppointmentDate(AppointmentDate appointmentDate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"ChuangZheQuan"},"content":"            this.appointmentDate \u003d appointmentDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"        public AppointmentDate getAppointmentDate() {","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"ChuangZheQuan"},"content":"            return appointmentDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setSession(Session session) {","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"ChuangZheQuan"},"content":"            this.session \u003d session;","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"        public Session getSession() {","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"ChuangZheQuan"},"content":"            return session;","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setRemark(Remark remark) {","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"ChuangZheQuan"},"content":"            this.remark \u003d remark;","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"ChuangZheQuan"},"content":"        public Remark getRemark() {","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"            return remark;","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":171,"author":{"gitId":"ChuangZheQuan"},"content":"        public String toString() {","lastModifiedDate":"2021-10-23"},{"lineNumber":172,"author":{"gitId":"ChuangZheQuan"},"content":"            return appointmentDate.date + \" \" + session.start + \" \" + session.end + \" \"","lastModifiedDate":"2021-10-23"},{"lineNumber":173,"author":{"gitId":"ChuangZheQuan"},"content":"                    + session.duration.duration + \" \" + remark.value;","lastModifiedDate":"2021-10-23"},{"lineNumber":174,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":175,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":176,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":177,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-22"},{"lineNumber":178,"author":{"gitId":"ChuangZheQuan"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-22"},{"lineNumber":179,"author":{"gitId":"ChuangZheQuan"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-22"},{"lineNumber":180,"author":{"gitId":"ChuangZheQuan"},"content":"                return true;","lastModifiedDate":"2021-10-22"},{"lineNumber":181,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":182,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-22"},{"lineNumber":184,"author":{"gitId":"ChuangZheQuan"},"content":"            if (!(other instanceof AddAppointmentCommand.AddAppointmentDescriptor)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":185,"author":{"gitId":"ChuangZheQuan"},"content":"                return false;","lastModifiedDate":"2021-10-22"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":187,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":188,"author":{"gitId":"ChuangZheQuan"},"content":"            // state check","lastModifiedDate":"2021-10-22"},{"lineNumber":189,"author":{"gitId":"ChuangZheQuan"},"content":"            AddAppointmentCommand.AddAppointmentDescriptor e \u003d (AddAppointmentCommand.AddAppointmentDescriptor) other;","lastModifiedDate":"2021-10-22"},{"lineNumber":190,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":191,"author":{"gitId":"ChuangZheQuan"},"content":"            return getSession().equals(e.getSession())","lastModifiedDate":"2021-10-22"},{"lineNumber":192,"author":{"gitId":"ChuangZheQuan"},"content":"                    \u0026\u0026 getAppointmentDate().equals(e.getAppointmentDate());","lastModifiedDate":"2021-10-23"},{"lineNumber":193,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":194,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":195,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":11,"Haozeee":15,"pualixue":2,"ChuangZheQuan":167}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/AppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_DELETE;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_EDIT;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"public abstract class AppointmentCommand extends Command {","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    public static final String COMMAND_WORD \u003d \"appt\";","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"            COMMAND_WORD + \"{FLAG} {ARGUMENTS}: Executes appointment command given by flag tag\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"                    + \"Commands: \\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"                    + FLAG_ADD + PREFIX_PATIENT + \"INDEX_OF_PATIENT \" + PREFIX_DOCTOR + \"INDEX_OF_DOCTOR \"","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"                    + PREFIX_START + \"DATE_AND_TIME\" + \"[\" + PREFIX_DURATION + \"DURATION\" + \"]\" + \"[\"","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"                    + PREFIX_REMARK + \" REMARK\" + \"]\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"                    + COMMAND_WORD + \" \" + FLAG_EDIT","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"                    + \" : Edits the details of the appointment identified \"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"                    + \"by the index number used in the displayed appointment list. \"","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"                    + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"                    + \"Parameters: INDEX (must be a positive integer) \" + \"[\" + PREFIX_PATIENT + \"PATIENT_INDEX] \"","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"                    + \"[\" + PREFIX_DOCTOR + \"DOCTOR_INDEX] \" + \"[\" + PREFIX_START + \"DATE TIME] \"","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"                    + \"[\" + PREFIX_DURATION + \"DURATION] \" + \"[\" + PREFIX_REMARK + \"REMARK]\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"                    + FLAG_DELETE + \"INDEX_OF_PATIENT\\n\";","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"            //FILTER","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"            //FILTER UPCOMING","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"            //LIST","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"            //TODO: Append Commands Usages","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":15,"pualixue":19,"ChuangZheQuan":5}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/AppointmentFilters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentContainsDoctorPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentContainsPatientPredicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentIsAfterPredicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentIsBeforePredicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":" * Stores the details of all the filters to filter the appointment list in plannermd with.","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"public class AppointmentFilters {","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     * Appointment starts after a certain point in time.","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    private Predicate\u003cAppointment\u003e startAfter;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * Appointment starts before a certain point in time.","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    private Predicate\u003cAppointment\u003e startBefore;","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     * Appointment contains a patient whose names matches a given set of keywords.","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    private Predicate\u003cAppointment\u003e hasPatient;","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"     * Appointment contains a doctor whose names matches a given set of keywords.","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    private Predicate\u003cAppointment\u003e hasDoctor;","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    private AppointmentFilters() {}","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     * Initialises a {@code AppointmentFilters} that filters through all appointments in the","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     * plannermd.","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    public static AppointmentFilters allAppointmentsFilter() {","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        return new AppointmentFilters();","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"     * Initialises a {@code AppointmentFilters} that filters through all upcoming appointments in","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"     * the plannermd.","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    public static AppointmentFilters upcomingAppointmentsFilter() {","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFilters();","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        filter.setStartAfter(new AppointmentIsAfterPredicate(LocalDateTime.now()));","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        return filter;","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"     * Initialises a {@code AppointmentFilters} that only shows appointments for the current day.","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    public static AppointmentFilters todayAppointmentFilter() {","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFilters();","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        filter.setStartAfter(new AppointmentIsAfterPredicate(LocalDate.now()));","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        filter.setStartBefore(new AppointmentIsBeforePredicate(LocalDate.now()));","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        return filter;","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"     * Initialises a {@code AppointmentFilters} that only shows appointments on the {@code localDate}.","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"    public static AppointmentFilters appointmentFiltersAtDate(LocalDate localDate) {","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFilters();","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        filters.setStartAfter(new AppointmentIsAfterPredicate(localDate));","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        filters.setStartBefore(new AppointmentIsBeforePredicate(localDate));","lastModifiedDate":"2021-10-30"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        return filters;","lastModifiedDate":"2021-10-30"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"     * Copy constructor.","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"    public static AppointmentFilters copyAppointmentFilters(AppointmentFilters filterToCopy) {","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFilters();","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        filters.startAfter \u003d filterToCopy.startAfter;","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        filters.startBefore \u003d filterToCopy.startBefore;","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        filters.hasPatient \u003d filterToCopy.hasPatient;","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        filters.hasDoctor \u003d filterToCopy.hasDoctor;","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        return filters;","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"    public void setHasPatient(AppointmentContainsPatientPredicate predicate) {","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        hasPatient \u003d predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"    public void setHasDoctor(AppointmentContainsDoctorPredicate predicate) {","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        hasDoctor \u003d predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"    public void setStartAfter(AppointmentIsAfterPredicate predicate) {","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        startAfter \u003d predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    public void setStartBefore(AppointmentIsBeforePredicate predicate) {","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        startBefore \u003d predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"     * Collects all the given filters and convert them into a single predicate","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"     * that can be used to filter the {@code Appointment} list.","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"    public Predicate\u003cAppointment\u003e collectAllFilters() {","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"        List\u003cPredicate\u003cAppointment\u003e\u003e allPredicates \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"                Arrays.asList(startAfter, startBefore, hasPatient, hasDoctor));","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        return allPredicates.stream().map(x -\u003e Optional.ofNullable(x).orElse(y -\u003e true))","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"                .reduce(Predicate::and).orElse(x -\u003e true);","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"     * Converts the filters into a String which when parsed with a {@code FilterAppointmentCommandParser}","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"     * gives the same filter.","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"    public String getFilterDetails() {","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        List\u003cPredicate\u003cAppointment\u003e\u003e allPredicates \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"                Arrays.asList(startAfter, startBefore, hasPatient, hasDoctor));","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"        return allPredicates.stream().map(x -\u003e Optional.ofNullable(x).map(Object::toString).orElse(\"\"))","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"                .collect(Collectors.joining()).trim();","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"     * Converts the filters into a String which when parsed with a {@code FilterUpcomingAppointmentCommandParser}","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"     * gives the same filter.","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"    public String getUpcomingFilterDetails() {","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"        List\u003cPredicate\u003cAppointment\u003e\u003e allPredicates \u003d new ArrayList\u003c\u003e(Arrays.asList(hasPatient, hasDoctor));","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"        return allPredicates.stream().map(x -\u003e Optional.ofNullable(x).map(Object::toString).orElse(\"\"))","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"                .collect(Collectors.joining()).trim();","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":149,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":150,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":151,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-10-17"},{"lineNumber":152,"author":{"gitId":"Haozeee"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-10-20"},{"lineNumber":153,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":154,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":155,"author":{"gitId":"Haozeee"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":156,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-10-20"},{"lineNumber":157,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":158,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d (AppointmentFilters) o;","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"Haozeee"},"content":"        return Objects.equals(startAfter, filters.startAfter) \u0026\u0026 Objects.equals(startBefore, filters.startBefore)","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 Objects.equals(hasPatient, filters.hasPatient) \u0026\u0026 Objects.equals(hasDoctor, filters.hasDoctor);","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":162,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":163,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"Haozeee":163}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"public class DeleteAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"        return null;","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":13}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_EDIT;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import java.util.List;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":" * Edits the details of an existing appointment in the plannermd.","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"public class EditAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + FLAG_EDIT","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"            + \" : Edits the details of the appointment identified \"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"            + \"by the index number used in the displayed appointment list. \"","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"            + \"Parameters: INDEX (must be a positive integer) \" + \"[\" + PREFIX_PATIENT + \"PATIENT_INDEX] \"","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"            + \"[\" + PREFIX_DOCTOR + \"DOCTOR_INDEX] \" + \"[\" + PREFIX_START + \"DATE TIME] \"","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"            + \"[\" + PREFIX_DURATION + \"DURATION] \" + \"[\" + PREFIX_REMARK + \"REMARK]\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + FLAG_EDIT + \" 1 \"","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"            + PREFIX_PATIENT + \"2 \" + PREFIX_START + \"15/2/2022 10:00 \" + PREFIX_DURATION + \"30\";","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_CLASHING_APPOINTMENT \u003d \"This appointment clashes with an existing appointment.\";","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_INVALID_START \u003d \"Start date/time should be of the format DD/MM/YYYY HH:MM \"","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"            + \"1. Day must be between 1-31 (0 in front of single digit is optional)\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"            + \"2. Month must be between 1-12 (0 in front of single digit is optional)\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"            + \"3. Year must be 4 characters\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"            + \"4. Hour must be between 0-23\\n\"","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"            + \"5. Minute must be between 0-59.\";","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"    private final Index index;","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"    private final EditAppointmentDescriptor editAppointmentDescriptor;","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"     * @param index of the appointment in the filtered appointment list to edit","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"     * @param editAppointmentDescriptor details to edit the appointment with","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        requireNonNull(editAppointmentDescriptor);","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        Appointment appointmentToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor, model);","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        if (model.isClashAppointmentForEdited(editedAppointment, appointmentToEdit)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"            throw new CommandException(MESSAGE_CLASHING_APPOINTMENT);","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"        model.setAppointment(appointmentToEdit, editedAppointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"     * Creates and returns an {@code Appointment} with the details of","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"     * {@code appointmentToEdit} edited with {@code editAppointmentDescriptor}.","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"    private static Appointment createEditedAppointment(","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"            Appointment appointmentToEdit, EditAppointmentDescriptor editAppointmentDescriptor, Model model)","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"            throws CommandException {","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"        assert appointmentToEdit !\u003d null;","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"        Patient updatedPatient;","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        List\u003cPatient\u003e lastShownPatientList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"        Optional\u003cIndex\u003e optionalPatientIndex \u003d editAppointmentDescriptor.getPatientIndex();","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        if (optionalPatientIndex.isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"            int patientIndex \u003d optionalPatientIndex.get().getZeroBased();","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"            if (patientIndex \u003e\u003d lastShownPatientList.size()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"            updatedPatient \u003d lastShownPatientList.get(patientIndex);","lastModifiedDate":"2021-10-23"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"        } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"            updatedPatient \u003d appointmentToEdit.getPatient();","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"        Doctor updatedDoctor;","lastModifiedDate":"2021-10-23"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"        List\u003cDoctor\u003e lastShownDoctorList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-23"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"        Optional\u003cIndex\u003e optionalDoctorIndex \u003d editAppointmentDescriptor.getDoctorIndex();","lastModifiedDate":"2021-10-23"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"        if (optionalDoctorIndex.isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"            int doctorIndex \u003d optionalDoctorIndex.get().getZeroBased();","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"            if (doctorIndex \u003e\u003d lastShownDoctorList.size()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-23"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"            updatedDoctor \u003d lastShownDoctorList.get(doctorIndex);","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"        } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"            updatedDoctor \u003d appointmentToEdit.getDoctor();","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"        AppointmentDate updatedAppointmentDate \u003d editAppointmentDescriptor.getAppointmentDate()","lastModifiedDate":"2021-10-23"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"                .orElse(appointmentToEdit.getAppointmentDate());","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"        String startTime \u003d editAppointmentDescriptor.getStartTime()","lastModifiedDate":"2021-10-23"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"                .orElse(appointmentToEdit.getSession().getFormattedStartTime());","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"        Duration duration \u003d editAppointmentDescriptor.getDuration()","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"                .orElse(appointmentToEdit.getSession().duration);","lastModifiedDate":"2021-10-23"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"        Session updatedSession \u003d new Session(startTime, duration);","lastModifiedDate":"2021-10-23"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"        if (!updatedSession.isEndWithinSameDay()) {","lastModifiedDate":"2021-10-30"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"            throw new CommandException(Session.MESSAGE_END_WITHIN_SAME_DAY);","lastModifiedDate":"2021-10-30"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"        Remark updatedRemark \u003d editAppointmentDescriptor.getRemark().orElse(appointmentToEdit.getRemark());","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"        return new Appointment(updatedPatient, updatedDoctor, updatedAppointmentDate, updatedSession, updatedRemark);","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-23"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-23"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-10-23"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-23"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"        if (!(other instanceof EditAppointmentCommand)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-10-23"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"        // state check","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;","lastModifiedDate":"2021-10-23"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"        return index.equals(e.index) \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);","lastModifiedDate":"2021-10-23"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":158,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":159,"author":{"gitId":"pualixue"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will","lastModifiedDate":"2021-10-23"},{"lineNumber":160,"author":{"gitId":"pualixue"},"content":"     * replace the corresponding field value of the appointment.","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":162,"author":{"gitId":"pualixue"},"content":"    public static class EditAppointmentDescriptor {","lastModifiedDate":"2021-10-23"},{"lineNumber":163,"author":{"gitId":"pualixue"},"content":"        private Index patientIndex;","lastModifiedDate":"2021-10-23"},{"lineNumber":164,"author":{"gitId":"pualixue"},"content":"        private Index doctorIndex;","lastModifiedDate":"2021-10-23"},{"lineNumber":165,"author":{"gitId":"pualixue"},"content":"        private AppointmentDate appointmentDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":166,"author":{"gitId":"pualixue"},"content":"        private String startTime;","lastModifiedDate":"2021-10-23"},{"lineNumber":167,"author":{"gitId":"pualixue"},"content":"        private Duration duration;","lastModifiedDate":"2021-10-23"},{"lineNumber":168,"author":{"gitId":"pualixue"},"content":"        private Remark remark;","lastModifiedDate":"2021-10-23"},{"lineNumber":169,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"        public EditAppointmentDescriptor() {","lastModifiedDate":"2021-10-23"},{"lineNumber":171,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":172,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":173,"author":{"gitId":"pualixue"},"content":"        /**","lastModifiedDate":"2021-10-23"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-23"},{"lineNumber":175,"author":{"gitId":"pualixue"},"content":"         */","lastModifiedDate":"2021-10-23"},{"lineNumber":176,"author":{"gitId":"pualixue"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {","lastModifiedDate":"2021-10-23"},{"lineNumber":177,"author":{"gitId":"pualixue"},"content":"            setPatientIndex(toCopy.patientIndex);","lastModifiedDate":"2021-10-23"},{"lineNumber":178,"author":{"gitId":"pualixue"},"content":"            setDoctorIndex(toCopy.doctorIndex);","lastModifiedDate":"2021-10-23"},{"lineNumber":179,"author":{"gitId":"pualixue"},"content":"            setAppointmentDate(toCopy.appointmentDate);","lastModifiedDate":"2021-10-23"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"            setStartTime(toCopy.startTime);","lastModifiedDate":"2021-10-23"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"            setDuration(toCopy.duration);","lastModifiedDate":"2021-10-23"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"            setRemark(toCopy.remark);","lastModifiedDate":"2021-10-23"},{"lineNumber":183,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":184,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":185,"author":{"gitId":"pualixue"},"content":"        /**","lastModifiedDate":"2021-10-23"},{"lineNumber":186,"author":{"gitId":"pualixue"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-23"},{"lineNumber":187,"author":{"gitId":"pualixue"},"content":"         */","lastModifiedDate":"2021-10-23"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-23"},{"lineNumber":189,"author":{"gitId":"pualixue"},"content":"            return CollectionUtil.isAnyNonNull(patientIndex, doctorIndex, appointmentDate, startTime, duration, remark);","lastModifiedDate":"2021-10-23"},{"lineNumber":190,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":191,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":192,"author":{"gitId":"pualixue"},"content":"        public void setPatientIndex(Index patientIndex) {","lastModifiedDate":"2021-10-23"},{"lineNumber":193,"author":{"gitId":"pualixue"},"content":"            this.patientIndex \u003d patientIndex;","lastModifiedDate":"2021-10-23"},{"lineNumber":194,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":195,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":196,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cIndex\u003e getPatientIndex() {","lastModifiedDate":"2021-10-23"},{"lineNumber":197,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(patientIndex);","lastModifiedDate":"2021-10-23"},{"lineNumber":198,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":199,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":200,"author":{"gitId":"pualixue"},"content":"        public void setDoctorIndex(Index doctorIndex) {","lastModifiedDate":"2021-10-23"},{"lineNumber":201,"author":{"gitId":"pualixue"},"content":"            this.doctorIndex \u003d doctorIndex;","lastModifiedDate":"2021-10-23"},{"lineNumber":202,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":203,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":204,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cIndex\u003e getDoctorIndex() {","lastModifiedDate":"2021-10-23"},{"lineNumber":205,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(doctorIndex);","lastModifiedDate":"2021-10-23"},{"lineNumber":206,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":207,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":208,"author":{"gitId":"pualixue"},"content":"        public void setAppointmentDate(AppointmentDate appointmentDate) {","lastModifiedDate":"2021-10-23"},{"lineNumber":209,"author":{"gitId":"pualixue"},"content":"            this.appointmentDate \u003d appointmentDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":210,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":211,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cAppointmentDate\u003e getAppointmentDate() {","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(appointmentDate);","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"pualixue"},"content":"        public void setStartTime(String startTime) {","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"pualixue"},"content":"            this.startTime \u003d startTime;","lastModifiedDate":"2021-10-23"},{"lineNumber":218,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":219,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":220,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cString\u003e getStartTime() {","lastModifiedDate":"2021-10-23"},{"lineNumber":221,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(startTime);","lastModifiedDate":"2021-10-23"},{"lineNumber":222,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":223,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":224,"author":{"gitId":"pualixue"},"content":"        public void setDuration(Duration duration) {","lastModifiedDate":"2021-10-23"},{"lineNumber":225,"author":{"gitId":"pualixue"},"content":"            this.duration \u003d duration;","lastModifiedDate":"2021-10-23"},{"lineNumber":226,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":227,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":228,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cDuration\u003e getDuration() {","lastModifiedDate":"2021-10-23"},{"lineNumber":229,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(duration);","lastModifiedDate":"2021-10-23"},{"lineNumber":230,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":231,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":232,"author":{"gitId":"pualixue"},"content":"        public void setRemark(Remark remark) {","lastModifiedDate":"2021-10-23"},{"lineNumber":233,"author":{"gitId":"pualixue"},"content":"            this.remark \u003d remark;","lastModifiedDate":"2021-10-23"},{"lineNumber":234,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":235,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":236,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cRemark\u003e getRemark() {","lastModifiedDate":"2021-10-23"},{"lineNumber":237,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(remark);","lastModifiedDate":"2021-10-23"},{"lineNumber":238,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":239,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":240,"author":{"gitId":"pualixue"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":241,"author":{"gitId":"pualixue"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-23"},{"lineNumber":242,"author":{"gitId":"pualixue"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-23"},{"lineNumber":243,"author":{"gitId":"pualixue"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-23"},{"lineNumber":244,"author":{"gitId":"pualixue"},"content":"                return true;","lastModifiedDate":"2021-10-23"},{"lineNumber":245,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":246,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":247,"author":{"gitId":"pualixue"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-23"},{"lineNumber":248,"author":{"gitId":"pualixue"},"content":"            if (!(other instanceof EditAppointmentDescriptor)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":249,"author":{"gitId":"pualixue"},"content":"                return false;","lastModifiedDate":"2021-10-23"},{"lineNumber":250,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":251,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":252,"author":{"gitId":"pualixue"},"content":"            // state check","lastModifiedDate":"2021-10-23"},{"lineNumber":253,"author":{"gitId":"pualixue"},"content":"            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;","lastModifiedDate":"2021-10-23"},{"lineNumber":254,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":255,"author":{"gitId":"pualixue"},"content":"            return getPatientIndex().equals(e.getPatientIndex()) \u0026\u0026 getDoctorIndex().equals(e.getDoctorIndex())","lastModifiedDate":"2021-10-23"},{"lineNumber":256,"author":{"gitId":"pualixue"},"content":"                    \u0026\u0026 getAppointmentDate().equals(e.getAppointmentDate()) \u0026\u0026 getStartTime().equals(e.getStartTime())","lastModifiedDate":"2021-10-23"},{"lineNumber":257,"author":{"gitId":"pualixue"},"content":"                    \u0026\u0026 getDuration().equals(e.getDuration()) \u0026\u0026 getRemark().equals(e.getRemark());","lastModifiedDate":"2021-10-23"},{"lineNumber":258,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":259,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":260,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":12,"pualixue":248}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/FilterAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_END;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * Filters the appointment records in the plannermd.","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public class FilterAppointmentCommand extends FilterCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    public static final String COMMAND_WORD \u003d \"appt -f\";","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter all appointments according to the\"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"            + \" filters parameters given.\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"            + \"Parameters: [\" + PREFIX_PATIENT + \"PATIENT NAME] [\" + PREFIX_DOCTOR + \"DOCTOR_NAME] [\"","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"            + PREFIX_START + \"START DATE] [\" + PREFIX_END + \"END DATE]\\n\" + \"Example: \"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"            + COMMAND_WORD + \" \" + PREFIX_PATIENT + \"Alice \" + PREFIX_DOCTOR + \"Bob \"","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"            + PREFIX_START + \"15/10/2021 \" + PREFIX_END + \"18/10/2021\";","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     * Creates a new FilterAppointmentCommand object.","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     * @param filters The filter to be applied tp the appointment list in the plannermd.","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    public FilterAppointmentCommand(AppointmentFilters filters) {","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        super(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        if (!(other instanceof FilterAppointmentCommand)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        // state check","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand e \u003d (FilterAppointmentCommand) other;","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        return getFilters().equals(e.getFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":7,"Haozeee":40}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/FilterCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" * Represents an Filter command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"public abstract class FilterCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    private AppointmentFilters filters;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    protected FilterCommand(AppointmentFilters filters) {","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        this.filters \u003d filters;","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        Predicate\u003cAppointment\u003e allFilters \u003d filters.collectAllFilters();","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        model.updateFilteredAppointmentList(allFilters);","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        return new CommandResult(String.format(Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW,","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"                model.getFilteredAppointmentList().size()));","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    protected AppointmentFilters getFilters() {","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        return filters;","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"Haozeee":33}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/FilterUpcomingAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * Filters the appointment records in the plannermd, showing only upcoming appointments.","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"public class FilterUpcomingAppointmentCommand extends FilterCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    public static final String COMMAND_WORD \u003d \"appt -u\";","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter all upcoming appointments according to the\"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"            + \" filters parameters given.\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"            + \"Parameters: [\" + PREFIX_PATIENT + \"PATIENT NAME] [\" + PREFIX_DOCTOR + \"DOCTOR_NAME]\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PATIENT + \"Alice \" + PREFIX_DOCTOR + \"Bob\";","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * Creates a new FilterUpcomingAppointmentCommand.","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * @param filters The filter to apply to the appointment list in the plannermd.","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public FilterUpcomingAppointmentCommand(AppointmentFilters filters) {","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        super(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        if (!(other instanceof FilterUpcomingAppointmentCommand)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        // state check","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand e \u003d (FilterUpcomingAppointmentCommand) other;","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        return getFilters().equals(e.getFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":7,"Haozeee":36}},{"path":"src/main/java/seedu/plannermd/logic/commands/apptcommand/ListAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * Sets the appointment tab in the plannermd to display its default layout","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * which shows all the appointments on the current day.","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"public class ListAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    public static final String COMMAND_WORD \u003d \"appt -l\";","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments for today.\";","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"        model.updateFilteredAppointmentList(AppointmentFilters.todayAppointmentFilter().collectAllFilters());","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":12,"Haozeee":9}},{"path":"src/main/java/seedu/plannermd/logic/commands/deletecommand/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.logic.commands.deletecommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":" * Deletes a appointment from the appointment records as identified using it\u0027s displayed index","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":" * from plannermd.","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"public class DeleteAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String COMMAND_WORD \u003d \"appt -d\";","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"            + \": Deletes the appointment identified by the index number used in the displayed appointment list.\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"    public DeleteAppointmentCommand(Index targetIndex) {","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment appointmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"        model.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"Haozeee":2,"ChuangZheQuan":54}},{"path":"src/main/java/seedu/plannermd/logic/commands/deletecommand/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.deletecommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":" * Represents a Delete command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"public abstract class DeleteCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/logic/commands/deletecommand/DeleteDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.deletecommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":" * Deletes a doctor from the doctor records as identified using it\u0027s displayed index","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":" * from plannermd.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"public class DeleteDoctorCommand extends DeleteCommand {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"            + \": Deletes the doctor identified by the index number used in the displayed doctor list.\\n\"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_DELETE_DOCTOR_SUCCESS \u003d \"Deleted Doctor: %1$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    public DeleteDoctorCommand(Index targetIndex) {","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        Doctor doctorToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"        model.deleteAppointmentsWithPerson(doctorToDelete);","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"        model.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete));","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"                || (other instanceof DeleteDoctorCommand // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteDoctorCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"Haozeee":53,"hpkoh":3}},{"path":"src/main/java/seedu/plannermd/logic/commands/deletecommand/DeletePatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.deletecommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":" * Deletes a patient identified using it\u0027s displayed index from the plannermd.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"public class DeletePatientCommand extends DeleteCommand {","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    public DeletePatientCommand(Index targetIndex) {","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"        model.deleteAppointmentsWithPerson(patientToDelete);","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"        model.deletePatient(patientToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"                || (other instanceof DeletePatientCommand // instanceof handles nulls","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"                \u0026\u0026 targetIndex.equals(((DeletePatientCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":3,"jiayi1129":51}},{"path":"src/main/java/seedu/plannermd/logic/commands/editcommand/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.editcommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":" * Represents an Edit command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"public abstract class EditCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/logic/commands/editcommand/EditDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.logic.commands.editcommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":" * Edits the details of an existing doctor in the plannermd.","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"public class EditDoctorCommand extends EditCommand {","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the doctor identified \"","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"            + \"by the index number used in the displayed doctor list. \"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"            + \"Parameters: INDEX (must be a positive integer) \" + \"[\" + PREFIX_NAME + \"NAME] \" + \"[\" + PREFIX_PHONE","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"            + \"PHONE] \" + \"[\" + PREFIX_EMAIL + \"EMAIL] \" + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \" + \"[\" + PREFIX_BIRTH_DATE","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"BIRTH_DATE] \" + \"[\" + PREFIX_TAG + \"TAG]...\\n\" + \"Example: \"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"            + COMMAND_WORD + \" 1 \" + PREFIX_PHONE + \"91234567 \" + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_EDIT_DOCTOR_SUCCESS \u003d \"Edited Doctor: %1$s\";","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"This doctor already exists in the plannermd.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"    private final Index index;","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"    private final EditDoctorDescriptor editDoctorDescriptor;","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"     * @param index of the doctor in the filtered doctor list to edit","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"     * @param editDoctorDescriptor details to edit the doctor with","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"    public EditDoctorCommand(Index index, EditDoctorDescriptor editDoctorDescriptor) {","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        requireNonNull(editDoctorDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        this.editDoctorDescriptor \u003d new EditDoctorDescriptor(editDoctorDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        Doctor doctorToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        Doctor editedDoctor \u003d createEditedDoctor(doctorToEdit, editDoctorDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        if (!doctorToEdit.isSamePerson(editedDoctor) \u0026\u0026 model.hasDoctor(editedDoctor)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        model.setDoctor(doctorToEdit, editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"hpkoh"},"content":"        model.editAppointmentsWithPerson(doctorToEdit, editedDoctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor));","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"     * Creates and returns a {@code Doctor} with the details of","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"     * {@code doctorToEdit} edited with {@code editDoctorDescriptor}.","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"    private static Doctor createEditedDoctor(Doctor doctorToEdit, EditDoctorDescriptor editDoctorDescriptor) {","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"        assert doctorToEdit !\u003d null;","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"        Name updatedName \u003d editDoctorDescriptor.getName().orElse(doctorToEdit.getName());","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"        Phone updatedPhone \u003d editDoctorDescriptor.getPhone().orElse(doctorToEdit.getPhone());","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"        Email updatedEmail \u003d editDoctorDescriptor.getEmail().orElse(doctorToEdit.getEmail());","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        Address updatedAddress \u003d editDoctorDescriptor.getAddress().orElse(doctorToEdit.getAddress());","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"        BirthDate updatedBirthDate \u003d editDoctorDescriptor.getBirthDate().orElse(doctorToEdit.getBirthDate());","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        Set\u003cTag\u003e updatedTags \u003d editDoctorDescriptor.getTags().orElse(doctorToEdit.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"        Remark updatedRemark \u003d doctorToEdit.getRemark();","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"        return new Doctor(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedBirthDate, updatedRemark,","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"                updatedTags);","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"        if (!(other instanceof EditDoctorCommand)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"        // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand e \u003d (EditDoctorCommand) other;","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"        return index.equals(e.index) \u0026\u0026 editDoctorDescriptor.equals(e.editDoctorDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"     * Stores the details to edit the doctor with. Each non-empty field value will","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"     * replace the corresponding field value of the doctor.","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"    public static class EditDoctorDescriptor {","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"        private Name name;","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"        private Phone phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"        private Email email;","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"        private Address address;","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"        private BirthDate birthDate;","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"        private Remark remark;","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"        public EditDoctorDescriptor() {","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"        /**","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"         * Copy constructor. A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"         */","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"        public EditDoctorDescriptor(EditDoctorDescriptor toCopy) {","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"            setRemark(toCopy.remark);","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"            setBirthDate(toCopy.birthDate);","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"        /**","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"         */","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, birthDate, tags);","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"pualixue"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"pualixue"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"pualixue"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"pualixue"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":171,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2021-10-09"},{"lineNumber":173,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"pualixue"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2021-10-09"},{"lineNumber":176,"author":{"gitId":"pualixue"},"content":"            this.email \u003d email;","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"pualixue"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"pualixue"},"content":"            this.address \u003d address;","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":190,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"pualixue"},"content":"        public void setBirthDate(BirthDate birthDate) {","lastModifiedDate":"2021-10-09"},{"lineNumber":192,"author":{"gitId":"pualixue"},"content":"            this.birthDate \u003d birthDate;","lastModifiedDate":"2021-10-09"},{"lineNumber":193,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":194,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cBirthDate\u003e getBirthDate() {","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(birthDate);","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"pualixue"},"content":"        public void setRemark(Remark remark) {","lastModifiedDate":"2021-10-09"},{"lineNumber":200,"author":{"gitId":"pualixue"},"content":"            this.remark \u003d remark;","lastModifiedDate":"2021-10-09"},{"lineNumber":201,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":203,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cRemark\u003e getRemark() {","lastModifiedDate":"2021-10-09"},{"lineNumber":204,"author":{"gitId":"pualixue"},"content":"            return Optional.ofNullable(remark);","lastModifiedDate":"2021-10-09"},{"lineNumber":205,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":206,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":207,"author":{"gitId":"pualixue"},"content":"        /**","lastModifiedDate":"2021-10-09"},{"lineNumber":208,"author":{"gitId":"pualixue"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of","lastModifiedDate":"2021-10-09"},{"lineNumber":209,"author":{"gitId":"pualixue"},"content":"         * {@code tags} is used internally.","lastModifiedDate":"2021-10-09"},{"lineNumber":210,"author":{"gitId":"pualixue"},"content":"         */","lastModifiedDate":"2021-10-09"},{"lineNumber":211,"author":{"gitId":"pualixue"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"pualixue"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-10-09"},{"lineNumber":213,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":214,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":215,"author":{"gitId":"pualixue"},"content":"        /**","lastModifiedDate":"2021-10-09"},{"lineNumber":216,"author":{"gitId":"pualixue"},"content":"         * Returns an unmodifiable tag set, which throws","lastModifiedDate":"2021-10-09"},{"lineNumber":217,"author":{"gitId":"pualixue"},"content":"         * {@code UnsupportedOperationException} if modification is attempted. Returns","lastModifiedDate":"2021-10-09"},{"lineNumber":218,"author":{"gitId":"pualixue"},"content":"         * {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-10-09"},{"lineNumber":219,"author":{"gitId":"pualixue"},"content":"         */","lastModifiedDate":"2021-10-09"},{"lineNumber":220,"author":{"gitId":"pualixue"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2021-10-09"},{"lineNumber":221,"author":{"gitId":"pualixue"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2021-10-09"},{"lineNumber":222,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":223,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":224,"author":{"gitId":"pualixue"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":225,"author":{"gitId":"pualixue"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":226,"author":{"gitId":"pualixue"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":227,"author":{"gitId":"pualixue"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-09"},{"lineNumber":228,"author":{"gitId":"pualixue"},"content":"                return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":229,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-09"},{"lineNumber":230,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":231,"author":{"gitId":"pualixue"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":232,"author":{"gitId":"pualixue"},"content":"            if (!(other instanceof EditDoctorDescriptor)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":233,"author":{"gitId":"pualixue"},"content":"                return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":234,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-09"},{"lineNumber":235,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":236,"author":{"gitId":"pualixue"},"content":"            // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":237,"author":{"gitId":"pualixue"},"content":"            EditDoctorDescriptor e \u003d (EditDoctorDescriptor) other;","lastModifiedDate":"2021-10-09"},{"lineNumber":238,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":239,"author":{"gitId":"pualixue"},"content":"            return getName().equals(e.getName()) \u0026\u0026 getPhone().equals(e.getPhone()) \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-10-09"},{"lineNumber":240,"author":{"gitId":"pualixue"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress()) \u0026\u0026 getBirthDate().equals(e.getBirthDate())","lastModifiedDate":"2021-10-09"},{"lineNumber":241,"author":{"gitId":"pualixue"},"content":"                    \u0026\u0026 getRemark().equals(e.getRemark()) \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":242,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":243,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":244,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"hpkoh":1,"pualixue":242,"ChuangZheQuan":1}},{"path":"src/main/java/seedu/plannermd/logic/commands/editcommand/EditPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.editcommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_RISK;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.CollectionUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":" * Edits the details of an existing patient in the plannermd.","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"public class EditPatientCommand extends EditCommand {","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"            + \"by the index number used in the displayed patient list. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Parameters: INDEX (must be a positive integer) \" + \"[\" + PREFIX_NAME + \"NAME] \" + \"[\" + PREFIX_PHONE","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"PHONE] \" + \"[\" + PREFIX_EMAIL + \"EMAIL] \" + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \" + \"[\" + PREFIX_BIRTH_DATE","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"BIRTH_DATE] \" + \"[\" + PREFIX_TAG + \"TAG]...\" + \"[\" + PREFIX_RISK + \"RISK]\\n\" + \"Example: \"","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"            + COMMAND_WORD + \" 1 \" + PREFIX_PHONE + \"91234567 \" + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the plannermd.\";","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    private final EditPatientDescriptor editPatientDescriptor;","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"     * Creates an EditPatientCommand.","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"     * @param editPatientDescriptor details to edit the person with","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientCommand(Index index, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(editPatientDescriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        Patient editedPerson \u003d createEditedPatient(patientToEdit, editPatientDescriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"        if (!patientToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPatient(editedPerson)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"        model.setPatient(patientToEdit, editedPerson);","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"hpkoh"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"hpkoh"},"content":"        model.editAppointmentsWithPerson(patientToEdit, editedPerson);","lastModifiedDate":"2021-10-23"},{"lineNumber":88,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPerson));","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"     * Creates and returns a {@code Patient} with the details of","lastModifiedDate":"2021-10-05"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code patientToEdit} edited with {@code editPatientDescriptor}.","lastModifiedDate":"2021-10-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        assert patientToEdit !\u003d null;","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"        Email updatedEmail \u003d editPatientDescriptor.getEmail().orElse(patientToEdit.getEmail());","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"        Address updatedAddress \u003d editPatientDescriptor.getAddress().orElse(patientToEdit.getAddress());","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"        BirthDate updatedBirthDate \u003d editPatientDescriptor.getBirthDate().orElse(patientToEdit.getBirthDate());","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPatientDescriptor.getTags().orElse(patientToEdit.getTags());","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"        Risk updatedRisk \u003d editPatientDescriptor.getRisk().orElse(patientToEdit.getRisk());","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"        Remark updatedRemark \u003d patientToEdit.getRemark();","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"        return new Patient(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedBirthDate, updatedRemark,","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"                updatedTags, updatedRisk);","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"        if (!(other instanceof EditPatientCommand)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand e \u003d (EditPatientCommand) other;","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"        return index.equals(e.index) \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"     * Stores the details to edit the patient with. Each non-empty field value will","lastModifiedDate":"2021-10-05"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"     * replace the corresponding field value of the patient.","lastModifiedDate":"2021-10-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"    public static class EditPatientDescriptor {","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"        private BirthDate birthDate;","lastModifiedDate":"2021-10-05"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"        private Remark remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"        private Risk risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"        public EditPatientDescriptor() {","lastModifiedDate":"2021-10-05"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"         * Copy constructor. A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-10-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"        public EditPatientDescriptor(EditPatientDescriptor toCopy) {","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":154,"author":{"gitId":"hpkoh"},"content":"            setRemark(toCopy.remark);","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":156,"author":{"gitId":"ChuangZheQuan"},"content":"            setBirthDate(toCopy.birthDate);","lastModifiedDate":"2021-10-05"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"            setRisk(toCopy.risk);","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, birthDate, tags, risk);","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setBirthDate(BirthDate birthDate) {","lastModifiedDate":"2021-10-05"},{"lineNumber":200,"author":{"gitId":"ChuangZheQuan"},"content":"            this.birthDate \u003d birthDate;","lastModifiedDate":"2021-10-05"},{"lineNumber":201,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":202,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":203,"author":{"gitId":"ChuangZheQuan"},"content":"        public Optional\u003cBirthDate\u003e getBirthDate() {","lastModifiedDate":"2021-10-05"},{"lineNumber":204,"author":{"gitId":"ChuangZheQuan"},"content":"            return Optional.ofNullable(birthDate);","lastModifiedDate":"2021-10-05"},{"lineNumber":205,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":206,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":207,"author":{"gitId":"hpkoh"},"content":"        public void setRemark(Remark remark) {","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"hpkoh"},"content":"            this.remark \u003d remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"hpkoh"},"content":"        public Optional\u003cRemark\u003e getRemark() {","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"hpkoh"},"content":"            return Optional.ofNullable(remark);","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":216,"author":{"gitId":"ChuangZheQuan"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of","lastModifiedDate":"2021-10-05"},{"lineNumber":217,"author":{"gitId":"ChuangZheQuan"},"content":"         * {@code tags} is used internally.","lastModifiedDate":"2021-10-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":224,"author":{"gitId":"ChuangZheQuan"},"content":"         * Returns an unmodifiable tag set, which throws","lastModifiedDate":"2021-10-05"},{"lineNumber":225,"author":{"gitId":"ChuangZheQuan"},"content":"         * {@code UnsupportedOperationException} if modification is attempted. Returns","lastModifiedDate":"2021-10-05"},{"lineNumber":226,"author":{"gitId":"ChuangZheQuan"},"content":"         * {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-10-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"        public void setRisk(Risk risk) {","lastModifiedDate":"2021-09-29"},{"lineNumber":233,"author":{"gitId":"jiayi1129"},"content":"            this.risk \u003d risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"        public Optional\u003cRisk\u003e getRisk() {","lastModifiedDate":"2021-09-29"},{"lineNumber":237,"author":{"gitId":"jiayi1129"},"content":"            return Optional.ofNullable(risk);","lastModifiedDate":"2021-09-29"},{"lineNumber":238,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":239,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":248,"author":{"gitId":"jiayi1129"},"content":"            if (!(other instanceof EditPatientDescriptor)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":253,"author":{"gitId":"jiayi1129"},"content":"            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;","lastModifiedDate":"2021-09-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":255,"author":{"gitId":"ChuangZheQuan"},"content":"            return getName().equals(e.getName()) \u0026\u0026 getPhone().equals(e.getPhone()) \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-10-05"},{"lineNumber":256,"author":{"gitId":"ChuangZheQuan"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress()) \u0026\u0026 getBirthDate().equals(e.getBirthDate())","lastModifiedDate":"2021-10-05"},{"lineNumber":257,"author":{"gitId":"ChuangZheQuan"},"content":"                    \u0026\u0026 getRemark().equals(e.getRemark()) \u0026\u0026 getTags().equals(e.getTags())","lastModifiedDate":"2021-10-06"},{"lineNumber":258,"author":{"gitId":"jiayi1129"},"content":"                    \u0026\u0026 getRisk().equals(e.getRisk());","lastModifiedDate":"2021-09-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"hpkoh":15,"Haozeee":3,"ChuangZheQuan":37,"-":142,"jiayi1129":64}},{"path":"src/main/java/seedu/plannermd/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.exceptions;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"-":16,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/commands/findcommand/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.findcommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" * Represents a Find command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"public abstract class FindCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"    protected final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"    protected FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":6,"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/logic/commands/findcommand/FindDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.findcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":" * Finds and lists all doctors in PlannerMD whose name contains any of the argument keywords.","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"public class FindDoctorCommand extends FindCommand {","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all doctors whose names contain any of \"","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"    public FindDoctorCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"        super(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"        model.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"        return new CommandResult(","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"                String.format(Messages.MESSAGE_DOCTORS_LISTED_OVERVIEW, model.getFilteredDoctorList().size()));","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"                || (other instanceof FindDoctorCommand // instanceof handles nulls","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"                \u0026\u0026 predicate.equals(((FindDoctorCommand) other).predicate)); // state check","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"hpkoh":39}},{"path":"src/main/java/seedu/plannermd/logic/commands/findcommand/FindPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.findcommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":" * Finds and lists all patients in PlannerMD whose name contains any of the argument keywords.","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"public class FindPatientCommand extends FindCommand {","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names contain any of \"","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    public FindPatientCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"        super(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"        model.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        return new CommandResult(","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"                String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"                || (other instanceof FindPatientCommand // instanceof handles nulls","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"                \u0026\u0026 predicate.equals(((FindPatientCommand) other).predicate)); // state check","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":8,"jiayi1129":31}},{"path":"src/main/java/seedu/plannermd/logic/commands/listcommand/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.listcommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":" * Represents a List command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"public abstract class ListCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/logic/commands/listcommand/ListDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.listcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"public class ListDoctorCommand extends ListCommand {","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all doctors\";","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"hpkoh":18}},{"path":"src/main/java/seedu/plannermd/logic/commands/listcommand/ListPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.listcommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":" * Lists all persons in the plannermd to the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"public class ListPatientCommand extends ListCommand {","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":2,"jiayi1129":20}},{"path":"src/main/java/seedu/plannermd/logic/commands/remarkcommand/RemarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.remarkcommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * Finds and lists all persons in PlannerMD whose name contains any of the","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * argument keywords. Keyword matching is case insensitive.","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"public abstract class RemarkCommand extends Command {","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"Haozeee":14}},{"path":"src/main/java/seedu/plannermd/logic/commands/remarkcommand/RemarkDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.remarkcommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":" * Adds a remark to a Doctor.","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"public class RemarkDoctorCommand extends RemarkCommand {","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_ADD_DOCTOR_REMARK_SUCCESS \u003d \"Added remark to Doctor: %1$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_DELETE_DOCTOR_REMARK_SUCCESS \u003d \"Removed remark from Doctor: %1$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the doctor identified \"","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"            + \"by the index number used in the doctor records. \"","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Existing remark will be overwritten by the input.\\n\" + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"r/ [REMARK]\\n\" + \"Example: \" + COMMAND_WORD + \" 1 \" + \"r/ Likes to swim.\";","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"    private final Index index;","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"    private final Remark remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     * Creates a RemarkDoctorCommand.","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"     * @param index Index of the doctor in the filtered doctor list to add the remark to.","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     * @param remark The remark to add.","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    public RemarkDoctorCommand(Index index, Remark remark) {","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        Doctor doctorToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new Doctor(doctorToEdit.getName(), doctorToEdit.getPhone(), doctorToEdit.getEmail(),","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"                doctorToEdit.getAddress(), doctorToEdit.getBirthDate(), remark, doctorToEdit.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        model.setDoctor(doctorToEdit, editedDoctor);","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        model.editAppointmentsWithPerson(doctorToEdit, editedDoctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        return new CommandResult(generateSuccessMessage(editedDoctor));","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"     * Generates a command execution success message based on whether the remark is","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"     * added to or removed from {@code doctorToEdit}.","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"    private String generateSuccessMessage(Doctor doctorToEdit) {","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        String message \u003d !remark.value.isEmpty()","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"                ? MESSAGE_ADD_DOCTOR_REMARK_SUCCESS","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"                : MESSAGE_DELETE_DOCTOR_REMARK_SUCCESS;","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        return String.format(message, doctorToEdit);","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"hpkoh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"hpkoh"},"content":"        // short circuit if same object","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"hpkoh"},"content":"            return true;","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"hpkoh"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        if (!(other instanceof RemarkDoctorCommand)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"hpkoh"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"hpkoh"},"content":"        // state check","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        RemarkDoctorCommand e \u003d (RemarkDoctorCommand) other;","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"        return index.equals(e.index) \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Haozeee":37,"hpkoh":50,"ChuangZheQuan":4}},{"path":"src/main/java/seedu/plannermd/logic/commands/remarkcommand/RemarkPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.remarkcommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"public class RemarkPatientCommand extends RemarkCommand {","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_ADD_PATIENT_REMARK_SUCCESS \u003d \"Added remark to Patient: %1$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_DELETE_PATIENT_REMARK_SUCCESS \u003d \"Removed remark from Patient: %1$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the patient identified \"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"            + \"by the index number used in the patient records. \"","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"Existing remark will be overwritten by the input.\\n\" + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"r/ [REMARK]\\n\" + \"Example: \" + COMMAND_WORD + \" 1 \" + \"r/ Likes to swim.\";","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"    private final Index index;","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"    private final Remark remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     * Creates a RemarkPatientCommand.","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * @param index Index of the patient in the filtered patient list to add the remark to.","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     * @param remark The remark to add.","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    public RemarkPatientCommand(Index index, Remark remark) {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient editedPatient \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"                patientToEdit.getAddress(), patientToEdit.getBirthDate(), remark, patientToEdit.getTags(),","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"                patientToEdit.getRisk());","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"        model.editAppointmentsWithPerson(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        return new CommandResult(generateSuccessMessage(editedPatient));","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"     * Generates a command execution success message based on whether the remark is","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     * added to or removed from {@code patientToEdit}.","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"    private String generateSuccessMessage(Patient patientToEdit) {","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        String message \u003d !remark.value.isEmpty()","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"                ? MESSAGE_ADD_PATIENT_REMARK_SUCCESS","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"                : MESSAGE_DELETE_PATIENT_REMARK_SUCCESS;","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        return String.format(message, patientToEdit);","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"hpkoh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"hpkoh"},"content":"        // short circuit if same object","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"hpkoh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"hpkoh"},"content":"            return true;","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"hpkoh"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        if (!(other instanceof RemarkPatientCommand)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"hpkoh"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"hpkoh"},"content":"        // state check","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        RemarkPatientCommand e \u003d (RemarkPatientCommand) other;","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"        return index.equals(e.index) \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Haozeee":28,"hpkoh":54,"ChuangZheQuan":7}},{"path":"src/main/java/seedu/plannermd/logic/commands/tagcommand/AddDoctorTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":" * Adds a tag to an existing doctor in the plannermd.","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"public class AddDoctorTagCommand extends AddTagCommand {","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tag to the doctor identified \"","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"            + \"by the index number used in the displayed doctor list.\\n\" + \"Parameters: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"            + \"INDEX (must be a positive integer) \" + PREFIX_TAG + \"TAG\\n\" + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"            + FLAG_ADD + \" 1 \" + PREFIX_TAG + \"healthy\";","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Added tag to Doctor: %1$s\";","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    private final Index index;","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    private final Tag tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"     * @param index of the doctor in the filtered doctor list to be added a tag","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"     * @param tag the tag to be added","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    public AddDoctorTagCommand(Index index, Tag tag) {","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     * Executes the command to add a tag to a doctor.","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     * @return {@code CommandResult} which represents the result after executing","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"     *         this command.","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"     * @throws CommandException if index is invalid.","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        Doctor doctorToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(doctorToEdit.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        newTags.add(tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d setDoctorTags(model, doctorToEdit, newTags);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_TAG_SUCCESS, editedDoctor));","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        if (!(other instanceof AddDoctorTagCommand)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        AddDoctorTagCommand c \u003d (AddDoctorTagCommand) other;","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        return index.equals(c.index) \u0026\u0026 tag.equals(c.tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":86,"hpkoh":2}},{"path":"src/main/java/seedu/plannermd/logic/commands/tagcommand/AddPatientTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import java.util.List;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import java.util.Set;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":" * Adds a tag to an existing patient in the plannermd.","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"public class AddPatientTagCommand extends AddTagCommand {","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tag to the patient identified \"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"            + \"by the index number used in the displayed patient list.\\n\" + \"Parameters: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"            + \"INDEX (must be a positive integer) \" + PREFIX_TAG + \"TAG\\n\" + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"            + FLAG_ADD + \" 1 \" + PREFIX_TAG + \"healthy\";","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Added tag to Patient: %1$s\";","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    private final Index index;","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"    private final Tag tag;","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     * @param index of the patient in the filtered patient list to be added a tag","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"     * @param tag the tag to be added","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    public AddPatientTagCommand(Index index, Tag tag) {","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"     * Executes the command to add a tag to a patient.","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"     * @return {@code CommandResult} which represents the result after executing","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"     *         this command.","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"     * @throws CommandException if index is invalid.","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(patientToEdit.getTags());","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        newTags.add(tag);","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        Patient editedPatient \u003d setPatientTags(model, patientToEdit, newTags);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_TAG_SUCCESS, editedPatient));","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"        // short circuit if same object","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        if (!(other instanceof AddPatientTagCommand)) {","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        // state check","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        AddPatientTagCommand c \u003d (AddPatientTagCommand) other;","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"        return index.equals(c.index) \u0026\u0026 tag.equals(c.tag);","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"Haozeee":5,"hpkoh":2,"pualixue":76,"ChuangZheQuan":3}},{"path":"src/main/java/seedu/plannermd/logic/commands/tagcommand/AddTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":" * Represents an AddTag command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public abstract class AddTagCommand extends TagCommand {","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_NOT_ADDED \u003d \"A tag must be provided.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Haozeee":2,"pualixue":7}},{"path":"src/main/java/seedu/plannermd/logic/commands/tagcommand/DeleteDoctorTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":" * Deletes a tag from an existing doctor in the plannermd.","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"public class DeleteDoctorTagCommand extends DeleteTagCommand {","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a tag from the doctor identified \"","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"            + \"by the index number used in the displayed doctor list.\\n\" + \"Parameters: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"            + \"INDEX (must be a positive integer) \" + PREFIX_TAG + \"TAG\\n\" + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"            + \"1 \" + PREFIX_TAG + \"healthy\";","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted tag from Doctor: %1$s\";","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d \"The tag does not exist.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    private final Index index;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    private final Tag tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     * @param index of the person in the filtered person list for deleting a tag","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"     * @param tag the tag to be deleted","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    public DeleteDoctorTagCommand(Index index, Tag tag) {","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     * Executes the command to delete a tag from a doctor.","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     * @return {@code CommandResult} which represents the result after executing","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     *         this command.","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"     * @throws CommandException if index or tag is invalid.","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            throw new CommandException(MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        Doctor doctorToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        Set\u003cTag\u003e existingTags \u003d new HashSet\u003c\u003e(doctorToEdit.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        if (!existingTags.contains(tag)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"            throw new CommandException(MESSAGE_INVALID_TAG);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        existingTags.remove(tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d setDoctorTags(model, doctorToEdit, existingTags);","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, editedDoctor));","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        if (!(other instanceof DeleteDoctorTagCommand)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorTagCommand c \u003d (DeleteDoctorTagCommand) other;","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        return index.equals(c.index) \u0026\u0026 tag.equals(c.tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":89,"hpkoh":2}},{"path":"src/main/java/seedu/plannermd/logic/commands/tagcommand/DeletePatientTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import java.util.List;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import java.util.Set;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":" * Deletes a tag from an existing patient in the plannermd.","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"public class DeletePatientTagCommand extends DeleteTagCommand {","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a tag from the patient identified \"","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"            + \"by the index number used in the displayed patient list.\\n\" + \"Parameters: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"            + \"INDEX (must be a positive integer) \" + PREFIX_TAG + \"TAG\\n\" + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"1 \" + PREFIX_TAG + \"healthy\";","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted tag from Patient: %1$s\";","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"    private final Index index;","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    private final Tag tag;","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"     * @param index of the person in the filtered person list for deleting a tag","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"     * @param tag the tag to be deleted","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"    public DeletePatientTagCommand(Index index, Tag tag) {","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"     * Executes the command to delete a tag from a patient.","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"     * @return {@code CommandResult} which represents the result after executing","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"     *         this command.","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"     * @throws CommandException if index or tag is invalid.","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"            throw new CommandException(MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        Set\u003cTag\u003e existingTags \u003d new HashSet\u003c\u003e(patientToEdit.getTags());","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        if (!existingTags.contains(tag)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"            throw new CommandException(MESSAGE_INVALID_TAG);","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        existingTags.remove(tag);","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        Patient editedPatient \u003d setPatientTags(model, patientToEdit, existingTags);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, editedPatient));","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        // short circuit if same object","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        if (!(other instanceof DeletePatientTagCommand)) {","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"        // state check","lastModifiedDate":"2021-09-30"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"        DeletePatientTagCommand c \u003d (DeletePatientTagCommand) other;","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"        return index.equals(c.index) \u0026\u0026 tag.equals(c.tag);","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"Haozeee":2,"hpkoh":2,"pualixue":82,"ChuangZheQuan":4}},{"path":"src/main/java/seedu/plannermd/logic/commands/tagcommand/DeleteTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":" * Represents a DeleteTag command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public abstract class DeleteTagCommand extends TagCommand {","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"    public static final String COMMAND_WORD \u003d \"tag -d\";","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d \"The tag does not exist.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Haozeee":3,"pualixue":8}},{"path":"src/main/java/seedu/plannermd/logic/commands/tagcommand/TagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_DELETE;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":" * Represents a command that involves adding or deleting a tag belonging to a Person.","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"public abstract class TagCommand extends Command {","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public static final String TOO_MANY_TAGS_MESSAGE \u003d \"Please enter only one tag.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"            COMMAND_WORD + \"{FLAG} {ARGUMENTS}: Executes tag command given by flag tag\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"            + \"Commands: \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"            + \"tag -a: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"                    + \"Adds a tag to the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"                    + \"Parameters: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"                    + \"INDEX (must be a positive integer) \" + PREFIX_TAG + \"TAG\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"                    + \"Example: \" + COMMAND_WORD + \" \" + FLAG_ADD + \" \" + \"1 \" + PREFIX_TAG + \"healthy\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"            + \"tag -d: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"                    + \"Deletes a tag to the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"                    + \"Parameters: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"                    + \"INDEX (must be a positive integer) \" + PREFIX_TAG + \"TAG\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"                    + \"Example: \" + COMMAND_WORD + \" \" + FLAG_DELETE + \" \" + \"1 \" + PREFIX_TAG + \"healthy\";","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"     * Updates the tags of the given doctor in the {@code model} and returns the edited doctor","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     * with the updated tags.","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     * @param model The model containing the doctor list.","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * @param doctorToEdit The doctor whose tag is to be updated.","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     * @param tags The updated tags.","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     * @return The edited doctor with the updated tag.","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    public Doctor setDoctorTags(Model model, Doctor doctorToEdit, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new Doctor(doctorToEdit.getName(), doctorToEdit.getPhone(), doctorToEdit.getEmail(),","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"                doctorToEdit.getAddress(), doctorToEdit.getBirthDate(), doctorToEdit.getRemark(), tags);","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        model.setDoctor(doctorToEdit, editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"        model.editAppointmentsWithPerson(doctorToEdit, editedDoctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        return editedDoctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"     * Updates the tags of the given Patient in the {@code model} and returns the edited patient","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"     * with the updated tags.","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"     * @param model The model containing the patient list.","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"     * @param patientToEdit The patient whose tag is to be updated.","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"     * @param tags The updated tags.","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     * @return The edited patient with the updated tag.","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"    public Patient setPatientTags(Model model, Patient patientToEdit, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        Patient editedPatient \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"                patientToEdit.getAddress(), patientToEdit.getBirthDate(), patientToEdit.getRemark(), tags,","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"                patientToEdit.getRisk());","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        model.editAppointmentsWithPerson(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        return editedPatient;","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":58,"hpkoh":17,"pualixue":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"-":59,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"-":147,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":" * commands","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"hp/\");","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"eml/\");","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final Prefix PREFIX_BIRTH_DATE \u003d new Prefix(\"dob/\");","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    public static final Prefix PREFIX_RISK \u003d new Prefix(\"risk/\");","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    /* Appointment Prefix definitions */","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"    public static final Prefix PREFIX_PATIENT \u003d new Prefix(\"p/\");","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public static final Prefix PREFIX_DOCTOR \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"dur/\");","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public static final Prefix PREFIX_START \u003d new Prefix(\"s/\");","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    public static final Prefix PREFIX_END \u003d new Prefix(\"e/\");","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"    /* Flag definitions */","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"    public static final String FLAG_ADD \u003d \"-a\";","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"    public static final String FLAG_DELETE \u003d \"-d\";","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"    public static final String FLAG_EDIT \u003d \"-e\";","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"    public static final String FLAG_FILTER \u003d \"-f\";","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"    public static final String FLAG_LIST \u003d \"-l\";","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"    /* Appointment Flag definitions */","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"    public static final String FLAG_FILTER_UPCOMING \u003d \"-u\";","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hpkoh":16,"Haozeee":5,"pualixue":1,"ChuangZheQuan":3,"-":10,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/Flag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":" * A flag that specifies the options for a command.","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":" * E.g. \u0027-d\u0027 in \u0027tag -d id/1\u0027.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"public class Flag {","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"    private final String flag;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"     * Constructs a Flag.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"     * @param flag specifies the options for a command","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"    public Flag(String flag) {","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"        requireNonNull(flag);","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"        this.flag \u003d flag;","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"    public String getFlag() {","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"        return flag;","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    public String toString() {","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"        return getFlag();","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"        return flag.hashCode();","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        if (!(obj instanceof Flag)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"        Flag otherFlag \u003d (Flag) obj;","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"        return otherFlag.getFlag().equals(getFlag());","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"pualixue":50}},{"path":"src/main/java/seedu/plannermd/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"-":13,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.StringUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.apptcommandparser.FilterAppointmentCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    private static final DateTimeFormatter DATE_FILTER_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\")","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses a {@code String birthDate} into an {@code BirthDate}.","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"     * @throws ParseException if the given {@code birthDate} is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"    public static BirthDate parseBirthDate(String birthDate) throws ParseException {","lastModifiedDate":"2021-09-28"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(birthDate);","lastModifiedDate":"2021-09-28"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"        String trimmedBirthDate \u003d birthDate.trim();","lastModifiedDate":"2021-09-28"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"        if (!BirthDate.isValidBirthDate(trimmedBirthDate)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(BirthDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-28"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"        return new BirthDate(trimmedBirthDate);","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"     * Parses a {@code String risk} into a {@code Risk}.","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"     * Optional Risk field accepts an empty string as UNCLASSIFIED.","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"     * @throws ParseException if the given {@code risk} is invalid.","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"    public static Risk parseRisk(String risk) throws ParseException {","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(risk);","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"        String trimmedAndUpperCaseRisk \u003d risk.trim().toUpperCase();","lastModifiedDate":"2021-09-30"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"        if (trimmedAndUpperCaseRisk.isEmpty()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"            return Risk.getUnclassifiedRisk();","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"        if (!Risk.isValidRisk(trimmedAndUpperCaseRisk)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"            throw new ParseException(Risk.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"        return new Risk(trimmedAndUpperCaseRisk);","lastModifiedDate":"2021-09-30"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":171,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":172,"author":{"gitId":"Haozeee"},"content":"     * Parses a {@code String string} into an {@code LocalDate}.","lastModifiedDate":"2021-10-20"},{"lineNumber":173,"author":{"gitId":"Haozeee"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-20"},{"lineNumber":174,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":175,"author":{"gitId":"Haozeee"},"content":"     * @throws ParseException If the given {@code risk} is invalid or empty.","lastModifiedDate":"2021-10-20"},{"lineNumber":176,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":177,"author":{"gitId":"Haozeee"},"content":"    public static LocalDate stringToDate(String string) throws ParseException {","lastModifiedDate":"2021-10-20"},{"lineNumber":178,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(string);","lastModifiedDate":"2021-10-20"},{"lineNumber":179,"author":{"gitId":"Haozeee"},"content":"        if (string.trim().isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":180,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(FilterAppointmentCommandParser.NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":181,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":182,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":183,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-10-20"},{"lineNumber":184,"author":{"gitId":"Haozeee"},"content":"            return LocalDate.parse(string.trim(), DATE_FILTER_FORMATTER);","lastModifiedDate":"2021-10-20"},{"lineNumber":185,"author":{"gitId":"Haozeee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-20"},{"lineNumber":186,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(AppointmentDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":188,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":189,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":190,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":191,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":192,"author":{"gitId":"pualixue"},"content":"     * Parses a {@code String remark} into a {@code Remark}.","lastModifiedDate":"2021-10-23"},{"lineNumber":193,"author":{"gitId":"pualixue"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-23"},{"lineNumber":194,"author":{"gitId":"pualixue"},"content":"     * Optional Remark field accepts an empty string as an empty remark.","lastModifiedDate":"2021-10-23"},{"lineNumber":195,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":196,"author":{"gitId":"pualixue"},"content":"     * @throws ParseException if the given {@code remark} is invalid.","lastModifiedDate":"2021-10-23"},{"lineNumber":197,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":198,"author":{"gitId":"pualixue"},"content":"    public static Remark parseRemark(String remark) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":199,"author":{"gitId":"pualixue"},"content":"        requireNonNull(remark);","lastModifiedDate":"2021-10-23"},{"lineNumber":200,"author":{"gitId":"pualixue"},"content":"        String trimmedRemark \u003d remark.trim();","lastModifiedDate":"2021-10-23"},{"lineNumber":201,"author":{"gitId":"pualixue"},"content":"        if (trimmedRemark.isEmpty()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":202,"author":{"gitId":"pualixue"},"content":"            return Remark.getEmptyRemark();","lastModifiedDate":"2021-10-23"},{"lineNumber":203,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":204,"author":{"gitId":"pualixue"},"content":"        return new Remark(trimmedRemark);","lastModifiedDate":"2021-10-23"},{"lineNumber":205,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":206,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":207,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":208,"author":{"gitId":"pualixue"},"content":"     * Parses a {@code String duration} into a {@code Duration}.","lastModifiedDate":"2021-10-23"},{"lineNumber":209,"author":{"gitId":"pualixue"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-23"},{"lineNumber":210,"author":{"gitId":"pualixue"},"content":"     * Optional Duration field accepts an empty string as a default duration of 10 minutes.","lastModifiedDate":"2021-10-23"},{"lineNumber":211,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"pualixue"},"content":"     * @throws ParseException if the given {@code duration} is invalid.","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"pualixue"},"content":"    public static Duration parseDuration(String duration) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"pualixue"},"content":"        requireNonNull(duration);","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"pualixue"},"content":"        String trimmedDuration \u003d duration.trim();","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"pualixue"},"content":"        if (trimmedDuration.isEmpty()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":218,"author":{"gitId":"pualixue"},"content":"            return Duration.getDefaultDuration();","lastModifiedDate":"2021-10-23"},{"lineNumber":219,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":220,"author":{"gitId":"pualixue"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":221,"author":{"gitId":"pualixue"},"content":"            int trimmedDurationAsInt \u003d Integer.parseInt(trimmedDuration);","lastModifiedDate":"2021-10-23"},{"lineNumber":222,"author":{"gitId":"pualixue"},"content":"            if (!Duration.isValidDuration(trimmedDurationAsInt)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":223,"author":{"gitId":"pualixue"},"content":"                throw new ParseException(Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-23"},{"lineNumber":224,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":225,"author":{"gitId":"pualixue"},"content":"            return new Duration(trimmedDurationAsInt);","lastModifiedDate":"2021-10-23"},{"lineNumber":226,"author":{"gitId":"pualixue"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-23"},{"lineNumber":227,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-23"},{"lineNumber":228,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":229,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"Haozeee":27,"pualixue":43,"ChuangZheQuan":16,"-":115,"jiayi1129":29}},{"path":"src/main/java/seedu/plannermd/logic/parser/PlannerMdParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.ToggleCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentCommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeleteCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.findcommand.FindDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.findcommand.FindPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.listcommand.ListDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.listcommand.ListPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.TagCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.addcommandparser.AddDoctorCommandParser;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.addcommandparser.AddPatientCommandParser;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.apptcommandparser.AppointmentCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.deletecommandparser.DeleteDoctorCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.deletecommandparser.DeletePatientCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.editcommandparser.EditDoctorCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.editcommandparser.EditPatientCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.findcommandparser.FindDoctorCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.findcommandparser.FindPatientCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.remarkcommandparser.RemarkDoctorCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.remarkcommandparser.RemarkPatientCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.tagcommandparser.TagDoctorCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.tagcommandparser.TagPatientCommandParser;","lastModifiedDate":"2021-10-31"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model.State;","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"public class PlannerMdParser {","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"    public Command parseCommand(String userInput, State state) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        case ToggleCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"            return new ToggleCommand();","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"        case AppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"hpkoh"},"content":"            return new AppointmentCommandParser().parseAppointmentCommand(arguments);","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"            return new ClearCommand();","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        default:","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"            if (state.equals(State.PATIENT)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"                return parsePatientCommand(commandWord, arguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"            } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"                return parseDoctorCommand(commandWord, arguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    private Command parsePatientCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"        case AddPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"            return new AddPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"            return new EditPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"            return new DeletePatientCommandParser().parse(arguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"hpkoh"},"content":"        case RemarkCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"            return new RemarkPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        case TagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"            return new TagPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"        case FindPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"hpkoh"},"content":"            return new FindPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        case ListPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"            return new ListPatientCommand();","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"    private Command parseDoctorCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"        case AddDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"            return new AddDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"            return new EditDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"            return new DeleteDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"        case RemarkCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"            return new RemarkDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"        case TagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"            return new TagDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"        case FindDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"hpkoh"},"content":"            return new FindDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"hpkoh"},"content":"        case ListDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"hpkoh"},"content":"            return new ListDoctorCommand();","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"        default:","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hpkoh":22,"Haozeee":24,"pualixue":7,"ChuangZheQuan":7,"-":41,"jiayi1129":48}},{"path":"src/main/java/seedu/plannermd/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"-":38,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/addcommandparser/AddDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.Prefix;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":" * Parses input arguments and creates a new AddDoctorCommand object","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddDoctorCommandParser implements Parser\u003cAddDoctorCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"     * AddDoctorCommand and returns an AddDoctorCommand object for execution.","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"     * @param args arguments to be parsed","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"    public AddDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"                PREFIX_ADDRESS, PREFIX_BIRTH_DATE, PREFIX_TAG);","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_BIRTH_DATE)","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"        BirthDate birthDate \u003d ParserUtil.parseBirthDate(argMultimap.getValue(PREFIX_BIRTH_DATE).get());","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"        Remark remark \u003d Remark.getEmptyRemark();","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor doctor \u003d new Doctor(name, phone, email, address, birthDate, remark, tagList);","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"        return new AddDoctorCommand(doctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"     * in the given {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"     * @return boolean","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"hpkoh":2,"ChuangZheQuan":30,"-":28,"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/logic/parser/addcommandparser/AddPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_RISK;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.Prefix;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":" * Parses input arguments and creates a new AddPatientCommand object","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"     * AddPatientCommand and returns an AddCommand object for execution.","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"     * @param args arguments to be parsed","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    public AddPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"            PREFIX_ADDRESS, PREFIX_BIRTH_DATE, PREFIX_TAG, PREFIX_RISK);","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"            PREFIX_BIRTH_DATE) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"        BirthDate birthDate \u003d ParserUtil.parseBirthDate(argMultimap.getValue(PREFIX_BIRTH_DATE).get());","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"        Remark remark \u003d Remark.getEmptyRemark();","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        Risk risk \u003d argMultimap.getValue(PREFIX_RISK).isPresent()","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"                        ? ParserUtil.parseRisk(argMultimap.getValue(PREFIX_RISK).get())","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"                        : Risk.getUnclassifiedRisk();","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient patient \u003d new Patient(name, phone, email, address, birthDate, remark, tagList, risk);","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        return new AddPatientCommand(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"     * in the given {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"     * @return boolean","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"hpkoh":2,"ChuangZheQuan":23,"-":29,"jiayi1129":22}},{"path":"src/main/java/seedu/plannermd/logic/parser/apptcommandparser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.apptcommand.AddAppointmentCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Prefix;","lastModifiedDate":"2021-10-31"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"    private final DateTimeFormatter fmt \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"            .appendPattern(\"d/M/uuuu\")","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"            .appendPattern(\" HH:mm\")","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"            .toFormatter().withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"     * and returns a AddAppointmentCommand object for execution.","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"     * @throws ParseException If the user input does not conform the expected format","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATIENT, PREFIX_DOCTOR, PREFIX_START,","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"                PREFIX_DURATION, PREFIX_REMARK);","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PATIENT, PREFIX_DOCTOR, PREFIX_START)","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor addAppointmentDescriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand.AddAppointmentDescriptor();","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"        Remark remark \u003d Remark.getEmptyRemark();","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"            remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"        addAppointmentDescriptor.setRemark(remark);","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        String trimmedParsedDateTime \u003d argMultimap.getValue(PREFIX_START).get().trim();","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"        String time \u003d getTimeFromDateTime(trimmedParsedDateTime);","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"        String date \u003d getDateFromDateTime(trimmedParsedDateTime);","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"        AppointmentDate appointmentDate \u003d new AppointmentDate(date);","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"        addAppointmentDescriptor.setAppointmentDate(appointmentDate);","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"        Duration duration \u003d Duration.getDefaultDuration();","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"            duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"        Session session \u003d new Session(time, duration);","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        if (session.isEndWithinSameDay()) {","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"            addAppointmentDescriptor.setSession(session);","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        } else {","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(Session.MESSAGE_END_WITHIN_SAME_DAY);","lastModifiedDate":"2021-10-30"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"        Index patientIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"        Index doctorIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT).get());","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"            doctorIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DOCTOR).get());","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"        return new AddAppointmentCommand(patientIndex, doctorIndex, addAppointmentDescriptor);","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"     * in the given {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"     * @return boolean","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"    private String getTimeFromDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"            LocalTime inputTime \u003d LocalDateTime.parse(dateTime, fmt).toLocalTime();","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"            return inputTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(AddAppointmentCommand.MESSAGE_WRONG_DATE_TIME);","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"    private String getDateFromDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"            LocalDate inputDate \u003d LocalDateTime.parse(dateTime, fmt).toLocalDate();","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"            return inputDate.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(AddAppointmentCommand.MESSAGE_WRONG_DATE_TIME);","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"pualixue":5,"ChuangZheQuan":113,"jiayi1129":6}},{"path":"src/main/java/seedu/plannermd/logic/parser/apptcommandparser/AppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_UNKNOWN_FLAG;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_DELETE;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_EDIT;","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_FILTER;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_FILTER_UPCOMING;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_LIST;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentCommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.apptcommand.ListAppointmentCommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"public class AppointmentCommandParser {","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"     * Used for initial separation of flag and args.","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cflag\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"     * @param userInput user input string containing flag and arguments","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"    public AppointmentCommand parseAppointmentCommand(String userInput) throws ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"        final String flag \u003d matcher.group(\"flag\");","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"        switch (flag) {","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"        case FLAG_ADD:","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"        case FLAG_EDIT:","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"            return new EditAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        case FLAG_DELETE:","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"        case FLAG_FILTER:","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"            return new FilterAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"        case FLAG_FILTER_UPCOMING:","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"            return new FilterUpcomingAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"        case FLAG_LIST:","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"            return new ListAppointmentCommand();","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        default:","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_FLAG);","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":57,"Haozeee":5,"pualixue":1,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/apptcommandparser/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object.","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the given {@code String} of arguments in the context of a","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"     * DeleteAppointmentCommand and returns a DeleteAppointmentCommand object for execution.","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"     * @param args The user input.","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"     * @return The DeleteCommandObject that is to be executed.","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"     * @throws ParseException If the user input does not conform to the expected format","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"            return new DeleteAppointmentCommand(index);","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"ChuangZheQuan":31,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/logic/parser/apptcommandparser/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.apptcommand.EditAppointmentCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-31"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    private final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu HH:mm\")","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"     * EditAppointmentCommand and returns an EditAppointmentCommand object for execution.","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATIENT, PREFIX_DOCTOR, PREFIX_START,","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"                PREFIX_DURATION, PREFIX_REMARK);","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        Index index;","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor editAppointmentDescriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentCommand.EditAppointmentDescriptor();","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        if (argMultimap.getValue(PREFIX_PATIENT).isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"            editAppointmentDescriptor.setPatientIndex(","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"                    ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT).get()));","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        if (argMultimap.getValue(PREFIX_DOCTOR).isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"            editAppointmentDescriptor.setDoctorIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DOCTOR).get()));","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        if (argMultimap.getValue(PREFIX_START).isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"            String dateTime \u003d argMultimap.getValue(PREFIX_START).get().trim();","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"            String date \u003d getDateFromDateTime(dateTime);","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"            String time \u003d getTimeFromDateTime(dateTime);","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"            AppointmentDate appointmentDate \u003d new AppointmentDate(date);","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"            editAppointmentDescriptor.setAppointmentDate(appointmentDate);","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"            editAppointmentDescriptor.setStartTime(time);","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"            editAppointmentDescriptor.setDuration(","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"                    ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"            editAppointmentDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        return new EditAppointmentCommand(index, editAppointmentDescriptor);","lastModifiedDate":"2021-10-23"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"    private String getTimeFromDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"            LocalTime inputTime \u003d LocalDateTime.parse(dateTime, formatter).toLocalTime();","lastModifiedDate":"2021-10-23"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"            return inputTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_INVALID_START);","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"    private String getDateFromDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"            LocalDate inputDate \u003d LocalDateTime.parse(dateTime, formatter).toLocalDate();","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"            return inputDate.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_INVALID_START);","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"Haozeee":3,"pualixue":95,"jiayi1129":5}},{"path":"src/main/java/seedu/plannermd/logic/parser/apptcommandparser/FilterAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_END;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentFilters;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.FilterAppointmentCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-31"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentContainsDoctorPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentContainsPatientPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentIsAfterPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentIsBeforePredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":" * Parses input arguments and creates a new FilterAppointmentCommand object.","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"public class FilterAppointmentCommandParser implements Parser\u003cFilterAppointmentCommand\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    public static final String END_DATE_BEFORE_START_DATE_MESSAGE \u003d \"End date cannot be before start date.\";","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    public static final String NO_ARGUMENTS_MESSAGE \u003d \"No arguments provided.\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            + FilterAppointmentCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    private static final String UNUSED_PREAMBLE \u003d \"0\";","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    private LocalDate startDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    private LocalDate endDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterAppointmentCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     * and returns a FilterAppointmentCommand object for execution.","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     * @throws ParseException If the user input does not conform the expected format","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    public FilterAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(\" \" + args,","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"                PREFIX_DOCTOR, PREFIX_PATIENT, PREFIX_START, PREFIX_END);","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d AppointmentFilters.allAppointmentsFilter();","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        boolean hasStartFilter \u003d false;","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        boolean hasEndFilter \u003d false;","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        if (!argumentMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        if (argumentMultimap.getValue(PREFIX_DOCTOR).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"            String doctorKeywords \u003d argumentMultimap.getValue(PREFIX_DOCTOR).get();","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"            filters.setHasDoctor(new AppointmentContainsDoctorPredicate(stringToList(doctorKeywords)));","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        if (argumentMultimap.getValue(PREFIX_PATIENT).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"            String patientKeywords \u003d argumentMultimap.getValue(PREFIX_PATIENT).get();","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"            filters.setHasPatient(new AppointmentContainsPatientPredicate(stringToList(patientKeywords)));","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        if (argumentMultimap.getValue(PREFIX_START).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"            startDate \u003d ParserUtil.stringToDate(argumentMultimap.getValue(PREFIX_START).get());","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"            filters.setStartAfter(new AppointmentIsAfterPredicate(startDate));","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"            hasStartFilter \u003d true;","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        if (argumentMultimap.getValue(PREFIX_END).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"            endDate \u003d ParserUtil.stringToDate(argumentMultimap.getValue(PREFIX_END).get());","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"            filters.setStartBefore(new AppointmentIsBeforePredicate(endDate));","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"            hasEndFilter \u003d true;","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        if (hasStartFilter \u0026\u0026 hasEndFilter \u0026\u0026 !verifyStartDateBeforeEndDate()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(END_DATE_BEFORE_START_DATE_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        return new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"    private List\u003cString\u003e stringToList(String string) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(string);","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        if (string.trim().isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        String[] nameKeywords \u003d string.trim().split(\"\\\\s+\"); // Splits the string based on 1 or more whitespace","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        return Arrays.asList(nameKeywords);","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"    private boolean verifyStartDateBeforeEndDate() {","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        return !startDate.isAfter(endDate);","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Haozeee":90,"jiayi1129":5}},{"path":"src/main/java/seedu/plannermd/logic/parser/apptcommandparser/FilterUpcomingAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentFilters;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.FilterAppointmentCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.FilterUpcomingAppointmentCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentContainsDoctorPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentContainsPatientPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":" * Parses input arguments and creates a new FilterUpcomingAppointmentCommand object.","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"public class FilterUpcomingAppointmentCommandParser implements","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        Parser\u003cFilterUpcomingAppointmentCommand\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    public static final String NO_ARGUMENTS_MESSAGE \u003d \"No arguments provided.\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"            + FilterAppointmentCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterUpcomingAppointmentCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     * and returns a FilterUpcomingAppointmentCommand object for execution.","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"     * @throws ParseException If the user input does not conform the expected format","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    public FilterUpcomingAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(\" \" + args,","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"                PREFIX_DOCTOR, PREFIX_PATIENT);","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d AppointmentFilters.upcomingAppointmentsFilter();","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        if (!argumentMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterUpcomingAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        if (argumentMultimap.getValue(PREFIX_DOCTOR).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"            String doctorKeywords \u003d argumentMultimap.getValue(PREFIX_DOCTOR).get();","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"            filters.setHasDoctor(new AppointmentContainsDoctorPredicate(stringToList(doctorKeywords)));","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        if (argumentMultimap.getValue(PREFIX_PATIENT).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"            String patientKeywords \u003d argumentMultimap.getValue(PREFIX_PATIENT).get();","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"            filters.setHasPatient(new AppointmentContainsPatientPredicate(stringToList(patientKeywords)));","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        return new FilterUpcomingAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"    private List\u003cString\u003e stringToList(String string) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(string);","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        if (string.trim().isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        String[] nameKeywords \u003d string.trim().split(\"\\\\s+\"); // Splits the string based on 1 or more whitespace","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        return Arrays.asList(nameKeywords);","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Haozeee":62,"jiayi1129":4}},{"path":"src/main/java/seedu/plannermd/logic/parser/deletecommandparser/DeleteDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.deletecommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeleteDoctorCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" * Parses input arguments and creates a new DeleteDoctorCommand object.","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"public class DeleteDoctorCommandParser implements Parser\u003cDeleteDoctorCommand\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     * Parses the given {@code String} of arguments in the context of a","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * DeleteDoctorCommand and returns a DeleteDoctorCommand object for execution.","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * @param args The user input.","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * @return The DeleteCommandObject that is to be executed.","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * @throws ParseException If the user input does not conform to the expected format","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    public DeleteDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"            return new DeleteDoctorCommand(index);","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDoctorCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"Haozeee":31,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/logic/parser/deletecommandparser/DeletePatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.deletecommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeletePatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":" * Parses input arguments and creates a new DeletePatientCommand object","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"public class DeletePatientCommandParser implements Parser\u003cDeletePatientCommand\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePatientCommand","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"     * and returns a DeletePatientCommand object for execution.","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * @throws ParseException If the user input does not conform to the expected format","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    public DeletePatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"            return new DeletePatientCommand(index);","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Haozeee":3,"-":16,"jiayi1129":13}},{"path":"src/main/java/seedu/plannermd/logic/parser/editcommandparser/EditDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.editcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-31"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"public class EditDoctorCommandParser implements Parser\u003cEditDoctorCommand\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"     * EditDoctorCommand and returns an EditDoctorCommand object for execution.","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"    public EditDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"                PREFIX_ADDRESS, PREFIX_BIRTH_DATE, PREFIX_TAG);","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDoctorCommand.MESSAGE_USAGE),","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"                    pe);","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor editDoctorDescriptor \u003d new EditDoctorCommand.EditDoctorDescriptor();","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"            editDoctorDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"            editDoctorDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"            editDoctorDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"            editDoctorDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"        if (argMultimap.getValue(PREFIX_BIRTH_DATE).isPresent()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"            editDoctorDescriptor","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"                    .setBirthDate(ParserUtil.parseBirthDate(argMultimap.getValue(PREFIX_BIRTH_DATE).get()));","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editDoctorDescriptor::setTags);","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        if (!editDoctorDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(EditDoctorCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        return new EditDoctorCommand(index, editDoctorDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code tags} is non-empty. If {@code tags} contain only one element which is","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"     * an empty string, it will be parsed into a {@code Set\u003cTag\u003e} containing zero","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"     * tags.","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"pualixue":16,"ChuangZheQuan":19,"-":45,"jiayi1129":9}},{"path":"src/main/java/seedu/plannermd/logic/parser/editcommandparser/EditPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.editcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_RISK;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-31"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":" * Parses input arguments and creates a new EditPatientCommand object","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"public class EditPatientCommandParser implements Parser\u003cEditPatientCommand\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"     * EditPatientCommand and returns an EditPatientCommand object for execution.","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"                PREFIX_ADDRESS, PREFIX_BIRTH_DATE, PREFIX_TAG, PREFIX_RISK);","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE),","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"                    pe);","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand.EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"        if (argMultimap.getValue(PREFIX_BIRTH_DATE).isPresent()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"            editPatientDescriptor","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"                    .setBirthDate(ParserUtil.parseBirthDate(argMultimap.getValue(PREFIX_BIRTH_DATE).get()));","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPatientDescriptor::setTags);","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        if (argMultimap.getValue(PREFIX_RISK).isPresent()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"            editPatientDescriptor.setRisk(ParserUtil.parseRisk(argMultimap.getValue(PREFIX_RISK).get()));","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        if (!editPatientDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"            throw new ParseException(EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        return new EditPatientCommand(index, editPatientDescriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code tags} is non-empty. If {@code tags} contain only one element which is","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"     * an empty string, it will be parsed into a {@code Set\u003cTag\u003e} containing zero","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"     * tags.","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"pualixue":2,"ChuangZheQuan":21,"-":47,"jiayi1129":27}},{"path":"src/main/java/seedu/plannermd/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.exceptions;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"-":15,"jiayi1129":2}},{"path":"src/main/java/seedu/plannermd/logic/parser/findcommandparser/FindDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.findcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.findcommand.FindDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"public class FindDoctorCommandParser implements Parser\u003cFindDoctorCommand\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"     * Parses the given {@code String} of arguments in the context of the FindDoctorCommand","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"     * and returns a FindPatientCommand object for execution.","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"    public FindDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"        return new FindDoctorCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"hpkoh":8,"Haozeee":1,"-":15,"jiayi1129":6}},{"path":"src/main/java/seedu/plannermd/logic/parser/findcommandparser/FindPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.findcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.findcommand.FindPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":" * Parses input arguments and creates a new FindPatientCommand object","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"public class FindPatientCommandParser implements Parser\u003cFindPatientCommand\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPatientCommand","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"     * and returns a FindPatientCommand object for execution.","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    public FindPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        return new FindPatientCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"hpkoh":1,"-":21,"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/logic/parser/remarkcommandparser/RemarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.remarkcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-31"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":" * Ab abstract class to parse input arguments and create a new RemarkCommand","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":" * object.","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"public abstract class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    protected abstract String getUsageMessage();","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    protected abstract RemarkCommand getPersonRemarkCommand(Index index, Remark remark);","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"    public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"                PREFIX_REMARK);","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"        Index index;","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"                    getUsageMessage()), ive);","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"        Optional\u003cString\u003e remark \u003d argMultimap.getValue(PREFIX_REMARK);","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"        //guard clause for missing delimitter","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"        if (remark.isEmpty()) {","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, getUsageMessage()));","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        return getPersonRemarkCommand(index, new Remark(remark.get()));","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"hpkoh":34,"Haozeee":12,"jiayi1129":5}},{"path":"src/main/java/seedu/plannermd/logic/parser/remarkcommandparser/RemarkDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.remarkcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkDoctorCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * Parses input arguments and creates a RemarkDoctorCommand.","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public class RemarkDoctorCommandParser extends RemarkCommandParser {","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    protected String getUsageMessage() {","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"        return RemarkDoctorCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    protected RemarkCommand getPersonRemarkCommand(Index index, Remark remark) {","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"        return new RemarkDoctorCommand(index, remark);","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":21,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/remarkcommandparser/RemarkPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.remarkcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkPatientCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * Parses input arguments and creates a RemarkPatientCommand.","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public class RemarkPatientCommandParser extends RemarkCommandParser {","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    protected String getUsageMessage() {","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"        return RemarkPatientCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    protected RemarkCommand getPersonRemarkCommand(Index index, Remark remark) {","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"        return new RemarkPatientCommand(index, remark);","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":21,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/tagcommandparser/TagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.tagcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.tagcommand.AddTagCommand.MESSAGE_NOT_ADDED;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.tagcommand.TagCommand.TOO_MANY_TAGS_MESSAGE;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_DELETE;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.TagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-31"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.Parser;","lastModifiedDate":"2021-10-31"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"public abstract class TagCommandParser implements Parser\u003cTagCommand\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cflag\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    protected abstract String getUsageMessage();","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    protected abstract TagCommand getAddTagCommand(Index index, Tag tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    protected abstract TagCommand getDeleteTagCommand(Index index, Tag tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"     * @param userInput user\u0027s input string","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    public TagCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"        final String flag \u003d matcher.group(\"flag\");","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(arguments, PREFIX_TAG);","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"        Index index;","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, getUsageMessage()), ive);","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        if (argMultimap.getAllValues(PREFIX_TAG).size() \u003e 1) {","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(TOO_MANY_TAGS_MESSAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        String tagString \u003d argMultimap.getValue(PREFIX_TAG).orElse(\"\");","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        if (tagString.equals(\"\")) {","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"            throw new ParseException(MESSAGE_NOT_ADDED);","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        Tag tag \u003d ParserUtil.parseTag(tagString);","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"        if (flag.equals(FLAG_ADD)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"            return getAddTagCommand(index, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        } else if (flag.equals(FLAG_DELETE)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"            return getDeleteTagCommand(index, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, getUsageMessage()));","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"Haozeee":16,"hpkoh":18,"pualixue":39,"jiayi1129":5}},{"path":"src/main/java/seedu/plannermd/logic/parser/tagcommandparser/TagDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.tagcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.AddDoctorTagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeleteDoctorTagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.TagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"public class TagDoctorCommandParser extends TagCommandParser {","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    protected String getUsageMessage() {","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"        return AddDoctorTagCommand.MESSAGE_USAGE + \"\\n\" + DeleteDoctorTagCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    protected TagCommand getDeleteTagCommand(Index index, Tag tag) {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        return new DeleteDoctorTagCommand(index, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    protected TagCommand getAddTagCommand(Index index, Tag tag) {","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        return new AddDoctorTagCommand(index, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":23,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/logic/parser/tagcommandparser/TagPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.tagcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.AddPatientTagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeletePatientTagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.TagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"public class TagPatientCommandParser extends TagCommandParser {","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    protected String getUsageMessage() {","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"        return AddPatientTagCommand.MESSAGE_USAGE + \"\\n\" + DeletePatientTagCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    protected TagCommand getDeleteTagCommand(Index index, Tag tag) {","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"        return new DeletePatientTagCommand(index, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    protected TagCommand getAddTagCommand(Index index, Tag tag) {","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        return new AddPatientTagCommand(index, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":24,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentFilters;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"     * Type of Person and corresponding List thats currently displayed and interacted with.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"    enum State {","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"        PATIENT, DOCTOR","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_TODAY_APPOINTMENT \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            AppointmentFilters.todayAppointmentFilter().collectAllFilters();","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"     * Changes current state to  {@code state}.","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"    void setState(State state);","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"     * Returns current state of Model.","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"    State getState();","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"     * Toggle to the other state.","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"     * If current state is patients, toggle to doctors. Vice Versa","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"    void toggleState();","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"     * Returns the user prefs\u0027 PlannerMD file path.","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"    Path getPlannerMdFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"     * Sets the user prefs\u0027 PlannerMD file path.","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"    void setPlannerMdFilePath(Path plannerMdFilePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"     * Replaces PlannerMD data with the data in {@code plannerMd}.","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    void setPlannerMd(ReadOnlyPlannerMd plannerMd);","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    /** Returns the PlannerMd */","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    ReadOnlyPlannerMd getPlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"hpkoh"},"content":"    //// patient methods","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the PlannerMD.","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"     * Deletes the given patient.","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"     * The patient must exist in the PlannerMD.","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    void deletePatient(Patient target);","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"     * Adds the given patient.","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"     * {@code patient} must not already exist in the PlannerMD.","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"     * Replaces the given patient {@code target} with {@code editedPatient}.","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"     * {@code target} must exist in the PlannerMD.","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"     * The person identity of {@code editedPatient} must not be the same as another existing patient in the PlannerMD.","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    void setPatient(Patient target, Patient editedPatient);","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":112,"author":{"gitId":"hpkoh"},"content":"    //// doctor methods","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"hpkoh"},"content":"     * Returns true if a doctor with the same identity as {@code doctor} exists in the PlannerMD.","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"hpkoh"},"content":"    boolean hasDoctor(Doctor doctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"hpkoh"},"content":"     * Deletes the given doctor.","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"hpkoh"},"content":"     * The doctor must exist in the PlannerMD.","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"hpkoh"},"content":"    void deleteDoctor(Doctor target);","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"hpkoh"},"content":"     * Adds the given doctor.","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"hpkoh"},"content":"     * {@code doctor} must not already exist in the PlannerMD.","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"hpkoh"},"content":"    void addDoctor(Doctor doctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"hpkoh"},"content":"     * Replaces the given doctor {@code target} with {@code editedDoctor}.","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"hpkoh"},"content":"     * {@code target} must exist in the PlannerMD.","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"hpkoh"},"content":"     * The person identity of {@code editedDoctor} must not be the same as another existing doctor in the PlannerMD.","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"hpkoh"},"content":"    void setDoctor(Doctor target, Doctor editedDoctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"    //// appointment methods","lastModifiedDate":"2021-10-17"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if an existing appointment clashes with {@code appointment} in the PlannerMD.","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"    boolean isClashAppointment(Appointment appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"     * Returns true if an edited appointment clashes with {@code appointment} in the PlannerMD.","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"     * @param editedAppointment The appointment that is edited.","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"     * @param oldAppointment    The appointment before applying the changes.","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"    boolean isClashAppointmentForEdited(Appointment editedAppointment, Appointment oldAppointment);","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"     * Deletes the given appointment.","lastModifiedDate":"2021-10-17"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"     * The appointment must exist in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2021-10-17"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":164,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"     * Adds the given appointment.","lastModifiedDate":"2021-10-17"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"     * {@code appointment} must not already exist in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2021-10-17"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"     * {@code target} must exist in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"     * The appointment identity of {@code editedAppointment} must not be the","lastModifiedDate":"2021-10-17"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"     * same as another existing appointment in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":177,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"     * Returns an unmodifiable view of the filtered patient list","lastModifiedDate":"2021-09-29"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2021-09-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":187,"author":{"gitId":"hpkoh"},"content":"    void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":188,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":189,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":190,"author":{"gitId":"hpkoh"},"content":"     * Returns an unmodifiable view of the filtered doctor list","lastModifiedDate":"2021-10-07"},{"lineNumber":191,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":192,"author":{"gitId":"hpkoh"},"content":"    ObservableList\u003cDoctor\u003e getFilteredDoctorList();","lastModifiedDate":"2021-10-07"},{"lineNumber":193,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":194,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":195,"author":{"gitId":"hpkoh"},"content":"     * Updates the filter of the filtered doctor list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-07"},{"lineNumber":196,"author":{"gitId":"hpkoh"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-07"},{"lineNumber":197,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":198,"author":{"gitId":"hpkoh"},"content":"    void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"     * Returns an unmodifiable view of the filtered appointments list","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-17"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-17"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"    void updateFilteredAppointmentList(Predicate\u003c? super Appointment\u003e predicate);","lastModifiedDate":"2021-10-17"},{"lineNumber":210,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":211,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"hpkoh"},"content":"     * Deletes appointments with {@code person} from the appointment list","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"hpkoh"},"content":"     * @param person person whose appointments should be deleted","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"hpkoh"},"content":"     * @param \u003cT\u003e Subtype of Person","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"hpkoh"},"content":"    \u003cT extends Person\u003e void deleteAppointmentsWithPerson(T person);","lastModifiedDate":"2021-10-23"},{"lineNumber":218,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":219,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":220,"author":{"gitId":"hpkoh"},"content":"     * Updates appointments with {@code person} to {@code editedPerson} from the appointment list","lastModifiedDate":"2021-10-24"},{"lineNumber":221,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":222,"author":{"gitId":"hpkoh"},"content":"     * @param person person whose appointments should be updated","lastModifiedDate":"2021-10-23"},{"lineNumber":223,"author":{"gitId":"hpkoh"},"content":"     * @param editedPerson the person to replace {@code person} in existing appointments","lastModifiedDate":"2021-10-23"},{"lineNumber":224,"author":{"gitId":"hpkoh"},"content":"     * @param \u003cT\u003e Subtype of Person","lastModifiedDate":"2021-10-23"},{"lineNumber":225,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":226,"author":{"gitId":"hpkoh"},"content":"    \u003cT extends Person\u003e void editAppointmentsWithPerson(T person, T editedPerson);","lastModifiedDate":"2021-10-23"},{"lineNumber":227,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Haozeee":4,"hpkoh":82,"pualixue":8,"-":60,"jiayi1129":74}},{"path":"src/main/java/seedu/plannermd/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":" * Represents the in-memory model of the plannermd data.","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    private final PlannerMd plannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"    private final FilteredList\u003cDoctor\u003e filteredDoctors;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"    private State state;","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"     * Initializes a ModelManager with the given plannerMd and userPrefs.","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"     * Default state is Patients","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"    public ModelManager(ReadOnlyPlannerMd plannerMd, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        requireAllNonNull(plannerMd, userPrefs);","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        logger.fine(\"Initializing with plannermd: \" + plannerMd + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"        this.state \u003d State.PATIENT;","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        this.plannerMd \u003d new PlannerMd(plannerMd);","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.plannerMd.getPatientList());","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"        filteredDoctors \u003d new FilteredList\u003c\u003e(this.plannerMd.getDoctorList());","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        // Wrap the FilteredList over a SortedList such that list is always sorted","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        // UniqueAppointmentList is sorted using its natural ordering as per Appointment#compareTo","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.plannerMd.getAppointmentList().sorted());","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"        this(new PlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"    public void setState(State state) {","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        this.state \u003d state;","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"    public State getState() {","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"        return this.state;","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"hpkoh"},"content":"    public void toggleState() {","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"hpkoh"},"content":"        if (this.state \u003d\u003d State.PATIENT) {","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"hpkoh"},"content":"            setState(State.DOCTOR);","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"hpkoh"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"            setState(State.PATIENT);","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    public Path getPlannerMdFilePath() {","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"        return userPrefs.getPlannerMdFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    public void setPlannerMdFilePath(Path plannerMdFilePath) {","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(plannerMdFilePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"        userPrefs.setPlannerMdFilePath(plannerMdFilePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PlannerMd \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"    public void setPlannerMd(ReadOnlyPlannerMd plannerMd) {","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"        this.plannerMd.resetData(plannerMd);","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"    public ReadOnlyPlannerMd getPlannerMd() {","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"        return plannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"hpkoh"},"content":"    //// patient methods","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"        return plannerMd.hasPatient(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.removePatient(target);","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addPatient(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"hpkoh"},"content":"        updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.setPatient(target, editedPatient);","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":147,"author":{"gitId":"hpkoh"},"content":"    //// doctor methods","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"hpkoh"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"hpkoh"},"content":"        return plannerMd.hasDoctor(doctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"hpkoh"},"content":"    public void deleteDoctor(Doctor target) {","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"hpkoh"},"content":"        plannerMd.removeDoctor(target);","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":161,"author":{"gitId":"hpkoh"},"content":"    public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"hpkoh"},"content":"        plannerMd.addDoctor(doctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"hpkoh"},"content":"        updateFilteredDoctorList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"hpkoh"},"content":"    public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"hpkoh"},"content":"        requireAllNonNull(target, editedDoctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"hpkoh"},"content":"        plannerMd.setDoctor(target, editedDoctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"    //// appointment methods","lastModifiedDate":"2021-10-17"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":177,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"        return plannerMd.hasAppointment(appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"    public boolean isClashAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"        requireAllNonNull(appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"        return plannerMd.isClashAppointment(appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"    public boolean isClashAppointmentForEdited(Appointment editedAppointment, Appointment oldAppointment) {","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"pualixue"},"content":"        requireAllNonNull(editedAppointment, oldAppointment);","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"pualixue"},"content":"        return plannerMd.isClashAppointmentForEdited(editedAppointment, oldAppointment);","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-10-17"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.removeAppointment(target);","lastModifiedDate":"2021-10-17"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addAppointment(appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":213,"author":{"gitId":"hpkoh"},"content":"     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of","lastModifiedDate":"2021-10-07"},{"lineNumber":214,"author":{"gitId":"jiayi1129"},"content":"     * {@code versionedPlannerMd}","lastModifiedDate":"2021-09-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":217,"author":{"gitId":"jiayi1129"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":218,"author":{"gitId":"jiayi1129"},"content":"        return filteredPatients;","lastModifiedDate":"2021-09-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":222,"author":{"gitId":"hpkoh"},"content":"    public void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate) {","lastModifiedDate":"2021-10-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":224,"author":{"gitId":"jiayi1129"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":227,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":228,"author":{"gitId":"hpkoh"},"content":"     * Returns an unmodifiable view of the list of {@code Doctor} backed by the internal list of","lastModifiedDate":"2021-10-07"},{"lineNumber":229,"author":{"gitId":"hpkoh"},"content":"     * {@code versionedPlannerMd}","lastModifiedDate":"2021-10-07"},{"lineNumber":230,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":231,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":232,"author":{"gitId":"hpkoh"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":233,"author":{"gitId":"hpkoh"},"content":"        return filteredDoctors;","lastModifiedDate":"2021-10-07"},{"lineNumber":234,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":235,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":236,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":237,"author":{"gitId":"hpkoh"},"content":"    public void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate) {","lastModifiedDate":"2021-10-07"},{"lineNumber":238,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":239,"author":{"gitId":"hpkoh"},"content":"        filteredDoctors.setPredicate(predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":240,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":241,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":242,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":243,"author":{"gitId":"jiayi1129"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-17"},{"lineNumber":244,"author":{"gitId":"jiayi1129"},"content":"        return filteredAppointments;","lastModifiedDate":"2021-10-17"},{"lineNumber":245,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":246,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":247,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":248,"author":{"gitId":"jiayi1129"},"content":"    public void updateFilteredAppointmentList(Predicate\u003c? super Appointment\u003e predicate) {","lastModifiedDate":"2021-10-17"},{"lineNumber":249,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-17"},{"lineNumber":250,"author":{"gitId":"jiayi1129"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2021-10-17"},{"lineNumber":251,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":252,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":253,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":254,"author":{"gitId":"hpkoh"},"content":"    public \u003cT extends Person\u003e void deleteAppointmentsWithPerson(T person) {","lastModifiedDate":"2021-10-23"},{"lineNumber":255,"author":{"gitId":"hpkoh"},"content":"        plannerMd.deleteAppointmentsWithPerson(person);","lastModifiedDate":"2021-10-23"},{"lineNumber":256,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":257,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":258,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":259,"author":{"gitId":"hpkoh"},"content":"    public \u003cT extends Person\u003e void editAppointmentsWithPerson(T person, T editedPerson) {","lastModifiedDate":"2021-10-23"},{"lineNumber":260,"author":{"gitId":"hpkoh"},"content":"        plannerMd.editAppointmentsWithPerson(person, editedPerson);","lastModifiedDate":"2021-10-23"},{"lineNumber":261,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":262,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":277,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"jiayi1129"},"content":"        return plannerMd.equals(other.plannerMd)","lastModifiedDate":"2021-09-26"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":280,"author":{"gitId":"hpkoh"},"content":"                \u0026\u0026 state.equals(other.state)","lastModifiedDate":"2021-10-07"},{"lineNumber":281,"author":{"gitId":"hpkoh"},"content":"                \u0026\u0026 filteredPatients.equals(other.filteredPatients)","lastModifiedDate":"2021-10-07"},{"lineNumber":282,"author":{"gitId":"jiayi1129"},"content":"                \u0026\u0026 filteredDoctors.equals(other.filteredDoctors)","lastModifiedDate":"2021-10-17"},{"lineNumber":283,"author":{"gitId":"jiayi1129"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);","lastModifiedDate":"2021-10-17"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hpkoh":84,"Haozeee":2,"pualixue":6,"-":106,"jiayi1129":87}},{"path":"src/main/java/seedu/plannermd/model/PlannerMd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.UniquePersonList;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":" * Wraps all data at the Plannermd level","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"public class PlannerMd implements ReadOnlyPlannerMd {","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"    private final UniquePersonList\u003cPatient\u003e patients;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"    private final UniquePersonList\u003cDoctor\u003e doctors;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    private final UniqueAppointmentList appointments;","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"        patients \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        doctors \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"    public PlannerMd() {","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"     * Creates an PlannerMd using the Persons in the {@code toBeCopied}","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    public PlannerMd(ReadOnlyPlannerMd toBeCopied) {","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"     * Resets the existing data of this {@code PlannerMd} with {@code newData}.","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"    public void resetData(ReadOnlyPlannerMd newData) {","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        setPatients(newData.getPatientList());","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"        setDoctors(newData.getDoctorList());","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"     * Replaces the contents of the patients list with {@code patients}.","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"        this.patients.setPersons(patients);","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"hpkoh"},"content":"     * Replaces the contents of the doctors list with {@code doctors}.","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"hpkoh"},"content":"     * {@code doctors} must not contain duplicate doctors.","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"    public void setDoctors(List\u003cDoctor\u003e doctors) {","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"hpkoh"},"content":"        this.doctors.setPersons(doctors);","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"     * Replaces the contents of the appointments list with {@code appointments}.","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"     * {@code appointments} must not contain duplicate appointments.","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"hpkoh"},"content":"    //Patients","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the PlannerMD.","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"        return patients.contains(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the PlannerMD.","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    public Optional\u003cPatient\u003e getExactPatient(Patient patient) {","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"        return patients.getExactPerson(patient);","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"     * Adds a patient to the PlannerMD.","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"     * The patient must not already exist in the PlannerMD.","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"        patients.add(p);","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"     * {@code target} must exist in the PlannerMD.","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"     * The person identity of {@code editedPatient} must not be the same as another existing patient in the PlannerMD.","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"hpkoh"},"content":"        patients.setPerson(target, editedPatient);","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"     * Removes {@code key} from this {@code PlannerMd}.","lastModifiedDate":"2021-09-26"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"     * {@code key} must exist in the PlannerMD.","lastModifiedDate":"2021-09-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"    public void removePatient(Patient key) {","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"        patients.remove(key);","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"hpkoh"},"content":"    //Doctors","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"     * Returns true if a doctor with the same identity as {@code patient} exists in the PlannerMD.","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":141,"author":{"gitId":"hpkoh"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-06"},{"lineNumber":142,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-10-06"},{"lineNumber":143,"author":{"gitId":"hpkoh"},"content":"        return doctors.contains(doctor);","lastModifiedDate":"2021-10-06"},{"lineNumber":144,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":145,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if a doctor with the same equality as {@code patient} exists in the PlannerMD.","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"    public Optional\u003cDoctor\u003e getExactDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"        return doctors.getExactPerson(doctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":155,"author":{"gitId":"hpkoh"},"content":"     * Adds a doctor to the PlannerMD.","lastModifiedDate":"2021-10-06"},{"lineNumber":156,"author":{"gitId":"hpkoh"},"content":"     * The doctor must not already exist in the PlannerMD.","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":158,"author":{"gitId":"hpkoh"},"content":"    public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-06"},{"lineNumber":159,"author":{"gitId":"hpkoh"},"content":"        doctors.add(doctor);","lastModifiedDate":"2021-10-06"},{"lineNumber":160,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":161,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":162,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":163,"author":{"gitId":"hpkoh"},"content":"     * Replaces the given doctor {@code target} in the list with {@code editedDoctor}.","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"hpkoh"},"content":"     * {@code target} must exist in the PlannerMD.","lastModifiedDate":"2021-10-06"},{"lineNumber":165,"author":{"gitId":"hpkoh"},"content":"     * The doctor identity of {@code editedDoctor} must not be the same as another existing doctor in the PlannerMD.","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":167,"author":{"gitId":"hpkoh"},"content":"    public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2021-10-06"},{"lineNumber":168,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(editedDoctor);","lastModifiedDate":"2021-10-06"},{"lineNumber":169,"author":{"gitId":"hpkoh"},"content":"        doctors.setPerson(target, editedDoctor);","lastModifiedDate":"2021-10-06"},{"lineNumber":170,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":171,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":172,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":173,"author":{"gitId":"hpkoh"},"content":"     * Removes {@code key} from this {@code PlannerMd}.","lastModifiedDate":"2021-10-06"},{"lineNumber":174,"author":{"gitId":"hpkoh"},"content":"     * {@code key} must exist in the PlannerMD.","lastModifiedDate":"2021-10-06"},{"lineNumber":175,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":176,"author":{"gitId":"hpkoh"},"content":"    public void removeDoctor(Doctor key) {","lastModifiedDate":"2021-10-06"},{"lineNumber":177,"author":{"gitId":"hpkoh"},"content":"        doctors.remove(key);","lastModifiedDate":"2021-10-06"},{"lineNumber":178,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":179,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"    //Appointments","lastModifiedDate":"2021-10-17"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":186,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":187,"author":{"gitId":"jiayi1129"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":188,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":189,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":190,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if an existing appointment clashes with {@code appointment} in the PlannerMD.","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"    public boolean isClashAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"        for (Appointment existingAppointment : appointments) {","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"            if (appointment.isClash(existingAppointment)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"                return true;","lastModifiedDate":"2021-10-24"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        return false;","lastModifiedDate":"2021-10-24"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":203,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"pualixue"},"content":"     * Returns true if an existing appointment clashes with the edited appointment in the PlannerMD.","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"pualixue"},"content":"     * @param editedAppointment The appointment that is edited.","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"pualixue"},"content":"     * @param oldAppointment    The appointment before applying the changes.","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"pualixue"},"content":"    public boolean isClashAppointmentForEdited(Appointment editedAppointment, Appointment oldAppointment) {","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"pualixue"},"content":"        requireAllNonNull(editedAppointment, oldAppointment);","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"pualixue"},"content":"        for (Appointment existingAppointment : appointments) {","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"pualixue"},"content":"            if (oldAppointment.isSameAppointment(existingAppointment)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"pualixue"},"content":"                // skip comparing, otherwise the edited appointment will almost always","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"pualixue"},"content":"                // clash with itself before the changes","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"pualixue"},"content":"                continue;","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"pualixue"},"content":"            if (editedAppointment.isClash(existingAppointment)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"pualixue"},"content":"                return true;","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"pualixue"},"content":"        return false;","lastModifiedDate":"2021-10-26"},{"lineNumber":222,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":224,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":225,"author":{"gitId":"jiayi1129"},"content":"     * Adds an appointment to the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":226,"author":{"gitId":"jiayi1129"},"content":"     * The appointment must not already exist in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":227,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":228,"author":{"gitId":"jiayi1129"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":229,"author":{"gitId":"jiayi1129"},"content":"        appointments.add(appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":230,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":231,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":233,"author":{"gitId":"jiayi1129"},"content":"     * Replaces the given doctor {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2021-10-17"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"     * {@code target} must exist in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"     * The appointment identity of {@code editedAppointment} must not be the","lastModifiedDate":"2021-10-17"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"     * same as another existing appointment in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":237,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":238,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":239,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":240,"author":{"gitId":"jiayi1129"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":241,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":242,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":243,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":244,"author":{"gitId":"jiayi1129"},"content":"     * Removes {@code key} from this {@code PlannerMd}.","lastModifiedDate":"2021-10-17"},{"lineNumber":245,"author":{"gitId":"jiayi1129"},"content":"     * {@code key} must exist in the PlannerMD.","lastModifiedDate":"2021-10-17"},{"lineNumber":246,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":247,"author":{"gitId":"jiayi1129"},"content":"    public void removeAppointment(Appointment key) {","lastModifiedDate":"2021-10-17"},{"lineNumber":248,"author":{"gitId":"jiayi1129"},"content":"        appointments.remove(key);","lastModifiedDate":"2021-10-17"},{"lineNumber":249,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":250,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":251,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":252,"author":{"gitId":"hpkoh"},"content":"     * Deletes appointments with {@code person} from the appointment list","lastModifiedDate":"2021-10-23"},{"lineNumber":253,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":254,"author":{"gitId":"hpkoh"},"content":"     * @param person person whose appointments should be deleted","lastModifiedDate":"2021-10-23"},{"lineNumber":255,"author":{"gitId":"hpkoh"},"content":"     * @param \u003cT\u003e    Subtype of Person","lastModifiedDate":"2021-10-23"},{"lineNumber":256,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":257,"author":{"gitId":"hpkoh"},"content":"    public \u003cT extends Person\u003e void deleteAppointmentsWithPerson(T person) {","lastModifiedDate":"2021-10-23"},{"lineNumber":258,"author":{"gitId":"hpkoh"},"content":"        appointments.deleteAppointmentsWithPerson(person);","lastModifiedDate":"2021-10-23"},{"lineNumber":259,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":260,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":261,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":262,"author":{"gitId":"hpkoh"},"content":"     * Updates appointments with {@code person} to {@code editedPerson} from the appointment list","lastModifiedDate":"2021-10-24"},{"lineNumber":263,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":264,"author":{"gitId":"hpkoh"},"content":"     * @param person       person whose appointments should be updated","lastModifiedDate":"2021-10-23"},{"lineNumber":265,"author":{"gitId":"hpkoh"},"content":"     * @param editedPerson the person to replace {@code person} in existing appointments","lastModifiedDate":"2021-10-23"},{"lineNumber":266,"author":{"gitId":"hpkoh"},"content":"     * @param \u003cT\u003e          Subtype of Person","lastModifiedDate":"2021-10-23"},{"lineNumber":267,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":268,"author":{"gitId":"hpkoh"},"content":"    public \u003cT extends Person\u003e void editAppointmentsWithPerson(T person, T editedPerson) {","lastModifiedDate":"2021-10-23"},{"lineNumber":269,"author":{"gitId":"hpkoh"},"content":"        appointments.editAppointmentsWithPerson(person, editedPerson);","lastModifiedDate":"2021-10-23"},{"lineNumber":270,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":271,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"hpkoh"},"content":"        return patients.asUnmodifiableObservableList().size() + \" patients\\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":277,"author":{"gitId":"jiayi1129"},"content":"                + doctors.asUnmodifiableObservableList().size() + \" doctors\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"jiayi1129"},"content":"                + appointments.asUnmodifiableObservableList().size() + \" appointments\";","lastModifiedDate":"2021-10-25"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"jiayi1129"},"content":"    public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":283,"author":{"gitId":"jiayi1129"},"content":"        return patients.asUnmodifiableObservableList();","lastModifiedDate":"2021-09-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":286,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":287,"author":{"gitId":"hpkoh"},"content":"    public ObservableList\u003cDoctor\u003e getDoctorList() {","lastModifiedDate":"2021-10-06"},{"lineNumber":288,"author":{"gitId":"hpkoh"},"content":"        return doctors.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-06"},{"lineNumber":289,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":290,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":291,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":292,"author":{"gitId":"jiayi1129"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2021-10-17"},{"lineNumber":293,"author":{"gitId":"jiayi1129"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-17"},{"lineNumber":294,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":295,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":299,"author":{"gitId":"jiayi1129"},"content":"                || (other instanceof PlannerMd // instanceof handles nulls","lastModifiedDate":"2021-09-26"},{"lineNumber":300,"author":{"gitId":"hpkoh"},"content":"                \u0026\u0026 doctors.equals(((PlannerMd) other).doctors)","lastModifiedDate":"2021-10-06"},{"lineNumber":301,"author":{"gitId":"hpkoh"},"content":"                \u0026\u0026 patients.equals(((PlannerMd) other).patients))","lastModifiedDate":"2021-10-24"},{"lineNumber":302,"author":{"gitId":"hpkoh"},"content":"                \u0026\u0026 appointments.equals(((PlannerMd) other).appointments);","lastModifiedDate":"2021-10-24"},{"lineNumber":303,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":308,"author":{"gitId":"hpkoh"},"content":"        return Objects.hash(patients, doctors);","lastModifiedDate":"2021-10-07"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hpkoh":94,"Haozeee":1,"pualixue":24,"-":76,"jiayi1129":115}},{"path":"src/main/java/seedu/plannermd/model/ReadOnlyPlannerMd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":" * Unmodifiable view of a PlannerMD","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"public interface ReadOnlyPlannerMd {","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"     * Returns an unmodifiable view of the patient list.","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    ObservableList\u003cPatient\u003e getPatientList();","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"     * Returns an unmodifiable view of the doctor list.","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"    ObservableList\u003cDoctor\u003e getDoctorList();","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"     * Returns an unmodifiable view of the appointment list.","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"     * This list will not contain any duplicate appointments.","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hpkoh":7,"-":11,"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    Path getPlannerMdFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"-":13,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    private Path plannerMdFilePath \u003d Paths.get(\"data\" , \"plannermd.json\");","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        setPlannerMdFilePath(newUserPrefs.getPlannerMdFilePath());","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    public Path getPlannerMdFilePath() {","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        return plannerMdFilePath;","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    public void setPlannerMdFilePath(Path plannerMdFilePath) {","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(plannerMdFilePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        this.plannerMdFilePath \u003d plannerMdFilePath;","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"                \u0026\u0026 plannerMdFilePath.equals(o.plannerMdFilePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        return Objects.hash(guiSettings, plannerMdFilePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        sb.append(\"\\nLocal data file location : \" + plannerMdFilePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":75,"jiayi1129":12}},{"path":"src/main/java/seedu/plannermd/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":" * Represents an Appointment in the plannermd. Guarantees: details are present and","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":" * not null, field values are validated, immutable.","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"public class Appointment implements Comparable\u003cAppointment\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    private final Patient patient;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"    private final Doctor doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"    private final AppointmentDate date;","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"    private final Session session;","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"    private final Remark remark;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"     * Constructs an Appointment.","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    public Appointment(Patient patient, Doctor doctor, AppointmentDate date,","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"                       Session session, Remark remark) {","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"        requireAllNonNull(patient, doctor, date, session, remark);","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"        this.doctor \u003d doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"        this.session \u003d session;","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"    public Patient getPatient() {","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        return patient;","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"    public Doctor getDoctor() {","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        return doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"    public AppointmentDate getAppointmentDate() {","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        return date;","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"    public Session getSession() {","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        return session;","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"    public Remark getRemark() {","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        return remark;","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"     * Checks if this Appointment clashes with the given Appointment.","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"     * There is a clash if both Appointments have the same Patient or Doctor with an overlapping date and time.","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"    public boolean isClash(Appointment otherAppointment) {","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        boolean isSamePatient \u003d getPatient().isSamePerson(otherAppointment.getPatient());","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        boolean isSameDoctor \u003d getDoctor().isSamePerson(otherAppointment.getDoctor());","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        boolean isDateClash \u003d getAppointmentDate().equals(otherAppointment.getAppointmentDate());","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        boolean isSessionClash \u003d getSession().isClash(otherAppointment.getSession());","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        return (isSamePatient || isSameDoctor) \u0026\u0026 isDateClash \u0026\u0026 isSessionClash;","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"     * Returns true if both appointments have the same patient, doctor, date, session.","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"     * This defines a weaker notion of equality between two appointments.","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"    public boolean isSameAppointment(Appointment otherAppointment) {","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        if (otherAppointment \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        return otherAppointment !\u003d null","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 otherAppointment.getPatient().equals(getPatient())","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 otherAppointment.getDoctor().equals(getDoctor())","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 otherAppointment.getAppointmentDate().equals(getAppointmentDate())","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 otherAppointment.getSession().equals(getSession());","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"     * Gets the start time of the appointment as a {@code LocalDateTime}","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"    public LocalDateTime getAppointmentStartTime() {","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"        LocalDate apptDate \u003d date.date;","lastModifiedDate":"2021-10-17"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        LocalTime apptTime \u003d session.start;","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        return LocalDateTime.of(apptDate, apptTime);","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"     * Compares this appointment to another appointment.","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"     * The comparison is based on the date and start time of the appointment session.","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"     * @param otherAppointment Given Appointment to compare to, not null.","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"     * @return The comparator value, negative if less, positive if greater, and zero if equal.","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    public int compareTo(Appointment otherAppointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(otherAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"        return date.isEqualDate(otherAppointment.date)","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"                ? session.compareStartTimeTo(otherAppointment.session)","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"                : date.compareTo(otherAppointment.date);","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"     * Returns true if both appointments have the same fields.","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"     * This defines a stronger notion of equality between two appointments.","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"        return otherAppointment.getPatient().equals(getPatient())","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 otherAppointment.getDoctor().equals(getDoctor())","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 otherAppointment.getAppointmentDate().equals(getAppointmentDate())","lastModifiedDate":"2021-10-15"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 otherAppointment.getSession().equals(getSession())","lastModifiedDate":"2021-10-15"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 otherAppointment.getRemark().equals(getRemark());","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"        return Objects.hash(patient, doctor, date, session, remark);","lastModifiedDate":"2021-10-15"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"    public String toString() {","lastModifiedDate":"2021-10-14"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"        final StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-10-14"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"        sb.append(\"Patient: \").append(getPatient().getName())","lastModifiedDate":"2021-10-14"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"                .append(\"; Doctor: \").append(getDoctor().getName())","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"                .append(\"; Date: \").append(getAppointmentDate())","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"                .append(\"; \").append(getSession());","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"        if (!remark.isEmpty()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"            sb.append(\"; Remark: \").append(getRemark());","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"Haozeee":12,"pualixue":127,"jiayi1129":18}},{"path":"src/main/java/seedu/plannermd/model/appointment/AppointmentContainsDoctorPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.util.StringUtil;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" * Tests that a {@code Appointment} has a doctor whose name matches any of the keywords given.","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"public class AppointmentContainsDoctorPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * Creates an AppointmentContainsDoctorPredicate based on a list of keywords.","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public AppointmentContainsDoctorPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(keywords);","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        return keywords.stream().anyMatch(keyword -\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"                StringUtil.containsWordIgnoreCase(appointment.getDoctor().getName().fullName, keyword));","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"                || (other instanceof AppointmentContainsDoctorPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 keywords.equals(((AppointmentContainsDoctorPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    public String toString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        return PREFIX_DOCTOR + String.join(\" \", keywords) + \" \";","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Haozeee":43}},{"path":"src/main/java/seedu/plannermd/model/appointment/AppointmentContainsPatientPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.util.StringUtil;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" * Tests that a {@code Appointment} has a patient whose name matches any of the keywords given.","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"public class AppointmentContainsPatientPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * Creates an AppointmentContainsPredicate based on a given list of keywords.","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public AppointmentContainsPatientPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(keywords);","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        return keywords.stream().anyMatch(keyword -\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"                StringUtil.containsWordIgnoreCase(appointment.getPatient().getName().fullName, keyword));","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"                || (other instanceof AppointmentContainsPatientPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 keywords.equals(((AppointmentContainsPatientPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    public String toString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        return PREFIX_PATIENT + String.join(\" \", keywords) + \" \";","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"Haozeee":43}},{"path":"src/main/java/seedu/plannermd/model/appointment/AppointmentDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":" * Represents an Appointment\u0027s date in the plannermd.","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAppointmentDate(String)}","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"public class AppointmentDate implements Comparable\u003cAppointmentDate\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be of the format DD/MM/YYYY \"","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"            + \"1. Day must be between 1-31 (0 in front of single digit is optional)\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"            + \"2. Month must be between 1-12 (0 in front of single digit is optional)\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"            + \"3. Year must be 4 characters.\";","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\")","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"    public static final DateTimeFormatter DISPLAYED_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"    public final LocalDate date;","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"     * Constructs an {@code AppointmentDate}.","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"     * @param date A valid date.","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"    public AppointmentDate(String date) {","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"        checkArgument(isValidAppointmentDate(date), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"        this.date \u003d LocalDate.parse(date, DATE_FORMATTER);","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"     * Returns if a given string is a valid date.","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"    public static boolean isValidAppointmentDate(String test) {","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        try {","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"            LocalDate.parse(test, DATE_FORMATTER);","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"     * Returns the date in input format.","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    public String toInputStringFormat() {","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        return date.format(DATE_FORMATTER);","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if the given date is equal to date.","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    public boolean isEqualDate(AppointmentDate otherDate) {","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        return date.isEqual(otherDate.date);","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"    public String toString() {","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        return date.format(DISPLAYED_DATE_FORMATTER);","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        if (other \u003d\u003d this) { // short circuit if same object","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        if (!(other instanceof AppointmentDate)) { // instanceof handles nulls","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        AppointmentDate apptDate \u003d (AppointmentDate) other;","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        return date.equals(apptDate.date);","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        return date.hashCode();","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"     * Compares this appointment date to another appointment date.","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"     * The comparison is primarily based on the date, from earliest to latest.","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"     * It is \"consistent with equals\", as defined by Comparable.","lastModifiedDate":"2021-10-17"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"     * @param otherAppointmentDate Given AppointmentDate to compare to, not null.","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"     * @return The comparator value, negative if less, positive if greater, and zero if equal.","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    public int compareTo(AppointmentDate otherAppointmentDate) {","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"        return date.compareTo(otherAppointmentDate.date);","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Haozeee":7,"pualixue":68,"jiayi1129":28}},{"path":"src/main/java/seedu/plannermd/model/appointment/AppointmentFieldsContainKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.util.StringUtil;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"public class AppointmentFieldsContainKeywordsPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentFieldsContainKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"                .anyMatch(keyword -\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"                        StringUtil.containsWordIgnoreCase(appointment.getPatient().getName().fullName, keyword)","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"                );","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"                || (other instanceof seedu.plannermd.model.appointment.AppointmentFieldsContainKeywordsPredicate","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"                // instanceof handles nulls","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 keywords.equals((","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"                        (seedu.plannermd.model.appointment.AppointmentFieldsContainKeywordsPredicate) other)","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"                            .keywords)); // state check","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"ChuangZheQuan":36}},{"path":"src/main/java/seedu/plannermd/model/appointment/AppointmentIsAfterPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" * Tests that a {@code Appointment} has a starting time after the start dateTime given.","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"public class AppointmentIsAfterPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    private final LocalDateTime filterStartDateTime;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * Creates an AppointmentIsAfterPredicate with a LocalDate object. The predicate is not time sensitive.","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * All appointments on that particular {@code filterStartDate} will return true when tested on the predicate.","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public AppointmentIsAfterPredicate(LocalDate filterStartDate) {","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(filterStartDate);","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        this.filterStartDateTime \u003d filterStartDate.atStartOfDay();","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     * Creates an AppointmentIsAfterPredicate with a LocalDateTime object. The predicate","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"     * is time sensitive based on the time specified in {@code filteredStartDateTime}.","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    public AppointmentIsAfterPredicate(LocalDateTime filterStartDateTime) {","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(filterStartDateTime);","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        this.filterStartDateTime \u003d filterStartDateTime.truncatedTo(ChronoUnit.MINUTES);","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        LocalDateTime apptStartTime \u003d appointment.getAppointmentStartTime();","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        return !apptStartTime.isBefore(filterStartDateTime);","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"                || (other instanceof AppointmentIsAfterPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 filterStartDateTime.equals(((AppointmentIsAfterPredicate) other).filterStartDateTime));","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    public String toString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        return PREFIX_START + filterStartDateTime.format(AppointmentDate.DATE_FORMATTER) + \" \";","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"Haozeee":53}},{"path":"src/main/java/seedu/plannermd/model/appointment/AppointmentIsBeforePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_END;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" * Tests that a {@code Appointment} has a starting time that is before the endDate given.","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"public class AppointmentIsBeforePredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    private final LocalDateTime filerEndDateTime;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * Creates an AppointmentIsAfterPredicate with a LocalDate object.","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    public AppointmentIsBeforePredicate(LocalDate filterEndDateTime) {","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(filterEndDateTime);","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        // The filter end date should be the last moment of the day since the filter is inclusive","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        // of the end date itself.","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        this.filerEndDateTime \u003d filterEndDateTime.atTime(23, 59, 59, 99);","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        LocalDateTime apptStartTime \u003d appointment.getAppointmentStartTime();","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        return apptStartTime.isBefore(filerEndDateTime);","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"                || (other instanceof AppointmentIsBeforePredicate // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 filerEndDateTime.equals(((AppointmentIsBeforePredicate) other).filerEndDateTime)); // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    public String toString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        return PREFIX_END + filerEndDateTime.format(AppointmentDate.DATE_FORMATTER) + \" \";","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"Haozeee":44}},{"path":"src/main/java/seedu/plannermd/model/appointment/Duration.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":" * Represents a Session\u0027s duration of an Appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDuration(Integer)}","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"public class Duration {","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"The duration should be an integer between 1-120 minutes.\";","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"    public static final Integer DEFAULT_DURATION \u003d 10;","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"    public final Integer duration;","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"    private Duration() {","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"        this.duration \u003d DEFAULT_DURATION;","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"     * Constructs a {@code Duration}.","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"     * @param duration Duration in minutes.","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"    public Duration(Integer duration) {","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"        requireNonNull(duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"     * Returns true if a given integer is a valid duration.","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"     * A valid duration is between 1-120 minutes.","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"    public static boolean isValidDuration(Integer duration) {","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"        return duration \u003e\u003d 1 \u0026\u0026 duration \u003c\u003d 120;","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"     * Factory method to return a default duration.","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"    public static Duration getDefaultDuration() {","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        return new Duration();","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"     * Returns the number of minutes.","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"    public Integer getMinutes() {","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        return duration;","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"    public String toString() {","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        return duration + \" minutes\";","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"                || (other instanceof Duration // instanceof handles nulls","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"                \u0026\u0026 duration.equals(((Duration) other).duration)); // state check","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"        return duration.hashCode();","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"pualixue":64,"jiayi1129":8}},{"path":"src/main/java/seedu/plannermd/model/appointment/Session.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":" * Represents an Appointment\u0027s session in the plannermd.","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"public class Session {","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Times should be of the format HH:MM \"","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"            + \"1. Hour must be between 0-23\\n\"","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"            + \"2. Minute must be between 0-59.\";","lastModifiedDate":"2021-10-31"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"H:m\")","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"            .withResolverStyle(ResolverStyle.SMART);","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"    public static final DateTimeFormatter DISPLAYED_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"    public static final String MESSAGE_END_WITHIN_SAME_DAY \u003d \"The appointment should end within the same day.\";","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"    public final LocalTime start;","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    public final LocalTime end;","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"    public final Duration duration;","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"     * Constructs a {@code Session}.","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"     * @param startTime A valid starting time.","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"     * @param duration  Duration of the session in minutes.","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"    public Session(String startTime, Duration duration) {","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"        requireNonNull(startTime);","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        requireNonNull(duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"        checkArgument(isValidTime(startTime), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        this.start \u003d LocalTime.parse(startTime, TIME_FORMATTER);","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"        this.end \u003d calculateEndTime(this.start, this.duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"    private LocalTime calculateEndTime(LocalTime start, Duration duration) {","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        return start.plusMinutes(duration.duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"     * Returns if a given string is a valid time.","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"     * @param test Input string representing a time.","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"    public static boolean isValidTime(String test) {","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        try {","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"            LocalTime.parse(test, TIME_FORMATTER);","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"     * Returns if the starting and ending time are both in the same day.","lastModifiedDate":"2021-10-30"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    public boolean isEndWithinSameDay() {","lastModifiedDate":"2021-10-30"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        return end.isAfter(start);","lastModifiedDate":"2021-10-30"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"     * Checks if the two Sessions are overlapping.","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"     * There is an overlap if both Sessions have at least one point of time in common.","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"    public boolean isClash(Session otherSession) {","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        LocalTime thisStartTime \u003d this.start;","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        LocalTime thisEndTime \u003d this.end;","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        LocalTime otherStartTime \u003d otherSession.start;","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"        LocalTime otherEndTime \u003d otherSession.end;","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"        boolean isThisStartTimeBetweenOtherSession \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"                isTimeBetweenExclusiveEnd(thisStartTime, otherStartTime, otherEndTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        boolean isThisEndTimeBetweenOtherSession \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"                isTimeBetweenExclusiveStart(thisEndTime, otherStartTime, otherEndTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"        boolean isOtherStartTimeBetweenThisSession \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"                isTimeBetweenExclusiveEnd(otherStartTime, thisStartTime, thisEndTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"        boolean isOtherEndTimeBetweenThisSession \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"                isTimeBetweenExclusiveStart(otherEndTime, thisStartTime, thisEndTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"        return isThisStartTimeBetweenOtherSession || isThisEndTimeBetweenOtherSession","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"                || isOtherStartTimeBetweenThisSession || isOtherEndTimeBetweenThisSession;","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"     * Compares this session start time to input session start time.","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"     * The comparison is based on the time-line position of the local times within a day.","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"     * It is \"consistent with equals\", as defined by Comparable.","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"     * @param otherSession Given Session to compare to, not null.","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"     * @return The comparator value, negative if less, positive if greater, and zero if equal.","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    public int compareStartTimeTo(Session otherSession) {","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"        return start.compareTo(otherSession.start);","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"     * Checks if the given time is between the start (exclusive) and the end (inclusive).","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"     * @param time  Given time to be checked.","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"     * @param start Start time.","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"     * @param end   End time.","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"     * @return True if the given time is between the start and end times, false otherwise.","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"    private static boolean isTimeBetweenExclusiveStart(LocalTime time, LocalTime start, LocalTime end) {","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"        return time.isAfter(start) \u0026\u0026 !time.isAfter(end);","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"     * Checks if the given time is between the start (inclusive) and the end (exclusive).","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"     * @param time  Given time to be checked.","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"     * @param start Start time.","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"     * @param end   End time.","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"     * @return True if the given time is between the start and end times, false otherwise.","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"    private static boolean isTimeBetweenExclusiveEnd(LocalTime time, LocalTime start, LocalTime end) {","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"        return !time.isBefore(start) \u0026\u0026 time.isBefore(end);","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"     * Returns the string representation of the formatted start time.","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"    public String getFormattedStartTime() {","lastModifiedDate":"2021-10-15"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"        return start.format(DISPLAYED_TIME_FORMATTER);","lastModifiedDate":"2021-10-15"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"     * Returns the string representation of the formatted end time.","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"    public String getFormattedEndTime() {","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"        return end.format(DISPLAYED_TIME_FORMATTER);","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"     * Returns the number of minutes in this Session.","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"    public Integer getMinutes() {","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"        return duration.getMinutes();","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"     * Returns the start time in input format.","lastModifiedDate":"2021-10-23"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"    public String toInputStringFormat() {","lastModifiedDate":"2021-10-23"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"        return start.format(TIME_FORMATTER);","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":164,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"pualixue"},"content":"    public String toString() {","lastModifiedDate":"2021-10-15"},{"lineNumber":166,"author":{"gitId":"pualixue"},"content":"        return \"Start: \" + getFormattedStartTime() + \"; End: \" + getFormattedEndTime();","lastModifiedDate":"2021-10-15"},{"lineNumber":167,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":168,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":169,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-15"},{"lineNumber":171,"author":{"gitId":"pualixue"},"content":"        if (other \u003d\u003d this) { // short circuit if same object","lastModifiedDate":"2021-10-15"},{"lineNumber":172,"author":{"gitId":"pualixue"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":173,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":175,"author":{"gitId":"pualixue"},"content":"        if (!(other instanceof Session)) { // instanceof handles nulls","lastModifiedDate":"2021-10-15"},{"lineNumber":176,"author":{"gitId":"pualixue"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":177,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":178,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"pualixue"},"content":"        Session otherSession \u003d (Session) other;","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"        return start.equals(otherSession.start) \u0026\u0026 duration.equals(otherSession.duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":183,"author":{"gitId":"pualixue"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":184,"author":{"gitId":"pualixue"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-15"},{"lineNumber":185,"author":{"gitId":"pualixue"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-15"},{"lineNumber":186,"author":{"gitId":"pualixue"},"content":"        return Objects.hash(start, duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":187,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"pualixue":161,"jiayi1129":27}},{"path":"src/main/java/seedu/plannermd/model/appointment/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import javafx.collections.transformation.SortedList;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.exceptions.ClashingAppointmentException;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":" * An appointment is considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}.","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":" * As such, adding and updating of appointments uses Appointment#isSameAppointment(Appointment) for equality","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":" * so as to ensure that the appointment being added or updated is unique in terms of identity","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":" * in the UniqueAppointmentList.","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":" * However, the removal of an appointment uses Appointment#equals(Object) so as to ensure that the","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":" * appointment with exactly the same fields will be removed.","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":" *","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    private final SortedList\u003cAppointment\u003e sortedList \u003d internalList.sorted();","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"            FXCollections.unmodifiableObservableList(sortedList);","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        return internalList.stream().anyMatch(toCheck::isSameAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"     * Returns true if the given appointment clashes with any in the list.","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"    public boolean isClash(Appointment toCheck) {","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        return internalList.stream().anyMatch(toCheck::isClash);","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"     * Adds an appointment to the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"     * The appointment must not already exist in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        if (isClash(toAdd)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"            throw new ClashingAppointmentException();","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"     * The appointment identity of {@code editedAppointment} must not be the same","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"     * as another existing appointment in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"     * Removes the equivalent appointment from the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"     * The appointment must exist in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-17"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"     * Replaces the contents of this list with {@code appointments}.","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"hpkoh"},"content":"     * Deletes {@code Appointments} with {@code person} from appointment list","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":121,"author":{"gitId":"hpkoh"},"content":"     * @param person person whose appointments are to be deleted","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"hpkoh"},"content":"     * @param \u003cT\u003e subtype of Person","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"hpkoh"},"content":"    public \u003cT extends Person\u003e void deleteAppointmentsWithPerson(T person) {","lastModifiedDate":"2021-10-23"},{"lineNumber":125,"author":{"gitId":"hpkoh"},"content":"        if (person instanceof Patient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"hpkoh"},"content":"            deleteAppointmentsWithPatient((Patient) person);","lastModifiedDate":"2021-10-23"},{"lineNumber":127,"author":{"gitId":"hpkoh"},"content":"        } else if (person instanceof Doctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":128,"author":{"gitId":"hpkoh"},"content":"            deleteAppointmentsWithDoctor((Doctor) person);","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":131,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":132,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":133,"author":{"gitId":"hpkoh"},"content":"     * Replaces {@code person} with {@code editedPerson} for {@code Appointments} with {@code person}.","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":135,"author":{"gitId":"hpkoh"},"content":"     * @param person person whose appointments are to be updated","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"hpkoh"},"content":"     * @param editedPerson person replacing {@code person}","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"hpkoh"},"content":"     * @param \u003cT\u003e subtype of Person","lastModifiedDate":"2021-10-23"},{"lineNumber":138,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"    public \u003cT extends Person\u003e void editAppointmentsWithPerson(T person, T editedPerson) {","lastModifiedDate":"2021-10-23"},{"lineNumber":140,"author":{"gitId":"hpkoh"},"content":"        if (person instanceof Patient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":141,"author":{"gitId":"hpkoh"},"content":"            editAppointmentsWithPatient((Patient) person, (Patient) editedPerson);","lastModifiedDate":"2021-10-23"},{"lineNumber":142,"author":{"gitId":"hpkoh"},"content":"        } else if (person instanceof Doctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":143,"author":{"gitId":"hpkoh"},"content":"            editAppointmentsWithDoctor((Doctor) person, (Doctor) editedPerson);","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":145,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":146,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":148,"author":{"gitId":"hpkoh"},"content":"     * Iterates though list of {@code Appointments} and delete those with {@code patient}","lastModifiedDate":"2021-10-23"},{"lineNumber":149,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"hpkoh"},"content":"     * @param patient person whose appointments are to be deleted","lastModifiedDate":"2021-10-23"},{"lineNumber":151,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":152,"author":{"gitId":"hpkoh"},"content":"    public void deleteAppointmentsWithPatient(Patient patient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":153,"author":{"gitId":"hpkoh"},"content":"        internalList.removeIf(appointment -\u003e appointment.getPatient().isSamePerson(patient));","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":155,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":156,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":157,"author":{"gitId":"hpkoh"},"content":"     * Iterates though list of {@code Appointments} and delete those with {@code doctor}","lastModifiedDate":"2021-10-23"},{"lineNumber":158,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":159,"author":{"gitId":"hpkoh"},"content":"     * @param doctor person whose appointments are to be deleted","lastModifiedDate":"2021-10-23"},{"lineNumber":160,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"hpkoh"},"content":"    public void deleteAppointmentsWithDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":162,"author":{"gitId":"hpkoh"},"content":"        internalList.removeIf(appointment -\u003e appointment.getDoctor().isSamePerson(doctor));","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":164,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":165,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":166,"author":{"gitId":"hpkoh"},"content":"     * Iterates though list of {@code Appointments} and update those with {@code patient} to {@code editedPatient}","lastModifiedDate":"2021-10-23"},{"lineNumber":167,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":168,"author":{"gitId":"hpkoh"},"content":"     * @param patient patient whose appointments are to be updated","lastModifiedDate":"2021-10-23"},{"lineNumber":169,"author":{"gitId":"hpkoh"},"content":"     * @param editedPatient patient replacing {@code patient}","lastModifiedDate":"2021-10-23"},{"lineNumber":170,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":171,"author":{"gitId":"hpkoh"},"content":"    public void editAppointmentsWithPatient(Patient patient, Patient editedPatient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":172,"author":{"gitId":"hpkoh"},"content":"        for (Appointment appointment : internalList) {","lastModifiedDate":"2021-10-23"},{"lineNumber":173,"author":{"gitId":"hpkoh"},"content":"            if (appointment.getPatient().isSamePerson(patient)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":174,"author":{"gitId":"hpkoh"},"content":"                Appointment editedAppointment \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":175,"author":{"gitId":"hpkoh"},"content":"                        new Appointment(editedPatient, appointment.getDoctor(),","lastModifiedDate":"2021-10-23"},{"lineNumber":176,"author":{"gitId":"hpkoh"},"content":"                        appointment.getAppointmentDate(), appointment.getSession(), appointment.getRemark());","lastModifiedDate":"2021-10-23"},{"lineNumber":177,"author":{"gitId":"hpkoh"},"content":"                setAppointment(appointment, editedAppointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":178,"author":{"gitId":"hpkoh"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":179,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":180,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":181,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":182,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":183,"author":{"gitId":"hpkoh"},"content":"     * Iterates though list of {@code Appointments} and update those with {@code doctor} to {@code editedDoctor}","lastModifiedDate":"2021-10-23"},{"lineNumber":184,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-23"},{"lineNumber":185,"author":{"gitId":"hpkoh"},"content":"     * @param doctor doctor whose appointments are to be updated","lastModifiedDate":"2021-10-23"},{"lineNumber":186,"author":{"gitId":"hpkoh"},"content":"     * @param editedDoctor doctor replacing {@code doctor}","lastModifiedDate":"2021-10-23"},{"lineNumber":187,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":188,"author":{"gitId":"hpkoh"},"content":"    public void editAppointmentsWithDoctor(Doctor doctor, Doctor editedDoctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":189,"author":{"gitId":"hpkoh"},"content":"        for (Appointment appointment : internalList) {","lastModifiedDate":"2021-10-23"},{"lineNumber":190,"author":{"gitId":"hpkoh"},"content":"            if (appointment.getDoctor().isSamePerson(doctor)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":191,"author":{"gitId":"hpkoh"},"content":"                Appointment editedAppointment \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":192,"author":{"gitId":"hpkoh"},"content":"                        new Appointment(appointment.getPatient(), editedDoctor,","lastModifiedDate":"2021-10-23"},{"lineNumber":193,"author":{"gitId":"hpkoh"},"content":"                        appointment.getAppointmentDate(), appointment.getSession(), appointment.getRemark());","lastModifiedDate":"2021-10-23"},{"lineNumber":194,"author":{"gitId":"hpkoh"},"content":"                setAppointment(appointment, editedAppointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":195,"author":{"gitId":"hpkoh"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":196,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":197,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":198,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":199,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-10-17"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2021-10-17"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-17"},{"lineNumber":210,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":211,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":212,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":213,"author":{"gitId":"jiayi1129"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":214,"author":{"gitId":"jiayi1129"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":215,"author":{"gitId":"jiayi1129"},"content":"                || (other instanceof UniqueAppointmentList // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":216,"author":{"gitId":"jiayi1129"},"content":"                \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));","lastModifiedDate":"2021-10-17"},{"lineNumber":217,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":218,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":219,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":220,"author":{"gitId":"jiayi1129"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-17"},{"lineNumber":221,"author":{"gitId":"jiayi1129"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-10-17"},{"lineNumber":222,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":223,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":224,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":225,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2021-10-17"},{"lineNumber":226,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":227,"author":{"gitId":"jiayi1129"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-17"},{"lineNumber":228,"author":{"gitId":"jiayi1129"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2021-10-17"},{"lineNumber":229,"author":{"gitId":"jiayi1129"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2021-10-17"},{"lineNumber":230,"author":{"gitId":"jiayi1129"},"content":"                if (appointments.get(i).isSameAppointment(appointments.get(j))) {","lastModifiedDate":"2021-10-17"},{"lineNumber":231,"author":{"gitId":"jiayi1129"},"content":"                    return false;","lastModifiedDate":"2021-10-17"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"                }","lastModifiedDate":"2021-10-17"},{"lineNumber":233,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"        return true;","lastModifiedDate":"2021-10-17"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":237,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"hpkoh":86,"pualixue":12,"jiayi1129":139}},{"path":"src/main/java/seedu/plannermd/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.appointment.exceptions;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"public class AppointmentNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"jiayi1129":6}},{"path":"src/main/java/seedu/plannermd/model/appointment/exceptions/ClashingAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.model.appointment.exceptions;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":" * Signals that the operation will result in clashing Appointments","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":" * (Appointments are considered clashing if they have overlapping times).","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":" * E.g. 12:00-12:15 clashes with 12:10-12:15. 12:00-12:15 does not clash with 12:15-12:30.","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"public class ClashingAppointmentException extends RuntimeException {","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"    public ClashingAppointmentException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"        super(\"Operation would result in clashing appointments\");","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"pualixue":13}},{"path":"src/main/java/seedu/plannermd/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.appointment.exceptions;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":" * Signals that the operation will result in duplicate Appointments","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":" * (Appointments are considered duplicates if they have the same identity).","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"jiayi1129":11}},{"path":"src/main/java/seedu/plannermd/model/doctor/Doctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.doctor;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":" * Represents a Doctor in the plannermd. Guarantees: details are present and not","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":" * null, field values are validated, immutable.","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"public class Doctor extends Person {","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"    public Doctor(Name name, Phone phone, Email email, Address address, BirthDate birthDate, Remark remark,","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"            Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"        super(name, phone, email, address, birthDate, remark, tags);","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns true if both doctors have the same identity and data fields. This","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"     * defines a stronger notion of equality between two doctors.","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"            return true;","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        if (!(other instanceof Doctor)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"            return false;","lastModifiedDate":"2021-10-04"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        Doctor otherDoctor \u003d (Doctor) other;","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        return super.equals(otherDoctor);","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"hpkoh":1,"ChuangZheQuan":8,"jiayi1129":37}},{"path":"src/main/java/seedu/plannermd/model/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import java.util.Set;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":" * Represents a Patient in the plannermd. Guarantees: details are present and","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":" * not null, field values are validated, immutable.","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"public class Patient extends Person {","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    // Data fields","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    private final Risk risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"    public Patient(Name name, Phone phone, Email email, Address address, BirthDate birthDate, Remark remark,","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"            Set\u003cTag\u003e tags, Risk risk) {","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"        super(name, phone, email, address, birthDate, remark, tags);","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        this.risk \u003d risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    public Risk getRisk() {","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        return risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns true if both patients have the same identity and data fields. This","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"     * defines a stronger notion of equality between two patients.","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"            return true;","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"            return false;","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"        return super.equals(otherPatient) \u0026\u0026 otherPatient.getRisk().equals(getRisk());","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"        return Objects.hash(getName(), getPhone(), getEmail(), getAddress(), getBirthDate(), getTags(), risk);","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"    public String toString() {","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        final StringBuilder builder \u003d new StringBuilder(super.toString());","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        if (!risk.isUnclassified()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"            builder.append(\"; Risk: \").append(getRisk());","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        return builder.toString();","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":1,"pualixue":1,"ChuangZheQuan":11,"jiayi1129":58}},{"path":"src/main/java/seedu/plannermd/model/patient/Risk.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import java.util.Map;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"public class Risk {","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"    public enum RiskLevel {","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"        HIGH,","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"        MEDIUM,","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"        LOW,","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"        UNCLASSIFIED","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    public static final String UNCLASSIFIED_RISK \u003d RiskLevel.UNCLASSIFIED.name();","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"            \"Risks should only be either HIGH, MEDIUM OR LOW\";","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    private static final Map\u003cString, RiskLevel\u003e riskMap \u003d Map.of(","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"            \"HIGH\", RiskLevel.HIGH,","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"            \"MEDIUM\", RiskLevel.MEDIUM,","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"            \"LOW\", RiskLevel.LOW","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    );","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    public final RiskLevel riskLevel;","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    private Risk() {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        riskLevel \u003d RiskLevel.UNCLASSIFIED;","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"     * Constructs a {@code Risk}.","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"     * @param risk A valid risk.","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    public Risk(String risk) {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(risk);","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        checkArgument(isValidRisk(risk), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        riskLevel \u003d riskMap.get(risk);","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if a given string is a valid risk.","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    public static boolean isValidRisk(String test) {","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        return riskMap.containsKey(test);","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if a given string is a valid risk","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"     * including unclassified risk.","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    public static boolean isValidUnclassifiableRisk(String test) {","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        return isValidRisk(test) || test.equals(RiskLevel.UNCLASSIFIED.name());","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"     * Factory method to return an unclassified risk.","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    public static Risk getUnclassifiedRisk() {","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        return new Risk();","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"     * Factory method to return a risk that can be unclassified.","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    public static Risk getUnclassifiableRisk(String risk) {","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        if (risk.equals(RiskLevel.UNCLASSIFIED.name())) {","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"            return getUnclassifiedRisk();","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        return new Risk(risk);","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"     * Returns true if risk level is unclassified.","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    public boolean isUnclassified() {","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"        return riskLevel.equals(RiskLevel.UNCLASSIFIED);","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    public String toString() {","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        return riskLevel.name();","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"                || (other instanceof Risk // instanceof handles nulls","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"                \u0026\u0026 riskLevel.equals(((Risk) other).riskLevel)); // state check","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"        return riskLevel.hashCode();","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jiayi1129":100}},{"path":"src/main/java/seedu/plannermd/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" * Represents a Person\u0027s address in the plannermd.","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 value.equalsIgnoreCase(((Address) other).value)); // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Haozeee":1,"-":53,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/model/person/BirthDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.Period;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":" * Represents a Person\u0027s birth date in the plannermd. Guarantees: immutable; is","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":" * valid as declared in {@link #isValidBirthDate(String)}","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"public class BirthDate {","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Birth dates should be of the format DD/MM/YYYY \"","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"1. Must be a valid birth date (before now, cannot be 30/02/1988 etc)\\n\"","lastModifiedDate":"2021-10-30"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"2. Day must be between 1-31 (0 in front of single digit is optional)\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"3. Month must be between 1-12 (0 in front of single digit is optional)\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"            + \"4. Year must be 4 characters.\";","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\")","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    public final LocalDate value;","lastModifiedDate":"2021-10-02"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"     * Constructs a {@code BirthDate}.","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"     * @param birthDate A valid birth date.","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    public BirthDate(String birthDate) {","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"        requireNonNull(birthDate);","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"        checkArgument(isValidBirthDate(birthDate), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"        value \u003d LocalDate.parse(birthDate, FORMATTER);","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns if a given string is a valid birth date.","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"    public static boolean isValidBirthDate(String test) {","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"            LocalDate.parse(test, FORMATTER);","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"            LocalDate inputDate \u003d LocalDate.from(LocalDate.parse(test, FORMATTER));","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"            if (inputDate.isAfter(LocalDate.now())) {","lastModifiedDate":"2021-10-02"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"                return false;","lastModifiedDate":"2021-10-02"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-02"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"            return true;","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"            return false;","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"    public String toString() {","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"        return value.format(FORMATTER);","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"                || (other instanceof BirthDate // instanceof handles nulls","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"                        \u0026\u0026 value.equals(((BirthDate) other).value)); // state check","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"        return value.hashCode();","lastModifiedDate":"2021-09-28"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"    public int calculateAge() {","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"        return Math.abs(Period.between(LocalDate.now(), value).getYears());","lastModifiedDate":"2021-10-02"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"Haozeee":2,"ChuangZheQuan":77}},{"path":"src/main/java/seedu/plannermd/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" * Represents a Person\u0027s email in the plannermd.","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 value.equalsIgnoreCase(((Email) other).value)); // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Haozeee":1,"-":67,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" * Represents a Person\u0027s name in the plannermd.","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 fullName.equalsIgnoreCase(((Name) other).fullName)); // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Haozeee":1,"-":55,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.StringUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * Tests that a {@code Person} {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Haozeee":1,"-":28,"jiayi1129":2}},{"path":"src/main/java/seedu/plannermd/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":" * Represents a Person in the plannermd. Guarantees: details are present and not","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":" * null, field values are validated, immutable.","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"    private final BirthDate birthDate;","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"    private final Remark remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"    public Person(Name name, Phone phone, Email email, Address address, BirthDate birthDate, Remark remark,","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"            Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"        requireAllNonNull(name, phone, email, address, tags, birthDate);","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"        this.birthDate \u003d birthDate;","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"    public BirthDate getBirthDate() {","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"        return birthDate;","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"hpkoh"},"content":"    public Remark getRemark() {","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"hpkoh"},"content":"        return remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns an immutable tag set, which throws","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code UnsupportedOperationException} if modification is attempted.","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns true if both persons have the same name, phone and email. This","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"     * defines a weaker notion of equality between two persons.","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"        return otherPerson !\u003d null \u0026\u0026 otherPerson.getName().equals(getName())","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone()) \u0026\u0026 otherPerson.getEmail().equals(getEmail());","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns true if both persons have the same identity and data fields. This","lastModifiedDate":"2021-10-05"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"     * defines a stronger notion of equality between two persons.","lastModifiedDate":"2021-10-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"        return otherPerson.getName().equals(getName()) \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail()) \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"                \u0026\u0026 otherPerson.getBirthDate().equals(getBirthDate()) \u0026\u0026 otherPerson.getRemark().equals(getRemark())","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"        return Objects.hash(name, phone, email, address, tags, birthDate);","lastModifiedDate":"2021-09-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"        builder.append(getName()).append(\"; Phone: \").append(getPhone()).append(\"; Email: \").append(getEmail())","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"                .append(\"; Address: \").append(getAddress()).append(\"; Date of Birth: \").append(getBirthDate());","lastModifiedDate":"2021-10-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":123,"author":{"gitId":"hpkoh"},"content":"        if (!remark.isEmpty()) {","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"            builder.append(\"; Remark: \").append(getRemark());","lastModifiedDate":"2021-10-06"},{"lineNumber":125,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":126,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"            // print tags in lexicographical order","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"            tags.stream().sorted(Comparator.comparing(tag -\u003e tag.tagName)).forEach(builder::append);","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hpkoh":9,"pualixue":3,"ChuangZheQuan":26,"-":95,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" * Represents a Person\u0027s phone number in the plannermd.","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":50,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/model/person/Remark.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"public class Remark {","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can take any values, and it should not be blank\";","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"    private static final Remark EMPTY_REMARK \u003d new Remark(\"\");","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"    public final String value;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"     * Constructs a {@code Remark}.","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"     * @param remark A valid remark.","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"    public Remark(String remark) {","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"        requireNonNull(remark);","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"        value \u003d remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"     * Checks if value of {@code Remark} is an empty String","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"     * @return true if value is an empty String","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"    public Boolean isEmpty() {","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"        return this \u003d\u003d EMPTY_REMARK || this.value.isEmpty();","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"     * Returns an empty {@code Remark}","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"     * @return A {@code Remark} which value is an empty String","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"    public static Remark getEmptyRemark() {","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        return EMPTY_REMARK;","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"    public String toString() {","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"        return value;","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"                || (other instanceof Remark // instanceof handles nulls","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"                \u0026\u0026 value.equals(((Remark) other).value)); // state check","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"        return value.hashCode();","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"hpkoh":57}},{"path":"src/main/java/seedu/plannermd/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"public class UniquePersonList\u003cT extends Person\u003e implements Iterable\u003cT\u003e {","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"    public boolean contains(T toCheck) {","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"     * Returns the exact person that matches the input.","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"     * @return an Optional object wrapping the exact person in the list.","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    public Optional\u003cT\u003e getExactPerson(T target) {","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(target);","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        return internalList.stream().filter(target::equals).findFirst();","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"    public void add(T toAdd) {","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"hpkoh"},"content":"    public void setPerson(T target, T editedPerson) {","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"hpkoh"},"content":"    public void remove(T toRemove) {","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"hpkoh"},"content":"    public void setPersons(UniquePersonList\u003cT\u003e replacement) {","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":102,"author":{"gitId":"hpkoh"},"content":"    public void setPersons(List\u003cT\u003e persons) {","lastModifiedDate":"2021-10-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":114,"author":{"gitId":"hpkoh"},"content":"    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"hpkoh"},"content":"    public Iterator\u003cT\u003e iterator() {","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"hpkoh"},"content":"                || (other instanceof UniquePersonList\u003c?\u003e // instanceof handles nulls","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"hpkoh"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList\u003c?\u003e) other).internalList));","lastModifiedDate":"2021-10-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"hpkoh"},"content":"    private boolean personsAreUnique(List\u003cT\u003e persons) {","lastModifiedDate":"2021-10-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hpkoh":14,"-":119,"jiayi1129":15}},{"path":"src/main/java/seedu/plannermd/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person.exceptions;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"-":10,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person.exceptions;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"-":5,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":" * Represents a Tag in the plannermd.","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":51,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-02"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-02"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-02"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-02"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":" * Contains utility methods for populating {@code PlannerMd} with sample data.","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"    private static final Remark EMPTY_REMARK \u003d new Remark(\"\");","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    private static final Patient AARON \u003d new Patient(new Name(\"Aaron Yeoh\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"            new Address(\"Blk 30 Geylang Street 29, #06-40\"), new BirthDate(\"27/10/1967\"),","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"            new Remark(\"Prefer Dr. Lau\"), getTagSet(\"friends\"), new Risk(\"LOW\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    private static final Patient BOBBY \u003d new Patient(new Name(\"Bobby Yu\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"            new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new BirthDate(\"22/08/1967\"),","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"            new Remark(\"Monthly insulin prescription\"), getTagSet(\"colleagues\", \"friends\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"            new Risk(\"MEDIUM\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    private static final Patient CHARMAINE \u003d new Patient(new Name(\"Charmaine Oliveiro\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"            new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new BirthDate(\"20/03/1976\"),","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"            new Remark(\"Only understands Mandarin\"), getTagSet(\"neighbours\"), new Risk(\"HIGH\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    private static final Patient DUKE \u003d new Patient(new Name(\"Duke Li\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"            new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new BirthDate(\"20/07/1964\"),","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"            EMPTY_REMARK, getTagSet(\"family\"), new Risk(\"LOW\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    private static final Patient IVAN \u003d new Patient(new Name(\"Ivan Ibrahim\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"            new Address(\"Blk 47 Tampines Street 20, #17-35\"), new BirthDate(\"25/12/2000\"), EMPTY_REMARK,","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"            getTagSet(\"classmates\"), new Risk(\"LOW\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    private static final Patient RYAN \u003d new Patient(new Name(\"Ryan Balakrishnan\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"            new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new BirthDate(\"09/08/1965\"), EMPTY_REMARK,","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"            getTagSet(\"colleagues\"), new Risk(\"MEDIUM\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    private static final Doctor DR_ALEX \u003d new Doctor(new Name(\"Alex Yeoh\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"            new Address(\"Blk 30 Geylang Street 29, #06-40\"), new BirthDate(\"27/10/1967\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"            new Remark(\"Prefer Dr. Lau\"), getTagSet(\"friends\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"    private static final Doctor DR_BERNICE \u003d new Doctor(new Name(\"Bernice Yu\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"            new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new BirthDate(\"22/08/1967\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"            new Remark(\"Monthly insulin prescription\"), getTagSet(\"colleagues\", \"friends\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"    private static final Doctor DR_CHARLOTTE \u003d new Doctor(new Name(\"Charlotte Oliveiro\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"            new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new BirthDate(\"20/03/1976\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"            new Remark(\"Only understands Mandarin\"), getTagSet(\"neighbours\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"    private static final Doctor DR_DAVID \u003d new Doctor(new Name(\"David Li\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"            new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new BirthDate(\"20/07/1964\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"            EMPTY_REMARK, getTagSet(\"family\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    private static final Doctor DR_IRFAN \u003d new Doctor(new Name(\"Irfan Ibrahim\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"            new Address(\"Blk 47 Tampines Street 20, #17-35\"), new BirthDate(\"25/12/2000\"), EMPTY_REMARK,","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"            getTagSet(\"classmates\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    private static final Doctor DR_ROY \u003d new Doctor(new Name(\"Roy Balakrishnan\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"            new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"            new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new BirthDate(\"09/08/1965\"), EMPTY_REMARK,","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"            getTagSet(\"colleagues\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    public static Patient[] getSamplePatients() {","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"        return new Patient[]{ AARON, BOBBY, CHARMAINE, DUKE, IVAN, RYAN };","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    public static Doctor[] getSampleDoctors() {","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"        return new Doctor[]{ DR_ALEX, DR_BERNICE, DR_CHARLOTTE, DR_DAVID, DR_IRFAN, DR_ROY };","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"    public static Appointment[] getSampleAppointments() {","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"        LocalDate todayDate \u003d LocalDate.now();","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"        return new Appointment[]{","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"            new Appointment(AARON, DR_IRFAN, new AppointmentDate(todayDate.format(AppointmentDate.DATE_FORMATTER)),","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"                    new Session(\"11:30\", new Duration(30)), EMPTY_REMARK),","lastModifiedDate":"2021-10-16"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"            new Appointment(DUKE, DR_IRFAN, new AppointmentDate(todayDate.format(AppointmentDate.DATE_FORMATTER)),","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"                    new Session(\"12:00\", new Duration(30)), EMPTY_REMARK),","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"            new Appointment(DUKE, DR_ROY,","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"                    new AppointmentDate(todayDate.plusDays(1).format(AppointmentDate.DATE_FORMATTER)),","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"                    new Session(\"12:00\", new Duration(30)), EMPTY_REMARK)","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"        };","lastModifiedDate":"2021-10-16"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    public static ReadOnlyPlannerMd getSamplePlannerMd() {","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd samplePm \u003d new PlannerMd();","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"        for (Patient samplePatient : getSamplePatients()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"            samplePm.addPatient(samplePatient);","lastModifiedDate":"2021-09-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"        for (Doctor sampleDoctor : getSampleDoctors()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"            samplePm.addDoctor(sampleDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Appointment sampleAppointment : getSampleAppointments()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"            samplePm.addAppointment(sampleAppointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"        return samplePm;","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2021-10-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"Haozeee":6,"hpkoh":4,"ChuangZheQuan":27,"-":20,"jiayi1129":80}},{"path":"src/main/java/seedu/plannermd/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    public static final String IDENTIFIER_DATE \u003d \"date\";","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    private final JsonAdaptedPatient patient;","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    private final JsonAdaptedDoctor doctor;","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    private final String date;","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    private final JsonAdaptedSession session;","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    private final String remark;","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details.","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"patient\") JsonAdaptedPatient patient,","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"                                  @JsonProperty(\"doctor\") JsonAdaptedDoctor doctor,","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"                                  @JsonProperty(\"date\") String date,","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"                                  @JsonProperty(\"session\") JsonAdaptedSession session,","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"                                  @JsonProperty(\"remark\") String remark) {","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        this.doctor \u003d doctor;","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        this.session \u003d session;","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        this.patient \u003d new JsonAdaptedPatient(source.getPatient());","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        this.doctor \u003d new JsonAdaptedDoctor(source.getDoctor());","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        this.date \u003d source.getAppointmentDate().toInputStringFormat();","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        this.session \u003d new JsonAdaptedSession(source.getSession());","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        this.remark \u003d source.getRemark().value;","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"     * {@code Appointment} object.","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"     *                               the adapted appointment.","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        if (patient \u003d\u003d null) {","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Patient.class.getSimpleName()));","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        Patient modelPatient \u003d patient.toModelType();","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        if (doctor \u003d\u003d null) {","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Doctor.class.getSimpleName()));","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        Doctor modelDoctor \u003d doctor.toModelType();","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, IDENTIFIER_DATE));","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        if (!AppointmentDate.isValidAppointmentDate(date)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(AppointmentDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        final AppointmentDate modelAppointmentDate \u003d new AppointmentDate(date);","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        if (session \u003d\u003d null) {","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Session.class.getSimpleName()));","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"        Session modelSession \u003d session.toModelType();","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        if (remark \u003d\u003d null) {","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"        final Remark modelRemark \u003d new Remark(remark);","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"        return new Appointment(modelPatient, modelDoctor, modelAppointmentDate, modelSession, modelRemark);","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"jiayi1129":95}},{"path":"src/main/java/seedu/plannermd/storage/JsonAdaptedDoctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":" * Jackson-friendly version of {@link Doctor}.","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"class JsonAdaptedDoctor extends JsonAdaptedPerson {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"     * Constructs a {@code JsonAdaptedDoctor} with the given person details.","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    public JsonAdaptedDoctor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"                             @JsonProperty(\"birthDate\") String birthDate, @JsonProperty(\"remark\") String remark,","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        super(name, phone, email, address, birthDate, remark, tagged);","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"     * Converts a given {@code Doctor} into this class for Jackson use.","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    public JsonAdaptedDoctor(Doctor source) {","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        super(source);","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"     * Converts this Jackson-friendly adapted doctor object into the model\u0027s","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"     * {@code Doctor} object.","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"     *                               the adapted doctor.","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    public Doctor toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        Person person \u003d super.toModelType();","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        return new Doctor(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"                person.getBirthDate(), person.getRemark(), person.getTags());","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"jiayi1129":51}},{"path":"src/main/java/seedu/plannermd/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":" * Jackson-friendly version of {@link Patient}.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"class JsonAdaptedPatient extends JsonAdaptedPerson {","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    private final String risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"     * Constructs a {@code JsonAdaptedPatient} with the given person details.","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    @JsonCreator","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"            @JsonProperty(\"birthDate\") String birthDate, @JsonProperty(\"remark\") String remark,","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"risk\") String risk) {","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"        super(name, phone, email, address, birthDate, remark, tagged);","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        this.risk \u003d risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"     * Converts a given {@code Patient} into this class for Jackson use.","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        super(source);","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        risk \u003d source.getRisk().toString();","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code Patient} object.","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"     *                               the adapted patient.","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        Person person \u003d super.toModelType();","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        if (risk \u003d\u003d null) {","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Risk.class.getSimpleName()));","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        if (!Risk.isValidUnclassifiableRisk(risk)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(Risk.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        final Risk modelRisk \u003d Risk.getUnclassifiableRisk(risk);","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        return new Patient(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"                person.getBirthDate(), person.getRemark(), person.getTags(), modelRisk);","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"ChuangZheQuan":9,"jiayi1129":54}},{"path":"src/main/java/seedu/plannermd/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-02"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-02"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-02"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-02"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"    private final String birthDate;","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"    private final String remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"            @JsonProperty(\"birthDate\") String birthDate, @JsonProperty(\"remark\") String remark,","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        this.birthDate \u003d birthDate;","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        birthDate \u003d source.getBirthDate().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"hpkoh"},"content":"        remark \u003d source.getRemark().value;","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"        tagged.addAll(source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code Person} object.","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"     *                               the adapted person.","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"hpkoh"},"content":"        if (remark \u003d\u003d null) {","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"hpkoh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"        final Remark modelRemark \u003d new Remark(remark);","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"        if (birthDate \u003d\u003d null) {","lastModifiedDate":"2021-09-28"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, BirthDate.class.getSimpleName()));","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"        if (!BirthDate.isValidBirthDate(birthDate)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new IllegalValueException(BirthDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-28"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"        final BirthDate modelBirthDate \u003d new BirthDate(birthDate);","lastModifiedDate":"2021-09-28"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelBirthDate, modelRemark, modelTags);","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hpkoh":7,"ChuangZheQuan":25,"-":96,"jiayi1129":4}},{"path":"src/main/java/seedu/plannermd/storage/JsonAdaptedSession.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":" * Jackson-friendly version of {@link Session}.","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"public class JsonAdaptedSession {","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    public static final String IDENTIFIER_START_TIME \u003d \"Start Time\";","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    private final String start;","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private final Integer duration;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"     * Constructs a {@code JsonAdaptedSession} with the given person details.","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    public JsonAdaptedSession(@JsonProperty(\"start\") String start,","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"                              @JsonProperty(\"duration\") Integer duration) {","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        this.start \u003d start;","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"     * Converts a given {@code Session} into this class for Jackson use.","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    public JsonAdaptedSession(Session source) {","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        start \u003d source.getFormattedStartTime();","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        duration \u003d source.getMinutes();","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"     * Converts this Jackson-friendly adapted session object into the model\u0027s","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"     * {@code Session} object.","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"     *                               the adapted session.","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    public Session toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        if (start \u003d\u003d null) {","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, IDENTIFIER_START_TIME));","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        if (!Session.isValidTime(start)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(Session.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        if (duration \u003d\u003d null) {","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Duration.class.getSimpleName()));","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        if (!Duration.isValidDuration(duration)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        final Duration modelDuration \u003d new Duration(duration);","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        return new Session(start, modelDuration);","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"jiayi1129":69}},{"path":"src/main/java/seedu/plannermd/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":45,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/storage/JsonPlannerMdStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import java.util.Optional;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.FileUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.JsonUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":" * A class to access PlannerMd data stored as a json file on the hard disk.","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"public class JsonPlannerMdStorage implements PlannerMdStorage {","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonPlannerMdStorage.class);","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    private Path filePath;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    public JsonPlannerMdStorage(Path filePath) {","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    public Path getPlannerMdFilePath() {","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        return filePath;","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public Optional\u003cReadOnlyPlannerMd\u003e readPlannerMd() throws DataConversionException {","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        return readPlannerMd(filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"     * Similar to {@link #readPlannerMd()}.","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    public Optional\u003cReadOnlyPlannerMd\u003e readPlannerMd(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        Optional\u003cJsonSerializablePlannerMd\u003e jsonPlannerMd \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"                filePath, JsonSerializablePlannerMd.class);","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        if (!jsonPlannerMd.isPresent()) {","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"            return Optional.empty();","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"            return Optional.of(jsonPlannerMd.get().toModelType());","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    public void savePlannerMd(ReadOnlyPlannerMd plannerMd) throws IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        savePlannerMd(plannerMd, filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"     * Similar to {@link #savePlannerMd(ReadOnlyPlannerMd)}.","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"    public void savePlannerMd(ReadOnlyPlannerMd plannerMd, Path filePath) throws IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(plannerMd);","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        JsonUtil.saveJsonFile(new JsonSerializablePlannerMd(plannerMd), filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"jiayi1129":80}},{"path":"src/main/java/seedu/plannermd/storage/JsonSerializablePlannerMd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":" * An Immutable PlannerMd that is serializable to JSON format.","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"@JsonRootName(value \u003d \"plannermd\")","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"class JsonSerializablePlannerMd {","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"Doctors list contains duplicate doctor(s).\";","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENTS \u003d \"Appointments list contains duplicate appointment(s).\";","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_CLASHING_APPOINTMENTS \u003d \"Appointments list contains clashing appointment(s).\";","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_MISSING_PATIENT_APPOINTMENT \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"            \"Appointments list contains patient(s) which do not exist.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    public static final String MESSAGE_MISSING_DOCTOR_APPOINTMENT \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"            \"Appointments list contains doctor(s) which do not exist.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    private final List\u003cJsonAdaptedDoctor\u003e doctors \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"     * Constructs a {@code JsonSerializablePlannerMd} with the given persons.","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    public JsonSerializablePlannerMd(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients,","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"                                     @JsonProperty(\"doctors\") List\u003cJsonAdaptedDoctor\u003e doctors,","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"                                     @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        this.patients.addAll(patients);","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        this.doctors.addAll(doctors);","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        this.appointments.addAll(appointments);","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"     * Converts a given {@code ReadOnlyPlannerMd} into this class for Jackson use.","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializablePlannerMd}.","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    public JsonSerializablePlannerMd(ReadOnlyPlannerMd source) {","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        doctors.addAll(source.getDoctorList().stream().map(JsonAdaptedDoctor::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        appointments.addAll(source.getAppointmentList().stream().map(JsonAdaptedAppointment::new)","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"     * Converts this plannermd into the model\u0027s {@code PlannerMd} object.","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"    public PlannerMd toModelType() throws IllegalValueException {","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd plannerMd \u003d new PlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"            if (plannerMd.hasPatient(patient)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"            plannerMd.addPatient(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        for (JsonAdaptedDoctor jsonAdaptedDoctor : doctors) {","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"            Doctor doctor \u003d jsonAdaptedDoctor.toModelType();","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"            if (plannerMd.hasDoctor(doctor)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"            plannerMd.addDoctor(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"            if (plannerMd.hasAppointment(appointment)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENTS);","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"            if (plannerMd.isClashAppointment(appointment)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"                throw new IllegalValueException(MESSAGE_CLASHING_APPOINTMENTS);","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"            // To be defensive here, we ensure that the exact patients and doctors specified","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"            // in the appointment does exist in PlannerMD","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"            Optional\u003cPatient\u003e appointmentPatient \u003d plannerMd.getExactPatient(appointment.getPatient());","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"            if (appointmentPatient.isEmpty()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"                throw new IllegalValueException(MESSAGE_MISSING_PATIENT_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"            Optional\u003cDoctor\u003e appointmentDoctor \u003d plannerMd.getExactDoctor(appointment.getDoctor());","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"            if (appointmentDoctor.isEmpty()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"                throw new IllegalValueException(MESSAGE_MISSING_DOCTOR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"            // Create a new Appointment with the exact Patient and Doctor objects in PlannerMd","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"            // This Appointment will then be added into PlannerMd","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"            Appointment linkedAppointment \u003d new Appointment(appointmentPatient.get(), appointmentDoctor.get(),","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"                    appointment.getAppointmentDate(), appointment.getSession(),","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"                    appointment.getRemark());","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"            plannerMd.addAppointment(linkedAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        return plannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"ChuangZheQuan":1,"-":33,"jiayi1129":81}},{"path":"src/main/java/seedu/plannermd/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.JsonUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":42,"jiayi1129":5}},{"path":"src/main/java/seedu/plannermd/storage/PlannerMdStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import java.util.Optional;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":" * Represents a storage for {@link PlannerMd}.","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"public interface PlannerMdStorage {","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"    Path getPlannerMdFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"     * Returns PlannerMd data as a {@link ReadOnlyPlannerMd}.","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    Optional\u003cReadOnlyPlannerMd\u003e readPlannerMd() throws DataConversionException, IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"     * @see #getPlannerMdFilePath()","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    Optional\u003cReadOnlyPlannerMd\u003e readPlannerMd(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"     * Saves the given {@link ReadOnlyPlannerMd} to the storage.","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"     * @param plannerMd cannot be null.","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    void savePlannerMd(ReadOnlyPlannerMd plannerMd) throws IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"     * @see #savePlannerMd(ReadOnlyPlannerMd)","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    void savePlannerMd(ReadOnlyPlannerMd plannerMd, Path filePath) throws IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"jiayi1129":46}},{"path":"src/main/java/seedu/plannermd/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import java.util.Optional;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":" * API of the Storage component","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"public interface Storage extends PlannerMdStorage, UserPrefsStorage {","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    Path getPlannerMdFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    Optional\u003cReadOnlyPlannerMd\u003e readPlannerMd() throws DataConversionException, IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    void savePlannerMd(ReadOnlyPlannerMd plannerMd) throws IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"jiayi1129":32}},{"path":"src/main/java/seedu/plannermd/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import java.util.Optional;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":" * Manages storage of PlannerMd data in local storage.","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    private PlannerMdStorage plannerMdStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"     * Creates a {@code StorageManager} with the given {@code PlannerMdStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    public StorageManager(PlannerMdStorage plannerMdStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        super();","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"        this.plannerMdStorage \u003d plannerMdStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PlannerMd methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    public Path getPlannerMdFilePath() {","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        return plannerMdStorage.getPlannerMdFilePath();","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    public Optional\u003cReadOnlyPlannerMd\u003e readPlannerMd() throws DataConversionException, IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        return readPlannerMd(plannerMdStorage.getPlannerMdFilePath());","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    public Optional\u003cReadOnlyPlannerMd\u003e readPlannerMd(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        return plannerMdStorage.readPlannerMd(filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    public void savePlannerMd(ReadOnlyPlannerMd plannerMd) throws IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        savePlannerMd(plannerMd, plannerMdStorage.getPlannerMdFilePath());","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"    public void savePlannerMd(ReadOnlyPlannerMd plannerMd, Path filePath) throws IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        plannerMdStorage.savePlannerMd(plannerMd, filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"jiayi1129":79}},{"path":"src/main/java/seedu/plannermd/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":" * Represents a storage for {@link seedu.plannermd.model.UserPrefs}.","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"     * Saves the given {@link seedu.plannermd.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":30,"jiayi1129":6}},{"path":"src/main/java/seedu/plannermd/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":" * An UI component that displays information of a {@code Appointment}.","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private static final DateTimeFormatter displayFormatter \u003d","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"dd MMM yy, E\");","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    public final Appointment appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    private VBox detailsBox;","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    private Label id;","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    private Label apptDate;","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    private Label apptTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    private Label doctorName;","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    private Label patientName;","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    private Label remarks;","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     * Creates a {@code AppointmentCard} with the given {@code Appointment} and index to display.","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        super(FXML);","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        apptDate.setText(formatApptDate(appointment.getAppointmentDate().date));","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        apptTime.setText(formatApptTime(appointment.getSession()));","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        doctorName.setText(\"Doctor: \" + appointment.getDoctor().getName().fullName);","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        patientName.setText(\"Patient: \" + appointment.getPatient().getName().fullName);","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        setAppointmentRemark(appointment.getRemark().value);","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    private void setAppointmentRemark(String apptRemark) {","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        if (apptRemark \u003d\u003d null || apptRemark.equals(\"\".trim())) {","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            detailsBox.getChildren().remove(remarks);","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"            remarks.setText(\"Remarks: \" + apptRemark);","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"    private String formatApptDate(LocalDate date) {","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        return displayFormatter.format(date);","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    private String formatApptTime(Session session) {","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        return session.getFormattedStartTime() + \" - \" + session.getFormattedEndTime();","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        if (!(other instanceof AppointmentCard)) {","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        // state check","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 appointment.equals(card.appointment);","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Haozeee":92}},{"path":"src/main/java/seedu/plannermd/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        super(FXML);","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListPanel.AppointmentListViewCell());","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * a {@code AppointmentCard}.","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"                setText(null);","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"            } else {","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Haozeee":47}},{"path":"src/main/java/seedu/plannermd/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"         * @see seedu.plannermd.logic.Logic#execute(String)","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"-":80,"jiayi1129":5}},{"path":"src/main/java/seedu/plannermd/ui/DoctorCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" * A UI component that displays information of a {@code Doctor}.","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"public class DoctorCard extends PersonCard {","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    private static final String FXML \u003d \"DoctorListCard.fxml\";","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    public final Doctor doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     * Creates a {@code DoctorCard} with the given {@code Doctor} and index to display.","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    public DoctorCard(Doctor doctor, int displayedIndex) {","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"        super(FXML, doctor, displayedIndex);","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        this.doctor \u003d doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        if (!(other instanceof DoctorCard)) {","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        // state check","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        DoctorCard card \u003d (DoctorCard) other;","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        return super.getId().getText().equals(card.getId().getText())","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 doctor.equals(card.doctor);","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Haozeee":39}},{"path":"src/main/java/seedu/plannermd/ui/DoctorListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":" * Panel containing the list of doctors.","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"public class DoctorListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    private static final String FXML \u003d \"DoctorListPanel.fxml\";","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(DoctorListPanel.class);","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private ListView\u003cDoctor\u003e doctorListView;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     * Creates a {@code DoctorListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    public DoctorListPanel(ObservableList\u003cDoctor\u003e doctorList) {","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        super(FXML);","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        doctorListView.setItems(doctorList);","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        doctorListView.setCellFactory(listView -\u003e new DoctorListPanel.DoctorListViewCell());","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Doctor} using","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"     * a {@code DoctorCard}.","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    class DoctorListViewCell extends ListCell\u003cDoctor\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        protected void updateItem(Doctor doctor, boolean empty) {","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            super.updateItem(doctor, empty);","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"            if (empty || doctor \u003d\u003d null) {","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"                setText(null);","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"            } else {","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"                setGraphic(new DoctorCard(doctor, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Haozeee":49}},{"path":"src/main/java/seedu/plannermd/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103t-t11-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":99,"jiayi1129":3}},{"path":"src/main/java/seedu/plannermd/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.Logic;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model.State;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    private PersonTab personTab;","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    private AppointmentListPanel appointmentPanel;","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    private StackPane personTabPlaceholder;","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"    private StackPane appointmentTabPlaceholder;","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"        personTab \u003d new PersonTab(logic);","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        personTabPlaceholder.getChildren().add(personTab.getRoot());","lastModifiedDate":"2021-10-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPlannerMdFilePath());","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"        // Add filtered appointment list here","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"        appointmentPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        appointmentTabPlaceholder.getChildren().add(appointmentPanel.getRoot());","lastModifiedDate":"2021-10-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":175,"author":{"gitId":"hpkoh"},"content":"    private void handleToggle() {","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"hpkoh"},"content":"        if (logic.getState() \u003d\u003d State.PATIENT) {","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"hpkoh"},"content":"            personTab.setTabToPatient();","lastModifiedDate":"2021-10-07"},{"lineNumber":178,"author":{"gitId":"hpkoh"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":179,"author":{"gitId":"hpkoh"},"content":"            personTab.setTabToDoctor();","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":183,"author":{"gitId":"Haozeee"},"content":"    public PersonTab getPersonTab() {","lastModifiedDate":"2021-10-05"},{"lineNumber":184,"author":{"gitId":"Haozeee"},"content":"        return personTab;","lastModifiedDate":"2021-10-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"jiayi1129"},"content":"     * @see seedu.plannermd.logic.Logic#execute(String)","lastModifiedDate":"2021-09-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"hpkoh"},"content":"            if (commandResult.isToggle()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":203,"author":{"gitId":"hpkoh"},"content":"                handleToggle();","lastModifiedDate":"2021-10-07"},{"lineNumber":204,"author":{"gitId":"hpkoh"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":205,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"hpkoh":13,"Haozeee":12,"-":181,"jiayi1129":11}},{"path":"src/main/java/seedu/plannermd/ui/PatientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":" * An UI component that displays information of a {@code Patient}.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"public class PatientCard extends PersonCard {","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    private static final String FXML \u003d \"PatientListCard.fxml\";","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    public final Patient patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    private FlowPane risk;","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     * Creates a {@code PatientCard} with the given {@code Patient} and index to display.","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public PatientCard(Patient patient, int displayedIndex) {","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        super(FXML, patient, displayedIndex);","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        setRisk(patient.getRisk());","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    private void setRisk(Risk risk) {","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        Label riskLabel \u003d new Label(risk.toString());","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        switch (risk.riskLevel) {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        case HIGH:","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"            riskLabel.setStyle(\"-fx-background-color: red\");","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            break;","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        case MEDIUM:","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"            riskLabel.setStyle(\"-fx-background-color: #fcba03\");","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"            break;","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        case LOW:","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"            riskLabel.setStyle(\"-fx-background-color: green\");","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"            break;","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        default:","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"            // unclassified risk","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"            return;","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        this.risk.getChildren().add(riskLabel);","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        if (!(other instanceof PatientCard)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        PatientCard card \u003d (PatientCard) other;","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        return super.getId().getText().equals(card.getId().getText())","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"                \u0026\u0026 patient.equals(card.patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Haozeee":17,"-":29,"jiayi1129":21}},{"path":"src/main/java/seedu/plannermd/ui/PatientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"public class PatientListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    private static final String FXML \u003d \"PatientListPanel.fxml\";","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    @FXML","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private ListView\u003cPatient\u003e patientListView;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"     * Creates a {@code PatientListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        super(FXML);","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"        patientListView.setItems(patientList);","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"     * a {@code PatientCard}.","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    class PatientListViewCell extends ListCell\u003cPatient\u003e {","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        protected void updateItem(Patient patient, boolean empty) {","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"            super.updateItem(patient, empty);","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"            if (empty || patient \u003d\u003d null) {","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"                setGraphic(null);","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"                setText(null);","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"            } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"Haozeee":2,"jiayi1129":48}},{"path":"src/main/java/seedu/plannermd/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":" * An UI component that is capable of displaying information of a {@code Person}","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":" * type.","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"public abstract class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"     * set to such keywords or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"     *      issue on PlannerMd level 4\u003c/a\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    private VBox detailsBox;","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    private Label dateOfBirth;","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    private Label remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"     * Creates a {@code PersonCard} with the given {@code Person} and index to","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"     * display.","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    public PersonCard(String fxml, Person person, int displayedIndex) {","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        super(fxml);","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"        dateOfBirth.setText(person.getBirthDate().value","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"                + \" (Age: \" + person.getBirthDate().calculateAge() + \")\");","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        setRemark(person.getRemark().value);","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"        person.getTags().stream().sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"     * Displays the remarks for a patient on the patient records. If there is no","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"     * remarks, delete the label that is supposed to contain the remark.","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"     * @param personRemark The remark for a particular patient.","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"    private void setRemark(String personRemark) {","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        if (personRemark \u003d\u003d null || personRemark.equals(\"\".trim())) {","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"            detailsBox.getChildren().remove(remark);","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"            remark.setText(\"Remarks: \" + personRemark);","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"    protected Label getId() {","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        return id;","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Haozeee":22,"ChuangZheQuan":14,"-":45,"jiayi1129":2}},{"path":"src/main/java/seedu/plannermd/ui/PersonTab.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.SingleSelectionModel;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.Tab;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.TabPane;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.Logic;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" * A UI that holds the two tabs for patient and doctor records in the plannermd.","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"public class PersonTab extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    private static final String FXML \u003d \"PersonTab.fxml\";","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    /** The order of the tabs in the tab pane. */","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    private static final int PATIENT_TAB \u003d 0;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    private static final int DOCTOR_TAB \u003d 1;","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    private Logic logic;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    private final SingleSelectionModel\u003cTab\u003e selectionModel;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    private PatientListPanel patientListPanel;","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private DoctorListPanel doctorListPanel;","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    private TabPane personTab;","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    private Tab patientsTab;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    private Tab doctorsTab;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    private StackPane patientListPanelPlaceholder;","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    private StackPane doctorListPanelPlaceholder;","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    /** Creates a new PersonTab Pane and initialises them. */","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    public PersonTab(Logic logic) {","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        super(FXML);","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        selectionModel \u003d personTab.getSelectionModel();","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        initialiseTabPanels();","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        // Patients tab is shown by default on start up","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        doctorsTab.setDisable(true);","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    private void initialiseTabPanels() {","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        doctorListPanel \u003d new DoctorListPanel(logic.getFilteredDoctorList());","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        doctorListPanelPlaceholder.getChildren().add(doctorListPanel.getRoot());","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"     * Switch the UI view to the tab containing the patient\u0027s records.","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    public void setTabToPatient() {","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        selectionModel.select(PATIENT_TAB);","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        patientsTab.setDisable(false);","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        doctorsTab.setDisable(true);","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"     * Switch the UI view to the tab containing the doctor\u0027s records.","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    public void setTabToDoctor() {","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        selectionModel.select(DOCTOR_TAB);","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        doctorsTab.setDisable(false);","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        patientsTab.setDisable(true);","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Haozeee":79,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * Creates a new ResultDisplay Pane and sets a welcome message.","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        resultDisplay.setText(\"Welcome to PlannerMD\");","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Haozeee":4,"-":27,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":27,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":11,"jiayi1129":1}},{"path":"src/main/java/seedu/plannermd/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.MainApp;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.LogsCenter;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.StringUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.Logic;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/planner_md_icon.png\";","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Haozeee":1,"-":82,"jiayi1129":5}},{"path":"src/main/java/seedu/plannermd/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.MainApp;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":86,"jiayi1129":2}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        \u003cVBox fx:id\u003d\"detailsBox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"85\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"                \u003cLabel fx:id\u003d\"apptDate\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"                \u003cFlowPane fx:id\u003d\"risk\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"apptTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$apptTime\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"doctorName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$doctorName\"/\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"patientName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$patientName\"/\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"remarks\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" text\u003d\"\\$remarks\"/\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Haozeee":42}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    \u003cLabel text\u003d\"Appointments\" styleClass\u003d\"appointment-header\" maxWidth\u003d\"Infinity\" alignment\u003d\"CENTER\"/\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Haozeee":10}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":".root {","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"    -primary-color: #2a4d69;","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"    -secondary-color: #e7eff6;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: derive(-secondary-color, 20%);","lastModifiedDate":"2021-10-03"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"    -fx-border-color: derive(#2d2d2d, 50%);","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"    -fx-border-width: 0.5;","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: -secondary-color;","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":".list-cell #cardPane {","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"    -fx-border-color: #1d1d1d;","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: #fcfcfc;","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"    -fx-border-color: #1d1d1d;","lastModifiedDate":"2021-10-15"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"    -fx-text-fill: #202020;","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"     -fx-background-color: derive(-primary-color, 20%);","lastModifiedDate":"2021-09-28"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"     -fx-background-color: derive(-primary-color, 20%);","lastModifiedDate":"2021-09-28"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":150,"author":{"gitId":"Haozeee"},"content":".pane-without-border {","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: derive(-primary-color, 20%);","lastModifiedDate":"2021-09-28"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":158,"author":{"gitId":"Haozeee"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"Haozeee"},"content":"    -fx-wrap-text: true;","lastModifiedDate":"2021-09-28"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"Haozeee"},"content":"#resultDisplay .content {","lastModifiedDate":"2021-09-27"},{"lineNumber":167,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: -secondary-color;","lastModifiedDate":"2021-09-28"},{"lineNumber":168,"author":{"gitId":"Haozeee"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2021-09-27"},{"lineNumber":169,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-27"},{"lineNumber":170,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":171,"author":{"gitId":"Haozeee"},"content":".status-bar {","lastModifiedDate":"2021-09-27"},{"lineNumber":172,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: derive(-secondary-color, 30%);","lastModifiedDate":"2021-09-28"},{"lineNumber":173,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":175,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":177,"author":{"gitId":"Haozeee"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-09-27"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: derive(-primary-color, 20%);","lastModifiedDate":"2021-09-28"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":217,"author":{"gitId":"Haozeee"},"content":"    -fx-text-fill: #fcfcfc;","lastModifiedDate":"2021-09-27"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":276,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":300,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: derive(#c4c4c4, 20%);","lastModifiedDate":"2021-09-27"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":303,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: derive(#e7eef6, 30%);","lastModifiedDate":"2021-09-27"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":308,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":313,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":317,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":321,"author":{"gitId":"Haozeee"},"content":".tab-pane {","lastModifiedDate":"2021-10-05"},{"lineNumber":322,"author":{"gitId":"Haozeee"},"content":"    -fx-tab-min-width: 80px;","lastModifiedDate":"2021-10-05"},{"lineNumber":323,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":324,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":325,"author":{"gitId":"Haozeee"},"content":".tab-pane .tab {","lastModifiedDate":"2021-10-05"},{"lineNumber":326,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: derive(-primary-color, 50%);","lastModifiedDate":"2021-10-05"},{"lineNumber":327,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":328,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":329,"author":{"gitId":"Haozeee"},"content":".tab-pane .tab:selected {","lastModifiedDate":"2021-10-05"},{"lineNumber":330,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: -secondary-color;","lastModifiedDate":"2021-10-05"},{"lineNumber":331,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":332,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":333,"author":{"gitId":"Haozeee"},"content":".tab .tab-label {","lastModifiedDate":"2021-10-05"},{"lineNumber":334,"author":{"gitId":"Haozeee"},"content":"    -fx-alignment: CENTER;","lastModifiedDate":"2021-10-05"},{"lineNumber":335,"author":{"gitId":"Haozeee"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-10-05"},{"lineNumber":336,"author":{"gitId":"Haozeee"},"content":"    -fx-font-family: \"Open Sans\";","lastModifiedDate":"2021-10-05"},{"lineNumber":337,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":338,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":339,"author":{"gitId":"Haozeee"},"content":".tab:selected .tab-label {","lastModifiedDate":"2021-10-05"},{"lineNumber":340,"author":{"gitId":"Haozeee"},"content":"    -fx-alignment: CENTER;","lastModifiedDate":"2021-10-05"},{"lineNumber":341,"author":{"gitId":"Haozeee"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-05"},{"lineNumber":342,"author":{"gitId":"Haozeee"},"content":"    -fx-font-family: \"Open Sans SemiBold\";","lastModifiedDate":"2021-10-05"},{"lineNumber":343,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":344,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":345,"author":{"gitId":"Haozeee"},"content":".tab-pane .tab-header-area .tab-header-background {","lastModifiedDate":"2021-10-05"},{"lineNumber":346,"author":{"gitId":"Haozeee"},"content":"    -fx-opacity: 0;","lastModifiedDate":"2021-10-05"},{"lineNumber":347,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":348,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":349,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":353,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":356,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":358,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":361,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":363,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":366,"author":{"gitId":"Haozeee"},"content":"    -fx-border-color: #222222;","lastModifiedDate":"2021-09-27"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":368,"author":{"gitId":"Haozeee"},"content":"    -fx-border-width: 0.6;","lastModifiedDate":"2021-09-27"},{"lineNumber":369,"author":{"gitId":"Haozeee"},"content":"    -fx-font-family: \"Open Sans Bold\";","lastModifiedDate":"2021-09-27"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":372,"author":{"gitId":"Haozeee"},"content":"    -fx-prompt-text-fill: rgba(255, 255, 255, 0.75);","lastModifiedDate":"2021-09-28"},{"lineNumber":373,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":375,"author":{"gitId":"Haozeee"},"content":".text-field:empty #commandTextField {","lastModifiedDate":"2021-09-28"},{"lineNumber":376,"author":{"gitId":"Haozeee"},"content":"    -fx-prompt-text-fill: transparent;","lastModifiedDate":"2021-09-28"},{"lineNumber":377,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-28"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":379,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":381,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":383,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":386,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":388,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":395,"author":{"gitId":"Haozeee"},"content":"    -fx-max-width: 600;","lastModifiedDate":"2021-10-30"},{"lineNumber":396,"author":{"gitId":"Haozeee"},"content":"    -fx-wrap-text: true;","lastModifiedDate":"2021-10-30"},{"lineNumber":397,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":398,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":399,"author":{"gitId":"Haozeee"},"content":"#risk {","lastModifiedDate":"2021-09-27"},{"lineNumber":400,"author":{"gitId":"Haozeee"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2021-09-27"},{"lineNumber":401,"author":{"gitId":"Haozeee"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2021-09-27"},{"lineNumber":402,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-27"},{"lineNumber":403,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":404,"author":{"gitId":"Haozeee"},"content":"#risk .label {","lastModifiedDate":"2021-09-27"},{"lineNumber":405,"author":{"gitId":"Haozeee"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-09-27"},{"lineNumber":406,"author":{"gitId":"Haozeee"},"content":"    -fx-padding: 1 3 1 4;","lastModifiedDate":"2021-09-27"},{"lineNumber":407,"author":{"gitId":"Haozeee"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2021-09-27"},{"lineNumber":408,"author":{"gitId":"Haozeee"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2021-09-27"},{"lineNumber":409,"author":{"gitId":"Haozeee"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2021-09-27"},{"lineNumber":410,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-27"},{"lineNumber":411,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":412,"author":{"gitId":"Haozeee"},"content":".appointment-header {","lastModifiedDate":"2021-10-15"},{"lineNumber":413,"author":{"gitId":"Haozeee"},"content":"    -fx-background-color: derive(-secondary-color, 20%);","lastModifiedDate":"2021-10-15"},{"lineNumber":414,"author":{"gitId":"Haozeee"},"content":"    -fx-border-color: derive(#2d2d2d, 50%);","lastModifiedDate":"2021-10-15"},{"lineNumber":415,"author":{"gitId":"Haozeee"},"content":"    -fx-border-width: 0.5;","lastModifiedDate":"2021-10-15"},{"lineNumber":416,"author":{"gitId":"Haozeee"},"content":"    -fx-padding: 15 0 15 0;","lastModifiedDate":"2021-10-15"},{"lineNumber":417,"author":{"gitId":"Haozeee"},"content":"    -fx-font-family: \"Open Sans SemiBold\";","lastModifiedDate":"2021-10-15"},{"lineNumber":418,"author":{"gitId":"Haozeee"},"content":"    -fx-font-size: 15pt;","lastModifiedDate":"2021-10-15"},{"lineNumber":419,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Haozeee":93,"-":326}},{"path":"src/main/resources/view/DoctorListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        \u003cVBox fx:id\u003d\"detailsBox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Haozeee":38}},{"path":"src/main/resources/view/DoctorListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    \u003cListView fx:id\u003d\"doctorListView\" VBox.vgrow\u003d\"ALWAYS\" \u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"        \u003cplaceholder\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"            \u003cLabel text\u003d\"No doctors found\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"        \u003c/placeholder\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    \u003c/ListView\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Haozeee":13}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"         title\u003d\"PlannerMD\" minWidth\u003d\"1500\" minHeight\u003d\"650\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    \u003cImage url\u003d\"@/images/planner_md_icon.png\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"          \u003cVBox minWidth\u003d\"340\" prefWidth\u003d\"340\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"                \u003cInsets top\u003d\"20\" right\u003d\"30\" bottom\u003d\"10\" left\u003d\"30\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-without-border\"","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"                       minHeight\u003d\"120\" prefHeight\u003d\"120\" maxHeight\u003d\"120\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"30\" bottom\u003d\"10\" left\u003d\"30\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"            \u003cVBox fx:id\u003d\"personTab\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"                \u003cInsets top\u003d\"20\" right\u003d\"30\" bottom\u003d\"30\" left\u003d\"30.5\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"              \u003cStackPane fx:id\u003d\"personTabPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"          \u003cVBox fx:id\u003d\"appointmentTab\" styleClass\u003d\"pane-without-border\" minWidth\u003d\"400\" VBox.vgrow\u003d\"ALWAYS\"","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"                HBox.hgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"              \u003cInsets top\u003d\"20\" right\u003d\"30\" bottom\u003d\"30\" left\u003d\"30\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"            \u003cStackPane fx:id\u003d\"appointmentTabPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"Haozeee":25,"-":51}},{"path":"src/main/resources/view/PatientListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    \u003cVBox fx:id\u003d\"detailsBox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        \u003cFlowPane fx:id\u003d\"risk\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Haozeee":5,"-":34}},{"path":"src/main/resources/view/PatientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" \u003e","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    \u003cplaceholder\u003e","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"      \u003cLabel text\u003d\"No patients found\" /\u003e","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    \u003c/placeholder\u003e","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"  \u003c/ListView\u003e","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"Haozeee":6,"-":7}},{"path":"src/main/resources/view/PersonTab.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.Tab?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-without-border\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    \u003cTabPane fx:id\u003d\"personTab\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"        \u003cTab fx:id\u003d\"patientsTab\" text\u003d\"Patients\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"            \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"        \u003c/Tab\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        \u003cTab fx:id\u003d\"doctorsTab\" text\u003d\"Doctors\"\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"            \u003cStackPane fx:id\u003d\"doctorListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        \u003c/Tab\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    \u003c/TabPane\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"Haozeee":18}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-without-border\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"Haozeee":1,"-":8}},{"path":"src/main/resources/view/StatusBarFooter.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"  \u003cLabel fx:id\u003d\"saveLocationStatus\" styleClass\u003d\"status-bar\"/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/GridPane\u003e","lastModifiedDate":"2016-08-26"}],"authorContributionMap":{"Haozeee":1,"-":11}},{"path":"src/test/data/JsonPlannerMdStorageTest/invalidAndValidPatientPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [ {","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"    \"remark\": \"valid remark\",","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"    \"risk\": \"LOW\"","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"    \"remark\": \"valid remark\",","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    \"risk\": \"LOW\"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": []","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hpkoh":2,"-":9,"jiayi1129":8}},{"path":"src/test/data/JsonPlannerMdStorageTest/invalidAppointmentPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"{","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"  \"patient\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"    \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"    \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"    \"tagged\": [","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"      \"friends\"","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"    ],","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"    \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"  },","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"  \"doctor\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"    \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"    \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"    \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"  },","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": [ {","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    \"_comments\": \"Missing session field\",","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    \"patient\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    \"doctor\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    \"date\": \"10/10/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Therapy Session\"","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"  }]","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"ChuangZheQuan":25,"jiayi1129":24}},{"path":"src/test/data/JsonPlannerMdStorageTest/invalidDoctorPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [ {","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"-":7,"jiayi1129":1}},{"path":"src/test/data/JsonPlannerMdStorageTest/invalidPatientPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [ {","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"    \"risk\": \"LOW\"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":6,"jiayi1129":3}},{"path":"src/test/data/JsonSerializablePlannerMdTest/clashingDoctorAppointmentPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"{","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Benson Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"98765432\",","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"johnd@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"        \"owesMoney\",","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Carl Kurz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"95352563\",","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"wall street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Daniel Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"87652533\",","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"cornelia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"10th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"MEDIUM\"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482224\",","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482427\",","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"George Best\",","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482442\",","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\" : [ {","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"George Best\",","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482442\",","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"6/6/2022\",","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"18:00\",","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 120","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Therapy Session\"","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Benson Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"98765432\",","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"johnd@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"owesMoney\", \"friends\" ],","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"George Best\",","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482442\",","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"6/6/2022\",","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"18:00\",","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 120","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Blocked Nose\"","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Carl Kurz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"95352563\",","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"wall street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-24"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-24"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-24"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-24"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482224\",","lastModifiedDate":"2021-10-24"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-24"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-24"},{"lineNumber":210,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-24"},{"lineNumber":212,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":213,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"10/10/2022\",","lastModifiedDate":"2021-10-24"},{"lineNumber":214,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":215,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"09:00\",","lastModifiedDate":"2021-10-24"},{"lineNumber":216,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-24"},{"lineNumber":217,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":218,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"High Fever and Cough\"","lastModifiedDate":"2021-10-24"},{"lineNumber":219,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":220,"author":{"gitId":"jiayi1129"},"content":"  ]","lastModifiedDate":"2021-10-24"},{"lineNumber":221,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"jiayi1129":221}},{"path":"src/test/data/JsonSerializablePlannerMdTest/clashingPatientAppointmentPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"{","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Benson Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"98765432\",","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"johnd@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"        \"owesMoney\",","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Carl Kurz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"95352563\",","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"wall street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Daniel Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"87652533\",","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"cornelia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"10th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"MEDIUM\"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482224\",","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482427\",","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"George Best\",","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482442\",","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\" : [ {","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": [","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"George Best\",","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482442\",","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"6/6/2022\",","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"18:00\",","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 120","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Therapy Session\"","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482427\",","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"6/6/2022\",","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"18:00\",","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 120","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Blocked Nose\"","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Carl Kurz\",","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"95352563\",","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"wall street\",","lastModifiedDate":"2021-10-24"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-24"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-24"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-24"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-24"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-24"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482224\",","lastModifiedDate":"2021-10-24"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-24"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-24"},{"lineNumber":210,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-24"},{"lineNumber":212,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":213,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"10/10/2022\",","lastModifiedDate":"2021-10-24"},{"lineNumber":214,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-24"},{"lineNumber":215,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"09:00\",","lastModifiedDate":"2021-10-24"},{"lineNumber":216,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-24"},{"lineNumber":217,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-24"},{"lineNumber":218,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"High Fever and Cough\"","lastModifiedDate":"2021-10-24"},{"lineNumber":219,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":220,"author":{"gitId":"jiayi1129"},"content":"  ]","lastModifiedDate":"2021-10-24"},{"lineNumber":221,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"jiayi1129":221}},{"path":"src/test/data/JsonSerializablePlannerMdTest/duplicateAppointmentPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"{","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"      \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"      \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"  \"appointments\": [","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"        \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"        \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"        \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"        \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"        \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"2/2/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"      \"session\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        \"start\": \"11:30\",","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"X-ray\"","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"        \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"        \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"        \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"        \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"2/2/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"      \"session\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"        \"start\": \"11:30\",","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"X-ray\"","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"  ]","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"ChuangZheQuan":63,"jiayi1129":18}},{"path":"src/test/data/JsonSerializablePlannerMdTest/duplicateDoctorPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"{","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [ {","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\": [ \"friends\" ]","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": []","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"jiayi1129":21}},{"path":"src/test/data/JsonSerializablePlannerMdTest/duplicatePatientPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"        \"friends\"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"      ],","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"HIGH\"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"        \"colleagues\"","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"      ],","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": []","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hpkoh":2,"ChuangZheQuan":13,"-":8,"jiayi1129":7}},{"path":"src/test/data/JsonSerializablePlannerMdTest/invalidAppointmentPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"{","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Pork Floss\",","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"pork@example.com\",","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": [","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Pork Floss\",","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"pork@example.com\",","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"2/2/2021\",","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"22:30\",","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        \"end\": \"00:00\",","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 90","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Blood test\"","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Bob Ross\",","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"bobby@example.com\",","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Bobby Rossy\",","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"12/12/1921\",","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"2/2/2021\",","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"11:30\",","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        \"end\": \"12:00\",","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"      \"remarks\": \"X-ray\"","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Alice Chains\",","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"97606500\",","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"123, Jurong Eest Ave 6, #08-111\",","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"12/12/1922\",","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Bobby Rossy\",","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"bobby@example.com\",","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"12/12/1965\",","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"PCR done\",","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"colleagues\" ]","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"2/2/2021\",","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"11:30\",","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"        \"end\": \"12:00\",","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Ask about condition the past two weeks\"","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"  ]","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"jiayi1129":101}},{"path":"src/test/data/JsonSerializablePlannerMdTest/invalidDoctorPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [ {","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\",","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": []","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"-":6,"jiayi1129":4}},{"path":"src/test/data/JsonSerializablePlannerMdTest/invalidPatientPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [ {","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"    \"risk\": \"LOW\"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": []","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":5,"jiayi1129":6}},{"path":"src/test/data/JsonSerializablePlannerMdTest/typicalAppointmentsPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"{","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"_comment\": \"PlannerMd save file which contains the same Appointment values as in TypicalPlannerMd#getTypicalAppointmentsPlannerMd()\",","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Benson Meier\",","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"98765432\",","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"johnd@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"        \"owesMoney\",","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Carl Kurz\",","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"95352563\",","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"wall street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Daniel Meier\",","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"87652533\",","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"cornelia@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"10th street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"MEDIUM\"","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482224\",","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482427\",","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"George Best\",","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482442\",","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\" : [ {","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-23"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-23"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-23"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2021-10-23"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2021-10-23"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2021-10-23"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-23"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-23"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2021-10-23"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2021-10-23"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-23"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"  \"appointments\": [","lastModifiedDate":"2021-10-16"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-16"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-16"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-16"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-16"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"        \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-16"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-16"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-23"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"George Best\",","lastModifiedDate":"2021-10-23"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482442\",","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":155,"author":{"gitId":"ChuangZheQuan"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-16"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-23"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-23"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"6/6/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"ChuangZheQuan"},"content":"      \"session\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"18:00\",","lastModifiedDate":"2021-10-23"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 120","lastModifiedDate":"2021-10-23"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Therapy Session\"","lastModifiedDate":"2021-10-23"},{"lineNumber":166,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-16"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-16"},{"lineNumber":168,"author":{"gitId":"ChuangZheQuan"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Benson Meier\",","lastModifiedDate":"2021-10-23"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"98765432\",","lastModifiedDate":"2021-10-23"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"johnd@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-23"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-23"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"owesMoney\", \"friends\" ],","lastModifiedDate":"2021-10-23"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-23"},{"lineNumber":177,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":178,"author":{"gitId":"ChuangZheQuan"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-23"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482427\",","lastModifiedDate":"2021-10-23"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-23"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-23"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-23"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":187,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"8/8/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":188,"author":{"gitId":"ChuangZheQuan"},"content":"      \"session\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":189,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"12:00\",","lastModifiedDate":"2021-10-23"},{"lineNumber":190,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 5","lastModifiedDate":"2021-10-23"},{"lineNumber":191,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Blocked Nose\"","lastModifiedDate":"2021-10-23"},{"lineNumber":193,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-16"},{"lineNumber":194,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-16"},{"lineNumber":195,"author":{"gitId":"ChuangZheQuan"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Carl Kurz\",","lastModifiedDate":"2021-10-23"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"95352563\",","lastModifiedDate":"2021-10-23"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"wall street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-23"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-23"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-23"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-23"},{"lineNumber":204,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":205,"author":{"gitId":"ChuangZheQuan"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-23"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482224\",","lastModifiedDate":"2021-10-23"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-23"},{"lineNumber":210,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-23"},{"lineNumber":211,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":214,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"10/10/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"ChuangZheQuan"},"content":"      \"session\": {","lastModifiedDate":"2021-10-16"},{"lineNumber":216,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"09:00\",","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"ChuangZheQuan"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-16"},{"lineNumber":218,"author":{"gitId":"ChuangZheQuan"},"content":"      },","lastModifiedDate":"2021-10-16"},{"lineNumber":219,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"High Fever and Cough\"","lastModifiedDate":"2021-10-23"},{"lineNumber":220,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"George Best\",","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482442\",","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-25"},{"lineNumber":230,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"jiayi1129"},"content":"        \"name\" : \"Alice Pauline\",","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"        \"phone\" : \"94351253\",","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"        \"email\" : \"alice@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"        \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-25"},{"lineNumber":238,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":241,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"6/6/2023\",","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"20:00\",","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 120","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Therapy Session\"","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482427\",","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":260,"author":{"gitId":"jiayi1129"},"content":"        \"name\" : \"Benson Meier\",","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"jiayi1129"},"content":"        \"phone\" : \"98765432\",","lastModifiedDate":"2021-10-25"},{"lineNumber":262,"author":{"gitId":"jiayi1129"},"content":"        \"email\" : \"johnd@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":263,"author":{"gitId":"jiayi1129"},"content":"        \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"8/8/2023\",","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":270,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"12:05\",","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 5","lastModifiedDate":"2021-10-25"},{"lineNumber":272,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":273,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Head Trauma\"","lastModifiedDate":"2021-10-25"},{"lineNumber":274,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-25"},{"lineNumber":276,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":277,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482224\",","lastModifiedDate":"2021-10-25"},{"lineNumber":279,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":280,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-25"},{"lineNumber":281,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-25"},{"lineNumber":282,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-25"},{"lineNumber":283,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-25"},{"lineNumber":284,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-25"},{"lineNumber":285,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":286,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":287,"author":{"gitId":"jiayi1129"},"content":"        \"name\" : \"Carl Kurz\",","lastModifiedDate":"2021-10-25"},{"lineNumber":288,"author":{"gitId":"jiayi1129"},"content":"        \"phone\" : \"95352563\",","lastModifiedDate":"2021-10-25"},{"lineNumber":289,"author":{"gitId":"jiayi1129"},"content":"        \"email\" : \"heinz@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":290,"author":{"gitId":"jiayi1129"},"content":"        \"address\" : \"wall street\",","lastModifiedDate":"2021-10-25"},{"lineNumber":291,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-25"},{"lineNumber":292,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-25"},{"lineNumber":293,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\" : [ ]","lastModifiedDate":"2021-10-25"},{"lineNumber":294,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":295,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"10/10/2023\",","lastModifiedDate":"2021-10-25"},{"lineNumber":296,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":297,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"09:30\",","lastModifiedDate":"2021-10-25"},{"lineNumber":298,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-25"},{"lineNumber":299,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":300,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Sore throat\"","lastModifiedDate":"2021-10-25"},{"lineNumber":301,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":302,"author":{"gitId":"ChuangZheQuan"},"content":"  ]","lastModifiedDate":"2021-10-16"},{"lineNumber":303,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"ChuangZheQuan":35,"jiayi1129":268}},{"path":"src/test/data/JsonSerializablePlannerMdTest/typicalDoctorsPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"_comment\": \"PlannerMd save file which contains the same Person values as in TypicalPlannerMd#getTypicalDoctorsPlannerMd()\",","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\" : [ {","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": []","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"-":43,"jiayi1129":19}},{"path":"src/test/data/JsonSerializablePlannerMdTest/typicalPatientsPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"_comment\": \"PlannerMd save file which contains the same Person values as in TypicalPlannerMd#getTypicalPatientsPlannerMd()\",","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"        \"friends\"","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"      ],","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \"name\": \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \"phone\": \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \"email\": \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \"address\": \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"        \"owesMoney\",","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"        \"friends\"","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"      ],","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \"name\": \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \"phone\": \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \"email\": \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \"address\": \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \"name\": \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \"phone\": \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \"email\": \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \"address\": \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"        \"friends\"","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"      ],","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"MEDIUM\"","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      \"name\": \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      \"phone\": \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      \"email\": \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      \"address\": \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \"name\": \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      \"phone\": \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      \"email\": \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      \"address\": \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"      \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"    },","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"    {","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      \"name\": \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      \"phone\": \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      \"email\": \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"HIGH\"","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": []","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hpkoh":7,"ChuangZheQuan":30,"-":30,"jiayi1129":17}},{"path":"src/test/data/JsonSerializablePlannerMdTest/typicalPlannerMd.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"{","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"  \"_comment\": \"PlannerMd save file which contains the same Appointment values as in TypicalPlannerMd#getTypicalPlannerMd()\",","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Benson Meier\",","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"98765432\",","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"johnd@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"        \"owesMoney\",","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Carl Kurz\",","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"95352563\",","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"wall street\",","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Daniel Meier\",","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"87652533\",","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"cornelia@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"10th street\",","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        \"friends\"","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"      ],","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"MEDIUM\"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482224\",","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"LOW\"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482427\",","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"      \"name\": \"George Best\",","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"      \"phone\": \"9482442\",","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"      \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"      \"address\": \"4th street\",","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"      \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"\",","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"      \"tagged\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"      \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"  ],","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"  \"doctors\" : [ {","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"  }, {","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"    \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"    \"remark\": \"\",","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"  } ],","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"  \"appointments\": [","lastModifiedDate":"2021-10-23"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-23"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-10-23"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"94351253\",","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"alice@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-23"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-23"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-23"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"George Best\",","lastModifiedDate":"2021-10-23"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482442\",","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-23"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-23"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"6/6/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"18:00\",","lastModifiedDate":"2021-10-23"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 120","lastModifiedDate":"2021-10-23"},{"lineNumber":164,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Therapy Session\"","lastModifiedDate":"2021-10-23"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-23"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Benson Meier\",","lastModifiedDate":"2021-10-23"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"98765432\",","lastModifiedDate":"2021-10-23"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"johnd@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-23"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-23"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-23"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [ \"owesMoney\", \"friends\" ],","lastModifiedDate":"2021-10-23"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-23"},{"lineNumber":177,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-23"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482427\",","lastModifiedDate":"2021-10-23"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-23"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-23"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-23"},{"lineNumber":186,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":187,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"8/8/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":188,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":189,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"12:00\",","lastModifiedDate":"2021-10-23"},{"lineNumber":190,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 5","lastModifiedDate":"2021-10-23"},{"lineNumber":191,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Blocked Nose\"","lastModifiedDate":"2021-10-23"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-23"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Carl Kurz\",","lastModifiedDate":"2021-10-23"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"95352563\",","lastModifiedDate":"2021-10-23"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"wall street\",","lastModifiedDate":"2021-10-23"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-23"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-23"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-23"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-23"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-23"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482224\",","lastModifiedDate":"2021-10-23"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-23"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-23"},{"lineNumber":210,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-23"},{"lineNumber":211,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": []","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"10/10/2022\",","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"09:00\",","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-23"},{"lineNumber":218,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-23"},{"lineNumber":219,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"High Fever and Cough\"","lastModifiedDate":"2021-10-23"},{"lineNumber":220,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"George Best\",","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482442\",","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"anna@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"4th street\",","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"9/1/1944\",","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-25"},{"lineNumber":230,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"HIGH\"","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"jiayi1129"},"content":"        \"name\" : \"Alice Pauline\",","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"        \"phone\" : \"94351253\",","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"        \"email\" : \"alice@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"        \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-25"},{"lineNumber":238,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Awaiting PCR test result\",","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":241,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"6/6/2023\",","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"20:00\",","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 120","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Therapy Session\"","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Fiona Kunz\",","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482427\",","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"little tokyo\",","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/08/1948\",","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"UNCLASSIFIED\"","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":260,"author":{"gitId":"jiayi1129"},"content":"        \"name\" : \"Benson Meier\",","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"jiayi1129"},"content":"        \"phone\" : \"98765432\",","lastModifiedDate":"2021-10-25"},{"lineNumber":262,"author":{"gitId":"jiayi1129"},"content":"        \"email\" : \"johnd@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":263,"author":{"gitId":"jiayi1129"},"content":"        \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1964\",","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Hypochondriac\",","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"8/8/2023\",","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":270,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"12:05\",","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 5","lastModifiedDate":"2021-10-25"},{"lineNumber":272,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":273,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Head Trauma\"","lastModifiedDate":"2021-10-25"},{"lineNumber":274,"author":{"gitId":"jiayi1129"},"content":"    },","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"jiayi1129"},"content":"    {","lastModifiedDate":"2021-10-25"},{"lineNumber":276,"author":{"gitId":"jiayi1129"},"content":"      \"patient\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":277,"author":{"gitId":"jiayi1129"},"content":"        \"name\": \"Elle Meyer\",","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"jiayi1129"},"content":"        \"phone\": \"9482224\",","lastModifiedDate":"2021-10-25"},{"lineNumber":279,"author":{"gitId":"jiayi1129"},"content":"        \"email\": \"werner@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":280,"author":{"gitId":"jiayi1129"},"content":"        \"address\": \"michegan ave\",","lastModifiedDate":"2021-10-25"},{"lineNumber":281,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"19/05/1955\",","lastModifiedDate":"2021-10-25"},{"lineNumber":282,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"\",","lastModifiedDate":"2021-10-25"},{"lineNumber":283,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\": [],","lastModifiedDate":"2021-10-25"},{"lineNumber":284,"author":{"gitId":"jiayi1129"},"content":"        \"risk\": \"LOW\"","lastModifiedDate":"2021-10-25"},{"lineNumber":285,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":286,"author":{"gitId":"jiayi1129"},"content":"      \"doctor\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":287,"author":{"gitId":"jiayi1129"},"content":"        \"name\" : \"Carl Kurz\",","lastModifiedDate":"2021-10-25"},{"lineNumber":288,"author":{"gitId":"jiayi1129"},"content":"        \"phone\" : \"95352563\",","lastModifiedDate":"2021-10-25"},{"lineNumber":289,"author":{"gitId":"jiayi1129"},"content":"        \"email\" : \"heinz@example.com\",","lastModifiedDate":"2021-10-25"},{"lineNumber":290,"author":{"gitId":"jiayi1129"},"content":"        \"address\" : \"wall street\",","lastModifiedDate":"2021-10-25"},{"lineNumber":291,"author":{"gitId":"jiayi1129"},"content":"        \"birthDate\": \"20/07/1965\",","lastModifiedDate":"2021-10-25"},{"lineNumber":292,"author":{"gitId":"jiayi1129"},"content":"        \"remark\": \"Prefers liquid medication\",","lastModifiedDate":"2021-10-25"},{"lineNumber":293,"author":{"gitId":"jiayi1129"},"content":"        \"tagged\" : [ ]","lastModifiedDate":"2021-10-25"},{"lineNumber":294,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":295,"author":{"gitId":"jiayi1129"},"content":"      \"date\": \"10/10/2023\",","lastModifiedDate":"2021-10-25"},{"lineNumber":296,"author":{"gitId":"jiayi1129"},"content":"      \"session\": {","lastModifiedDate":"2021-10-25"},{"lineNumber":297,"author":{"gitId":"jiayi1129"},"content":"        \"start\": \"09:30\",","lastModifiedDate":"2021-10-25"},{"lineNumber":298,"author":{"gitId":"jiayi1129"},"content":"        \"duration\": 30","lastModifiedDate":"2021-10-25"},{"lineNumber":299,"author":{"gitId":"jiayi1129"},"content":"      },","lastModifiedDate":"2021-10-25"},{"lineNumber":300,"author":{"gitId":"jiayi1129"},"content":"      \"remark\": \"Sore throat\"","lastModifiedDate":"2021-10-25"},{"lineNumber":301,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":302,"author":{"gitId":"jiayi1129"},"content":"  ]","lastModifiedDate":"2021-10-23"},{"lineNumber":303,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"jiayi1129":303}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \",","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"  \"plannerMdFilePath\" : \"plannermd.json\"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":12,"jiayi1129":1}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"  \"plannerMdFilePath\" : \"plannermd.json\"","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":10,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"-":57,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"-":26,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":133,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.core.index;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"-":58,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"-":34,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"-":105,"jiayi1129":3}},{"path":"src/test/java/seedu/plannermd/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Config;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":112,"jiayi1129":4}},{"path":"src/test/java/seedu/plannermd/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":21,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.SerializableTestClass;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.TestUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":42,"jiayi1129":3}},{"path":"src/test/java/seedu/plannermd/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.commons.util;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"-":141,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.BIRTH_DATE_DESC_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.RISK_DESC_AMY;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.AMY;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.listcommand.ListPatientCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.JsonPlannerMdStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.storage.StorageManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonPlannerMdStorage plannerMdStorage \u003d new JsonPlannerMdStorage(temporaryFolder.resolve(\"plannerMd.json\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        StorageManager storage \u003d new StorageManager(plannerMdStorage, userPrefsStorage);","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        String listCommand \u003d ListPatientCommand.COMMAND_WORD;","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(listCommand, ListPatientCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        // Setup LogicManager with JsonPlannerMdIoExceptionThrowingStub","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonPlannerMdStorage plannerMdStorage \u003d new JsonPlannerMdIoExceptionThrowingStub(","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"                temporaryFolder.resolve(\"ioExceptionPlannerMd.json\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"                temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        StorageManager storage \u003d new StorageManager(plannerMdStorage, userPrefsStorage);","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        String addCommand \u003d AddPatientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"                + ADDRESS_DESC_AMY + BIRTH_DATE_DESC_AMY + RISK_DESC_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().withRemark(\"\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.addPatient(expectedPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"     * - the internal model manager state is the same as that in","lastModifiedDate":"2021-10-05"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel)","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"            throws CommandException, ParseException {","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the","lastModifiedDate":"2021-10-05"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"     * result message is correct.","lastModifiedDate":"2021-10-05"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"     * result message is correct.","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"     * Executes the command, confirms that the exception is thrown and that the","lastModifiedDate":"2021-10-05"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"     * result message is correct.","lastModifiedDate":"2021-10-05"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"     * Executes the command and confirms that - the {@code expectedException} is","lastModifiedDate":"2021-10-05"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"     * thrown \u003cbr\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"ChuangZheQuan"},"content":"     * - the internal model manager state is the same as that in","lastModifiedDate":"2021-10-05"},{"lineNumber":149,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"    private static class JsonPlannerMdIoExceptionThrowingStub extends JsonPlannerMdStorage {","lastModifiedDate":"2021-09-26"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"        private JsonPlannerMdIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2021-09-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"        public void savePlannerMd(ReadOnlyPlannerMd plannerMd, Path filePath) throws IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"ChuangZheQuan":27,"-":107,"jiayi1129":38}},{"path":"src/test/java/seedu/plannermd/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"public class ClearCommandTest {","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    public void execute_emptyPlannerMd_success() {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public void execute_nonEmptyPlannerMd_success() {","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.setPlannerMd(new PlannerMd());","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"jiayi1129":32}},{"path":"src/test/java/seedu/plannermd/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"        // different toggle value -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"        // different toggle value -\u003e returns different hashcode","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"hpkoh":9,"-":50,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_RISK;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-02"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.apptcommand.AddAppointmentCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.apptcommand.EditAppointmentCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.AppointmentFieldsContainKeywordsPredicate;","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.appointment.AddAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.appointment.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String VALID_BIRTH_DATE_AMY \u003d \"02/01/1965\";","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String VALID_BIRTH_DATE_BOB \u003d \"2/2/1955\";","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"    public static final String VALID_REMARK_AMY \u003d \"Orange CHAS card\";","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Company X coverage\";","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"    public static final String VALID_RISK_AMY \u003d \"LOW\";","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    public static final String VALID_RISK_BOB \u003d \"MEDIUM\";","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String BIRTH_DATE_DESC_AMY \u003d \" \" + PREFIX_BIRTH_DATE + VALID_BIRTH_DATE_AMY;","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String BIRTH_DATE_DESC_BOB \u003d \" \" + PREFIX_BIRTH_DATE + VALID_BIRTH_DATE_BOB;","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"hpkoh"},"content":"    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"hpkoh"},"content":"    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    public static final String RISK_DESC_AMY \u003d \" \" + PREFIX_RISK + VALID_RISK_AMY;","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    public static final String RISK_DESC_BOB \u003d \" \" + PREFIX_RISK + VALID_RISK_BOB;","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"    public static final LocalDate FILTER_VALID_START_DATE \u003d LocalDate.of(2020, 10, 20);","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"    public static final LocalDate FILTER_VALID_END_DATE \u003d LocalDate.of(2020, 11, 20);","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"    public static final String VALID_STRING_START_DATE \u003d \"20/10/2020\";","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    public static final String VALID_STRING_END_DATE \u003d \"20/11/2020\";","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String INVALID_BIRTH_DATE_DESC \u003d \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"            + PREFIX_BIRTH_DATE + \"2020/02/11\"; // not DD/MM/YYYY format","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    public static final EditPatientCommand.EditPatientDescriptor DESC_AMY;","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"    public static final EditPatientCommand.EditPatientDescriptor DESC_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"    public static final EditDoctorCommand.EditDoctorDescriptor DESC_DR_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"    public static final EditDoctorCommand.EditDoctorDescriptor DESC_DR_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_APPT_DATE_THIRTY_MIN \u003d \"2/2/2022\";","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_APPT_DATE_TWO_HOUR \u003d \"12/12/2022\";","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_APPT_REMARK \u003d \"Patient wants a blood test\";","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"    public static final String ANOTHER_VALID_APPT_REMARK \u003d \"Patient wants a Covid test\";","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"    public static final int VALID_APPT_DURATION \u003d 30;","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_APPT_TIME \u003d \"23:59\";","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_APPT_TIME_THIRTY_MIN \u003d \"22:35\";","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_APPT_TIME_TWO_HOUR \u003d \"12:35\";","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"    public static final int VALID_APPT_DEFAULT_DURATION \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"    public static final int VALID_APPT_DURATION_THIRTY_MIN \u003d 30;","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"    public static final int VALID_APPT_DURATION_TWO_HOUR \u003d 120;","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_APPT_DURATION_THIRTY_MIN_STR \u003d \"30\";","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_APPT_DURATION_TWO_HOUR_STR \u003d \"120\";","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"    public static final String VALID_PATIENT_INDEX \u003d \"1\";","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"    public static final String ANOTHER_VALID_PATIENT_INDEX \u003d \"2\";","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String VALID_DOCTOR_INDEX \u003d \"2\";","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String ANOTHER_VALID_DOCTOR_INDEX \u003d \"3\";","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_START_THIRTY_MIN_DESC \u003d \" \" + PREFIX_START + VALID_APPT_DATE_THIRTY_MIN","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"            + \" \" + VALID_APPT_TIME_THIRTY_MIN;","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_DURATION_THIRTY_MIN_DESC \u003d \" \" + PREFIX_DURATION","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"            + VALID_APPT_DURATION_THIRTY_MIN;","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_START_TWO_HOUR_DESC \u003d \" \" + PREFIX_START + VALID_APPT_DATE_TWO_HOUR","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"            + \" \" + VALID_APPT_TIME_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_DURATION_TWO_HOUR_DESC \u003d \" \" + PREFIX_DURATION","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"            + VALID_APPT_DURATION_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_PATIENT_INDEX_DESC \u003d \" \" + PREFIX_PATIENT + VALID_PATIENT_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_ANOTHER_PATIENT_INDEX_DESC \u003d \" \" + PREFIX_PATIENT + ANOTHER_VALID_PATIENT_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_DOCTOR_INDEX_DESC \u003d \" \" + PREFIX_DOCTOR + VALID_DOCTOR_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_ANOTHER_DOCTOR_INDEX_DESC \u003d \" \" + PREFIX_DOCTOR + ANOTHER_VALID_DOCTOR_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_REMARK_DESC \u003d \" \" + PREFIX_REMARK + VALID_APPT_REMARK;","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"    public static final String APPT_ANOTHER_REMARK_DESC \u003d \" \" + PREFIX_REMARK + ANOTHER_VALID_APPT_REMARK;","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_PATIENT_INDEX \u003d \"WAT\";","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_DOCTOR_INDEX \u003d \"!!!!\";","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_START_DATE \u003d \"2-2-2022\";","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_START_TIME \u003d \"1211\";","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_DURATION \u003d \"forty-five minutes\";","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_DURATION_THREE_HOURS \u003d \"180\";","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_START \u003d \"2-2-2022 1000\";","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_PATIENT_INDEX_DESC \u003d \" \" + PREFIX_PATIENT + INVALID_PATIENT_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_DOCTOR_INDEX_DESC \u003d \" \" + PREFIX_DOCTOR + INVALID_DOCTOR_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_START + INVALID_START_DATE","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"            + \" \" + VALID_APPT_TIME_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START + VALID_APPT_DATE_THIRTY_MIN","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"            + \" \" + INVALID_START_TIME;","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_DURATION_DESC \u003d \" \" + PREFIX_DURATION","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"            + INVALID_DURATION;","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_DURATION_THREE_HOURS_DESC \u003d \" \" + PREFIX_DURATION + INVALID_DURATION_THREE_HOURS;","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"    public static final String INVALID_START_DESC \u003d \" \" + PREFIX_START + INVALID_START;","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"    public static final EditAppointmentCommand.EditAppointmentDescriptor DESC_EDIT_THIRTY_MIN_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"    public static final EditAppointmentCommand.EditAppointmentDescriptor DESC_EDIT_TWO_HOUR_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final AddAppointmentCommand.AddAppointmentDescriptor DESC_THIRTY_MIN_APPT;","lastModifiedDate":"2021-10-23"},{"lineNumber":160,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final AddAppointmentCommand.AddAppointmentDescriptor DESC_TWO_HOUR_APPT;","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthDate(VALID_BIRTH_DATE_AMY)","lastModifiedDate":"2021-10-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthDate(VALID_BIRTH_DATE_BOB)","lastModifiedDate":"2021-10-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":169,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"        DESC_DR_AMY \u003d new EditDoctorDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"pualixue"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthDate(VALID_BIRTH_DATE_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"pualixue"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"pualixue"},"content":"        DESC_DR_BOB \u003d new EditDoctorDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthDate(VALID_BIRTH_DATE_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"pualixue"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"pualixue"},"content":"        DESC_EDIT_THIRTY_MIN_APPT \u003d new EditAppointmentDescriptorBuilder().withPatientIndex(VALID_PATIENT_INDEX)","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"pualixue"},"content":"                .withDoctorIndex(VALID_DOCTOR_INDEX).withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"pualixue"},"content":"                .withStartTime(VALID_APPT_TIME_THIRTY_MIN).withDuration(VALID_APPT_DURATION_THIRTY_MIN_STR)","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"                .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"        DESC_EDIT_TWO_HOUR_APPT \u003d new EditAppointmentDescriptorBuilder().withPatientIndex(ANOTHER_VALID_PATIENT_INDEX)","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"                .withDoctorIndex(ANOTHER_VALID_DOCTOR_INDEX).withAppointmentDate(VALID_APPT_DATE_TWO_HOUR)","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"pualixue"},"content":"                .withStartTime(VALID_APPT_TIME_TWO_HOUR).withDuration(VALID_APPT_DURATION_TWO_HOUR_STR)","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"pualixue"},"content":"                .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"ChuangZheQuan"},"content":"        DESC_THIRTY_MIN_APPT \u003d new AddAppointmentDescriptorBuilder().withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-23"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"                .withSession(VALID_APPT_TIME_THIRTY_MIN, VALID_APPT_DURATION_THIRTY_MIN)","lastModifiedDate":"2021-10-23"},{"lineNumber":187,"author":{"gitId":"ChuangZheQuan"},"content":"                .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":188,"author":{"gitId":"ChuangZheQuan"},"content":"        DESC_TWO_HOUR_APPT \u003d new AddAppointmentDescriptorBuilder().withAppointmentDate(VALID_APPT_DATE_TWO_HOUR)","lastModifiedDate":"2021-10-23"},{"lineNumber":189,"author":{"gitId":"ChuangZheQuan"},"content":"                .withSession(VALID_APPT_TIME_TWO_HOUR, VALID_APPT_DURATION_TWO_HOUR)","lastModifiedDate":"2021-10-23"},{"lineNumber":190,"author":{"gitId":"ChuangZheQuan"},"content":"                .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":195,"author":{"gitId":"ChuangZheQuan"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult}","lastModifiedDate":"2021-10-05"},{"lineNumber":196,"author":{"gitId":"ChuangZheQuan"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2021-10-05"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"ChuangZheQuan"},"content":"     * Convenience wrapper to","lastModifiedDate":"2021-10-05"},{"lineNumber":212,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that","lastModifiedDate":"2021-10-05"},{"lineNumber":213,"author":{"gitId":"ChuangZheQuan"},"content":"     * takes a string {@code expectedMessage}.","lastModifiedDate":"2021-10-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":225,"author":{"gitId":"ChuangZheQuan"},"content":"     * - the plannermd, filtered person list and selected person in","lastModifiedDate":"2021-10-05"},{"lineNumber":226,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code actualModel} remain unchanged","lastModifiedDate":"2021-10-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":231,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd expectedPlannerMd \u003d new PlannerMd(actualModel.getPlannerMd());","lastModifiedDate":"2021-09-26"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());","lastModifiedDate":"2021-09-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(expectedPlannerMd, actualModel.getPlannerMd());","lastModifiedDate":"2021-09-26"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());","lastModifiedDate":"2021-09-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":238,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":240,"author":{"gitId":"Haozeee"},"content":"     * Updates {@code model}\u0027s patient filtered list to show only the patient at the given","lastModifiedDate":"2021-10-08"},{"lineNumber":241,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code targetIndex} in the {@code model}\u0027s plannermd.","lastModifiedDate":"2021-10-05"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":243,"author":{"gitId":"jiayi1129"},"content":"    public static void showPatientAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-09-30"},{"lineNumber":244,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());","lastModifiedDate":"2021-09-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":246,"author":{"gitId":"jiayi1129"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-09-30"},{"lineNumber":247,"author":{"gitId":"jiayi1129"},"content":"        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-09-30"},{"lineNumber":248,"author":{"gitId":"jiayi1129"},"content":"        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-09-30"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":250,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(1, model.getFilteredPatientList().size());","lastModifiedDate":"2021-09-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":253,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":254,"author":{"gitId":"Haozeee"},"content":"     * Updates {@code model}\u0027s doctor filtered list to show only the doctor at the given","lastModifiedDate":"2021-10-08"},{"lineNumber":255,"author":{"gitId":"hpkoh"},"content":"     * {@code targetIndex} in the {@code model}\u0027s plannermd.","lastModifiedDate":"2021-10-10"},{"lineNumber":256,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":257,"author":{"gitId":"hpkoh"},"content":"    public static void showDoctorAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-10-10"},{"lineNumber":258,"author":{"gitId":"hpkoh"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDoctorList().size());","lastModifiedDate":"2021-10-10"},{"lineNumber":259,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":260,"author":{"gitId":"hpkoh"},"content":"        Doctor doctor \u003d model.getFilteredDoctorList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":261,"author":{"gitId":"hpkoh"},"content":"        final String[] splitName \u003d doctor.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-10-10"},{"lineNumber":262,"author":{"gitId":"hpkoh"},"content":"        model.updateFilteredDoctorList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-10-10"},{"lineNumber":263,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":264,"author":{"gitId":"hpkoh"},"content":"        assertEquals(1, model.getFilteredDoctorList().size());","lastModifiedDate":"2021-10-10"},{"lineNumber":265,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":266,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":267,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":268,"author":{"gitId":"ChuangZheQuan"},"content":"     * Updates {@code model}\u0027s appointment filtered list to show only the appointment at the given","lastModifiedDate":"2021-10-24"},{"lineNumber":269,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code targetIndex} in the {@code model}\u0027s plannermd.","lastModifiedDate":"2021-10-24"},{"lineNumber":270,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":271,"author":{"gitId":"ChuangZheQuan"},"content":"    public static void showAppointmentAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-10-24"},{"lineNumber":272,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-10-24"},{"lineNumber":273,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":274,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment appointment \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-24"},{"lineNumber":275,"author":{"gitId":"ChuangZheQuan"},"content":"        final String[] splitPatientName \u003d appointment.getPatient().getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-10-24"},{"lineNumber":276,"author":{"gitId":"ChuangZheQuan"},"content":"        model.updateFilteredAppointmentList(","lastModifiedDate":"2021-10-24"},{"lineNumber":277,"author":{"gitId":"ChuangZheQuan"},"content":"                new AppointmentFieldsContainKeywordsPredicate(Arrays.asList(splitPatientName[0])));","lastModifiedDate":"2021-10-24"},{"lineNumber":278,"author":{"gitId":"ChuangZheQuan"},"content":"        System.out.println(model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-25"},{"lineNumber":279,"author":{"gitId":"ChuangZheQuan"},"content":"        assertEquals(1, model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-10-24"},{"lineNumber":280,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":281,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"hpkoh":18,"Haozeee":8,"pualixue":81,"ChuangZheQuan":54,"-":91,"jiayi1129":30}},{"path":"src/test/java/seedu/plannermd/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"hpkoh":1,"-":14,"jiayi1129":5}},{"path":"src/test/java/seedu/plannermd/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"hpkoh":1,"-":14,"jiayi1129":5}},{"path":"src/test/java/seedu/plannermd/logic/commands/ToggleCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.ToggleCommand.MESSAGE_TOGGLE_SUCCESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"class ToggleCommandTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"    private static final String MESSAGE_TOGGLE_SUCCESS_PATIENTS \u003d String.format(MESSAGE_TOGGLE_SUCCESS, \"patients\");","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"    private static final String MESSAGE_TOGGLE_SUCCESS_DOCTOR \u003d String.format(MESSAGE_TOGGLE_SUCCESS, \"doctors\");","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"    public void execute_toggleTwice_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"        CommandResult expectedCommandResult \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"                new CommandResult(MESSAGE_TOGGLE_SUCCESS_DOCTOR, false, true, false);","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"        expectedModel.toggleState();","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"        assertCommandSuccess(new ToggleCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"        expectedCommandResult \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"                new CommandResult(MESSAGE_TOGGLE_SUCCESS_PATIENTS, false, true, false);","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"        expectedModel.toggleState();","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"        assertCommandSuccess(new ToggleCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"hpkoh":31}},{"path":"src/test/java/seedu/plannermd/logic/commands/addcommand/AddDoctorCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.addcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddDoctorCommandIntegrationTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"    private Model model;","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"        model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_newDoctor_success() {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"        Model expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"        expectedModel.addDoctor(validDoctor);","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandSuccess(new AddDoctorCommand(validDoctor), model,","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"                String.format(AddDoctorCommand.MESSAGE_SUCCESS, validDoctor), expectedModel);","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_duplicateDoctor_throwsCommandException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor doctorInList \u003d model.getPlannerMd().getDoctorList().get(0);","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandFailure(new AddDoctorCommand(doctorInList), model, AddDoctorCommand.MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"ChuangZheQuan":39,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/addcommand/AddDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.addcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddDoctorCommandTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"    public void constructor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddDoctorCommand(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_doctorAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"        AddDoctorCommandTest.ModelStubAcceptingDoctorAdded modelStub \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommandTest.ModelStubAcceptingDoctorAdded();","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        CommandResult commandResult \u003d new AddDoctorCommand(validDoctor).execute(modelStub);","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"        assertEquals(String.format(AddDoctorCommand.MESSAGE_SUCCESS, validDoctor), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"        assertEquals(Arrays.asList(validDoctor), modelStub.doctorsAdded);","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"        AddDoctorCommand addDoctorCommand \u003d new AddDoctorCommand(validDoctor);","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"        AddDoctorCommandTest.ModelStub modelStub \u003d new AddDoctorCommandTest.ModelStubWithDoctor(validDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"                AddDoctorCommand.MESSAGE_DUPLICATE_DOCTOR, () -\u003e addDoctorCommand.execute(modelStub));","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"    public void equals() {","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor alice \u003d new DoctorBuilder().withName(\"Alice\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor bob \u003d new DoctorBuilder().withName(\"Bob\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"        AddDoctorCommand addAliceCommand \u003d new AddDoctorCommand(alice);","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"        AddDoctorCommand addBobCommand \u003d new AddDoctorCommand(bob);","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"        AddDoctorCommand addAliceCommandCopy \u003d new AddDoctorCommand(alice);","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setState(State state) {","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"        public State getState() {","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"        public void toggleState() {","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"        public Path getPlannerMdFilePath() {","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setPlannerMdFilePath(Path plannerMdFilePath) {","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-08"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":136,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":137,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setPlannerMd(ReadOnlyPlannerMd plannerMd) {","lastModifiedDate":"2021-10-08"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"        public ReadOnlyPlannerMd getPlannerMd() {","lastModifiedDate":"2021-10-08"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":148,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-08"},{"lineNumber":149,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":152,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":153,"author":{"gitId":"ChuangZheQuan"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2021-10-08"},{"lineNumber":154,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":155,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":156,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":157,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":158,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-08"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":160,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":161,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":162,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":163,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-08"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":165,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":166,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":168,"author":{"gitId":"ChuangZheQuan"},"content":"        public void deleteDoctor(Doctor target) {","lastModifiedDate":"2021-10-08"},{"lineNumber":169,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":170,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":171,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":172,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":173,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-08"},{"lineNumber":174,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":175,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":176,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":177,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":178,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2021-10-08"},{"lineNumber":179,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":180,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":181,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":182,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean isClashAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"pualixue"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"        public boolean isClashAppointmentForEdited(Appointment editedAppointment, Appointment oldAppointment) {","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"pualixue"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":210,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":211,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":212,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":213,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-08"},{"lineNumber":214,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":215,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":216,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":217,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":218,"author":{"gitId":"ChuangZheQuan"},"content":"        public void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate) {","lastModifiedDate":"2021-10-08"},{"lineNumber":219,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":220,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":221,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":222,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":223,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-08"},{"lineNumber":224,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":225,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":226,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":227,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":228,"author":{"gitId":"ChuangZheQuan"},"content":"        public void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate) {","lastModifiedDate":"2021-10-08"},{"lineNumber":229,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":230,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":231,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":233,"author":{"gitId":"jiayi1129"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-17"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":237,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":238,"author":{"gitId":"jiayi1129"},"content":"        public void updateFilteredAppointmentList(Predicate\u003c? super Appointment\u003e predicate) {","lastModifiedDate":"2021-10-17"},{"lineNumber":239,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":240,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":241,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":242,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":243,"author":{"gitId":"hpkoh"},"content":"        public \u003cT extends Person\u003e void deleteAppointmentsWithPerson(T person) {","lastModifiedDate":"2021-10-23"},{"lineNumber":244,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":245,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":246,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":247,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":248,"author":{"gitId":"hpkoh"},"content":"        public \u003cT extends Person\u003e void editAppointmentsWithPerson(T person, T editedPerson) {","lastModifiedDate":"2021-10-23"},{"lineNumber":249,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":250,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":251,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":252,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":253,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":254,"author":{"gitId":"ChuangZheQuan"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2021-10-08"},{"lineNumber":255,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":256,"author":{"gitId":"ChuangZheQuan"},"content":"    private class ModelStubWithDoctor extends AddDoctorCommandTest.ModelStub {","lastModifiedDate":"2021-10-09"},{"lineNumber":257,"author":{"gitId":"ChuangZheQuan"},"content":"        private final Doctor doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":258,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":259,"author":{"gitId":"ChuangZheQuan"},"content":"        ModelStubWithDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":260,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":261,"author":{"gitId":"ChuangZheQuan"},"content":"            this.doctor \u003d doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":262,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":263,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":264,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":265,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-08"},{"lineNumber":266,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":267,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":268,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":269,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":270,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-08"},{"lineNumber":271,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-08"},{"lineNumber":272,"author":{"gitId":"ChuangZheQuan"},"content":"            return this.doctor.isSamePerson(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":273,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":274,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":275,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":276,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":277,"author":{"gitId":"ChuangZheQuan"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2021-10-08"},{"lineNumber":278,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":279,"author":{"gitId":"ChuangZheQuan"},"content":"    private class ModelStubAcceptingDoctorAdded extends AddDoctorCommandTest.ModelStub {","lastModifiedDate":"2021-10-08"},{"lineNumber":280,"author":{"gitId":"ChuangZheQuan"},"content":"        final ArrayList\u003cDoctor\u003e doctorsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-08"},{"lineNumber":281,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":282,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":283,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-08"},{"lineNumber":284,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-08"},{"lineNumber":285,"author":{"gitId":"ChuangZheQuan"},"content":"            return doctorsAdded.stream().anyMatch(doctor::isSamePerson);","lastModifiedDate":"2021-10-08"},{"lineNumber":286,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":287,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":288,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":289,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-08"},{"lineNumber":290,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-08"},{"lineNumber":291,"author":{"gitId":"ChuangZheQuan"},"content":"            doctorsAdded.add(doctor);","lastModifiedDate":"2021-10-08"},{"lineNumber":292,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":293,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":294,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":295,"author":{"gitId":"ChuangZheQuan"},"content":"        public ReadOnlyPlannerMd getPlannerMd() {","lastModifiedDate":"2021-10-08"},{"lineNumber":296,"author":{"gitId":"ChuangZheQuan"},"content":"            return new PlannerMd();","lastModifiedDate":"2021-10-08"},{"lineNumber":297,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":298,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":299,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"hpkoh":11,"pualixue":5,"ChuangZheQuan":249,"jiayi1129":34}},{"path":"src/test/java/seedu/plannermd/logic/commands/addcommand/AddPatientCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.addcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPatientCommand}.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"public class AddPatientCommandIntegrationTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private Model model;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    @BeforeEach","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public void setUp() {","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    public void execute_newPatient_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.addPatient(validPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(new AddPatientCommand(validPatient), model,","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"                String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), expectedModel);","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        Patient patientInList \u003d model.getPlannerMd().getPatientList().get(0);","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        assertCommandFailure(new AddPatientCommand(patientInList), model, AddPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jiayi1129":45}},{"path":"src/test/java/seedu/plannermd/logic/commands/addcommand/AddPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.addcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"public class AddPatientCommandTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        CommandResult commandResult \u003d new AddPatientCommand(validPatient).execute(modelStub);","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(validPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"                AddPatientCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addPatientCommand.execute(modelStub));","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"    public void equals() {","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"hpkoh"},"content":"        public void setState(State state) {","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"hpkoh"},"content":"        public State getState() {","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"hpkoh"},"content":"        public void toggleState() {","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"        public Path getPlannerMdFilePath() {","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"        public void setPlannerMdFilePath(Path plannerMdFilePath) {","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"        public void setPlannerMd(ReadOnlyPlannerMd plannerMd) {","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"        public ReadOnlyPlannerMd getPlannerMd() {","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"hpkoh"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":164,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"hpkoh"},"content":"        public void deleteDoctor(Doctor target) {","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"Haozeee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":169,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"hpkoh"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":174,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"hpkoh"},"content":"        public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":178,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":179,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean isClashAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"pualixue"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"pualixue"},"content":"        public boolean isClashAppointmentForEdited(Appointment editedAppointment, Appointment oldAppointment) {","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-10-17"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-17"},{"lineNumber":208,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":209,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":210,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":211,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":212,"author":{"gitId":"jiayi1129"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":213,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":214,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":215,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":216,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":217,"author":{"gitId":"hpkoh"},"content":"        public void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate) {","lastModifiedDate":"2021-10-07"},{"lineNumber":218,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":219,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":220,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":221,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":222,"author":{"gitId":"hpkoh"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":223,"author":{"gitId":"hpkoh"},"content":"            return null;","lastModifiedDate":"2021-10-07"},{"lineNumber":224,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":225,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":226,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":227,"author":{"gitId":"hpkoh"},"content":"        public void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate) {","lastModifiedDate":"2021-10-07"},{"lineNumber":228,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":229,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":230,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":231,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-17"},{"lineNumber":233,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":237,"author":{"gitId":"jiayi1129"},"content":"        public void updateFilteredAppointmentList(Predicate\u003c? super Appointment\u003e predicate) {","lastModifiedDate":"2021-10-17"},{"lineNumber":238,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":239,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":240,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":241,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":242,"author":{"gitId":"hpkoh"},"content":"        public \u003cT extends Person\u003e void deleteAppointmentsWithPerson(T person) {","lastModifiedDate":"2021-10-23"},{"lineNumber":243,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":244,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":245,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":246,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":247,"author":{"gitId":"hpkoh"},"content":"        public \u003cT extends Person\u003e void editAppointmentsWithPerson(T person, T editedPerson) {","lastModifiedDate":"2021-10-23"},{"lineNumber":248,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":249,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":250,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":251,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":252,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":253,"author":{"gitId":"jiayi1129"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2021-09-29"},{"lineNumber":254,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":255,"author":{"gitId":"ChuangZheQuan"},"content":"    private class ModelStubWithPatient extends ModelStub {","lastModifiedDate":"2021-10-10"},{"lineNumber":256,"author":{"gitId":"ChuangZheQuan"},"content":"        private final Patient patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":257,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":258,"author":{"gitId":"ChuangZheQuan"},"content":"        ModelStubWithPatient(Patient patient) {","lastModifiedDate":"2021-10-10"},{"lineNumber":259,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":260,"author":{"gitId":"ChuangZheQuan"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":261,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":262,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":263,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":264,"author":{"gitId":"jiayi1129"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":265,"author":{"gitId":"jiayi1129"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":266,"author":{"gitId":"ChuangZheQuan"},"content":"            return this.patient.isSamePerson(patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":267,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":268,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":269,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":270,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":271,"author":{"gitId":"jiayi1129"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2021-09-30"},{"lineNumber":272,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":273,"author":{"gitId":"jiayi1129"},"content":"    private class ModelStubAcceptingPatientAdded extends ModelStub {","lastModifiedDate":"2021-09-30"},{"lineNumber":274,"author":{"gitId":"jiayi1129"},"content":"        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-30"},{"lineNumber":275,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":276,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":277,"author":{"gitId":"jiayi1129"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":278,"author":{"gitId":"jiayi1129"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":279,"author":{"gitId":"jiayi1129"},"content":"            return patientsAdded.stream().anyMatch(patient::isSamePerson);","lastModifiedDate":"2021-09-30"},{"lineNumber":280,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":281,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":282,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":283,"author":{"gitId":"jiayi1129"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2021-09-29"},{"lineNumber":284,"author":{"gitId":"jiayi1129"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-09-29"},{"lineNumber":285,"author":{"gitId":"jiayi1129"},"content":"            patientsAdded.add(patient);","lastModifiedDate":"2021-09-30"},{"lineNumber":286,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":287,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":288,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":289,"author":{"gitId":"jiayi1129"},"content":"        public ReadOnlyPlannerMd getPlannerMd() {","lastModifiedDate":"2021-09-29"},{"lineNumber":290,"author":{"gitId":"jiayi1129"},"content":"            return new PlannerMd();","lastModifiedDate":"2021-09-29"},{"lineNumber":291,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":292,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":293,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":56,"Haozeee":2,"pualixue":5,"ChuangZheQuan":12,"jiayi1129":218}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/AddAppointmentCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-30"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-30"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_CARL;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.appointment.AddAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddAppointmentCommandIntegrationTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"    private Model model;","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"        model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_newAppointment_success() {","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().withPatient(ALICE).withDoctor(DR_CARL).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient patient \u003d validAppointment.getPatient();","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor doctor \u003d validAppointment.getDoctor();","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"        Index doctorIndex \u003d Index.fromZeroBased(1);","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"        Index patientIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        LocalDate apptDate \u003d validAppointment.getAppointmentDate().date;","lastModifiedDate":"2021-10-30"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Patient pt : model.getPlannerMd().getPatientList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"            if (pt.equals(patient)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"                patientIndex \u003d Index.fromZeroBased(model.getPlannerMd().getPatientList().indexOf(pt));","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"                break;","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Doctor dr : model.getPlannerMd().getDoctorList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"            if (dr.equals(doctor)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"                doctorIndex \u003d Index.fromZeroBased(model.getPlannerMd().getDoctorList().indexOf(dr));","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"                break;","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder(validAppointment).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"        Model expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"        expectedModel.addAppointment(validAppointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(AppointmentFilters.appointmentFiltersAtDate(apptDate)","lastModifiedDate":"2021-10-30"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"                .collectAllFilters());","lastModifiedDate":"2021-10-30"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandSuccess(new AddAppointmentCommand(patientIndex, doctorIndex, descriptor), model,","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"                String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment,","lastModifiedDate":"2021-10-30"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"                        AppointmentDate.DISPLAYED_DATE_FORMATTER.format(validAppointment.getAppointmentDate().date)),","lastModifiedDate":"2021-10-30"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"                expectedModel);","lastModifiedDate":"2021-10-30"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        assertTrue(model.getFilteredAppointmentList().contains(validAppointment));","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment appointmentInList \u003d model.getPlannerMd().getAppointmentList().get(0);","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient patient \u003d appointmentInList.getPatient();","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor doctor \u003d appointmentInList.getDoctor();","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"        Index doctorIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Patient pt : model.getPlannerMd().getPatientList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"            if (pt.equals(patient)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"                patientIndex \u003d Index.fromZeroBased(model.getPlannerMd().getPatientList().indexOf(pt));","lastModifiedDate":"2021-10-23"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"                break;","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Doctor dr : model.getPlannerMd().getDoctorList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"            if (dr.equals(doctor)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"                doctorIndex \u003d Index.fromZeroBased(model.getPlannerMd().getDoctorList().indexOf(dr));","lastModifiedDate":"2021-10-23"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"                break;","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder(appointmentInList).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandFailure(new AddAppointmentCommand(patientIndex, doctorIndex, descriptor), model,","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"                AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(appointmentInList), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-30"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_conflictingAppointment_throwsCommandException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment appointmentInList \u003d model.getPlannerMd().getAppointmentList().get(0);","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient patient \u003d appointmentInList.getPatient();","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"        Index doctorIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Patient pt : model.getPlannerMd().getPatientList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"            if (pt.equals(patient)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"                patientIndex \u003d Index.fromZeroBased(model.getPlannerMd().getPatientList().indexOf(pt));","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"                break;","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder(appointmentInList).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandFailure(new AddAppointmentCommand(patientIndex, doctorIndex, descriptor), model,","lastModifiedDate":"2021-10-23"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"                AddAppointmentCommand.MESSAGE_CONFLICTING_APPOINTMENT);","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(appointmentInList), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-30"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"Haozeee":17,"ChuangZheQuan":104,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.THIRTY_MIN_APPOINTMENT;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.TWO_HOUR_APPOINTMENT;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-30"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.CommandResult;","lastModifiedDate":"2021-10-31"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.UniquePersonList;","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.appointment.AddAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddAppointmentCommandTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"    private AddAppointmentCommand.AddAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"            new AddAppointmentDescriptorBuilder(new AppointmentBuilder().build()).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"    public void constructor_nullAll_throwsNullPointerException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null,","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"                null, null));","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"    public void constructor_nullDoctorIndex_throwsNullPointerException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null,","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"                INDEX_FIRST_PERSON, descriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"    public void constructor_nullPatientIndex_throwsNullPointerException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"                null, descriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"    public void constructor_nullDescriptor_throwsNullPointerException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"                INDEX_FIRST_PERSON, null));","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-10-30"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"        CommandResult commandResult \u003d new AddAppointmentCommand(INDEX_FIRST_PERSON, INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"                descriptor).execute(modelStub);","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment,","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"                AppointmentDate.DISPLAYED_DATE_FORMATTER.format(validAppointment.getAppointmentDate().date)),","lastModifiedDate":"2021-10-30"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(validAppointment), modelStub.appointmentsAdded);","lastModifiedDate":"2021-10-30"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        ModelStubWithAppointment modelStub \u003d new ModelStubWithAppointment(validAppointment);","lastModifiedDate":"2021-10-30"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient patient \u003d validAppointment.getPatient();","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor doctor \u003d validAppointment.getDoctor();","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"        Index doctorIndex \u003d Index.fromZeroBased(1);","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"        Index patientIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Patient pt : modelStub.getFilteredPatientList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"            if (pt.equals(patient)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"                patientIndex \u003d Index.fromZeroBased(modelStub.getFilteredPatientList().indexOf(pt));","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"                break;","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Doctor dr : modelStub.getFilteredDoctorList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"            if (dr.equals(doctor)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"                doctorIndex \u003d Index.fromZeroBased(modelStub.getFilteredDoctorList().indexOf(dr));","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"                break;","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder(validAppointment).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(patientIndex, doctorIndex, descriptor);","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"                AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT, () -\u003e addAppointmentCommand.execute(modelStub));","lastModifiedDate":"2021-10-23"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"    public void equals() {","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment thirtyMinAppt \u003d new AppointmentBuilder(THIRTY_MIN_APPOINTMENT).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment twoHrAppt \u003d new AppointmentBuilder(TWO_HOUR_APPOINTMENT).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor thirtyMinDescriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder(thirtyMinAppt).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor twoHrDescriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder(twoHrAppt).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand addThirtyMinApptCommand \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(INDEX_FIRST_PERSON, INDEX_FIRST_PERSON, thirtyMinDescriptor);","lastModifiedDate":"2021-10-23"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"        AddAppointmentCommand addTwoHrApptCommand \u003d","lastModifiedDate":"2021-10-30"},{"lineNumber":128,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(INDEX_FIRST_PERSON, INDEX_FIRST_PERSON, twoHrDescriptor);","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-23"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(addThirtyMinApptCommand.equals(addThirtyMinApptCommand));","lastModifiedDate":"2021-10-23"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-23"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand addThirtyMinApptCommandCopy \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(INDEX_FIRST_PERSON, INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"ChuangZheQuan"},"content":"                        new AddAppointmentDescriptorBuilder(thirtyMinDescriptor).build());","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(addThirtyMinApptCommand.equals(addThirtyMinApptCommandCopy));","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(addThirtyMinApptCommand.equals(1));","lastModifiedDate":"2021-10-23"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(addThirtyMinApptCommand.equals(null));","lastModifiedDate":"2021-10-23"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"        assertFalse(addThirtyMinApptCommand.equals(addTwoHrApptCommand));","lastModifiedDate":"2021-10-30"},{"lineNumber":148,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":149,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-10-23"},{"lineNumber":152,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":153,"author":{"gitId":"ChuangZheQuan"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":155,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setState(State state) {","lastModifiedDate":"2021-10-23"},{"lineNumber":156,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":157,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":158,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":160,"author":{"gitId":"ChuangZheQuan"},"content":"        public State getState() {","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":162,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":163,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":165,"author":{"gitId":"ChuangZheQuan"},"content":"        public void toggleState() {","lastModifiedDate":"2021-10-23"},{"lineNumber":166,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":168,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":169,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":170,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-23"},{"lineNumber":171,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":172,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":173,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":174,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":175,"author":{"gitId":"ChuangZheQuan"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-10-23"},{"lineNumber":176,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":177,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":178,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":179,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":180,"author":{"gitId":"ChuangZheQuan"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-10-23"},{"lineNumber":181,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":182,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":184,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":185,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-10-23"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":187,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":188,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":189,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":190,"author":{"gitId":"ChuangZheQuan"},"content":"        public Path getPlannerMdFilePath() {","lastModifiedDate":"2021-10-23"},{"lineNumber":191,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":192,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":193,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":194,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":195,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setPlannerMdFilePath(Path plannerMdFilePath) {","lastModifiedDate":"2021-10-23"},{"lineNumber":196,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":197,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":198,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":199,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":200,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":201,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":202,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":203,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":204,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":205,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setPlannerMd(ReadOnlyPlannerMd plannerMd) {","lastModifiedDate":"2021-10-23"},{"lineNumber":206,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":207,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":208,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":209,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":210,"author":{"gitId":"ChuangZheQuan"},"content":"        public ReadOnlyPlannerMd getPlannerMd() {","lastModifiedDate":"2021-10-23"},{"lineNumber":211,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":218,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":219,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":220,"author":{"gitId":"ChuangZheQuan"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2021-10-23"},{"lineNumber":221,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":222,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":223,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":224,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":225,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":226,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":227,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":228,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":229,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":230,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":231,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":232,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":233,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":234,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":235,"author":{"gitId":"ChuangZheQuan"},"content":"        public void deleteDoctor(Doctor target) {","lastModifiedDate":"2021-10-23"},{"lineNumber":236,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":237,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":238,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":239,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":240,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":241,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":242,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":243,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":244,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":245,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":246,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":247,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":248,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":249,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":250,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":251,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":252,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":253,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":254,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":255,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean isClashAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":256,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":257,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":258,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":259,"author":{"gitId":"pualixue"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":260,"author":{"gitId":"pualixue"},"content":"        public boolean isClashAppointmentForEdited(Appointment editedAppointment, Appointment oldAppointment) {","lastModifiedDate":"2021-10-26"},{"lineNumber":261,"author":{"gitId":"pualixue"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":262,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":263,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":264,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":265,"author":{"gitId":"ChuangZheQuan"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-10-23"},{"lineNumber":266,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":267,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":268,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":269,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":270,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":271,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":272,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":273,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":274,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":275,"author":{"gitId":"ChuangZheQuan"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":276,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":277,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":278,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":279,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":280,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":281,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":282,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":283,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":284,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":285,"author":{"gitId":"ChuangZheQuan"},"content":"        public void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate) {","lastModifiedDate":"2021-10-23"},{"lineNumber":286,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":287,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":288,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":289,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":290,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":291,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":292,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":293,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":294,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":295,"author":{"gitId":"ChuangZheQuan"},"content":"        public void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate) {","lastModifiedDate":"2021-10-23"},{"lineNumber":296,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":297,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":298,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":299,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":300,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":301,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":302,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":303,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":304,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":305,"author":{"gitId":"ChuangZheQuan"},"content":"        public void updateFilteredAppointmentList(Predicate\u003c? super Appointment\u003e predicate) {","lastModifiedDate":"2021-10-23"},{"lineNumber":306,"author":{"gitId":"ChuangZheQuan"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":307,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":308,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":309,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":310,"author":{"gitId":"hpkoh"},"content":"        public \u003cT extends Person\u003e void deleteAppointmentsWithPerson(T person) {","lastModifiedDate":"2021-10-25"},{"lineNumber":311,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-25"},{"lineNumber":312,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":313,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":314,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":315,"author":{"gitId":"hpkoh"},"content":"        public \u003cT extends Person\u003e void editAppointmentsWithPerson(T person, T editedPerson) {","lastModifiedDate":"2021-10-25"},{"lineNumber":316,"author":{"gitId":"hpkoh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-25"},{"lineNumber":317,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":318,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":319,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":320,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":321,"author":{"gitId":"ChuangZheQuan"},"content":"     * A Model stub that contains a single appointment.","lastModifiedDate":"2021-10-23"},{"lineNumber":322,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":323,"author":{"gitId":"ChuangZheQuan"},"content":"    private class ModelStubWithAppointment extends AddAppointmentCommandTest.ModelStub {","lastModifiedDate":"2021-10-23"},{"lineNumber":324,"author":{"gitId":"ChuangZheQuan"},"content":"        private final Appointment appointment;","lastModifiedDate":"2021-10-23"},{"lineNumber":325,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":326,"author":{"gitId":"ChuangZheQuan"},"content":"        ModelStubWithAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":327,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":328,"author":{"gitId":"ChuangZheQuan"},"content":"            this.appointment \u003d appointment;","lastModifiedDate":"2021-10-23"},{"lineNumber":329,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":330,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":331,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":332,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":333,"author":{"gitId":"ChuangZheQuan"},"content":"            Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-23"},{"lineNumber":334,"author":{"gitId":"ChuangZheQuan"},"content":"            UniquePersonList\u003cPatient\u003e patientList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-23"},{"lineNumber":335,"author":{"gitId":"ChuangZheQuan"},"content":"            patientList.add(patient);","lastModifiedDate":"2021-10-23"},{"lineNumber":336,"author":{"gitId":"ChuangZheQuan"},"content":"            return patientList.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-23"},{"lineNumber":337,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":338,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":339,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":340,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":341,"author":{"gitId":"ChuangZheQuan"},"content":"            Doctor doctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-23"},{"lineNumber":342,"author":{"gitId":"ChuangZheQuan"},"content":"            UniquePersonList\u003cDoctor\u003e doctorList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-23"},{"lineNumber":343,"author":{"gitId":"ChuangZheQuan"},"content":"            doctorList.add(doctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":344,"author":{"gitId":"ChuangZheQuan"},"content":"            return doctorList.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-23"},{"lineNumber":345,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":346,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":347,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":348,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":349,"author":{"gitId":"ChuangZheQuan"},"content":"            UniqueAppointmentList appointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-23"},{"lineNumber":350,"author":{"gitId":"ChuangZheQuan"},"content":"            return appointmentList.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-23"},{"lineNumber":351,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":352,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":353,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":354,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean isClashAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":355,"author":{"gitId":"ChuangZheQuan"},"content":"            requireAllNonNull(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":356,"author":{"gitId":"ChuangZheQuan"},"content":"            for (Appointment existingAppointment : getFilteredAppointmentList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":357,"author":{"gitId":"ChuangZheQuan"},"content":"                if (appointment.isClash(existingAppointment)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":358,"author":{"gitId":"ChuangZheQuan"},"content":"                    return true;","lastModifiedDate":"2021-10-23"},{"lineNumber":359,"author":{"gitId":"ChuangZheQuan"},"content":"                }","lastModifiedDate":"2021-10-23"},{"lineNumber":360,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":361,"author":{"gitId":"ChuangZheQuan"},"content":"            return false;","lastModifiedDate":"2021-10-23"},{"lineNumber":362,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":363,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":364,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":365,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":366,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":367,"author":{"gitId":"ChuangZheQuan"},"content":"            return this.appointment.isSameAppointment(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":368,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":369,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":370,"author":{"gitId":"Haozeee"},"content":"        @Override","lastModifiedDate":"2021-10-30"},{"lineNumber":371,"author":{"gitId":"Haozeee"},"content":"        public void updateFilteredAppointmentList(Predicate\u003c? super Appointment\u003e predicate) {","lastModifiedDate":"2021-10-30"},{"lineNumber":372,"author":{"gitId":"Haozeee"},"content":"            requireNonNull(predicate);","lastModifiedDate":"2021-10-30"},{"lineNumber":373,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":374,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":375,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":376,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":377,"author":{"gitId":"ChuangZheQuan"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2021-10-23"},{"lineNumber":378,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":379,"author":{"gitId":"ChuangZheQuan"},"content":"    private class ModelStubAcceptingAppointmentAdded extends AddAppointmentCommandTest.ModelStub {","lastModifiedDate":"2021-10-23"},{"lineNumber":380,"author":{"gitId":"Haozeee"},"content":"        private final ArrayList\u003cDoctor\u003e doctorsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-30"},{"lineNumber":381,"author":{"gitId":"Haozeee"},"content":"        private final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-30"},{"lineNumber":382,"author":{"gitId":"Haozeee"},"content":"        private ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-30"},{"lineNumber":383,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":384,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":385,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":386,"author":{"gitId":"ChuangZheQuan"},"content":"            Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-23"},{"lineNumber":387,"author":{"gitId":"ChuangZheQuan"},"content":"            UniquePersonList\u003cPatient\u003e patientList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-23"},{"lineNumber":388,"author":{"gitId":"ChuangZheQuan"},"content":"            patientList.add(patient);","lastModifiedDate":"2021-10-23"},{"lineNumber":389,"author":{"gitId":"ChuangZheQuan"},"content":"            return patientList.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-23"},{"lineNumber":390,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":391,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":392,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":393,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":394,"author":{"gitId":"ChuangZheQuan"},"content":"            Doctor doctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-23"},{"lineNumber":395,"author":{"gitId":"ChuangZheQuan"},"content":"            UniquePersonList\u003cDoctor\u003e doctorList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-23"},{"lineNumber":396,"author":{"gitId":"ChuangZheQuan"},"content":"            doctorList.add(doctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":397,"author":{"gitId":"ChuangZheQuan"},"content":"            return doctorList.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-23"},{"lineNumber":398,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":399,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":400,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":401,"author":{"gitId":"ChuangZheQuan"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-23"},{"lineNumber":402,"author":{"gitId":"ChuangZheQuan"},"content":"            UniqueAppointmentList appointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-23"},{"lineNumber":403,"author":{"gitId":"ChuangZheQuan"},"content":"            return appointmentList.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-23"},{"lineNumber":404,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":405,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":406,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":407,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean isClashAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":408,"author":{"gitId":"ChuangZheQuan"},"content":"            requireAllNonNull(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":409,"author":{"gitId":"ChuangZheQuan"},"content":"            for (Appointment existingAppointment : getFilteredAppointmentList()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":410,"author":{"gitId":"ChuangZheQuan"},"content":"                if (appointment.isClash(existingAppointment)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":411,"author":{"gitId":"ChuangZheQuan"},"content":"                    return true;","lastModifiedDate":"2021-10-23"},{"lineNumber":412,"author":{"gitId":"ChuangZheQuan"},"content":"                }","lastModifiedDate":"2021-10-23"},{"lineNumber":413,"author":{"gitId":"ChuangZheQuan"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":414,"author":{"gitId":"ChuangZheQuan"},"content":"            return false;","lastModifiedDate":"2021-10-23"},{"lineNumber":415,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":416,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":417,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":418,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":419,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":420,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-10-23"},{"lineNumber":421,"author":{"gitId":"ChuangZheQuan"},"content":"            return patientsAdded.stream().anyMatch(patient::isSamePerson);","lastModifiedDate":"2021-10-23"},{"lineNumber":422,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":423,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":424,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":425,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":426,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":427,"author":{"gitId":"ChuangZheQuan"},"content":"            return doctorsAdded.stream().anyMatch(doctor::isSamePerson);","lastModifiedDate":"2021-10-23"},{"lineNumber":428,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":429,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":430,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":431,"author":{"gitId":"ChuangZheQuan"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":432,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":433,"author":{"gitId":"ChuangZheQuan"},"content":"            return appointmentsAdded.stream().anyMatch(appointment::isSameAppointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":434,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":435,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":436,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":437,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":438,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":439,"author":{"gitId":"ChuangZheQuan"},"content":"            appointmentsAdded.add(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":440,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":441,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":442,"author":{"gitId":"Haozeee"},"content":"        @Override","lastModifiedDate":"2021-10-30"},{"lineNumber":443,"author":{"gitId":"Haozeee"},"content":"        public void updateFilteredAppointmentList(Predicate\u003c? super Appointment\u003e predicate) {","lastModifiedDate":"2021-10-30"},{"lineNumber":444,"author":{"gitId":"Haozeee"},"content":"            requireAllNonNull(predicate);","lastModifiedDate":"2021-10-30"},{"lineNumber":445,"author":{"gitId":"Haozeee"},"content":"            appointmentsAdded \u003d appointmentsAdded.stream().filter(predicate)","lastModifiedDate":"2021-10-30"},{"lineNumber":446,"author":{"gitId":"Haozeee"},"content":"                    .collect(Collectors.toCollection(ArrayList::new));","lastModifiedDate":"2021-10-30"},{"lineNumber":447,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-30"},{"lineNumber":448,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":449,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":450,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-23"},{"lineNumber":451,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-10-23"},{"lineNumber":452,"author":{"gitId":"ChuangZheQuan"},"content":"            patientsAdded.add(patient);","lastModifiedDate":"2021-10-23"},{"lineNumber":453,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":454,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":455,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":456,"author":{"gitId":"ChuangZheQuan"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":457,"author":{"gitId":"ChuangZheQuan"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":458,"author":{"gitId":"ChuangZheQuan"},"content":"            doctorsAdded.add(doctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":459,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":460,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":461,"author":{"gitId":"ChuangZheQuan"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":462,"author":{"gitId":"ChuangZheQuan"},"content":"        public ReadOnlyPlannerMd getPlannerMd() {","lastModifiedDate":"2021-10-23"},{"lineNumber":463,"author":{"gitId":"ChuangZheQuan"},"content":"            return new PlannerMd();","lastModifiedDate":"2021-10-23"},{"lineNumber":464,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":465,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":466,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"Haozeee":25,"hpkoh":11,"pualixue":6,"ChuangZheQuan":422,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/AddAppointmentDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_THIRTY_MIN_APPT;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_TWO_HOUR_APPT;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DATE_TWO_HOUR;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DURATION_TWO_HOUR;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_TIME_TWO_HOUR;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.appointment.AddAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddAppointmentDescriptorTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"    public void equals() {","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand.AddAppointmentDescriptor(DESC_THIRTY_MIN_APPT);","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(DESC_THIRTY_MIN_APPT.equals(descriptorWithSameValues));","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(DESC_THIRTY_MIN_APPT.equals(DESC_THIRTY_MIN_APPT));","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(DESC_THIRTY_MIN_APPT.equals(null));","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(DESC_THIRTY_MIN_APPT.equals(5));","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(DESC_THIRTY_MIN_APPT.equals(DESC_TWO_HOUR_APPT));","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"        // different appointment date -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor editedThirtyMinAppt \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder(DESC_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withAppointmentDate(VALID_APPT_DATE_TWO_HOUR).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(DESC_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"        // different session -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"        editedThirtyMinAppt \u003d new AddAppointmentDescriptorBuilder(DESC_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"                .withSession(VALID_APPT_TIME_TWO_HOUR, VALID_APPT_DURATION_TWO_HOUR).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(DESC_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        // different remark -\u003e returns true","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        editedThirtyMinAppt \u003d new AddAppointmentDescriptorBuilder(DESC_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"                .withRemark(REMARK_DESC_AMY).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(DESC_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"ChuangZheQuan":52,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/AppointmentFiltersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.FILTER_VALID_END_DATE;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.FILTER_VALID_START_DATE;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_STRING_END_DATE;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_STRING_START_DATE;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_END;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentFiltersBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"class AppointmentFiltersTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters sampleFilter \u003d new AppointmentFiltersBuilder().withStartDate(FILTER_VALID_START_DATE)","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(FILTER_VALID_END_DATE).withPatientKeywords(Collections.singletonList(\"Alice\"))","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(Collections.singletonList(\"Bob\")).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        assertEquals(copiedFilter, sampleFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        assertEquals(AppointmentFilters.allAppointmentsFilter(), AppointmentFilters.allAppointmentsFilter());","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        // Same object -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        assertEquals(sampleFilter, sampleFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, null);","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        // Different types -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, \"test\");","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        // Filter all appointments vs filter upcoming appointments -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(AppointmentFilters.allAppointmentsFilter(), AppointmentFilters.upcomingAppointmentsFilter());","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        // AppointmentFilter with all default values vs appointment","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        // Different patient keywords -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter)","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(Arrays.asList(\"Peter\", \"Steve\")).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter)","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(Collections.emptyList()).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter)","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(Collections.singletonList(\"Bob\")).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        // Different doctor keywords -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter)","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(Arrays.asList(\"Peter\", \"Steve\")).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter)","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(Collections.emptyList()).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter)","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(Collections.singletonList(\"Alice\")).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        // Different start dates -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter).withStartDate(FILTER_VALID_END_DATE).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter).withStartDateTime(LocalDateTime.now()).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        // Different end dates -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        copiedFilter \u003d new AppointmentFiltersBuilder(sampleFilter).withEndDate(FILTER_VALID_START_DATE).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(sampleFilter, copiedFilter);","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        // Same start date, default values for the rest -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        assertEquals(new AppointmentFiltersBuilder().withStartDate(FILTER_VALID_START_DATE).build(),","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"                new AppointmentFiltersBuilder().withStartDate(FILTER_VALID_START_DATE).build());","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"    public void test_setNullPredicates_exceptionThrown() {","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters sampleFilter \u003d AppointmentFilters.allAppointmentsFilter();","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e sampleFilter.setStartBefore(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e sampleFilter.setStartAfter(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e sampleFilter.setHasPatient(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e sampleFilter.setHasDoctor(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"    public void testFilterDetails() {","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        String userInput \u003d PREFIX_START + VALID_STRING_START_DATE + \" \" + PREFIX_END + VALID_STRING_END_DATE + \" \"","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"                + PREFIX_PATIENT + \"Alice \" + PREFIX_DOCTOR + \"John\";","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"Alice\")","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(\"John\").withStartDate(FILTER_VALID_START_DATE)","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(FILTER_VALID_END_DATE).build();","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        assertEquals(userInput, filters.getFilterDetails());","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_START + VALID_STRING_START_DATE + \" \" + PREFIX_END + VALID_STRING_END_DATE;","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withStartDate(FILTER_VALID_START_DATE)","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(FILTER_VALID_END_DATE).build();","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        assertEquals(userInput, filters.getFilterDetails());","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"    public void testUpcomingFilterDetails() {","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        String userInput \u003d PREFIX_PATIENT + \"Alice \" + PREFIX_DOCTOR + \"John\";","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withUpcoming().withPatientKeywords(\"Alice\")","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(\"John\").build();","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"        assertEquals(userInput, filters.getUpcomingFilterDetails());","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_PATIENT + \"Alice\";","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withUpcoming().withPatientKeywords(\"Alice\").build();","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        assertEquals(userInput, filters.getUpcomingFilterDetails());","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Haozeee":120,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/DeleteAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showAppointmentAtIndex;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":" * Contains integration tests (interaction with the Model) and unit tests","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":" * for {@code DeleteAppointmentCommand}.","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"public class DeleteAppointmentCommandTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"    private Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"                appointmentToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"                appointmentToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"        Model expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        showNoAppointment(expectedModel);","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getAppointmentList().size());","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"        DeleteAppointmentCommand deleteFirstCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"        DeleteAppointmentCommand deleteSecondCommand \u003d new DeleteAppointmentCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"        DeleteAppointmentCommand deleteFirstCommandCopy \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"    private void showNoAppointment(Model model) {","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"        model.updateFilteredAppointmentList(p -\u003e false);","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(model.getFilteredAppointmentList().isEmpty());","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"ChuangZheQuan":110,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/EditAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_EDIT_THIRTY_MIN_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_EDIT_TWO_HOUR_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DATE_THIRTY_MIN;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DURATION_THIRTY_MIN_STR;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DURATION_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_REMARK;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_TIME_THIRTY_MIN;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_TIME_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_DOCTOR_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PATIENT_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_GEORGE;","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.appointment.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditAppointmentCommand.","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"public class EditAppointmentCommandTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"    private static final Index ALICE_PATIENT_INDEX \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"    private static final Index DR_GEORGE_DOCTOR_INDEX \u003d Index.fromOneBased(7);","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"    private static final String EDITED_DATE \u003d \"1/1/2030\";","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"    private final Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        AppointmentBuilder editedAppointmentBuilder \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"                // patient and doctor are same as those for first appt in TypicalAppointments","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"                new AppointmentBuilder().withPatient(ALICE).withDoctor(DR_GEORGE).withDate(EDITED_DATE)","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"                        .withSession(VALID_APPT_TIME_TWO_HOUR, VALID_APPT_DURATION_TWO_HOUR)","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"                        .withRemark(VALID_APPT_REMARK);","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"        Appointment editedAppointment \u003d editedAppointmentBuilder.build();","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder(ALICE_PATIENT_INDEX, DR_GEORGE_DOCTOR_INDEX, editedAppointment)","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"                        .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPT, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"                String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        AppointmentBuilder editedAppointmentBuilder \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"                // patient and doctor are same as those for first appt in TypicalAppointments","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"                new AppointmentBuilder().withPatient(ALICE).withDoctor(DR_GEORGE).withDate(EDITED_DATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        Appointment editedAppointment \u003d editedAppointmentBuilder.build();","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder(ALICE_PATIENT_INDEX, DR_GEORGE_DOCTOR_INDEX, editedAppointment)","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"                        .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPT, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"                String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"        AppointmentBuilder editedAppointmentBuilder \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"                // patient and doctor are same as those for first appt in TypicalAppointments","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"                new AppointmentBuilder().withPatient(ALICE).withDoctor(DR_GEORGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        Appointment editedAppointment \u003d editedAppointmentBuilder.build();","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder(ALICE_PATIENT_INDEX, DR_GEORGE_DOCTOR_INDEX, editedAppointment)","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"                        .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPT, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"                String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"    public void execute_duplicateAppointmentUnfilteredList_failure() {","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"        Appointment firstAppointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder(ALICE_PATIENT_INDEX, DR_GEORGE_DOCTOR_INDEX, firstAppointment)","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"                        .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(editAppointmentCommand, model, EditAppointmentCommand.MESSAGE_CLASHING_APPOINTMENT);","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"    public void execute_invalidAppointmentIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder().withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(editAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-30"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"    public void execute_sessionSpansTwoDaysUnfilteredList_failure() {","lastModifiedDate":"2021-10-30"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"        AppointmentBuilder editedAppointmentBuilder \u003d","lastModifiedDate":"2021-10-30"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"                // patient and doctor are same as those for first appt in TypicalAppointments","lastModifiedDate":"2021-10-30"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"                new AppointmentBuilder().withPatient(ALICE).withDoctor(DR_GEORGE).withDate(EDITED_DATE)","lastModifiedDate":"2021-10-30"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"                        .withSession(\"23:30\", VALID_APPT_DURATION_TWO_HOUR)","lastModifiedDate":"2021-10-30"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"                        .withRemark(VALID_APPT_REMARK);","lastModifiedDate":"2021-10-30"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"        Appointment editedAppointment \u003d editedAppointmentBuilder.build();","lastModifiedDate":"2021-10-30"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-30"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder(ALICE_PATIENT_INDEX, DR_GEORGE_DOCTOR_INDEX, editedAppointment)","lastModifiedDate":"2021-10-30"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"                        .build();","lastModifiedDate":"2021-10-30"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPT, descriptor);","lastModifiedDate":"2021-10-30"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(editAppointmentCommand, model, Session.MESSAGE_END_WITHIN_SAME_DAY);","lastModifiedDate":"2021-10-30"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"        final EditAppointmentCommand standardCommand \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentCommand(INDEX_FIRST_PERSON, DESC_EDIT_THIRTY_MIN_APPT);","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor copyDescriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder().withPatientIndex(VALID_PATIENT_INDEX)","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"pualixue"},"content":"                        .withDoctorIndex(VALID_DOCTOR_INDEX).withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"pualixue"},"content":"                        .withStartTime(VALID_APPT_TIME_THIRTY_MIN).withDuration(VALID_APPT_DURATION_THIRTY_MIN_STR)","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"pualixue"},"content":"                        .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand commandWithSameValues \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"pualixue"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"pualixue"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_FIRST_PERSON, DESC_AMY)));","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"pualixue"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_SECOND_PERSON, DESC_EDIT_THIRTY_MIN_APPT)));","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"pualixue"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_FIRST_PERSON, DESC_EDIT_TWO_HOUR_APPT)));","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"pualixue":181,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/EditAppointmentDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ANOTHER_VALID_APPT_REMARK;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ANOTHER_VALID_DOCTOR_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ANOTHER_VALID_PATIENT_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_EDIT_THIRTY_MIN_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_EDIT_TWO_HOUR_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DATE_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DURATION_TWO_HOUR_STR;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_TIME_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.appointment.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"public class EditAppointmentDescriptorTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentCommand.EditAppointmentDescriptor(DESC_EDIT_THIRTY_MIN_APPT);","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"        assertTrue(DESC_EDIT_THIRTY_MIN_APPT.equals(descriptorWithSameValues));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"        assertTrue(DESC_EDIT_THIRTY_MIN_APPT.equals(DESC_EDIT_THIRTY_MIN_APPT));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(DESC_EDIT_TWO_HOUR_APPT));","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"        // different patient index -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor editedThirtyMinAppt \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder(DESC_EDIT_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"                        .withPatientIndex(ANOTHER_VALID_PATIENT_INDEX).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        // different doctor index -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        editedThirtyMinAppt \u003d new EditAppointmentDescriptorBuilder(DESC_EDIT_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"                .withDoctorIndex(ANOTHER_VALID_DOCTOR_INDEX).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        // different appointment date -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"        editedThirtyMinAppt \u003d new EditAppointmentDescriptorBuilder(DESC_EDIT_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"                .withAppointmentDate(VALID_APPT_DATE_TWO_HOUR).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        // different start time -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"        editedThirtyMinAppt \u003d new EditAppointmentDescriptorBuilder(DESC_EDIT_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"                .withStartTime(VALID_APPT_TIME_TWO_HOUR).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        // different duration -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        editedThirtyMinAppt \u003d new EditAppointmentDescriptorBuilder(DESC_EDIT_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"                .withDuration(VALID_APPT_DURATION_TWO_HOUR_STR).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        // different remark -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        editedThirtyMinAppt \u003d new EditAppointmentDescriptorBuilder(DESC_EDIT_THIRTY_MIN_APPT)","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"                .withRemark(ANOTHER_VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_EDIT_THIRTY_MIN_APPT.equals(editedThirtyMinAppt));","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"pualixue":69,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/FilterAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.getTypicalAppointments;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentFiltersBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for FilterAppointmentCommand.","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"public class FilterAppointmentCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    private final String startDateString \u003d \"20/12/2024\";","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    private final LocalDate sampleStartDate \u003d LocalDate.of(2024, 12, 20);","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    // Test appointment should have a different patient name and doctor than those in typical appointments","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    // Test appointment should also have a later starting date than those in typical appointments","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    private final Appointment testAppointment \u003d new AppointmentBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            .withPatient(new PatientBuilder().withName(\"Shane\").build())","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            .withDoctor(new DoctorBuilder().withName(\"Pete\").build())","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"            .withDate(startDateString).withSession(\"18:00\", 10).build();","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    private Model model;","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    private void reinitialiseModel() {","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        expectedModel \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        model.addAppointment(testAppointment);","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        expectedModel.addAppointment(testAppointment);","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    public void execute_noParameterSpecified_allAppointmentsMatch() {","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW,","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"                model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(AppointmentFilters.allAppointmentsFilter());","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        assertEquals(getTypicalAppointments(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"    public void execute_allParameterSpecified_successfullyFiltered() {","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        // Results found match test appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFiltersBuilder().withStartDate(sampleStartDate)","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(sampleStartDate.plusDays(2)).withPatientKeywords(\"Shane\")","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(\"Pete\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(testAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        // No results found (starting dates do not match)","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter).withStartDate(sampleStartDate.plusDays(1)).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    public void execute_patientKeywordSpecified_successfullyFiltered() {","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        // Results found match test appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"Shane\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(testAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        // No results found","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter).withPatientKeywords(\"Bruce\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"    public void execute_doctorKeywordSpecified_successfullyFiltered() {","lastModifiedDate":"2021-10-20"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"        // Results found match test appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFiltersBuilder().withDoctorKeywords(\"pete\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(testAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        // No results found","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter).withDoctorKeywords(\"Peter\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"    public void execute_startDateSpecified_successfullyFiltered() {","lastModifiedDate":"2021-10-20"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"        // Start date is after typical appointments but before test appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFiltersBuilder()","lastModifiedDate":"2021-10-20"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"                .withStartDate(sampleStartDate.minusDays(1)).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(testAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"        // // Start date is after typical appointments and test appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter)","lastModifiedDate":"2021-10-20"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"                .withStartDateTime(sampleStartDate.atTime(20, 30)).build(); // With date time","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-20"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter).withStartDate(sampleStartDate.plusDays(1)).build(); // With date","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":149,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":150,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":151,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":152,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":153,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":154,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":155,"author":{"gitId":"Haozeee"},"content":"    public void execute_endDateSpecified_successfullyFiltered() {","lastModifiedDate":"2021-10-20"},{"lineNumber":156,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":157,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":158,"author":{"gitId":"Haozeee"},"content":"        // End date is after test appointment and typical appointments","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFiltersBuilder()","lastModifiedDate":"2021-10-20"},{"lineNumber":160,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(sampleStartDate).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":161,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":162,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW,","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"Haozeee"},"content":"                model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":165,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":166,"author":{"gitId":"Haozeee"},"content":"        List\u003cAppointment\u003e expectedFilteredList \u003d getTypicalAppointments();","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"Haozeee"},"content":"        expectedFilteredList.add(testAppointment);","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"Haozeee"},"content":"        assertEquals(expectedFilteredList, model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":170,"author":{"gitId":"Haozeee"},"content":"        // End date is before test appointment but after typical appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter)","lastModifiedDate":"2021-10-20"},{"lineNumber":172,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(sampleStartDate.minusDays(1)).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":173,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":174,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW,","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"Haozeee"},"content":"                model.getFilteredAppointmentList().size() - 1);","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"Haozeee"},"content":"        assertEquals(getTypicalAppointments(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"Haozeee"},"content":"        // End date is before all appointments","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter)","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(sampleStartDate.minusYears(20)).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-20"},{"lineNumber":185,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":186,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":188,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":189,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":190,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":191,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-20"},{"lineNumber":192,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters firstFilter \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"Alice\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":193,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters secondFilter \u003d new AppointmentFiltersBuilder().withDoctorKeywords(\"Bob\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":194,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":195,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand firstCommand \u003d new FilterAppointmentCommand(firstFilter);","lastModifiedDate":"2021-10-20"},{"lineNumber":196,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand secondCommand \u003d new FilterAppointmentCommand(secondFilter);","lastModifiedDate":"2021-10-20"},{"lineNumber":197,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":198,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":199,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstCommand, firstCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":200,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":201,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":202,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand firstCommandCopy \u003d new FilterAppointmentCommand(firstFilter);","lastModifiedDate":"2021-10-20"},{"lineNumber":203,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstCommandCopy, firstCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":204,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":205,"author":{"gitId":"Haozeee"},"content":"        // different types -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":206,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstCommand, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":207,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstCommand,","lastModifiedDate":"2021-10-20"},{"lineNumber":208,"author":{"gitId":"Haozeee"},"content":"                new FilterUpcomingAppointmentCommand(AppointmentFilters.upcomingAppointmentsFilter()));","lastModifiedDate":"2021-10-20"},{"lineNumber":209,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":210,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstCommand, null);","lastModifiedDate":"2021-10-20"},{"lineNumber":212,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":213,"author":{"gitId":"Haozeee"},"content":"        // different person -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":214,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(secondCommand, firstCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":215,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":216,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"Haozeee":215,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/FilterUpcomingAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_CARL;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentFiltersBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"public class FilterUpcomingAppointmentCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    private final Appointment upcomingAppointment \u003d new AppointmentBuilder().withPatient(ALICE)","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"            .withDoctor(DR_CARL)","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"            .withDate(LocalDate.now().plusDays(1).format(AppointmentDate.DATE_FORMATTER))","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"            .withSession(\"18:00\", 10).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    private final Appointment oldAppointment \u003d new AppointmentBuilder(upcomingAppointment)","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"            .withDate(LocalDate.now().minusDays(5).format(AppointmentDate.DATE_FORMATTER)).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    private Model model;","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    private void reinitialiseModel() {","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        model \u003d new ModelManager(new PlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        expectedModel \u003d new ModelManager(new PlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        model.addAppointment(upcomingAppointment);","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        expectedModel.addAppointment(upcomingAppointment);","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        model.addAppointment(oldAppointment);","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        expectedModel.addAppointment(oldAppointment);","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    public void execute_noParameterSpecified_allUpcomingAppointmentsMatch() {","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withUpcoming().build();","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand command \u003d new FilterUpcomingAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filters.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(upcomingAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"    public void execute_allParameterSpecified_successfullyFiltered() {","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        // Results found","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFiltersBuilder().withUpcoming().withPatientKeywords(\"Alice\")","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(\"Carl\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand command \u003d new FilterUpcomingAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(upcomingAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        // No results found (starting dates do not match)","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter).withPatientKeywords(\"John\").withDoctorKeywords(\"Pete\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterUpcomingAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"    public void execute_patientKeywordSpecified_successfullyFiltered() {","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        // Results found","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFiltersBuilder().withUpcoming()","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(\"Alice\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand command \u003d new FilterUpcomingAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(upcomingAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        // No results found","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter).withPatientKeywords(\"Bruce\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterUpcomingAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"    public void execute_doctorKeywordSpecified_successfullyFiltered() {","lastModifiedDate":"2021-10-20"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        reinitialiseModel();","lastModifiedDate":"2021-10-20"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"        // Results found","lastModifiedDate":"2021-10-20"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filter \u003d new AppointmentFiltersBuilder().withUpcoming().withDoctorKeywords(\"Carl\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand command \u003d new FilterUpcomingAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(upcomingAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"        // No results found","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        filter \u003d new AppointmentFiltersBuilder(filter).withDoctorKeywords(\"Karl\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(filter.collectAllFilters());","lastModifiedDate":"2021-10-20"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        command \u003d new FilterUpcomingAppointmentCommand(filter);","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters firstFilter \u003d new AppointmentFiltersBuilder().withUpcoming()","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(\"Alice\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters secondFilter \u003d new AppointmentFiltersBuilder().withUpcoming()","lastModifiedDate":"2021-10-20"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(\"Ali\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand firstCommand \u003d new FilterUpcomingAppointmentCommand(firstFilter);","lastModifiedDate":"2021-10-20"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand secondCommand \u003d new FilterUpcomingAppointmentCommand(secondFilter);","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstCommand, firstCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand firstCommandCopy \u003d new FilterUpcomingAppointmentCommand(firstFilter);","lastModifiedDate":"2021-10-20"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstCommandCopy, firstCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"        // different types -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstCommand, 1);","lastModifiedDate":"2021-10-20"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstCommand, new FilterAppointmentCommand(AppointmentFilters.allAppointmentsFilter()));","lastModifiedDate":"2021-10-20"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstCommand, null);","lastModifiedDate":"2021-10-20"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"        // different person -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(secondCommand, firstCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":148,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":149,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"Haozeee":148,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/apptcommand/ListAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.apptcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_CARL;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"public class ListAppointmentCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    private Model model;","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    private final Appointment todayAppointment \u003d new AppointmentBuilder().withPatient(ALICE)","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"            .withDoctor(DR_CARL)","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"            .withDate(LocalDate.now().format(AppointmentDate.DATE_FORMATTER))","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"            .withSession(\"20:00\", 10).build();","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    private final Appointment nextDayAppointment \u003d new AppointmentBuilder(todayAppointment)","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"            .withDate(LocalDate.now().plusDays(1).format(AppointmentDate.DATE_FORMATTER)).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    private final Appointment yesterdayAppointment \u003d new AppointmentBuilder(todayAppointment)","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            .withDate(LocalDate.now().minusDays(1).format(AppointmentDate.DATE_FORMATTER)).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        model \u003d new ModelManager(new PlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        expectedModel \u003d new ModelManager(new PlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        model.addAppointment(todayAppointment);","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        model.addAppointment(nextDayAppointment);","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        model.addAppointment(yesterdayAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        expectedModel.addAppointment(todayAppointment);","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        expectedModel.addAppointment(nextDayAppointment);","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        expectedModel.addAppointment(yesterdayAppointment);","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    public void execute_showTodayAppointment_successful() {","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        expectedModel.updateFilteredAppointmentList(AppointmentFilters.todayAppointmentFilter().collectAllFilters());","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(new ListAppointmentCommand(), model,","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"                ListAppointmentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        assertEquals(Collections.singletonList(todayAppointment), model.getFilteredAppointmentList());","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"Haozeee":58,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/deletecommand/DeleteDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.deletecommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":" * Contains integration tests (interaction with the Model) and unit tests","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":" * for {@code DeleteDoctorCommand}.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"public class DeleteDoctorCommandTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        Doctor doctorToDelete \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(DeleteDoctorCommand.MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete);","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        expectedModel.deleteAppointmentsWithPerson(doctorToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        expectedModel.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(deleteDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDoctorList().size() + 1);","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        assertCommandFailure(deleteDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        Doctor doctorToDelete \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(DeleteDoctorCommand.MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete);","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"        expectedModel.deleteAppointmentsWithPerson(doctorToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        expectedModel.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        showNoDoctor(expectedModel);","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(deleteDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getDoctorList().size());","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        assertCommandFailure(deleteDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorCommand deleteFirstCommand \u003d new DeleteDoctorCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorCommand deleteSecondCommand \u003d new DeleteDoctorCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorCommand deleteFirstCommandCopy \u003d new DeleteDoctorCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        // DeleteDoctorCommand vs DeletePatientCommand -\u003e returns false","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        DeletePatientCommand deleteFirstPatientCommand \u003d new DeletePatientCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstPatientCommand));","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    private void showNoDoctor(Model model) {","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        model.updateFilteredDoctorList(p -\u003e false);","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"        assertTrue(model.getFilteredDoctorList().isEmpty());","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"Haozeee":113,"hpkoh":2,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/deletecommand/DeleteDoctorTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.deletecommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeleteDoctorTagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeletePatientTagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"class DeleteDoctorTagCommandTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    private final Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    private final Tag modelFirstPersonTag \u003d new Tag(\"friends\");","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    private final Tag tag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    void execute_validTagUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        Doctor firstDoctor \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(firstDoctor.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        newTags.remove(modelFirstPersonTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(firstDoctor).withTags(","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"                newTags.stream().map(t -\u003e t.tagName).toArray(String[]::new))","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorTagCommand deleteDoctorTagCommand \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"                new DeleteDoctorTagCommand(INDEX_FIRST_PERSON, modelFirstPersonTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(DeleteDoctorTagCommand.MESSAGE_DELETE_TAG_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()), editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(deleteDoctorTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"    void execute_validTagFilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        Doctor doctorInFilteredList \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(doctorInFilteredList.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        newTags.remove(modelFirstPersonTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(doctorInFilteredList).withTags(","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"                newTags.stream().map(t -\u003e t.tagName).toArray(String[]::new))","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorTagCommand deleteDoctorTagCommand \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"                new DeleteDoctorTagCommand(INDEX_FIRST_PERSON, modelFirstPersonTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(DeleteDoctorTagCommand.MESSAGE_DELETE_TAG_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()), editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"hpkoh"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(deleteDoctorTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"    void execute_invalidIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDoctorList().size() + 1);","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorTagCommand deleteDoctorTagCommand \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"                new DeleteDoctorTagCommand(outOfBoundIndex, modelFirstPersonTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        assertCommandFailure(deleteDoctorTagCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"    void execute_invalidIndexFilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getDoctorList().size());","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorTagCommand deleteDoctorTagCommand \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"                new DeleteDoctorTagCommand(outOfBoundIndex, modelFirstPersonTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        assertCommandFailure(deleteDoctorTagCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"    void equals() {","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        final DeleteDoctorTagCommand standardCommand \u003d new DeleteDoctorTagCommand(INDEX_FIRST_PERSON, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"        Tag copyTag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorTagCommand commandWithSameValues \u003d new DeleteDoctorTagCommand(INDEX_FIRST_PERSON, copyTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        assertEquals(standardCommand, commandWithSameValues);","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"        assertEquals(standardCommand, standardCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(null, standardCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"        Assertions.assertNotEquals(standardCommand, new ClearCommand());","lastModifiedDate":"2021-10-31"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(standardCommand, new DeletePatientTagCommand(INDEX_FIRST_PERSON, tag));","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(standardCommand, new DeleteDoctorTagCommand(INDEX_SECOND_PERSON, tag));","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        // different tag -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(standardCommand, new DeleteDoctorTagCommand(INDEX_FIRST_PERSON, new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":127,"hpkoh":4,"jiayi1129":4}},{"path":"src/test/java/seedu/plannermd/logic/commands/deletecommand/DeletePatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.deletecommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":" * {@code DeletePatientCommand}.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"public class DeletePatientCommandTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    private Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        ModelManager expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"        expectedModel.deleteAppointmentsWithPerson(patientToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(outOfBoundIndex);","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        assertCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"        expectedModel.deleteAppointmentsWithPerson(patientToDelete);","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        showNoPatient(expectedModel);","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getPatientList().size());","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(outOfBoundIndex);","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        assertCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    public void equals() {","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"        DeletePatientCommand deleteFirstCommand \u003d new DeletePatientCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"        DeletePatientCommand deleteSecondCommand \u003d new DeletePatientCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"        DeletePatientCommand deleteFirstCommandCopy \u003d new DeletePatientCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        // DeletePatientCommand vs DeleteDoctorCommand -\u003e returns false","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorCommand deleteFirstDoctorCommand \u003d new DeleteDoctorCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstDoctorCommand));","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    private void showNoPatient(Model model) {","lastModifiedDate":"2021-09-30"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        model.updateFilteredPatientList(p -\u003e false);","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(model.getFilteredPatientList().isEmpty());","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":4,"Haozeee":4,"jiayi1129":108}},{"path":"src/test/java/seedu/plannermd/logic/commands/deletecommand/DeletePatientTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.deletecommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import java.util.Set;","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeletePatientTagCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"class DeletePatientTagCommandTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"    private final Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"    private final Tag modelFirstPersonTag \u003d new Tag(\"friends\");","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    private final Tag tag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"    void execute_validTagUnfilteredList_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(firstPatient.getTags());","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"        newTags.remove(modelFirstPersonTag);","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        Patient editedPatient \u003d new PatientBuilder(firstPatient).withTags(","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"                        newTags.stream().map(t -\u003e t.tagName).toArray(String[]::new))","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"                .build();","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"        DeletePatientTagCommand deletePatientTagCommand \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"                new DeletePatientTagCommand(INDEX_FIRST_PERSON, modelFirstPersonTag);","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d String.format(DeletePatientTagCommand.MESSAGE_DELETE_TAG_SUCCESS, editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"                editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(deletePatientTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"    void execute_validTagFilteredList_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(patientInFilteredList.getTags());","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        newTags.remove(modelFirstPersonTag);","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withTags(","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"                        newTags.stream().map(t -\u003e t.tagName).toArray(String[]::new))","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"                .build();","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        DeletePatientTagCommand deletePatientTagCommand \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"                new DeletePatientTagCommand(INDEX_FIRST_PERSON, modelFirstPersonTag);","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d String.format(DeletePatientTagCommand.MESSAGE_DELETE_TAG_SUCCESS, editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"hpkoh"},"content":"                editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(deletePatientTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"    void execute_invalidIndexUnfilteredList_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"        DeletePatientTagCommand deletePatientTagCommand \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"                new DeletePatientTagCommand(outOfBoundIndex, modelFirstPersonTag);","lastModifiedDate":"2021-10-05"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(deletePatientTagCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"    void execute_invalidIndexFilteredList_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getPatientList().size());","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"        DeletePatientTagCommand deletePatientTagCommand \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"                new DeletePatientTagCommand(outOfBoundIndex, modelFirstPersonTag);","lastModifiedDate":"2021-10-05"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(deletePatientTagCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"    void equals() {","lastModifiedDate":"2021-09-30"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"        final DeletePatientTagCommand standardCommand \u003d new DeletePatientTagCommand(INDEX_FIRST_PERSON, tag);","lastModifiedDate":"2021-10-05"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-09-30"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"        Tag copyTag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2021-09-30"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"        DeletePatientTagCommand commandWithSameValues \u003d new DeletePatientTagCommand(INDEX_FIRST_PERSON, copyTag);","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"        assertEquals(standardCommand, commandWithSameValues);","lastModifiedDate":"2021-09-30"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-09-30"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"        assertEquals(standardCommand, standardCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(null, standardCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"        Assertions.assertNotEquals(standardCommand, new ClearCommand());","lastModifiedDate":"2021-10-31"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(standardCommand, new DeletePatientTagCommand(INDEX_SECOND_PERSON, tag));","lastModifiedDate":"2021-10-05"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"        // different tag -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(standardCommand, new DeletePatientTagCommand(INDEX_FIRST_PERSON, new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2021-10-05"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"hpkoh":4,"pualixue":125,"jiayi1129":4}},{"path":"src/test/java/seedu/plannermd/logic/commands/editcommand/EditDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.editcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_DR_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_DR_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditDoctorCommand.","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"public class EditDoctorCommandTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"    private final Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        DoctorBuilder editedDoctorBuilder \u003d new DoctorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"                .withRemark(model.getFilteredPatientList().get(0).getRemark().value);","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        Doctor editedDoctor \u003d editedDoctorBuilder.build();","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder(editedDoctor).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d String.format(EditDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredDoctorList().size());","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        Doctor lastDoctor \u003d model.getFilteredDoctorList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        DoctorBuilder doctorInList \u003d new DoctorBuilder(lastDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        Doctor editedDoctor \u003d doctorInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d String.format(EditDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        expectedModel.setDoctor(lastDoctor, editedDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(lastDoctor, editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"                new EditDoctorCommand(INDEX_FIRST_PERSON, new EditDoctorCommand.EditDoctorDescriptor());","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        Doctor editedDoctor \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d String.format(EditDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"        Doctor doctorInFilteredList \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(doctorInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"                new EditDoctorDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d String.format(EditDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"    public void execute_duplicateDoctorUnfilteredList_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"        Doctor firstDoctor \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder(firstDoctor).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(editDoctorCommand, model, EditDoctorCommand.MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"    public void execute_duplicateDoctorFilteredList_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"        // edit doctor in filtered list into a duplicate in plannermd","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"        Doctor doctorInList \u003d model.getPlannerMd().getDoctorList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"                new EditDoctorDescriptorBuilder(doctorInList).build());","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(editDoctorCommand, model, EditDoctorCommand.MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"    public void execute_invalidDoctorIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDoctorList().size() + 1);","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"                new EditDoctorDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(editDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"     * but smaller than size of plannermd.","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"    public void execute_invalidDoctorIndexFilteredList_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getDoctorList().size());","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"                new EditDoctorDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(editDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"    public void equals() {","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"pualixue"},"content":"        final EditDoctorCommand standardCommand \u003d new EditDoctorCommand(INDEX_FIRST_PERSON, DESC_DR_AMY);","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor copyDescriptor \u003d new EditDoctorCommand.EditDoctorDescriptor(DESC_DR_AMY);","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand commandWithSameValues \u003d new EditDoctorCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"pualixue"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"pualixue"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(new EditDoctorCommand(INDEX_SECOND_PERSON, DESC_DR_AMY)));","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"pualixue"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(new EditDoctorCommand(INDEX_FIRST_PERSON, DESC_DR_BOB)));","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"        // EditDoctorCommand vs EditPatientCommand -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(editPatientCommand));","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"hpkoh":3,"pualixue":178,"ChuangZheQuan":1,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/logic/commands/editcommand/EditDoctorDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.editcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_DR_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_DR_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"public class EditDoctorDescriptorTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"    public void equals() {","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"                new EditDoctorCommand.EditDoctorDescriptor(DESC_DR_AMY);","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"        assertTrue(DESC_DR_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"        assertTrue(DESC_DR_AMY.equals(DESC_DR_AMY));","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(5));","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(DESC_DR_BOB));","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor editedAmy \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"                new EditDoctorDescriptorBuilder(DESC_DR_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        editedAmy \u003d new EditDoctorDescriptorBuilder(DESC_DR_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        editedAmy \u003d new EditDoctorDescriptorBuilder(DESC_DR_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        editedAmy \u003d new EditDoctorDescriptorBuilder(DESC_DR_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        editedAmy \u003d new EditDoctorDescriptorBuilder(DESC_DR_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        // different birth date -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        editedAmy \u003d new EditDoctorDescriptorBuilder(DESC_DR_AMY).withBirthDate(VALID_BIRTH_DATE_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        assertFalse(DESC_DR_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        //same birth date -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        editedAmy \u003d new EditDoctorDescriptorBuilder(DESC_DR_AMY).withBirthDate(VALID_BIRTH_DATE_AMY).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        assertTrue(DESC_DR_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"pualixue":67,"ChuangZheQuan":1,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/commands/editcommand/EditPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.editcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_DR_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPatientCommand.","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"public class EditPatientCommandTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    private Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"        PatientBuilder editedPatientBuilder \u003d new PatientBuilder()","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"                .withRemark(model.getFilteredPatientList().get(0).getRemark().value);","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"        Patient editedPatient \u003d editedPatientBuilder.build();","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"                .withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.setPatient(lastPatient, editedPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(lastPatient, editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, new EditPatientDescriptor());","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        Person editedPerson \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPerson);","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    public void execute_duplicatePatientUnfilteredList_failure() {","lastModifiedDate":"2021-10-02"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"    public void execute_duplicatePatientFilteredList_failure() {","lastModifiedDate":"2021-10-02"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-30"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"        // edit person in filtered list into a duplicate in plannermd","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"        Patient patientInList \u003d model.getPlannerMd().getPatientList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"                new EditPatientDescriptorBuilder(patientInList).build());","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"    public void execute_invalidPatientIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-02"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"        assertCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-09-29"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"     * but smaller than size of plannermd","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-30"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-09-29"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getPatientList().size());","lastModifiedDate":"2021-09-29"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex,","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"        assertCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-09-30"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"    public void equals() {","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"        final EditPatientCommand standardCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2021-09-29"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-09-29"},{"lineNumber":164,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-09-29"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-09-29"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2021-09-29"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":177,"author":{"gitId":"jiayi1129"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"        // EditDoctorCommand vs EditPatientCommand -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_FIRST_PERSON, DESC_DR_AMY);","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"        assertFalse(standardCommand.equals(editDoctorCommand));","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":6,"pualixue":5,"jiayi1129":173}},{"path":"src/test/java/seedu/plannermd/logic/commands/editcommand/EditPatientDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.editcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"public class EditPatientDescriptorTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand.EditPatientDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"                new EditPatientCommand.EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand.EditPatientDescriptor editedAmy \u003d","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"                new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"        // different birth date -\u003e returns false","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withBirthDate(VALID_BIRTH_DATE_BOB).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"        //same birth date -\u003e returns true","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withBirthDate(VALID_BIRTH_DATE_AMY).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"ChuangZheQuan":16,"-":41,"jiayi1129":13}},{"path":"src/test/java/seedu/plannermd/logic/commands/findcommand/FindDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.findcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_DOCTORS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_CARL;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_ELLE;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_FIONA;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":" * Contains integration tests (interaction with the Model) for","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":" * {@code FindDoctorCommand}.","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"class FindDoctorCommandTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    private Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"                Collections.singletonList(\"first\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"                Collections.singletonList(\"second\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        FindDoctorCommand findFirstCommand \u003d new FindDoctorCommand(firstPredicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"        FindDoctorCommand findSecondCommand \u003d new FindDoctorCommand(secondPredicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"        FindDoctorCommand findFirstCommandCopy \u003d new FindDoctorCommand(firstPredicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DOCTORS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"        FindDoctorCommand command \u003d new FindDoctorCommand(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"        expectedModel.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"hpkoh"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredDoctorList());","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DOCTORS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        FindDoctorCommand command \u003d new FindDoctorCommand(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"hpkoh"},"content":"        expectedModel.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"hpkoh"},"content":"        assertEquals(Arrays.asList(DR_CARL, DR_ELLE, DR_FIONA), model.getFilteredDoctorList());","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"hpkoh":22,"ChuangZheQuan":5,"-":52,"jiayi1129":6}},{"path":"src/test/java/seedu/plannermd/logic/commands/findcommand/FindPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.findcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.CARL;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ELLE;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.FIONA;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":" * Contains integration tests (interaction with the Model) for","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":" * {@code FindPatientCommand}.","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"public class FindPatientCommandTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    private Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"                Collections.singletonList(\"first\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"                Collections.singletonList(\"second\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        FindPatientCommand findFirstCommand \u003d new FindPatientCommand(firstPredicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        FindPatientCommand findSecondCommand \u003d new FindPatientCommand(secondPredicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        FindPatientCommand findFirstCommandCopy \u003d new FindPatientCommand(firstPredicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        FindPatientCommand command \u003d new FindPatientCommand(predicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPatientList());","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        FindPatientCommand command \u003d new FindPatientCommand(predicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"hpkoh":1,"ChuangZheQuan":10,"-":53,"jiayi1129":20}},{"path":"src/test/java/seedu/plannermd/logic/commands/listcommand/ListDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.listcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListDoctorCommand.","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"class ListDoctorCommandTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    private Model model;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    @BeforeEach","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public void setUp() {","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"        assertCommandSuccess(new ListDoctorCommand(), model, ListDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        assertCommandSuccess(new ListDoctorCommand(), model, ListDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":7,"jiayi1129":32}},{"path":"src/test/java/seedu/plannermd/logic/commands/listcommand/ListPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.logic.commands.listcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListPatientCommand.","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"public class ListPatientCommandTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    private Model model;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    @BeforeEach","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public void setUp() {","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        expectedModel \u003d new ModelManager(model.getPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":1,"jiayi1129":38}},{"path":"src/test/java/seedu/plannermd/logic/commands/remarkcommand/RemarkDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.remarkcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":" * RemarkDoctorCommand.","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"public class RemarkDoctorCommandTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    private static final String SAMPLE_REMARK \u003d \"Handsome doctor\";","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    private Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    void execute_sampleRemarkUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        Doctor firstDoctor \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(firstDoctor).withRemark(SAMPLE_REMARK).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        RemarkDoctorCommand remarkCommand \u003d new RemarkDoctorCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(RemarkDoctorCommand.MESSAGE_ADD_DOCTOR_REMARK_SUCCESS,","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()), editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"     * Add Empty Remark/ Remove current remarks.","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    public void execute_emptyRemarkUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        Index indexLastDoctor \u003d Index.fromOneBased(model.getFilteredDoctorList().size());","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        Doctor lastDoctor \u003d model.getFilteredDoctorList().get(indexLastDoctor.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(lastDoctor).withRemark(Remark.getEmptyRemark().value).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        RemarkDoctorCommand remarkCommand \u003d new RemarkDoctorCommand(indexLastDoctor, new Remark(\"\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(RemarkDoctorCommand.MESSAGE_DELETE_DOCTOR_REMARK_SUCCESS,","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(indexLastDoctor.getZeroBased()), editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(indexLastDoctor.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        Doctor patientInFilteredList \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(patientInFilteredList).withRemark(SAMPLE_REMARK).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        RemarkDoctorCommand remarkCommand \u003d new RemarkDoctorCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(RemarkDoctorCommand.MESSAGE_ADD_DOCTOR_REMARK_SUCCESS,","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"    public void execute_invalidDoctorIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDoctorList().size() + 1);","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        RemarkCommand remarkCommand \u003d new RemarkDoctorCommand(outOfBoundIndex, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"     * Remark Doctor in filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"     * but smaller than size of plannermd","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"    public void execute_invalidDoctorIndexFilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getDoctorList().size());","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        RemarkDoctorCommand remarkCommand \u003d new RemarkDoctorCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"                new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"        final RemarkCommand standardCommand \u003d new RemarkDoctorCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"        RemarkCommand commandWithSameValues \u003d new RemarkDoctorCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"        assertFalse(standardCommand.equals(new RemarkDoctorCommand(INDEX_SECOND_PERSON, new Remark(SAMPLE_REMARK))));","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"        assertFalse(standardCommand.equals(new RemarkDoctorCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"                new Remark(\"Different Remark\"))));","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"        // RemarkDoctorCommand vs RemarkPatientCommand","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"        assertFalse(standardCommand.equals(new RemarkPatientCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK))));","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":140,"hpkoh":5,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/logic/commands/remarkcommand/RemarkPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.remarkcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":" * RemarkPatientCommand.","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"class RemarkPatientCommandTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"    private static final String SAMPLE_REMARK \u003d \"Monthly insulin prescription\";","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"    private Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"    void execute_sampleRemarkUnfilteredList_success() {","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        Patient editedPatient \u003d new PatientBuilder(firstPatient).withRemark(SAMPLE_REMARK).build();","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        RemarkPatientCommand remarkCommand \u003d new RemarkPatientCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(RemarkPatientCommand.MESSAGE_ADD_PATIENT_REMARK_SUCCESS,","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"                editedPatient);","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"                editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"     * Add Empty Remark/ Remove current remarks.","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"    public void execute_emptyRemarkUnfilteredList_success() {","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        Patient editedPatient \u003d new PatientBuilder(lastPatient).withRemark(Remark.getEmptyRemark().value).build();","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        RemarkPatientCommand remarkCommand \u003d new RemarkPatientCommand(indexLastPatient, new Remark(\"\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(RemarkPatientCommand.MESSAGE_DELETE_PATIENT_REMARK_SUCCESS,","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"                editedPatient);","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"hpkoh"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"hpkoh"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(indexLastPatient.getZeroBased()), editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(indexLastPatient.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"                editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"hpkoh"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"hpkoh"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"hpkoh"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withRemark(SAMPLE_REMARK).build();","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        RemarkPatientCommand remarkCommand \u003d new RemarkPatientCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(RemarkPatientCommand.MESSAGE_ADD_PATIENT_REMARK_SUCCESS,","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"                editedPatient);","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"hpkoh"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"hpkoh"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":91,"author":{"gitId":"hpkoh"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":92,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":93,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":94,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":95,"author":{"gitId":"hpkoh"},"content":"    public void execute_invalidPatientIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":96,"author":{"gitId":"hpkoh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-10-05"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        RemarkCommand remarkCommand \u003d new RemarkPatientCommand(outOfBoundIndex, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":99,"author":{"gitId":"hpkoh"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":100,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":101,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":103,"author":{"gitId":"hpkoh"},"content":"     * Remark Patient in filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"hpkoh"},"content":"     * but smaller than size of plannermd","lastModifiedDate":"2021-10-05"},{"lineNumber":105,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"hpkoh"},"content":"    public void execute_invalidPatientIndexFilteredList_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"hpkoh"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"hpkoh"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":110,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":111,"author":{"gitId":"hpkoh"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-10-05"},{"lineNumber":112,"author":{"gitId":"hpkoh"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getPatientList().size());","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        RemarkPatientCommand remarkCommand \u003d new RemarkPatientCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"hpkoh"},"content":"                new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"hpkoh"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":120,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"hpkoh"},"content":"    public void equals() {","lastModifiedDate":"2021-10-05"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"        final RemarkCommand standardCommand \u003d new RemarkPatientCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"hpkoh"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"        RemarkCommand commandWithSameValues \u003d new RemarkPatientCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK));","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"hpkoh"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-05"},{"lineNumber":127,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":128,"author":{"gitId":"hpkoh"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":129,"author":{"gitId":"hpkoh"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-05"},{"lineNumber":130,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":131,"author":{"gitId":"hpkoh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":132,"author":{"gitId":"hpkoh"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-05"},{"lineNumber":133,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":134,"author":{"gitId":"hpkoh"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":135,"author":{"gitId":"hpkoh"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-05"},{"lineNumber":136,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":137,"author":{"gitId":"hpkoh"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"        assertFalse(standardCommand.equals(new RemarkPatientCommand(INDEX_SECOND_PERSON, new Remark(SAMPLE_REMARK))));","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":140,"author":{"gitId":"hpkoh"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"        assertFalse(standardCommand.equals(new RemarkPatientCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"                new Remark(\"Different Remark\"))));","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"        // RemarkPatientCommand vs RemarkDoctorCommand","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"        assertFalse(standardCommand.equals(new RemarkDoctorCommand(INDEX_FIRST_PERSON, new Remark(SAMPLE_REMARK))));","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":147,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"hpkoh":123,"Haozeee":22,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/logic/commands/tagcommand/AddDoctorTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for TagCommand.","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"class AddDoctorTagCommandTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    private final Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    private final Tag tag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    void execute_validTagUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        Doctor firstDoctor \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(firstDoctor.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        newTags.add(tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(firstDoctor).withTags(","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"                newTags.stream().map(t -\u003e t.tagName).toArray(String[]::new))","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        AddDoctorTagCommand addDoctorTagCommand \u003d new AddDoctorTagCommand(INDEX_FIRST_PERSON, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(AddDoctorTagCommand.MESSAGE_ADD_TAG_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()), editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(addDoctorTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"    void execute_validTagFilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        Doctor doctorInFilteredList \u003d model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(doctorInFilteredList.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        newTags.add(tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(doctorInFilteredList).withTags(","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"                newTags.stream().map(t -\u003e t.tagName).toArray(String[]::new))","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        AddDoctorTagCommand addDoctorTagCommand \u003d new AddDoctorTagCommand(INDEX_FIRST_PERSON, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        String expectedMessage \u003d String.format(AddDoctorTagCommand.MESSAGE_ADD_TAG_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()), editedDoctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredDoctorList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"hpkoh"},"content":"                editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        assertCommandSuccess(addDoctorTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"    void execute_invalidIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDoctorList().size() + 1);","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        AddDoctorTagCommand addDoctorTagCommand \u003d new AddDoctorTagCommand(outOfBoundIndex, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        assertCommandFailure(addDoctorTagCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"    void execute_invalidIndexFilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getDoctorList().size());","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"        AddDoctorTagCommand addDoctorTagCommand \u003d new AddDoctorTagCommand(outOfBoundIndex, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        assertCommandFailure(addDoctorTagCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"    void equals() {","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"        final AddDoctorTagCommand standardCommand \u003d new AddDoctorTagCommand(INDEX_FIRST_PERSON, tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        Tag copyTag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        AddDoctorTagCommand commandWithSameValues \u003d new AddDoctorTagCommand(INDEX_FIRST_PERSON, copyTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"        assertEquals(standardCommand, commandWithSameValues);","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        assertEquals(standardCommand, standardCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(null, standardCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"        Assertions.assertNotEquals(standardCommand, new ClearCommand());","lastModifiedDate":"2021-10-31"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(standardCommand, new AddPatientTagCommand(INDEX_FIRST_PERSON, tag));","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(standardCommand, new AddDoctorTagCommand(INDEX_SECOND_PERSON, tag));","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"        // different tag -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(standardCommand, new AddDoctorTagCommand(INDEX_FIRST_PERSON, new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"Haozeee":123,"hpkoh":4,"jiayi1129":4}},{"path":"src/test/java/seedu/plannermd/logic/commands/tagcommand/AddPatientTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.commands.tagcommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import java.util.Set;","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.Messages;","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.ModelManager;","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":" * Contains integration tests (interaction with the Model) and unit tests for TagCommand.","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"class AddPatientTagCommandTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"    private final Model model \u003d new ModelManager(getTypicalPlannerMd(), new UserPrefs());","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    private final Tag tag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"    void execute_validTagUnfilteredList_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(firstPatient.getTags());","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        newTags.add(tag);","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        Patient editedPatient \u003d new PatientBuilder(firstPatient).withTags(","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"                        newTags.stream().map(t -\u003e t.tagName).toArray(String[]::new))","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"                .build();","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        AddPatientTagCommand addPatientTagCommand \u003d new AddPatientTagCommand(INDEX_FIRST_PERSON, tag);","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d String.format(AddPatientTagCommand.MESSAGE_ADD_TAG_SUCCESS, editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"                editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(addPatientTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"    void execute_validTagFilteredList_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(patientInFilteredList.getTags());","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        newTags.add(tag);","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withTags(","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"                        newTags.stream().map(t -\u003e t.tagName).toArray(String[]::new))","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"                .build();","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        AddPatientTagCommand addPatientTagCommand \u003d new AddPatientTagCommand(INDEX_FIRST_PERSON, tag);","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        String expectedMessage \u003d String.format(AddPatientTagCommand.MESSAGE_ADD_TAG_SUCCESS, editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        Model expectedModel \u003d new ModelManager(new PlannerMd(model.getPlannerMd()), new UserPrefs());","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPatient);","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"hpkoh"},"content":"        expectedModel.editAppointmentsWithPerson(model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased()),","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"hpkoh"},"content":"                editedPatient);","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        assertCommandSuccess(addPatientTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"    void execute_invalidIndexUnfilteredList_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        AddPatientTagCommand addPatientTagCommand \u003d new AddPatientTagCommand(outOfBoundIndex, tag);","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(addPatientTagCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"    void execute_invalidIndexFilteredList_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"        // ensures that outOfBoundIndex is still in bounds of plannermd list","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlannerMd().getPatientList().size());","lastModifiedDate":"2021-10-05"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        AddPatientTagCommand addPatientTagCommand \u003d new AddPatientTagCommand(outOfBoundIndex, tag);","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"        assertCommandFailure(addPatientTagCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"    void equals() {","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"        final AddPatientTagCommand standardCommand \u003d new AddPatientTagCommand(INDEX_FIRST_PERSON, tag);","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-09-30"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"        Tag copyTag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2021-09-30"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"        AddPatientTagCommand commandWithSameValues \u003d new AddPatientTagCommand(INDEX_FIRST_PERSON, copyTag);","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"        assertEquals(standardCommand, commandWithSameValues);","lastModifiedDate":"2021-09-30"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-09-30"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"        assertEquals(standardCommand, standardCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(null, standardCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"        Assertions.assertNotEquals(standardCommand, new ClearCommand());","lastModifiedDate":"2021-10-31"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(standardCommand, new AddPatientTagCommand(INDEX_SECOND_PERSON, tag));","lastModifiedDate":"2021-10-05"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"        // different tag -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(standardCommand, new AddPatientTagCommand(INDEX_FIRST_PERSON, new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2021-10-05"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"hpkoh":4,"pualixue":122,"jiayi1129":4}},{"path":"src/test/java/seedu/plannermd/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"-":149,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.Command;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"-":35,"jiayi1129":3}},{"path":"src/test/java/seedu/plannermd/logic/parser/FlagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"class FlagTest {","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"    private static final String FLAG_DELETE \u003d \"-d\";","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"    private final Flag flag \u003d new Flag(FLAG_DELETE);","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"    void getFlag() {","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"        assertEquals(FLAG_DELETE, flag.getFlag());","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"    void testToString() {","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"        assertEquals(FLAG_DELETE, flag.toString());","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"    void equals() {","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"        Flag copyFlag \u003d new Flag(FLAG_DELETE);","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"        assertEquals(flag, copyFlag);","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(flag, new Flag(\"-a\"));","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"        assertEquals(flag, flag);","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(null, flag);","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"pualixue":38}},{"path":"src/test/java/seedu/plannermd/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"-":186,"jiayi1129":10}},{"path":"src/test/java/seedu/plannermd/logic/parser/PlannerMdParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_DELETE;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.ExitCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.HelpCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentFilters;","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.FilterAppointmentCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.FilterUpcomingAppointmentCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.ListAppointmentCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeleteDoctorCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeletePatientCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.findcommand.FindDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.findcommand.FindPatientCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.listcommand.ListDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.listcommand.ListPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkDoctorCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkPatientCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.AddDoctorTagCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.AddPatientTagCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeleteDoctorTagCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeletePatientTagCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.TagCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model.State;","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentFiltersBuilder;","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.DoctorUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.PatientUtil;","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"public class PlannerMdParserTest {","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"    private final PlannerMdParser parser \u003d new PlannerMdParser();","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"hpkoh"},"content":"    private final State patientState \u003d State.PATIENT;","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"    private final State doctorState \u003d State.DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parseCommand_addPatient() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"        AddPatientCommand patientCommand \u003d (AddPatientCommand) parser.parseCommand(PatientUtil.getAddCommand(patient),","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"                patientState);","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"        assertEquals(new AddPatientCommand(patient), patientCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parseCommand_addDoctor() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor doctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"        AddDoctorCommand doctorCommand \u003d (AddDoctorCommand) parser.parseCommand(DoctorUtil.getAddCommand(doctor),","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"                doctorState);","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"        assertEquals(new AddDoctorCommand(doctor), doctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"hpkoh"},"content":"    //Appointment command integration tests","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_addAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_deleteAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":96,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_editAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_filterAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder()","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"                .withStartDate(LocalDate.of(2021, 10, 20))","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(\"Alice\").build();","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        // Patient state","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand command \u003d (FilterAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"                FilterAppointmentCommand.COMMAND_WORD + \" \" + filters.getFilterDetails(), patientState);","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"        assertEquals(command, new FilterAppointmentCommand(filters));","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        // Doctor state","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        command \u003d (FilterAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"                FilterAppointmentCommand.COMMAND_WORD + \" \" + filters.getFilterDetails(), doctorState);","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        assertEquals(command, new FilterAppointmentCommand(filters));","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":116,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":117,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_filterUpcomingAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withUpcoming()","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(\"Alice\").build();","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"        // Patient state","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand command \u003d (FilterUpcomingAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"                FilterUpcomingAppointmentCommand.COMMAND_WORD + \" \" + filters.getUpcomingFilterDetails(),","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"                patientState);","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"        assertEquals(command, new FilterUpcomingAppointmentCommand(filters));","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"        // Doctor state","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"        command \u003d (FilterUpcomingAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"                FilterUpcomingAppointmentCommand.COMMAND_WORD + \" \" + filters.getUpcomingFilterDetails(),","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"                doctorState);","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        assertEquals(command, new FilterUpcomingAppointmentCommand(filters));","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":134,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":135,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":136,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_listAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"        assertTrue(parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"                ListAppointmentCommand.COMMAND_WORD, doctorState) instanceof ListAppointmentCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"        assertTrue(parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"                ListAppointmentCommand.COMMAND_WORD + \" 3\", patientState) instanceof ListAppointmentCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":142,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":145,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, patientState) instanceof ClearCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", patientState) instanceof ClearCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":150,"author":{"gitId":"Haozeee"},"content":"    public void parseCommand_deletePatient() throws Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"        DeletePatientCommand command \u003d (DeletePatientCommand) parser","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"ChuangZheQuan"},"content":"                .parseCommand(DeletePatientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), patientState);","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(new DeletePatientCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":157,"author":{"gitId":"Haozeee"},"content":"    public void parseCommand_deleteDoctor() throws Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":158,"author":{"gitId":"ChuangZheQuan"},"content":"        DeleteDoctorCommand command \u003d (DeleteDoctorCommand) parser","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"                .parseCommand(DeleteDoctorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), doctorState);","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"Haozeee"},"content":"        assertEquals(new DeleteDoctorCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2021-10-08"},{"lineNumber":161,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":162,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":164,"author":{"gitId":"pualixue"},"content":"    public void parseCommand_editPatient() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-09-30"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(EditPatientCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"ChuangZheQuan"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor),","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"ChuangZheQuan"},"content":"                patientState);","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(new EditPatientCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-09-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":173,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":174,"author":{"gitId":"Haozeee"},"content":"    public void parseCommand_remarkPatient() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"Haozeee"},"content":"        RemarkPatientCommand command \u003d (RemarkPatientCommand) parser.parseCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":176,"author":{"gitId":"Haozeee"},"content":"                RemarkCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + REMARK_DESC_AMY,","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"Haozeee"},"content":"                patientState);","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"Haozeee"},"content":"        assertEquals(new RemarkPatientCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY)), command);","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":182,"author":{"gitId":"Haozeee"},"content":"    public void parseCommand_remarkDoctor() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"Haozeee"},"content":"        RemarkDoctorCommand command \u003d (RemarkDoctorCommand) parser.parseCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"Haozeee"},"content":"                RemarkCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + REMARK_DESC_AMY,","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"Haozeee"},"content":"                State.DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"Haozeee"},"content":"        assertEquals(new RemarkDoctorCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY)), command);","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"Haozeee"},"content":"    public void parseCommand_tagPatient() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"Haozeee"},"content":"        String validTag \u003d \"Patient\";","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"Haozeee"},"content":"        // Adding a tag","lastModifiedDate":"2021-10-10"},{"lineNumber":194,"author":{"gitId":"Haozeee"},"content":"        AddPatientTagCommand addCommand \u003d (AddPatientTagCommand) parser.parseCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":195,"author":{"gitId":"hpkoh"},"content":"                TagCommand.COMMAND_WORD + \" \" + FLAG_ADD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":196,"author":{"gitId":"Haozeee"},"content":"                        + PREFIX_TAG + validTag, State.PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":197,"author":{"gitId":"Haozeee"},"content":"        assertEquals(new AddPatientTagCommand(INDEX_FIRST_PERSON, new Tag(validTag)), addCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":198,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":199,"author":{"gitId":"Haozeee"},"content":"        // Deleting a tag","lastModifiedDate":"2021-10-10"},{"lineNumber":200,"author":{"gitId":"Haozeee"},"content":"        DeletePatientTagCommand deleteCommand \u003d (DeletePatientTagCommand) parser.parseCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":201,"author":{"gitId":"hpkoh"},"content":"                TagCommand.COMMAND_WORD + \" \" + FLAG_DELETE + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":202,"author":{"gitId":"Haozeee"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_TAG + validTag, State.PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":203,"author":{"gitId":"Haozeee"},"content":"        assertEquals(new DeletePatientTagCommand(INDEX_FIRST_PERSON, new Tag(validTag)), deleteCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":204,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":205,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"Haozeee"},"content":"    public void parseCommand_tagDoctor() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":208,"author":{"gitId":"Haozeee"},"content":"        String validTag \u003d \"Doctor\";","lastModifiedDate":"2021-10-10"},{"lineNumber":209,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":210,"author":{"gitId":"Haozeee"},"content":"        // Adding a tag","lastModifiedDate":"2021-10-10"},{"lineNumber":211,"author":{"gitId":"Haozeee"},"content":"        AddDoctorTagCommand addCommand \u003d (AddDoctorTagCommand) parser.parseCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":212,"author":{"gitId":"hpkoh"},"content":"                TagCommand.COMMAND_WORD + \" \" + FLAG_ADD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":213,"author":{"gitId":"Haozeee"},"content":"                        + PREFIX_TAG + validTag, State.DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":214,"author":{"gitId":"Haozeee"},"content":"        assertEquals(new AddDoctorTagCommand(INDEX_FIRST_PERSON, new Tag(validTag)), addCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":215,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":216,"author":{"gitId":"Haozeee"},"content":"        // Deleting a tag","lastModifiedDate":"2021-10-10"},{"lineNumber":217,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorTagCommand deleteCommand \u003d (DeleteDoctorTagCommand) parser.parseCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"hpkoh"},"content":"                TagCommand.COMMAND_WORD + \" \" + FLAG_DELETE + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":219,"author":{"gitId":"Haozeee"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_TAG + validTag, State.DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":220,"author":{"gitId":"Haozeee"},"content":"        assertEquals(new DeleteDoctorTagCommand(INDEX_FIRST_PERSON, new Tag(validTag)), deleteCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":221,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":222,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":223,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":224,"author":{"gitId":"pualixue"},"content":"    public void parseCommand_editDoctor() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":225,"author":{"gitId":"pualixue"},"content":"        Doctor doctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":226,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder(doctor).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":227,"author":{"gitId":"ChuangZheQuan"},"content":"        EditDoctorCommand command \u003d (EditDoctorCommand) parser.parseCommand(EditDoctorCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-10"},{"lineNumber":228,"author":{"gitId":"ChuangZheQuan"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + DoctorUtil.getEditDoctorDescriptorDetails(descriptor),","lastModifiedDate":"2021-10-10"},{"lineNumber":229,"author":{"gitId":"pualixue"},"content":"                doctorState);","lastModifiedDate":"2021-10-10"},{"lineNumber":230,"author":{"gitId":"pualixue"},"content":"        assertEquals(new EditDoctorCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-10-10"},{"lineNumber":231,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":232,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":235,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, patientState) instanceof ExitCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":236,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", patientState) instanceof ExitCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":240,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_findPatient() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":242,"author":{"gitId":"jiayi1129"},"content":"        FindPatientCommand command \u003d (FindPatientCommand) parser.parseCommand(","lastModifiedDate":"2021-09-29"},{"lineNumber":243,"author":{"gitId":"ChuangZheQuan"},"content":"                FindPatientCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")),","lastModifiedDate":"2021-10-10"},{"lineNumber":244,"author":{"gitId":"hpkoh"},"content":"                patientState);","lastModifiedDate":"2021-10-07"},{"lineNumber":245,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(new FindPatientCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2021-09-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":248,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":249,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_findDoctor() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":250,"author":{"gitId":"hpkoh"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2021-10-10"},{"lineNumber":251,"author":{"gitId":"hpkoh"},"content":"        FindDoctorCommand command \u003d (FindDoctorCommand) parser.parseCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":252,"author":{"gitId":"hpkoh"},"content":"                FindDoctorCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-10"},{"lineNumber":253,"author":{"gitId":"hpkoh"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")),","lastModifiedDate":"2021-10-10"},{"lineNumber":254,"author":{"gitId":"hpkoh"},"content":"                doctorState);","lastModifiedDate":"2021-10-10"},{"lineNumber":255,"author":{"gitId":"hpkoh"},"content":"        assertEquals(new FindDoctorCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2021-10-10"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":260,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, patientState) instanceof HelpCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":261,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", patientState) instanceof HelpCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":265,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_listPatient() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":266,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD, patientState) instanceof ListPatientCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":267,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD + \" 3\",","lastModifiedDate":"2021-10-10"},{"lineNumber":268,"author":{"gitId":"ChuangZheQuan"},"content":"                patientState) instanceof ListPatientCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":271,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":272,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_listDoctor() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":273,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(ListDoctorCommand.COMMAND_WORD, doctorState) instanceof ListDoctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":274,"author":{"gitId":"hpkoh"},"content":"        assertTrue(parser.parseCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":275,"author":{"gitId":"hpkoh"},"content":"                ListDoctorCommand.COMMAND_WORD + \" 3\", doctorState) instanceof ListDoctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":276,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":277,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":280,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), (","lastModifiedDate":"2021-10-10"},{"lineNumber":281,"author":{"gitId":"ChuangZheQuan"},"content":"            ) -\u003e parser.parseCommand(\"\", patientState));","lastModifiedDate":"2021-10-10"},{"lineNumber":282,"author":{"gitId":"hpkoh"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), (","lastModifiedDate":"2021-10-16"},{"lineNumber":283,"author":{"gitId":"hpkoh"},"content":"            ) -\u003e parser.parseCommand(\"\", doctorState));","lastModifiedDate":"2021-10-16"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":288,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, (","lastModifiedDate":"2021-10-10"},{"lineNumber":289,"author":{"gitId":"ChuangZheQuan"},"content":"            )-\u003e parser.parseCommand(\"unknownCommand\", patientState));","lastModifiedDate":"2021-10-10"},{"lineNumber":290,"author":{"gitId":"hpkoh"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, (","lastModifiedDate":"2021-10-16"},{"lineNumber":291,"author":{"gitId":"hpkoh"},"content":"            )-\u003e parser.parseCommand(\"unknownCommand\", doctorState));","lastModifiedDate":"2021-10-16"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":293,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Haozeee":103,"hpkoh":66,"pualixue":10,"ChuangZheQuan":34,"-":50,"jiayi1129":30}},{"path":"src/test/java/seedu/plannermd/logic/parser/addcommandparser/AddDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.BIRTH_DATE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.BIRTH_DATE_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_BIRTH_DATE_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddDoctorCommandParserTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"    private AddDoctorCommandParser parser \u003d new AddDoctorCommandParser();","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor expectedDoctor \u003d new DoctorBuilder(DR_BOB).withTags(VALID_TAG_FRIEND).withRemark(\"\")","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"                .build();","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"                parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"                        + ADDRESS_DESC_BOB + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple birth dates - last birth date accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTH_DATE_DESC_AMY","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor expectedDoctorMultipleTags \u003d new DoctorBuilder(DR_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).withRemark(\"\")","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"                .build();","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTH_DATE_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctorMultipleTags));","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"        // zero tags","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"        Doctor expectedDoctor \u003d new DoctorBuilder(DR_AMY).withTags().withRemark(\"\").build();","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_AMY,","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"        // no risk","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"        expectedDoctor \u003d new DoctorBuilder(DR_AMY).withRemark(\"\").build();","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTH_DATE_DESC_AMY","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"                        + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing name prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing phone prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing email prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing address prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing birth date prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"                + VALID_BIRTH_DATE_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"        // all prefixes missing","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"                + VALID_BIRTH_DATE_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid name","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"ChuangZheQuan"},"content":"                INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid phone","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"ChuangZheQuan"},"content":"                Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid email","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"ChuangZheQuan"},"content":"                Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid address","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"ChuangZheQuan"},"content":"                Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid birth date","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"ChuangZheQuan"},"content":"                        + INVALID_BIRTH_DATE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"ChuangZheQuan"},"content":"                BirthDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid tag","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"ChuangZheQuan"},"content":"                parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"ChuangZheQuan"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"ChuangZheQuan"},"content":"        // non-empty preamble","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"ChuangZheQuan"},"content":"                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"ChuangZheQuan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"ChuangZheQuan":192,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/addcommandparser/AddPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.BIRTH_DATE_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.BIRTH_DATE_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_BIRTH_DATE_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.RISK_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddPatientCommandParserTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient expectedPatient \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND).withRemark(\"\")","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"                .withRisk(Risk.getUnclassifiedRisk().toString()).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"                parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"                        + ADDRESS_DESC_BOB + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple birth dates - last birth date accepted","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTH_DATE_DESC_AMY","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB)","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).withRemark(\"\")","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"                .withRisk(Risk.getUnclassifiedRisk().toString()).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTH_DATE_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatientMultipleTags));","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"        // zero tags","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().withRemark(\"\").build();","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_AMY + RISK_DESC_AMY,","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"        // no risk","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"        expectedPatient \u003d new PatientBuilder(AMY).withRisk(Risk.getUnclassifiedRisk().toString())","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"                .withRemark(\"\").build();","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTH_DATE_DESC_AMY","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"                        + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing name prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing phone prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing email prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing address prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"ChuangZheQuan"},"content":"                + BIRTH_DATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing birth date prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"                + VALID_BIRTH_DATE_BOB, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"        // all prefixes missing","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"                + VALID_BIRTH_DATE_BOB, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid name","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"ChuangZheQuan"},"content":"                INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"ChuangZheQuan"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid phone","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"ChuangZheQuan"},"content":"                Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":161,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid email","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"ChuangZheQuan"},"content":"                Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid address","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"ChuangZheQuan"},"content":"                Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid birth date","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"ChuangZheQuan"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"ChuangZheQuan"},"content":"                        + INVALID_BIRTH_DATE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":178,"author":{"gitId":"ChuangZheQuan"},"content":"                BirthDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":179,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid tag","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"ChuangZheQuan"},"content":"                parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":184,"author":{"gitId":"ChuangZheQuan"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":185,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2021-10-07"},{"lineNumber":187,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2021-10-07"},{"lineNumber":188,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":189,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":190,"author":{"gitId":"ChuangZheQuan"},"content":"        // non-empty preamble","lastModifiedDate":"2021-10-07"},{"lineNumber":191,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-07"},{"lineNumber":192,"author":{"gitId":"ChuangZheQuan"},"content":"                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":193,"author":{"gitId":"ChuangZheQuan"},"content":"                        + BIRTH_DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-07"},{"lineNumber":194,"author":{"gitId":"ChuangZheQuan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-07"},{"lineNumber":195,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":196,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"ChuangZheQuan":195,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/apptcommandparser/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_ANOTHER_DOCTOR_INDEX_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_ANOTHER_PATIENT_INDEX_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_DOCTOR_INDEX_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_DURATION_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_DURATION_TWO_HOUR_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_PATIENT_INDEX_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_START_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_START_TWO_HOUR_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_DOCTOR_INDEX_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_DURATION_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_PATIENT_INDEX_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DATE_THIRTY_MIN;","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DEFAULT_DURATION;","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DURATION_THIRTY_MIN;","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_REMARK;","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_TIME_THIRTY_MIN;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_DOCTOR_INDEX;","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PATIENT_INDEX;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.apptcommand.AddAppointmentCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.appointment.AddAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddAppointmentCommandParserTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"        String userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"            + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"        Index doctorIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor addAppointmentDescriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withSession(VALID_APPT_TIME_THIRTY_MIN, VALID_APPT_DURATION_THIRTY_MIN)","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser, userInput, new AddAppointmentCommand(patientIndex,","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"                doctorIndex, addAppointmentDescriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple patient indexes - last index accepted","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_ANOTHER_PATIENT_INDEX_DESC + APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(patientIndex, doctorIndex, addAppointmentDescriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple doctor indexes - last index accepted","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_ANOTHER_DOCTOR_INDEX_DESC + APPT_DOCTOR_INDEX_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_START_THIRTY_MIN_DESC + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(patientIndex, doctorIndex, addAppointmentDescriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple start date time - last date time accepted","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_TWO_HOUR_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_START_THIRTY_MIN_DESC + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(patientIndex, doctorIndex, addAppointmentDescriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple durations - last duration accepted","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_TWO_HOUR_DESC + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(patientIndex, doctorIndex, addAppointmentDescriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"        // multiple remarks - last remark accepted","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_TWO_HOUR_DESC + APPT_DURATION_THIRTY_MIN_DESC + REMARK_DESC_AMY + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(patientIndex, doctorIndex, addAppointmentDescriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"        Index doctorIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"        // No Duration","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"        String userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor addAppointmentDescriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withSession(VALID_APPT_TIME_THIRTY_MIN, VALID_APPT_DEFAULT_DURATION)","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(patientIndex, doctorIndex, addAppointmentDescriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"        // No remark","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"        addAppointmentDescriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-23"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withSession(VALID_APPT_TIME_THIRTY_MIN, VALID_APPT_DURATION_THIRTY_MIN)","lastModifiedDate":"2021-10-23"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withRemark(\"\").build();","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentCommand(patientIndex, doctorIndex, addAppointmentDescriptor));","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-23"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":128,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing patient prefix","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, VALID_PATIENT_INDEX + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_THIRTY_MIN_DESC, expectedMessage);","lastModifiedDate":"2021-10-23"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing doctor prefix","lastModifiedDate":"2021-10-23"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, APPT_PATIENT_INDEX_DESC + VALID_DOCTOR_INDEX + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_THIRTY_MIN_DESC, expectedMessage);","lastModifiedDate":"2021-10-23"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"ChuangZheQuan"},"content":"        // missing start prefix","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"                + VALID_APPT_DATE_THIRTY_MIN + APPT_DURATION_THIRTY_MIN_DESC, expectedMessage);","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"        // all prefixes missing","lastModifiedDate":"2021-10-23"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, VALID_PATIENT_INDEX + VALID_DOCTOR_INDEX","lastModifiedDate":"2021-10-23"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"                + VALID_APPT_DATE_THIRTY_MIN, expectedMessage);","lastModifiedDate":"2021-10-23"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"        AddAppointmentCommand.AddAppointmentDescriptor addAppointmentDescriptor \u003d","lastModifiedDate":"2021-10-23"},{"lineNumber":148,"author":{"gitId":"ChuangZheQuan"},"content":"                new AddAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-23"},{"lineNumber":149,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withSession(VALID_APPT_TIME_THIRTY_MIN, VALID_APPT_DEFAULT_DURATION)","lastModifiedDate":"2021-10-23"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"                        .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":152,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":153,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid patient index","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"ChuangZheQuan"},"content":"        String userInput \u003d INVALID_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":155,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":156,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":157,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":158,"author":{"gitId":"ChuangZheQuan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-23"},{"lineNumber":159,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":160,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid doctor index","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + INVALID_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":162,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":163,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":164,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":165,"author":{"gitId":"ChuangZheQuan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-23"},{"lineNumber":166,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":167,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid start date","lastModifiedDate":"2021-10-23"},{"lineNumber":168,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + INVALID_START_DATE_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":169,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":170,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":171,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":172,"author":{"gitId":"ChuangZheQuan"},"content":"                AddAppointmentCommand.MESSAGE_WRONG_DATE_TIME);","lastModifiedDate":"2021-10-23"},{"lineNumber":173,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":174,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid start time","lastModifiedDate":"2021-10-23"},{"lineNumber":175,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + INVALID_START_TIME_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":176,"author":{"gitId":"ChuangZheQuan"},"content":"                + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":177,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":178,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":179,"author":{"gitId":"ChuangZheQuan"},"content":"                AddAppointmentCommand.MESSAGE_WRONG_DATE_TIME);","lastModifiedDate":"2021-10-23"},{"lineNumber":180,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":181,"author":{"gitId":"ChuangZheQuan"},"content":"        // invalid duration","lastModifiedDate":"2021-10-23"},{"lineNumber":182,"author":{"gitId":"ChuangZheQuan"},"content":"        userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + INVALID_START_TIME_DESC","lastModifiedDate":"2021-10-23"},{"lineNumber":183,"author":{"gitId":"ChuangZheQuan"},"content":"                + INVALID_DURATION_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-23"},{"lineNumber":184,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-23"},{"lineNumber":185,"author":{"gitId":"ChuangZheQuan"},"content":"                userInput,","lastModifiedDate":"2021-10-23"},{"lineNumber":186,"author":{"gitId":"ChuangZheQuan"},"content":"                AddAppointmentCommand.MESSAGE_WRONG_DATE_TIME);","lastModifiedDate":"2021-10-23"},{"lineNumber":187,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":189,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-30"},{"lineNumber":190,"author":{"gitId":"pualixue"},"content":"    public void parse_sessionSpansTwoDays_failure() {","lastModifiedDate":"2021-10-30"},{"lineNumber":191,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-30"},{"lineNumber":192,"author":{"gitId":"pualixue"},"content":"                + APPT_DURATION_TWO_HOUR_DESC + APPT_REMARK_DESC; // session 22:35-00:35","lastModifiedDate":"2021-10-30"},{"lineNumber":193,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, userInput, Session.MESSAGE_END_WITHIN_SAME_DAY);","lastModifiedDate":"2021-10-30"},{"lineNumber":194,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":195,"author":{"gitId":"pualixue"},"content":"        String userInput2 \u003d APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-30"},{"lineNumber":196,"author":{"gitId":"pualixue"},"content":"                + \" \" + PREFIX_DURATION + \"85\" + APPT_REMARK_DESC; // session 22:35-00:00","lastModifiedDate":"2021-10-30"},{"lineNumber":197,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, userInput2, Session.MESSAGE_END_WITHIN_SAME_DAY);","lastModifiedDate":"2021-10-30"},{"lineNumber":198,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":199,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"pualixue":13,"ChuangZheQuan":185,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/apptcommandparser/AppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_UNKNOWN_FLAG;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"class AppointmentCommandParserTest {","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"    private final AppointmentCommandParser parser \u003d new AppointmentCommandParser();","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    //Appointment command integration tests","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"    public void parseAppointmentCommand_addAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"    public void parseAppointmentCommand_deleteAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"    public void parseAppointmentCommand_editAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"    public void parseAppointmentCommand_filterAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"    public void parseAppointmentCommand_filterUpcomingAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"    public void parseAppointmentCommand_listAppointmentCommand() throws Exception {","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"        //TODO","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"                AppointmentCommand.MESSAGE_USAGE), () -\u003e parser.parseAppointmentCommand(\"\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_FLAG, (","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"        )-\u003e parser.parseAppointmentCommand(\"unknownCommand\"));","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"hpkoh":57,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/apptcommandparser/DeleteAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":" * outside of the DeletePatientCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":" * same path through the DeleteAppointmentCommand, and therefore we test only one of them.","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"public class DeleteAppointmentCommandParserTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseSuccess(parser, \"1\", new DeleteAppointmentCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"ChuangZheQuan":32,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/apptcommandparser/EditAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ANOTHER_VALID_PATIENT_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_ANOTHER_DOCTOR_INDEX_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_ANOTHER_PATIENT_INDEX_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_ANOTHER_REMARK_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_DOCTOR_INDEX_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_DURATION_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_DURATION_TWO_HOUR_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_PATIENT_INDEX_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_REMARK_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_START_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.APPT_START_TWO_HOUR_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_DURATION_THREE_HOURS_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_START_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DATE_THIRTY_MIN;","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DATE_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DURATION_THIRTY_MIN_STR;","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DURATION_TWO_HOUR_STR;","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_REMARK;","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_TIME_THIRTY_MIN;","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_TIME_TWO_HOUR;","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_DOCTOR_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PATIENT_INDEX;","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.apptcommand.EditAppointmentCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.appointment.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"public class EditAppointmentCommandParserTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"    private final EditAppointmentCommandParser parser \u003d new EditAppointmentCommandParser();","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        // no index specified","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, APPT_REMARK_DESC, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"        // no field specified","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\", EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        // no index and no field specified","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        // negative index","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"-5\" + APPT_REMARK_DESC, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        // zero index","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"0\" + APPT_REMARK_DESC, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1 i/string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        // invalid start","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_START_DESC, EditAppointmentCommand.MESSAGE_INVALID_START);","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        // invalid duration","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DURATION_THREE_HOURS_DESC, Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        // invalid start followed by valid duration","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_START_DESC + APPT_DURATION_THIRTY_MIN_DESC,","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"                EditAppointmentCommand.MESSAGE_INVALID_START);","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        // valid duration followed by invalid duration. The test case for invalid duration followed by valid duration","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + APPT_DURATION_THIRTY_MIN_DESC + INVALID_DURATION_THREE_HOURS_DESC,","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"                Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_START_DESC + INVALID_DURATION_THREE_HOURS_DESC,","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"                EditAppointmentCommand.MESSAGE_INVALID_START);","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPT_PATIENT_INDEX_DESC + APPT_DOCTOR_INDEX_DESC","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"                + APPT_START_THIRTY_MIN_DESC + APPT_DURATION_THIRTY_MIN_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"                .withPatientIndex(VALID_PATIENT_INDEX).withDoctorIndex(VALID_DOCTOR_INDEX)","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"                .withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN).withStartTime(VALID_APPT_TIME_THIRTY_MIN)","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"                .withDuration(VALID_APPT_DURATION_THIRTY_MIN_STR).withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPT_DOCTOR_INDEX_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"                .withDoctorIndex(VALID_DOCTOR_INDEX).withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"        // patient index","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPT_PATIENT_INDEX_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder().withPatientIndex(VALID_PATIENT_INDEX).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"        // doctor index","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_DOCTOR_INDEX_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withDoctorIndex(VALID_DOCTOR_INDEX).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"        // start","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_START_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"                .withStartTime(VALID_APPT_TIME_THIRTY_MIN).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"        // duration","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_DURATION_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withDuration(VALID_APPT_DURATION_THIRTY_MIN_STR).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"        // remark","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPT_PATIENT_INDEX_DESC + APPT_ANOTHER_PATIENT_INDEX_DESC","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"pualixue"},"content":"                + APPT_ANOTHER_DOCTOR_INDEX_DESC + APPT_DOCTOR_INDEX_DESC + APPT_START_THIRTY_MIN_DESC","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"pualixue"},"content":"                + APPT_START_TWO_HOUR_DESC + APPT_DURATION_THIRTY_MIN_DESC + APPT_DURATION_TWO_HOUR_DESC","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"pualixue"},"content":"                + APPT_ANOTHER_REMARK_DESC + APPT_REMARK_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder().withPatientIndex(ANOTHER_VALID_PATIENT_INDEX)","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"pualixue"},"content":"                        .withDoctorIndex(VALID_DOCTOR_INDEX).withAppointmentDate(VALID_APPT_DATE_TWO_HOUR)","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"pualixue"},"content":"                        .withStartTime(VALID_APPT_TIME_TWO_HOUR).withDuration(VALID_APPT_DURATION_TWO_HOUR_STR)","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"pualixue"},"content":"                        .withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"pualixue"},"content":"        // no other valid values specified","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPT;","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_START_DESC + APPT_START_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand.EditAppointmentDescriptor descriptor \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"pualixue"},"content":"                new EditAppointmentDescriptorBuilder().withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"                        .withStartTime(VALID_APPT_TIME_THIRTY_MIN).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"pualixue"},"content":"        // other valid values specified","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_START_DESC + APPT_REMARK_DESC + APPT_START_THIRTY_MIN_DESC;","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withAppointmentDate(VALID_APPT_DATE_THIRTY_MIN)","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"pualixue"},"content":"                .withStartTime(VALID_APPT_TIME_THIRTY_MIN).withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"pualixue":190,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/apptcommandparser/FilterAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.FILTER_VALID_END_DATE;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.FILTER_VALID_START_DATE;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_STRING_END_DATE;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_STRING_START_DATE;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_END;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.apptcommandparser.FilterAppointmentCommandParser.END_DATE_BEFORE_START_DATE_MESSAGE;","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.apptcommandparser.FilterAppointmentCommandParser.NO_ARGUMENTS_MESSAGE;","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentFilters;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.FilterAppointmentCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentFiltersBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"public class FilterAppointmentCommandParserTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    private final FilterAppointmentCommandParser parser \u003d new FilterAppointmentCommandParser();","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    public void parse_invalidInput_failure() {","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, \"Hello world \" + PREFIX_PATIENT + \"ds\",","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    @Test public void parse_noPrefixArguments_failure() {","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        // Empty patient argument","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_PATIENT.getPrefix(), NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_PATIENT + \" \", NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        // Empty doctor argument","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_DOCTOR.getPrefix(), NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_DOCTOR + \" \", NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        // Empty startDate argument","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_START.getPrefix(), NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_START + \" \", NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        // Empty endDate argument","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_END.getPrefix(), NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_END + \" \", NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        // Some valid arguments with some empty arguments","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_PATIENT + \"Amy \" + PREFIX_START, NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"Alice\")","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(\"John\").withStartDate(FILTER_VALID_START_DATE)","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(FILTER_VALID_END_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        // Whitespace before and after user input","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        String userInput \u003d \"   \" + PREFIX_PATIENT + \"Alice \" + PREFIX_DOCTOR + \"John \" + PREFIX_START","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"                + VALID_STRING_START_DATE + \" \" + PREFIX_END + VALID_STRING_END_DATE + \" \";","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        // Patient name and start date","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"Alice\", \"Doe\")","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"                .withStartDate(FILTER_VALID_START_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        // Start date and end date","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withStartDate(FILTER_VALID_START_DATE)","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(FILTER_VALID_END_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        // Same start date and end date -\u003e should filter all appointments on that day","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withStartDate(FILTER_VALID_START_DATE)","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(FILTER_VALID_START_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        // Patient name - 1 word","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"John\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        String userInput \u003d PREFIX_PATIENT + \"  John\"; // White spaces around name","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"        // Patient name - multiple words","lastModifiedDate":"2021-10-20"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"John\", \"Doe\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_PATIENT + \"John   Doe\"; // More than 1 white space","lastModifiedDate":"2021-10-20"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"        // Doctor name - 1 word","lastModifiedDate":"2021-10-20"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withDoctorKeywords(\"John\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_DOCTOR + \"  John\"; // White spaces around name","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        // Doctor name - multiple words","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withDoctorKeywords(\"John\", \"Doe\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_DOCTOR + \"John   Doe\"; // More than 1 white space","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        // With valid start date","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withStartDate(FILTER_VALID_START_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_START + \" \" + VALID_STRING_START_DATE; // Whitespace before startDate","lastModifiedDate":"2021-10-20"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_START + \"2/8/2021\"; // Single digit date and month","lastModifiedDate":"2021-10-20"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder()","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"                .withStartDate(LocalDate.of(2021, 8, 2)).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"        // With valid end date","lastModifiedDate":"2021-10-20"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withEndDate(FILTER_VALID_END_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_END + \" \" + VALID_STRING_END_DATE + \"  \"; // Whitespace before endDate","lastModifiedDate":"2021-10-20"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_END + \"2/8/2021\"; // Single digit date and month","lastModifiedDate":"2021-10-20"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder()","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(LocalDate.of(2021, 8, 2)).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":148,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":149,"author":{"gitId":"Haozeee"},"content":"    public void parse_noFieldSpecified_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":150,"author":{"gitId":"Haozeee"},"content":"        // Should show all appointments","lastModifiedDate":"2021-10-20"},{"lineNumber":151,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().build();","lastModifiedDate":"2021-10-20"},{"lineNumber":152,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":153,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, \"\", expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":154,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":157,"author":{"gitId":"Haozeee"},"content":"    public void parse_invalidDates_failure() {","lastModifiedDate":"2021-10-20"},{"lineNumber":158,"author":{"gitId":"Haozeee"},"content":"        // Invalid start date format","lastModifiedDate":"2021-10-19"},{"lineNumber":159,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_START + \"31/06/2021\", AppointmentDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":160,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_START + \"6/20/2021\", AppointmentDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":161,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_START + \"16/02\", AppointmentDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":162,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_START + \"06/20/21\", AppointmentDate.MESSAGE_CONSTRAINTS); //2 digit year","lastModifiedDate":"2021-10-20"},{"lineNumber":163,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":164,"author":{"gitId":"Haozeee"},"content":"        // Invalid end date format","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_END + \"31/06/2021\", AppointmentDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":166,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_END + \"6/20/2021\", AppointmentDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":167,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_END + \"16/02\", AppointmentDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":168,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_END + \"06/20/21\", AppointmentDate.MESSAGE_CONSTRAINTS); //2 digit year","lastModifiedDate":"2021-10-20"},{"lineNumber":169,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"Haozeee"},"content":"        // End date before start date","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_START + \"12/12/2021 \" + PREFIX_END + \"01/02/2021\",","lastModifiedDate":"2021-10-20"},{"lineNumber":172,"author":{"gitId":"Haozeee"},"content":"                END_DATE_BEFORE_START_DATE_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":173,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":175,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":176,"author":{"gitId":"Haozeee"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-20"},{"lineNumber":177,"author":{"gitId":"Haozeee"},"content":"        String userInput \u003d PREFIX_PATIENT + \"Amy \" + PREFIX_DOCTOR + \"Bob \" + PREFIX_START + \"19/10/2021 \"","lastModifiedDate":"2021-10-20"},{"lineNumber":178,"author":{"gitId":"Haozeee"},"content":"                + PREFIX_END + \"20/10/2021 \" + PREFIX_PATIENT + \"Alice \" + PREFIX_DOCTOR + \"John \"","lastModifiedDate":"2021-10-20"},{"lineNumber":179,"author":{"gitId":"Haozeee"},"content":"                + PREFIX_START + VALID_STRING_START_DATE + \" \" + PREFIX_END + VALID_STRING_END_DATE;","lastModifiedDate":"2021-10-20"},{"lineNumber":180,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"Alice\")","lastModifiedDate":"2021-10-20"},{"lineNumber":181,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(\"John\").withStartDate(FILTER_VALID_START_DATE)","lastModifiedDate":"2021-10-20"},{"lineNumber":182,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(FILTER_VALID_END_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":183,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":184,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":185,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":186,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":188,"author":{"gitId":"Haozeee"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":189,"author":{"gitId":"Haozeee"},"content":"        // No other valid values specified","lastModifiedDate":"2021-10-20"},{"lineNumber":190,"author":{"gitId":"Haozeee"},"content":"        String userInput \u003d PREFIX_START + \"19/15/2021 \" + PREFIX_START + VALID_STRING_START_DATE;","lastModifiedDate":"2021-10-20"},{"lineNumber":191,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withStartDate(FILTER_VALID_START_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":192,"author":{"gitId":"Haozeee"},"content":"        FilterAppointmentCommand expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":193,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":194,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":195,"author":{"gitId":"Haozeee"},"content":"        // Other valid fields specified","lastModifiedDate":"2021-10-20"},{"lineNumber":196,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_PATIENT + \"Johnny \" + PREFIX_END + \"19/15/2022 \" + PREFIX_END + VALID_STRING_END_DATE;","lastModifiedDate":"2021-10-20"},{"lineNumber":197,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withPatientKeywords(\"Johnny\")","lastModifiedDate":"2021-10-20"},{"lineNumber":198,"author":{"gitId":"Haozeee"},"content":"                .withEndDate(FILTER_VALID_END_DATE).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":199,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":200,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":201,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":202,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":203,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Haozeee":200,"jiayi1129":3}},{"path":"src/test/java/seedu/plannermd/logic/parser/apptcommandparser/FilterUpcomingAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.apptcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.apptcommandparser.FilterUpcomingAppointmentCommandParser.NO_ARGUMENTS_MESSAGE;","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentFilters;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.FilterUpcomingAppointmentCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentFiltersBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"public class FilterUpcomingAppointmentCommandParserTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    private final FilterUpcomingAppointmentCommandParser parser \u003d new FilterUpcomingAppointmentCommandParser();","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public void parse_invalidInput_failure() {","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, \"Hello world \" + PREFIX_PATIENT + \"ds\",","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterUpcomingAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    @Test public void parse_noPrefixArguments_failure() {","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        // Empty patient argument","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_PATIENT.getPrefix(), NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_PATIENT + \" \", NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        // Empty doctor argument","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_DOCTOR.getPrefix(), NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_DOCTOR + \" \", NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        // Some valid arguments with some empty arguments","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, PREFIX_PATIENT + \"Amy \" + PREFIX_DOCTOR, NO_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withUpcoming().withPatientKeywords(\"Alice\")","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"                .withDoctorKeywords(\"John\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand expectedCommand \u003d new FilterUpcomingAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getUpcomingFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        // Whitespace before and after user input","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        String userInput \u003d \"   \" + PREFIX_PATIENT + \"Alice \" + PREFIX_DOCTOR + \"John   \";","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        // Patient name - 1 word","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withUpcoming()","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"                .withPatientKeywords(\"John\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand expectedCommand \u003d new FilterUpcomingAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getUpcomingFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        String userInput \u003d PREFIX_PATIENT + \"  John\"; // White spaces around name","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        // Patient name - multiple words","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withUpcoming().withPatientKeywords(\"John\", \"Doe\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterUpcomingAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getUpcomingFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_PATIENT + \"John   Doe\"; // More than 1 white space","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        // Doctor name - 1 word","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withUpcoming().withDoctorKeywords(\"John\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterUpcomingAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getUpcomingFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_DOCTOR + \"  John\"; // White spaces around name","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        // Doctor name - multiple words","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        filters \u003d new AppointmentFiltersBuilder().withUpcoming().withDoctorKeywords(\"John\", \"Doe\").build();","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        expectedCommand \u003d new FilterUpcomingAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, filters.getUpcomingFilterDetails(), expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        userInput \u003d PREFIX_DOCTOR + \"John   Doe\"; // More than 1 white space","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"    public void parse_noFieldSpecified_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        // Should show all appointments","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        AppointmentFilters filters \u003d new AppointmentFiltersBuilder().withUpcoming().build();","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        FilterUpcomingAppointmentCommand expectedCommand \u003d new FilterUpcomingAppointmentCommand(filters);","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, \"\", expectedCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Haozeee":88,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/logic/parser/deletecommandparser/DeleteDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.deletecommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeleteDoctorCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"public class DeleteDoctorCommandParserTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    private DeleteDoctorCommandParser parser \u003d new DeleteDoctorCommandParser();","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, \"1\", new DeleteDoctorCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"Haozeee":25,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/deletecommandparser/DeletePatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.deletecommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.deletecommand.DeletePatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":" * outside of the DeletePatientCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":" * same path through the DeletePatientCommand, and therefore we test only one of them.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"public class DeletePatientCommandParserTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private DeletePatientCommandParser parser \u003d new DeletePatientCommandParser();","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        assertParseSuccess(parser, \"1\", new DeletePatientCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"Haozeee":2,"jiayi1129":31}},{"path":"src/test/java/seedu/plannermd/logic/parser/editcommandparser/EditDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.editcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.BIRTH_DATE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.BIRTH_DATE_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_BIRTH_DATE_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"public class EditDoctorCommandParserTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDoctorCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"    private final EditDoctorCommandParser parser \u003d new EditDoctorCommandParser();","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        // no index specified","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        // no field specified","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\", EditDoctorCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        // no index and no field specified","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        // negative index","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        // zero index","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_BIRTH_DATE_DESC, BirthDate.MESSAGE_CONSTRAINTS); //invalid birth date","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTH_DATE_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"                .withBirthDate(VALID_BIRTH_DATE_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"pualixue"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"pualixue"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"pualixue"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"pualixue"},"content":"        // name","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"pualixue"},"content":"                new EditDoctorDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"pualixue"},"content":"        // phone","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"pualixue"},"content":"        // email","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"pualixue"},"content":"        // address","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"pualixue"},"content":"        // birthdate","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + BIRTH_DATE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder().withBirthDate(VALID_BIRTH_DATE_AMY).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"pualixue"},"content":"        // tags","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"pualixue"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"pualixue"},"content":"                + BIRTH_DATE_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"pualixue"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + BIRTH_DATE_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"pualixue"},"content":"                + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"pualixue"},"content":"                new EditDoctorDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"pualixue"},"content":"                        .withAddress(VALID_ADDRESS_BOB).withBirthDate(VALID_BIRTH_DATE_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"pualixue"},"content":"                        .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":194,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":195,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":196,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":197,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":198,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":199,"author":{"gitId":"pualixue"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":200,"author":{"gitId":"pualixue"},"content":"        // no other valid values specified","lastModifiedDate":"2021-10-10"},{"lineNumber":201,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":202,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":203,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":204,"author":{"gitId":"pualixue"},"content":"                new EditDoctorDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":205,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":208,"author":{"gitId":"pualixue"},"content":"        // other valid values specified","lastModifiedDate":"2021-10-10"},{"lineNumber":209,"author":{"gitId":"pualixue"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":210,"author":{"gitId":"pualixue"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":211,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":212,"author":{"gitId":"pualixue"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":213,"author":{"gitId":"pualixue"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":214,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":215,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":216,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":217,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"pualixue"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":219,"author":{"gitId":"pualixue"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":220,"author":{"gitId":"pualixue"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":221,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":222,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder().withTags().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":223,"author":{"gitId":"pualixue"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":224,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":225,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":226,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":227,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"pualixue":225,"ChuangZheQuan":1,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/editcommandparser/EditPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.editcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.BIRTH_DATE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-02"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_BIRTH_DATE_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-02"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-02"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-02"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.RISK_DESC_AMY;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-02"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-02"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-02"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-02"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_RISK_AMY;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-02"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-02"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_RISK;","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.model.patient.Risk.UNCLASSIFIED_RISK;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-02"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-02"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-02"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-02"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"public class EditPatientCommandParserTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    private static final String RISK_EMPTY \u003d \" \" + PREFIX_RISK;","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        assertParseFailure(parser, \"1\", EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"        assertParseFailure(parser, \"1\" + INVALID_BIRTH_DATE_DESC, BirthDate.MESSAGE_CONSTRAINTS); //invalid birth date","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"        // birth date","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"        userInput \u003d targetIndex.getOneBased() + BIRTH_DATE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withBirthDate(VALID_BIRTH_DATE_AMY).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"        // risk","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"        userInput \u003d targetIndex.getOneBased() + RISK_DESC_AMY;","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withRisk(VALID_RISK_AMY).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"jiayi1129"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":210,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand.EditPatientDescriptor descriptor \u003d","lastModifiedDate":"2021-09-30"},{"lineNumber":211,"author":{"gitId":"jiayi1129"},"content":"                new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":218,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":220,"author":{"gitId":"jiayi1129"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withTags().build();","lastModifiedDate":"2021-10-09"},{"lineNumber":230,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"    public void parse_resetRisk_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":237,"author":{"gitId":"jiayi1129"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":238,"author":{"gitId":"jiayi1129"},"content":"        String userInput \u003d targetIndex.getOneBased() + RISK_EMPTY;","lastModifiedDate":"2021-10-09"},{"lineNumber":239,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":240,"author":{"gitId":"jiayi1129"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withRisk(UNCLASSIFIED_RISK).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":241,"author":{"gitId":"jiayi1129"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"pualixue":2,"ChuangZheQuan":30,"-":149,"jiayi1129":64}},{"path":"src/test/java/seedu/plannermd/logic/parser/findcommandparser/FindDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.findcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.logic.commands.findcommand.FindDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"class FindDoctorCommandParserTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    private FindDoctorCommandParser parser \u003d new FindDoctorCommandParser();","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"        FindDoctorCommand expectedFindDoctorCommand \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"                new FindDoctorCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindDoctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindDoctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":11,"jiayi1129":23}},{"path":"src/test/java/seedu/plannermd/logic/parser/findcommandparser/FindPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.findcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.findcommand.FindPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"public class FindPatientCommandParserTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    private FindPatientCommandParser parser \u003d new FindPatientCommandParser();","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        FindPatientCommand expectedFindPatientCommand \u003d","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"                new FindPatientCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindPatientCommand);","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPatientCommand);","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":2,"jiayi1129":32}},{"path":"src/test/java/seedu/plannermd/logic/parser/remarkcommandparser/RemarkDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.remarkcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkDoctorCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"public class RemarkDoctorCommandParserTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkDoctorCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private RemarkDoctorCommandParser parser \u003d new RemarkDoctorCommandParser();","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"    public void parse_validArgs_returnsRemarkCommand() {","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"        //Non-empty remark","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"        assertParseSuccess(parser, \"1\" + REMARK_DESC_AMY,","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"                new RemarkDoctorCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY)));","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"        //empty remark","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, \"1 \" + PREFIX_REMARK,","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"                new RemarkDoctorCommand(INDEX_FIRST_PERSON, new Remark(\"\")));","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"        //remark not prefiexed with delimitter","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"1 \" + VALID_REMARK_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"        //remark prefiexed with invalid delimitter","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"1 i/\" + VALID_REMARK_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"    public void parse_missingFields_throwsParseException() {","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"        // no remark specified","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        // no index specified","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"        // no index and no remark specified","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"    public void parse_invalidIndex_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"        // negative index","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"-5\" + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        // zero index","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"0\" + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"hpkoh":54,"Haozeee":8,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/remarkcommandparser/RemarkPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.remarkcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.remarkcommand.RemarkPatientCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"class RemarkPatientCommandParserTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private RemarkPatientCommandParser parser \u003d new RemarkPatientCommandParser();","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"    public void parse_validArgs_returnsRemarkCommand() {","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"        //Non-empty remark","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"        assertParseSuccess(parser, \"1\" + REMARK_DESC_AMY,","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"                new RemarkPatientCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY)));","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"        //empty remark","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, \"1 \" + PREFIX_REMARK,","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"                new RemarkPatientCommand(INDEX_FIRST_PERSON, new Remark(\"\")));","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"        //remark not prefiexed with delimitter","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"1 \" + VALID_REMARK_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"        //remark prefiexed with invalid delimitter","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"1 i/\" + VALID_REMARK_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"    public void parse_missingFields_throwsParseException() {","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"        // no remark specified","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        // no index specified","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"hpkoh"},"content":"        // no index and no remark specified","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"    public void parse_invalidIndex_failure() {","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"hpkoh"},"content":"        // negative index","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"-5\" + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        // zero index","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"0\" + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"hpkoh":54,"Haozeee":8,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/tagcommandparser/TagDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.tagcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.tagcommand.TagCommand.TOO_MANY_TAGS_MESSAGE;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_DELETE;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.AddDoctorTagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeleteDoctorTagCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"class TagDoctorCommandParserTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"            AddDoctorTagCommand.MESSAGE_USAGE + \"\\n\" + DeleteDoctorTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"    private static final String VALID_TAG \u003d \"tag1\";","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"    private static final String INVALID_TAG \u003d \"!@#\";","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private final TagDoctorCommandParser parser \u003d new TagDoctorCommandParser();","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"    void parse_addIndexAndTagSpecified_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"        Index index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"        String userInput \u003d FLAG_ADD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG + VALID_TAG;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        AddDoctorTagCommand addDoctorTagCommand \u003d new AddDoctorTagCommand(index, new Tag(VALID_TAG));","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, addDoctorTagCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    void parse_addMissingFields_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        // missing index","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + PREFIX_TAG + VALID_TAG, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        // missing tag","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + INDEX_FIRST_PERSON.getOneBased(),","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"                AddDoctorTagCommand.MESSAGE_NOT_ADDED);","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"        // missing both index and tag","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    void parse_addMultipleTags_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"                + PREFIX_TAG + VALID_TAG + \" \" + PREFIX_TAG + \"test\", TOO_MANY_TAGS_MESSAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"    void parse_addInvalidValues_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        // invalid index","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + \"-1 \" + PREFIX_TAG + VALID_TAG, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + \"a \" + PREFIX_TAG + VALID_TAG, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        // invalid tag","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"                        + \" \" + PREFIX_TAG + INVALID_TAG,","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"    void parse_deleteIndexAndTagSpecified_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        Index index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        String userInput \u003d FLAG_DELETE + \" \" + index.getOneBased() + \" \" + PREFIX_TAG + VALID_TAG;","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        DeleteDoctorTagCommand deleteDoctorTagCommand \u003d new DeleteDoctorTagCommand(index, new Tag(VALID_TAG));","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        assertParseSuccess(parser, userInput, deleteDoctorTagCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"    void parse_deleteMissingFields_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"        // missing index","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"        // missing tag","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + INDEX_FIRST_PERSON.getOneBased(),","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"                AddDoctorTagCommand.MESSAGE_NOT_ADDED);","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        // missing both index and tag","lastModifiedDate":"2021-09-30"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, FLAG_DELETE.toString(), MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"    void parse_deleteInvalidValues_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"        // invalid index","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + \"-1 \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + \"a \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"        // invalid tag","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"                        + \" \" + PREFIX_TAG + INVALID_TAG,","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"    void parse_deleteMultipleTags_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"                + \" \" + PREFIX_TAG + VALID_TAG + \" \" + PREFIX_TAG + \"test\", TOO_MANY_TAGS_MESSAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"hpkoh"},"content":"    void parse_invalidFlag_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"1 \" + INDEX_FIRST_PERSON + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":117,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"d \" + INDEX_FIRST_PERSON + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"-z \" + INDEX_FIRST_PERSON + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":123,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"random string \" + INDEX_FIRST_PERSON","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"                        + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-09-30"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"Haozeee":23,"hpkoh":20,"pualixue":83,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/logic/parser/tagcommandparser/TagPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.logic.parser.tagcommandparser;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.logic.commands.tagcommand.TagCommand.TOO_MANY_TAGS_MESSAGE;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_ADD;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.FLAG_DELETE;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.tagcommand.AddPatientTagCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.tagcommand.DeletePatientTagCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"class TagPatientCommandParserTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"            AddPatientTagCommand.MESSAGE_USAGE + \"\\n\" + DeletePatientTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"    private static final String VALID_TAG \u003d \"tag1\";","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"    private static final String INVALID_TAG \u003d \"!@#\";","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private final TagPatientCommandParser parser \u003d new TagPatientCommandParser();","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"    void parse_addIndexAndTagSpecified_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"        Index index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"        String userInput \u003d FLAG_ADD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG + VALID_TAG;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"        AddPatientTagCommand addPatientTagCommand \u003d new AddPatientTagCommand(index, new Tag(VALID_TAG));","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, addPatientTagCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    void parse_addMissingFields_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        // missing index","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + PREFIX_TAG + VALID_TAG, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        // missing tag","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + INDEX_FIRST_PERSON.getOneBased(),","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"                AddPatientTagCommand.MESSAGE_NOT_ADDED);","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"        // missing both index and tag","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    void parse_addMultipleTags_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"                + PREFIX_TAG + VALID_TAG + \" \" + PREFIX_TAG + \"test\", TOO_MANY_TAGS_MESSAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"    void parse_addInvalidValues_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        // invalid index","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + \"-1 \" + PREFIX_TAG + VALID_TAG, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + \"a \" + PREFIX_TAG + VALID_TAG, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        // invalid tag","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_ADD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"                        + \" \" + PREFIX_TAG + INVALID_TAG,","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"    void parse_deleteIndexAndTagSpecified_success() {","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        Index index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        String userInput \u003d FLAG_DELETE + \" \" + index.getOneBased() + \" \" + PREFIX_TAG + VALID_TAG;","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        DeletePatientTagCommand deletePatientTagCommand \u003d new DeletePatientTagCommand(index, new Tag(VALID_TAG));","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        assertParseSuccess(parser, userInput, deletePatientTagCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"    void parse_deleteMissingFields_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"        // missing index","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"        // missing tag","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + INDEX_FIRST_PERSON.getOneBased(),","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"                AddPatientTagCommand.MESSAGE_NOT_ADDED);","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        // missing both index and tag","lastModifiedDate":"2021-09-30"},{"lineNumber":89,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"    void parse_deleteInvalidValues_failure() {","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"        // invalid index","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + \"-1 \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + \"a \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"        // invalid tag","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"                        + \" \" + PREFIX_TAG + INVALID_TAG,","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"    void parse_deleteMultipleTags_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, FLAG_DELETE + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"                + \" \" + PREFIX_TAG + VALID_TAG + \" \" + PREFIX_TAG + \"test\", TOO_MANY_TAGS_MESSAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"hpkoh"},"content":"    void parse_invalidFlag_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"1 \" + INDEX_FIRST_PERSON + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":117,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"d \" + INDEX_FIRST_PERSON + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":119,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"-z \" + INDEX_FIRST_PERSON + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":123,"author":{"gitId":"hpkoh"},"content":"        assertParseFailure(parser, \"random string \" + INDEX_FIRST_PERSON","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"pualixue"},"content":"                        + \" \" + PREFIX_TAG + VALID_TAG,","lastModifiedDate":"2021-09-30"},{"lineNumber":125,"author":{"gitId":"pualixue"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":126,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"Haozeee":14,"hpkoh":21,"pualixue":91,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.ANOTHER_TWO_HOUR_APPOINTMENT;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.TWO_HOUR_APPOINTMENT;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_ALICE;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_BENSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.BENSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.Model.State;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.PlannerMdBuilder;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"hpkoh"},"content":"        assertEquals(State.PATIENT, modelManager.getState());","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(new PlannerMd(), new PlannerMd(modelManager.getPlannerMd()));","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        userPrefs.setPlannerMdFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        userPrefs.setPlannerMdFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"    public void setPlannerMdFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPlannerMdFilePath(null));","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    public void setPlannerMdFilePath_validPath_setsPlannerMdFilePath() {","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"        modelManager.setPlannerMdFilePath(path);","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(path, modelManager.getPlannerMdFilePath());","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasDoctor(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    public void hasPerson_personNotInPlannerMd_returnsFalse() {","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(modelManager.hasPatient(ALICE));","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"hpkoh"},"content":"        assertFalse(modelManager.hasDoctor(DR_ALICE));","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    public void hasPerson_personInPlannerMd_returnsTrue() {","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"        modelManager.addPatient(ALICE);","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(modelManager.hasPatient(ALICE));","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"hpkoh"},"content":"        modelManager.addDoctor(DR_ALICE);","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"hpkoh"},"content":"        assertTrue(modelManager.hasDoctor(DR_ALICE));","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"    public void deleteDoctor_doesNotDeletePatientWithSameName_returnsTrue() {","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        modelManager.addPatient(ALICE);","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"        modelManager.addDoctor(DR_ALICE);","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        modelManager.deleteDoctor(DR_ALICE);","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"        assertFalse(modelManager.hasDoctor(DR_ALICE));","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        assertTrue(modelManager.hasPatient(ALICE));","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"    public void deletePatient_doesNotDeleteDoctorWithSameName_returnsTrue() {","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"        modelManager.addPatient(ALICE);","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"        modelManager.addDoctor(DR_ALICE);","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        modelManager.deletePatient(ALICE);","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"        assertFalse(modelManager.hasPatient(ALICE));","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"        assertTrue(modelManager.hasDoctor(DR_ALICE));","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"hpkoh"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDoctorList().remove(0));","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-17"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2021-10-17"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":140,"author":{"gitId":"hpkoh"},"content":"    public void deleteAppointmentsWithPerson_deletePerson_appointmentsDeleted() {","lastModifiedDate":"2021-10-23"},{"lineNumber":141,"author":{"gitId":"hpkoh"},"content":"        modelManager.addAppointment(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"hpkoh"},"content":"        modelManager.addAppointment(ANOTHER_TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"hpkoh"},"content":"        modelManager.deleteAppointmentsWithPerson(ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"hpkoh"},"content":"        assertFalse(modelManager.hasAppointment(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"hpkoh"},"content":"        modelManager.deleteAppointmentsWithPerson(DR_ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"hpkoh"},"content":"        assertFalse(modelManager.hasAppointment(ANOTHER_TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":151,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":152,"author":{"gitId":"hpkoh"},"content":"    public void editAppointmentsWithPerson_editPerson_appointmentsEdited() {","lastModifiedDate":"2021-10-23"},{"lineNumber":153,"author":{"gitId":"hpkoh"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"hpkoh"},"content":"        Appointment editedPatientAppointment \u003d new AppointmentBuilder(TWO_HOUR_APPOINTMENT).withPatient(editedAlice)","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"hpkoh"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(DR_ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"hpkoh"},"content":"        Appointment editedDoctorAppointment \u003d new AppointmentBuilder(ANOTHER_TWO_HOUR_APPOINTMENT)","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"hpkoh"},"content":"                .withDoctor(editedDoctor).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"hpkoh"},"content":"        modelManager.addAppointment(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"hpkoh"},"content":"        modelManager.addAppointment(ANOTHER_TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"hpkoh"},"content":"        modelManager.editAppointmentsWithPerson(ALICE, editedAlice);","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"hpkoh"},"content":"        assertTrue(modelManager.hasAppointment(editedPatientAppointment));","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"hpkoh"},"content":"        assertFalse(modelManager.hasAppointment(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"hpkoh"},"content":"        modelManager.editAppointmentsWithPerson(DR_ALICE, editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"hpkoh"},"content":"        assertTrue(modelManager.hasAppointment(editedDoctorAppointment));","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"hpkoh"},"content":"        assertFalse(modelManager.hasAppointment(ANOTHER_TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":176,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":179,"author":{"gitId":"hpkoh"},"content":"        PlannerMd plannerMd \u003d new PlannerMdBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"hpkoh"},"content":"                .withPatient(ALICE).withPatient(BENSON)","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"hpkoh"},"content":"                .withDoctor(DR_ALICE).withDoctor(DR_BENSON).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":182,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd differentPlannerMd \u003d new PlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"jiayi1129"},"content":"        modelManager \u003d new ModelManager(plannerMd, userPrefs);","lastModifiedDate":"2021-09-26"},{"lineNumber":188,"author":{"gitId":"jiayi1129"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(plannerMd, userPrefs);","lastModifiedDate":"2021-09-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"        // different plannerMd -\u003e returns false","lastModifiedDate":"2021-09-26"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentPlannerMd, userPrefs)));","lastModifiedDate":"2021-09-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":203,"author":{"gitId":"hpkoh"},"content":"        // different filteredPatientList -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-09-29"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(modelManager.equals(new ModelManager(plannerMd, userPrefs)));","lastModifiedDate":"2021-09-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":209,"author":{"gitId":"hpkoh"},"content":"        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":211,"author":{"gitId":"hpkoh"},"content":"        // different filteredDoctorList -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":212,"author":{"gitId":"hpkoh"},"content":"        String[] keywordsDoctor \u003d DR_ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-10-09"},{"lineNumber":213,"author":{"gitId":"hpkoh"},"content":"        modelManager.updateFilteredDoctorList(new NameContainsKeywordsPredicate(Arrays.asList(keywordsDoctor)));","lastModifiedDate":"2021-10-09"},{"lineNumber":214,"author":{"gitId":"hpkoh"},"content":"        assertFalse(modelManager.equals(new ModelManager(plannerMd, userPrefs)));","lastModifiedDate":"2021-10-09"},{"lineNumber":215,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":216,"author":{"gitId":"hpkoh"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2021-10-07"},{"lineNumber":217,"author":{"gitId":"hpkoh"},"content":"        modelManager.updateFilteredDoctorList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":218,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"jiayi1129"},"content":"        differentUserPrefs.setPlannerMdFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":222,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(modelManager.equals(new ModelManager(plannerMd, differentUserPrefs)));","lastModifiedDate":"2021-09-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"hpkoh":72,"Haozeee":21,"-":95,"jiayi1129":36}},{"path":"src/test/java/seedu/plannermd/model/PlannerMdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.ANOTHER_TWO_HOUR_APPOINTMENT;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.TWO_HOUR_APPOINTMENT;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_ALICE;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import java.util.Collection;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"public class PlannerMdTest {","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    private final PlannerMd plannerMd \u003d new PlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    public void constructor() {","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(Collections.emptyList(), plannerMd.getPatientList());","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"        assertEquals(Collections.emptyList(), plannerMd.getDoctorList());","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"hpkoh"},"content":"        assertEquals(Collections.emptyList(), plannerMd.getAppointmentList());","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e plannerMd.resetData(null));","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    public void resetData_withValidReadOnlyPlannerMd_replacesData() {","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd newData \u003d getTypicalPlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.resetData(newData);","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(newData, plannerMd);","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"    public void resetData_withDuplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"                .build();","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"        PlannerMdStub newData \u003d new PlannerMdStub().setPatients(newPatients);","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e plannerMd.resetData(newData));","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"hpkoh"},"content":"        // Two doctors with the same identity fields","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"hpkoh"},"content":"        Doctor editedDoctorAlice \u003d new DoctorBuilder(DR_ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"hpkoh"},"content":"                .withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"hpkoh"},"content":"        List\u003cDoctor\u003e newDoctors \u003d Arrays.asList(DR_ALICE, editedDoctorAlice);","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        PlannerMdStub newDoctorData \u003d new PlannerMdStub().setDoctors(newDoctors);","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"hpkoh"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e plannerMd.resetData(newDoctorData));","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e plannerMd.hasPatient(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e plannerMd.hasDoctor(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    public void hasPerson_personNotInPlannerMd_returnsFalse() {","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(plannerMd.hasPatient(ALICE));","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"hpkoh"},"content":"        assertFalse(plannerMd.hasDoctor(DR_ALICE));","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    public void hasPerson_personInPlannerMd_returnsTrue() {","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addPatient(ALICE);","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(plannerMd.hasPatient(ALICE));","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"hpkoh"},"content":"        plannerMd.addDoctor(DR_ALICE);","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"hpkoh"},"content":"        assertTrue(plannerMd.hasDoctor(DR_ALICE));","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    public void hasPerson_personWithSameIdentityFieldsInPlannerMd_returnsTrue() {","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addPatient(ALICE);","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"                .build();","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(plannerMd.hasPatient(editedAlice));","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"hpkoh"},"content":"        plannerMd.addDoctor(DR_ALICE);","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"hpkoh"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(DR_ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"hpkoh"},"content":"        assertTrue(plannerMd.hasDoctor(editedDoctor));","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e plannerMd.getPatientList().remove(0));","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"hpkoh"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e plannerMd.getDoctorList().remove(0));","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"hpkoh"},"content":"    public void deleteAppointmentsWithPerson_deletePerson_appointmentsDeleted() {","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"hpkoh"},"content":"        plannerMd.addAppointment(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"hpkoh"},"content":"        plannerMd.addAppointment(ANOTHER_TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"hpkoh"},"content":"        plannerMd.deleteAppointmentsWithPerson(ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"hpkoh"},"content":"        assertFalse(plannerMd.hasAppointment(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"hpkoh"},"content":"        plannerMd.deleteAppointmentsWithPerson(DR_ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"hpkoh"},"content":"        assertFalse(plannerMd.hasAppointment(ANOTHER_TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":131,"author":{"gitId":"hpkoh"},"content":"    public void editAppointmentsWithPerson_editPerson_appointmentsEdited() {","lastModifiedDate":"2021-10-23"},{"lineNumber":132,"author":{"gitId":"hpkoh"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"hpkoh"},"content":"        Appointment editedPatientAppointment \u003d new AppointmentBuilder(TWO_HOUR_APPOINTMENT).withPatient(editedAlice)","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"hpkoh"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(DR_ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"        Appointment editedDoctorAppointment \u003d new AppointmentBuilder(ANOTHER_TWO_HOUR_APPOINTMENT)","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"hpkoh"},"content":"                .withDoctor(editedDoctor).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"hpkoh"},"content":"        plannerMd.addAppointment(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"hpkoh"},"content":"        plannerMd.editAppointmentsWithPerson(ALICE, editedAlice);","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"hpkoh"},"content":"        assertTrue(plannerMd.hasAppointment(editedPatientAppointment));","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"hpkoh"},"content":"        assertFalse(plannerMd.hasAppointment(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"hpkoh"},"content":"        plannerMd.addAppointment(ANOTHER_TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"hpkoh"},"content":"        plannerMd.editAppointmentsWithPerson(DR_ALICE, editedDoctor);","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"hpkoh"},"content":"        assertTrue(plannerMd.hasAppointment(editedDoctorAppointment));","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"hpkoh"},"content":"        assertFalse(plannerMd.hasAppointment(ANOTHER_TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"    void hasExactPatient_patientNotInPlannerMd_returnsEmpty() {","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(plannerMd.getExactPatient(ALICE).isEmpty());","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"    void hasExactPatient_patientInPlannerMd_returnsPatient() {","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addPatient(ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(plannerMd.getExactPatient(ALICE).isPresent());","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"    void hasExactPatient_patientWithSameIdentityFieldsInPlannerMd_returnsEmpty() {","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addPatient(ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(plannerMd.getExactPatient(editedAlice).isEmpty());","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"    void hasExactDoctor_doctorNotInPlannerMd_returnsEmpty() {","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(plannerMd.getExactDoctor(DR_ALICE).isEmpty());","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"    void hasExactDoctor_doctorInPlannerMd_returnsDoctor() {","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addDoctor(DR_ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(plannerMd.getExactDoctor(DR_ALICE).isPresent());","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"    void hasExactDoctor_doctorWithSameIdentityFieldsInPlannerMd_returnsEmpty() {","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addDoctor(DR_ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"jiayi1129"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(DR_ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"jiayi1129"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(plannerMd.getExactDoctor(editedDoctor).isEmpty());","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"     * A stub ReadOnlyPlannerMd whose persons list can violate interface constraints.","lastModifiedDate":"2021-09-26"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"    private static class PlannerMdStub implements ReadOnlyPlannerMd {","lastModifiedDate":"2021-09-26"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-09-30"},{"lineNumber":197,"author":{"gitId":"hpkoh"},"content":"        private final ObservableList\u003cDoctor\u003e doctors \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-07"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":200,"author":{"gitId":"hpkoh"},"content":"        PlannerMdStub() {","lastModifiedDate":"2021-10-07"},{"lineNumber":201,"author":{"gitId":"hpkoh"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2021-10-07"},{"lineNumber":202,"author":{"gitId":"hpkoh"},"content":"            this.doctors.setAll(doctors);","lastModifiedDate":"2021-10-07"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"            this.appointments.setAll(appointments);","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":206,"author":{"gitId":"hpkoh"},"content":"        public PlannerMdStub setPatients(Collection\u003cPatient\u003e patients) {","lastModifiedDate":"2021-10-07"},{"lineNumber":207,"author":{"gitId":"hpkoh"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2021-10-07"},{"lineNumber":208,"author":{"gitId":"hpkoh"},"content":"            return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":209,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":210,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":211,"author":{"gitId":"hpkoh"},"content":"        public PlannerMdStub setDoctors(Collection\u003cDoctor\u003e doctors) {","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"hpkoh"},"content":"            this.doctors.setAll(doctors);","lastModifiedDate":"2021-10-09"},{"lineNumber":213,"author":{"gitId":"hpkoh"},"content":"            return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":214,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":215,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":216,"author":{"gitId":"jiayi1129"},"content":"        public PlannerMdStub setAppointments(Collection\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-17"},{"lineNumber":217,"author":{"gitId":"jiayi1129"},"content":"            this.appointments.setAll(appointments);","lastModifiedDate":"2021-10-17"},{"lineNumber":218,"author":{"gitId":"jiayi1129"},"content":"            return this;","lastModifiedDate":"2021-10-17"},{"lineNumber":219,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":220,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":221,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":222,"author":{"gitId":"jiayi1129"},"content":"        public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":223,"author":{"gitId":"jiayi1129"},"content":"            return patients;","lastModifiedDate":"2021-09-30"},{"lineNumber":224,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":225,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":226,"author":{"gitId":"hpkoh"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":227,"author":{"gitId":"hpkoh"},"content":"        public ObservableList\u003cDoctor\u003e getDoctorList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":228,"author":{"gitId":"hpkoh"},"content":"            return doctors;","lastModifiedDate":"2021-10-07"},{"lineNumber":229,"author":{"gitId":"hpkoh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":230,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":231,"author":{"gitId":"jiayi1129"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":232,"author":{"gitId":"jiayi1129"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2021-10-17"},{"lineNumber":233,"author":{"gitId":"jiayi1129"},"content":"            return appointments;","lastModifiedDate":"2021-10-17"},{"lineNumber":234,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":235,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":236,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"hpkoh":89,"jiayi1129":147}},{"path":"src/test/java/seedu/plannermd/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    public void setPlannerMdFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPlannerMdFilePath(null));","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"-":17,"jiayi1129":4}},{"path":"src/test/java/seedu/plannermd/model/appointment/AppointmentContainsDoctorPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"public class AppointmentContainsDoctorPredicateTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsDoctorPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsDoctorPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsDoctorPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsDoctorPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstPredicate, firstPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsDoctorPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsDoctorPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstPredicateCopy, firstPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        // different types -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, 1);","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(new AppointmentContainsPatientPredicate(firstPredicateKeywordList), firstPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, null);","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        // different person -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, secondPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    public void test_nullKeywords_throwsException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentContainsDoctorPredicate(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"    public void test_appointmentContainsDoctor_returnsTrue() {","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        // One keyword","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsDoctorPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsDoctorPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        Doctor doctor \u003d new DoctorBuilder().withName(\"Alice Bob\").build();","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDoctor(doctor).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsDoctorPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDoctor(doctor).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        // Only one matching keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsDoctorPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDoctor(doctor).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsDoctorPredicate(Arrays.asList(\"BOB\", \"aliCe\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDoctor(doctor).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"    public void test_appointmentDoesNotContainDoctor_returnsFalse() {","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsDoctorPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsDoctorPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        Doctor doctor \u003d new DoctorBuilder().withName(\"Alice Bob\").build();","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withDoctor(doctor).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        // Non-matching keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsDoctorPredicate(Collections.singletonList(\"John\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withDoctor(doctor).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsDoctorPredicate(Arrays.asList(\"12345\",","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"                \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        doctor \u003d new DoctorBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build();","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withDoctor(doctor).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Haozeee":98}},{"path":"src/test/java/seedu/plannermd/model/appointment/AppointmentContainsPatientPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"public class AppointmentContainsPatientPredicateTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsPatientPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsPatientPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsPatientPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsPatientPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstPredicate, firstPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        // same values -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsPatientPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsPatientPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstPredicateCopy, firstPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        // different types -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, 1);","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(new AppointmentContainsDoctorPredicate(firstPredicateKeywordList), firstPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        // null -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, null);","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        // different person -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, secondPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    public void test_nullKeywords_throwsException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentContainsPatientPredicate(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"    public void test_appointmentContainsPatient_returnsTrue() {","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        // One keyword","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsPatientPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsPatientPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        Patient patient \u003d new PatientBuilder().withName(\"Alice Bob\").build();","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withPatient(patient).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsPatientPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withPatient(patient).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        // Only one matching keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsPatientPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withPatient(patient).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsPatientPredicate(Arrays.asList(\"BOB\", \"aliCe\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withPatient(patient).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"    public void test_appointmentDoesNotContainPatient_returnsFalse() {","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        AppointmentContainsPatientPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"                new AppointmentContainsPatientPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        Patient patient \u003d new PatientBuilder().withName(\"Alice Bob\").build();","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withPatient(patient).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        // Non-matching keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsPatientPredicate(Collections.singletonList(\"John\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withPatient(patient).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        predicate \u003d new AppointmentContainsPatientPredicate(Arrays.asList(\"12345\",","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"                \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        patient \u003d new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build();","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withPatient(patient).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Haozeee":98}},{"path":"src/test/java/seedu/plannermd/model/appointment/AppointmentDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"class AppointmentDateTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"    private final String validDate \u003d \"31/12/2022\";","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"    private final String invalidDate \u003d \"31-12-2021\";","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentDate(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AppointmentDate(invalidDate));","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    public void isValidAppointmentDate_validDate_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"        assertTrue(AppointmentDate.isValidAppointmentDate(validDate));","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"    public void isValidAppointmentDate_invalidDate_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"        assertFalse(AppointmentDate.isValidAppointmentDate(invalidDate));","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        assertFalse(AppointmentDate.isValidAppointmentDate(\"abc123\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"    public void isValidAppointmentDate_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppointmentDate.isValidAppointmentDate(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    public void isEqualDate_equalDates_returnsTrue() {","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(new AppointmentDate(validDate).isEqualDate(new AppointmentDate(validDate)));","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    public void isEqualDate_notEqualDates_returnsFalse() {","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        String otherDate \u003d \"31/12/2030\";","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(new AppointmentDate(validDate).isEqualDate(new AppointmentDate(otherDate)));","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"        final AppointmentDate appointmentDate \u003d new AppointmentDate(validDate);","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        AppointmentDate copyAppointmentDate \u003d new AppointmentDate(validDate);","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"        assertEquals(appointmentDate, copyAppointmentDate);","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        assertEquals(appointmentDate, appointmentDate);","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(null, appointmentDate);","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(appointmentDate, new ClearCommand());","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(appointmentDate, new AppointmentDate(\"1/1/2023\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"    public void compareTo() {","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"        String date \u003d \"10/10/2040\";","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        String dateBefore \u003d \"10/10/2030\";","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        String dateAfter \u003d \"10/10/2050\";","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        AppointmentDate appointmentDate \u003d new AppointmentDate(date);","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        AppointmentDate otherAppointmentDate;","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"        otherAppointmentDate \u003d new AppointmentDate(date);","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(appointmentDate.compareTo(otherAppointmentDate), 0);","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"        otherAppointmentDate \u003d new AppointmentDate(dateAfter);","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(appointmentDate.compareTo(otherAppointmentDate) \u003c 0);","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"        otherAppointmentDate \u003d new AppointmentDate(dateBefore);","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(appointmentDate.compareTo(otherAppointmentDate) \u003e 0);","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"Haozeee":1,"pualixue":64,"jiayi1129":29}},{"path":"src/test/java/seedu/plannermd/model/appointment/AppointmentIsAfterPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"public class AppointmentIsAfterPredicateTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"        LocalDate firstDate \u003d LocalDate.now();","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"        LocalDate secondDate \u003d LocalDate.now().minusDays(1);","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsAfterPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"                new AppointmentIsAfterPredicate(firstDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsAfterPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"                new AppointmentIsAfterPredicate(secondDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstPredicate, firstPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        // Same values -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsAfterPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"                new AppointmentIsAfterPredicate(firstDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstPredicate, firstPredicateCopy);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        // Different values -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, secondPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        // Different types -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, firstDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, new AppointmentIsBeforePredicate(firstDate));","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        // Null -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstDate, null);","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    public void test_nullKeywords_throwsException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentIsAfterPredicate((LocalDate) null));","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentIsAfterPredicate((LocalDateTime) null));","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    public void test_appointmentIsAfter_returnsTrue() {","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        LocalDate sampleDate \u003d LocalDate.of(2021, 10, 20);","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        LocalDateTime sampleDateTime \u003d LocalDateTime.of(2021, 10, 20, 18, 30);","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsAfterPredicate datePredicate \u003d new AppointmentIsAfterPredicate(sampleDate);","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsAfterPredicate dateTimePredicate \u003d new AppointmentIsAfterPredicate(sampleDateTime);","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the same date as the filter start date -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        assertTrue(datePredicate.test(new AppointmentBuilder().withDate(\"20/10/2021\").build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the same date as the filter start date with same start time -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        assertTrue(datePredicate.test(new AppointmentBuilder().withDate(\"20/10/2021\")","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"                .withSession(\"00:00\", 5).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        assertTrue(dateTimePredicate.test(new AppointmentBuilder().withDate(\"20/10/2021\")","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"                .withSession(\"18:30\", 15).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the same date as the filter start time but is at a later timing -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        assertTrue(dateTimePredicate.test(new AppointmentBuilder().withDate(\"20/10/2021\")","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"                .withSession(\"18:31\", 5).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the next day compared to the filter start date -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        assertTrue(datePredicate.test(new AppointmentBuilder().withDate(\"21/10/2021\").build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"    public void test_appointmentIsNotAfter_returnsFalse() {","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        LocalDate sampleDate \u003d LocalDate.of(2021, 10, 20);","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        LocalDateTime sampleDateTime \u003d LocalDateTime.of(2021, 10, 20, 18, 30);","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsAfterPredicate datePredicate \u003d new AppointmentIsAfterPredicate(sampleDate);","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsAfterPredicate dateTimePredicate \u003d new AppointmentIsAfterPredicate(sampleDateTime);","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the previous date","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        assertFalse(datePredicate.test(new AppointmentBuilder().withDate(\"19/10/2021\").build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the same date as the filter start date with an earlier start time -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        assertFalse(datePredicate.test(new AppointmentBuilder().withDate(\"19/10/2021\")","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"                .withSession(\"23:59\", 5).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        assertFalse(dateTimePredicate.test(new AppointmentBuilder().withDate(\"20/10/2021\")","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"                .withSession(\"18:29\", 15).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Haozeee":96}},{"path":"src/test/java/seedu/plannermd/model/appointment/AppointmentIsBeforePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"public class AppointmentIsBeforePredicateTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    public void equals() {","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        LocalDate firstDate \u003d LocalDate.now();","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"        LocalDate secondDate \u003d LocalDate.now().minusDays(1);","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsBeforePredicate firstPredicate \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"                new AppointmentIsBeforePredicate(firstDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsBeforePredicate secondPredicate \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"                new AppointmentIsBeforePredicate(secondDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        // same object -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstPredicate, firstPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        // Same values -\u003e equals","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsBeforePredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"                new AppointmentIsBeforePredicate(firstDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        assertEquals(firstPredicate, firstPredicateCopy);","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        // Different values -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, secondPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        // Different types -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, firstDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstPredicate, new AppointmentIsAfterPredicate(firstDate));","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        // Null -\u003e not equals","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        assertNotEquals(firstDate, null);","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    public void test_nullKeywords_throwsException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentIsBeforePredicate(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    public void test_appointmentIsBefore_returnsTrue() {","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        LocalDate sampleDate \u003d LocalDate.of(2021, 10, 20);","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsBeforePredicate datePredicate \u003d new AppointmentIsBeforePredicate(sampleDate);","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the same date as the filter end date -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        assertTrue(datePredicate.test(new AppointmentBuilder().withDate(\"20/10/2021\").build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the same date as the filter end date and has start time 23:59 -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        assertTrue(datePredicate.test(new AppointmentBuilder().withDate(\"20/10/2021\")","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"                .withSession(\"23:59\", 16).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the previous day as compared to the filter end date -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        assertTrue(datePredicate.test(new AppointmentBuilder().withDate(\"19/10/2021\").build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    public void test_appointmentIsNotBefore_returnsFalse() {","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        LocalDate sampleDate \u003d LocalDate.of(2021, 10, 20);","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        AppointmentIsBeforePredicate datePredicate \u003d new AppointmentIsBeforePredicate(sampleDate);","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        // Appointment is on the next day as compared to the filter end date -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        assertFalse(datePredicate.test(new AppointmentBuilder().withDate(\"21/10/2021\").build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        assertFalse(datePredicate.test(new AppointmentBuilder().withDate(\"21/10/2021\")","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"                .withSession(\"00:00\", 5).build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"Haozeee":79}},{"path":"src/test/java/seedu/plannermd/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-30"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DATE_TWO_HOUR;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_DURATION;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_REMARK;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_APPT_TIME;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.THIRTY_MIN_APPOINTMENT;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.TWO_HOUR_APPOINTMENT;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_BOB;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_FIONA;","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_GEORGE;","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.BENSON;","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.BOB;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"public class AppointmentTest {","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"    private static final Appointment APPT_ALICE_GEORGE \u003d new AppointmentBuilder()","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"            .withPatient(ALICE).withDoctor(DR_GEORGE).withDate(\"6/6/2022\")","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"            .withSession(\"18:00\", 120)","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"            .withRemark(\"Therapy Session\").build();","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    public void isClash() {","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"        // same patient, same sessions -\u003e true","lastModifiedDate":"2021-10-30"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"        Appointment appt1 \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withDoctor(DR_FIONA).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.isClash(appt1));","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        // same patient, clashing sessions -\u003e true","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"        Appointment appt2 \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withDoctor(DR_FIONA)","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"                .withSession(\"17:30\", 60).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.isClash(appt2));","lastModifiedDate":"2021-10-30"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"        // same doctor, same sessions -\u003e true","lastModifiedDate":"2021-10-30"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        Appointment appt3 \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withPatient(BENSON).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.isClash(appt3));","lastModifiedDate":"2021-10-30"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        // same doctor, clashing sessions -\u003e true","lastModifiedDate":"2021-10-30"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        Appointment appt4 \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withPatient(BENSON)","lastModifiedDate":"2021-10-30"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"                .withSession(\"17:30\", 60).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.isClash(appt4));","lastModifiedDate":"2021-10-30"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        // different patient and doctor -\u003e false","lastModifiedDate":"2021-10-30"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"        Appointment appt5 \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withPatient(BENSON).withDoctor(DR_FIONA).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        assertFalse(APPT_ALICE_GEORGE.isClash(appt5));","lastModifiedDate":"2021-10-30"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        // different date -\u003e false","lastModifiedDate":"2021-10-30"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        Appointment appt6 \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withDate(\"7/7/2022\").build();","lastModifiedDate":"2021-10-30"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"        assertFalse(APPT_ALICE_GEORGE.isClash(appt6));","lastModifiedDate":"2021-10-30"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        // different session -\u003e false","lastModifiedDate":"2021-10-30"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        Appointment appt7 \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withSession(\"09:00\", 10).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        assertFalse(APPT_ALICE_GEORGE.isClash(appt7));","lastModifiedDate":"2021-10-30"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-30"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"    public void isSameAppointment() {","lastModifiedDate":"2021-10-30"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        // same patient, doctor, date, session -\u003e true","lastModifiedDate":"2021-10-30"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        Appointment copyWithDifferentRemark \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withRemark(\"\").build();","lastModifiedDate":"2021-10-30"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.isSameAppointment(copyWithDifferentRemark));","lastModifiedDate":"2021-10-30"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        // different patient -\u003e false","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"        Appointment differentPatient \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withPatient(BENSON).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        assertFalse(APPT_ALICE_GEORGE.isSameAppointment(differentPatient));","lastModifiedDate":"2021-10-30"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        // different doctor -\u003e false","lastModifiedDate":"2021-10-30"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        Appointment differentDoctor \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withDoctor(DR_FIONA).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        assertFalse(APPT_ALICE_GEORGE.isSameAppointment(differentDoctor));","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        // different date -\u003e false","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        Appointment differentDate \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withDate(\"7/7/2022\").build();","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        assertFalse(APPT_ALICE_GEORGE.isSameAppointment(differentDate));","lastModifiedDate":"2021-10-30"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        // different session -\u003e false","lastModifiedDate":"2021-10-30"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        Appointment differentSession \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withSession(\"09:00\", 10).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        assertFalse(APPT_ALICE_GEORGE.isSameAppointment(differentSession));","lastModifiedDate":"2021-10-30"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-30"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"    public void compareTo() {","lastModifiedDate":"2021-10-30"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"        // same date, earlier start time -\u003e \u003c 0","lastModifiedDate":"2021-10-30"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"        Appointment lateStartTime \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withSession(\"20:00\", 10).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.compareTo(lateStartTime) \u003c 0);","lastModifiedDate":"2021-10-30"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"        // same date, same start time -\u003e \u003d\u003d 0","lastModifiedDate":"2021-10-30"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"        Appointment sameStartTime \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"        assertEquals(0, APPT_ALICE_GEORGE.compareTo(sameStartTime));","lastModifiedDate":"2021-10-30"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"        // same date, later start time -\u003e \u003e 0","lastModifiedDate":"2021-10-30"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        Appointment earlyStartTime \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withSession(\"09:00\", 10).build();","lastModifiedDate":"2021-10-30"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.compareTo(earlyStartTime) \u003e 0);","lastModifiedDate":"2021-10-30"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"        // earlier date -\u003e \u003c 0","lastModifiedDate":"2021-10-30"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        Appointment lateDate \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withDate(\"7/7/2022\").build();","lastModifiedDate":"2021-10-30"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.compareTo(lateDate) \u003c 0);","lastModifiedDate":"2021-10-30"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"        // later date -\u003e \u003e 0","lastModifiedDate":"2021-10-30"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"        Appointment earlyDate \u003d new AppointmentBuilder(APPT_ALICE_GEORGE).withDate(\"1/1/2022\").build();","lastModifiedDate":"2021-10-30"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"        assertTrue(APPT_ALICE_GEORGE.compareTo(earlyDate) \u003e 0);","lastModifiedDate":"2021-10-30"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"    public void equals() {","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment thirtyMinApptCopy \u003d new AppointmentBuilder(THIRTY_MIN_APPOINTMENT).build();","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(THIRTY_MIN_APPOINTMENT.equals(thirtyMinApptCopy));","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(THIRTY_MIN_APPOINTMENT.equals(THIRTY_MIN_APPOINTMENT));","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(THIRTY_MIN_APPOINTMENT.equals(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(THIRTY_MIN_APPOINTMENT.equals(5));","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"        // different appointment -\u003e returns false","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(THIRTY_MIN_APPOINTMENT.equals(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"ChuangZheQuan"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"        Appointment editedThirtyMinuteAppt \u003d new AppointmentBuilder(THIRTY_MIN_APPOINTMENT)","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"                .withDate(VALID_APPT_DATE_TWO_HOUR).build();","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(THIRTY_MIN_APPOINTMENT.equals(editedThirtyMinuteAppt));","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"        // different doctor -\u003e returns false","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"        editedThirtyMinuteAppt \u003d new AppointmentBuilder(THIRTY_MIN_APPOINTMENT).withDoctor(DR_BOB).build();","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(THIRTY_MIN_APPOINTMENT.equals(editedThirtyMinuteAppt));","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"ChuangZheQuan"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"        editedThirtyMinuteAppt \u003d new AppointmentBuilder(THIRTY_MIN_APPOINTMENT).withPatient(BOB).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(THIRTY_MIN_APPOINTMENT.equals(editedThirtyMinuteAppt));","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"        // different session -\u003e returns false","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"        editedThirtyMinuteAppt \u003d new AppointmentBuilder(THIRTY_MIN_APPOINTMENT)","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"                .withSession(VALID_APPT_TIME, VALID_APPT_DURATION).build();","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(THIRTY_MIN_APPOINTMENT.equals(editedThirtyMinuteAppt));","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"        // different remark -\u003e returns true","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"ChuangZheQuan"},"content":"        editedThirtyMinuteAppt \u003d new AppointmentBuilder(THIRTY_MIN_APPOINTMENT).withRemark(VALID_APPT_REMARK).build();","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(THIRTY_MIN_APPOINTMENT.equals(editedThirtyMinuteAppt));","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"pualixue":89,"ChuangZheQuan":64}},{"path":"src/test/java/seedu/plannermd/model/appointment/DurationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"class DurationTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Duration(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    public void constructor_invalidDuration_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"        Integer invalidDuration \u003d 9999;","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(invalidDuration));","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"    public void isValidDuration_validDuration_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"        // valid duration is 1-120","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"        assertTrue(Duration.isValidDuration(1));","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"        assertTrue(Duration.isValidDuration(10));","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"        assertTrue(Duration.isValidDuration(120));","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"    public void isValidDuration_invalidDuration_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        assertFalse(Duration.isValidDuration(-120));","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"        assertFalse(Duration.isValidDuration(0));","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"        assertFalse(Duration.isValidDuration(121));","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"    public void isValidDuration_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"        assertThrows(NullPointerException.class, () -\u003e Duration.isValidDuration(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"    public void getDefaultDuration() {","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"        assertEquals(Duration.DEFAULT_DURATION, Duration.getDefaultDuration().duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"        final Duration duration \u003d new Duration(15);","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"        Duration copyDuration \u003d new Duration(15);","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"        assertEquals(duration, copyDuration);","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        assertEquals(duration, duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(null, duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(duration, new ClearCommand());","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        // different duration -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(duration, new Duration(30));","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"pualixue":71}},{"path":"src/test/java/seedu/plannermd/model/appointment/SessionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"class SessionTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"    private final String validTime \u003d \"10:00\";","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"    private final String validTime2 \u003d \"20:30\";","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"    private final String invalidTime \u003d \"30:00\";","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"    private final String invalidTime2 \u003d \"abc123\";","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"    private final Duration duration \u003d new Duration(15);","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Session(null, null));","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Session(null, duration));","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Session(validTime, null));","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    public void constructor_invalidStartTime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Session(invalidTime, duration));","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"    public void isValidTime_validStartTime_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"        assertTrue(Session.isValidTime(validTime));","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        assertTrue(Session.isValidTime(validTime2));","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"    public void isValidTime_invalidStartTime_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"        assertFalse(Session.isValidTime(invalidTime));","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        assertFalse(Session.isValidTime(invalidTime2));","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"    public void isValidTime_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"        assertThrows(NullPointerException.class, () -\u003e Session.isValidTime(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-30"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"    public void isEndWithinSameDay() {","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"        Session s1 \u003d new Session(\"00:00\", duration);","lastModifiedDate":"2021-10-30"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"        Session s2 \u003d new Session(\"23:50\", new Duration(9));","lastModifiedDate":"2021-10-30"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        assertTrue(s1.isEndWithinSameDay());","lastModifiedDate":"2021-10-30"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        assertTrue(s2.isEndWithinSameDay());","lastModifiedDate":"2021-10-30"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"        Session s3 \u003d new Session(\"23:50\", new Duration(10));","lastModifiedDate":"2021-10-30"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"        Session s4 \u003d new Session(\"22:30\", new Duration(120));","lastModifiedDate":"2021-10-30"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        assertFalse(s3.isEndWithinSameDay());","lastModifiedDate":"2021-10-30"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        assertFalse(s4.isEndWithinSameDay());","lastModifiedDate":"2021-10-30"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-30"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"    public void isClash_clash_returnsTrue() {","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        Session s1 \u003d new Session(\"12:00\", duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"        Session s2 \u003d new Session(\"12:05\", duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"        Session s3 \u003d new Session(\"11:00\", new Duration(120));","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        Session s4 \u003d new Session(\"12:14\", new Duration(1));","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        assertTrue(s1.isClash(s2));","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"        assertTrue(s1.isClash(s3));","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        assertTrue(s1.isClash(s4));","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"    public void isClash_noClash_returnsFalse() {","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        Session s1 \u003d new Session(\"12:00\", duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        Session s2 \u003d new Session(\"12:20\", duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        Session s3 \u003d new Session(\"11:00\", duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"        Session s4 \u003d new Session(\"12:15\", duration);","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"        assertFalse(s1.isClash(s2));","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"        assertFalse(s1.isClash(s3));","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        assertFalse(s1.isClash(s4)); // 12:00-12:15 does not clash with 12:15-12:30","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"    public void getFormattedStartTime() {","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"        assertEquals(\"10:00\", new Session(validTime, duration).getFormattedStartTime());","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"    public void getFormattedEndTime() {","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"        assertEquals(\"10:15\", new Session(validTime, duration).getFormattedEndTime());","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        final Session session \u003d new Session(validTime, duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"        Session copySession \u003d new Session(validTime, duration);","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        assertEquals(session, copySession);","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"pualixue"},"content":"        assertEquals(session, session);","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"pualixue"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(null, session);","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"pualixue"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(session, new ClearCommand());","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"pualixue"},"content":"        // different start time -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(session, new Session(validTime2, duration));","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"pualixue"},"content":"        // different duration -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"pualixue"},"content":"        assertNotEquals(session, new Session(validTime, new Duration(60)));","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"pualixue":118}},{"path":"src/test/java/seedu/plannermd/model/appointment/UniqueAppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.appointment;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-31"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-31"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-31"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.FIVE_MIN_APPOINTMENT;","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.TWO_HOUR_APPOINTMENT;","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-31"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2021-10-31"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.appointment.AppointmentBuilder;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"class UniqueAppointmentListTest {","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    private final UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public void contains_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.contains(null));","lastModifiedDate":"2021-10-31"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    public void contains_appointmentNotInList_returnsFalse() {","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(uniqueAppointmentList.contains(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-31"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public void contains_appointmentInList_returnsTrue() {","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(uniqueAppointmentList.contains(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    public void contains_appointmentWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-10-31"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        Appointment editedTwoHourAppointment \u003d new AppointmentBuilder(TWO_HOUR_APPOINTMENT)","lastModifiedDate":"2021-10-31"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"                .withRemark(FIVE_MIN_APPOINTMENT.getRemark().value).build();","lastModifiedDate":"2021-10-31"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(uniqueAppointmentList.contains(editedTwoHourAppointment));","lastModifiedDate":"2021-10-31"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    public void isClash_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.isClash(null));","lastModifiedDate":"2021-10-31"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    public void isClash_noClashAppointment_returnsFalse() {","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(uniqueAppointmentList.isClash(FIVE_MIN_APPOINTMENT));","lastModifiedDate":"2021-10-31"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    public void isClash_clashAppointment_returnsTrue() {","lastModifiedDate":"2021-10-31"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        Appointment clashAppointment \u003d new AppointmentBuilder(FIVE_MIN_APPOINTMENT)","lastModifiedDate":"2021-10-31"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"                .withPatient(TWO_HOUR_APPOINTMENT.getPatient())","lastModifiedDate":"2021-10-31"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"                .withDate(TWO_HOUR_APPOINTMENT.getAppointmentDate().toInputStringFormat())","lastModifiedDate":"2021-10-31"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"                .withSession(TWO_HOUR_APPOINTMENT.getSession().toInputStringFormat(),","lastModifiedDate":"2021-10-31"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"                        TWO_HOUR_APPOINTMENT.getSession().getMinutes()).build();","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(uniqueAppointmentList.isClash(clashAppointment));","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        clashAppointment \u003d new AppointmentBuilder(FIVE_MIN_APPOINTMENT)","lastModifiedDate":"2021-10-31"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"                .withDoctor(TWO_HOUR_APPOINTMENT.getDoctor())","lastModifiedDate":"2021-10-31"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"                .withDate(TWO_HOUR_APPOINTMENT.getAppointmentDate().toInputStringFormat())","lastModifiedDate":"2021-10-31"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"                .withSession(TWO_HOUR_APPOINTMENT.getSession().toInputStringFormat(),","lastModifiedDate":"2021-10-31"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"                        TWO_HOUR_APPOINTMENT.getSession().getMinutes()).build();","lastModifiedDate":"2021-10-31"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(uniqueAppointmentList.isClash(clashAppointment));","lastModifiedDate":"2021-10-31"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    public void add_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.add(null));","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    public void add_duplicateAppointment_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-31"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment_nullTargetAppointment_throwsNullPointerException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointment(null,","lastModifiedDate":"2021-10-31"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"                TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-31"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment_nullEditedAppointment_throwsNullPointerException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointment(TWO_HOUR_APPOINTMENT,","lastModifiedDate":"2021-10-31"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"                null));","lastModifiedDate":"2021-10-31"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment_targetAppointmentNotInList_throwsAppointmentNotFoundException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.setAppointment(","lastModifiedDate":"2021-10-31"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"                TWO_HOUR_APPOINTMENT, TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-31"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment_editedAppointmentIsSameAppointment_success() {","lastModifiedDate":"2021-10-31"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.setAppointment(TWO_HOUR_APPOINTMENT, TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-31"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"        expectedUniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2021-10-31"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment_editedAppointmentHasSameIdentity_success() {","lastModifiedDate":"2021-10-31"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"        Appointment editedTwoHourAppointment \u003d new AppointmentBuilder(TWO_HOUR_APPOINTMENT)","lastModifiedDate":"2021-10-31"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"                .withRemark(FIVE_MIN_APPOINTMENT.getRemark().value).build();","lastModifiedDate":"2021-10-31"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.setAppointment(TWO_HOUR_APPOINTMENT, editedTwoHourAppointment);","lastModifiedDate":"2021-10-31"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-31"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"        expectedUniqueAppointmentList.add(editedTwoHourAppointment);","lastModifiedDate":"2021-10-31"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2021-10-31"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment_editedAppointmentHasDifferentIdentity_success() {","lastModifiedDate":"2021-10-31"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.setAppointment(TWO_HOUR_APPOINTMENT, FIVE_MIN_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"        UniqueAppointmentList expectedUniquePersonList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-31"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"        expectedUniquePersonList.add(FIVE_MIN_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(expectedUniquePersonList, uniqueAppointmentList);","lastModifiedDate":"2021-10-31"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointment_editedAppointmentHasNonUniqueIdentity_throwsDuplicateAppointmentException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(FIVE_MIN_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e uniqueAppointmentList","lastModifiedDate":"2021-10-31"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"                .setAppointment(TWO_HOUR_APPOINTMENT, FIVE_MIN_APPOINTMENT));","lastModifiedDate":"2021-10-31"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"    public void remove_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.remove(null));","lastModifiedDate":"2021-10-31"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"    public void remove_appointmentDoesNotExist_throwsAppointmentNotFoundException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.remove(TWO_HOUR_APPOINTMENT));","lastModifiedDate":"2021-10-31"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":155,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":156,"author":{"gitId":"jiayi1129"},"content":"    public void remove_existingAppointment_removesAppointment() {","lastModifiedDate":"2021-10-31"},{"lineNumber":157,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":158,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.remove(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":159,"author":{"gitId":"jiayi1129"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-31"},{"lineNumber":160,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2021-10-31"},{"lineNumber":161,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":162,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":163,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":164,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointments_nullUniqueAppointmentList_throwsNullPointerException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":165,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList","lastModifiedDate":"2021-10-31"},{"lineNumber":166,"author":{"gitId":"jiayi1129"},"content":"                .setAppointments((UniqueAppointmentList) null));","lastModifiedDate":"2021-10-31"},{"lineNumber":167,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":168,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":169,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":170,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointments_uniqueAppointmentList_replacesOwnListWithProvidedUniqueAppointmentList() {","lastModifiedDate":"2021-10-31"},{"lineNumber":171,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":172,"author":{"gitId":"jiayi1129"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-31"},{"lineNumber":173,"author":{"gitId":"jiayi1129"},"content":"        expectedUniqueAppointmentList.add(FIVE_MIN_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":174,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.setAppointments(expectedUniqueAppointmentList);","lastModifiedDate":"2021-10-31"},{"lineNumber":175,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2021-10-31"},{"lineNumber":176,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":177,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":178,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":179,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointments_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":180,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList","lastModifiedDate":"2021-10-31"},{"lineNumber":181,"author":{"gitId":"jiayi1129"},"content":"                .setAppointments((List\u003cAppointment\u003e) null));","lastModifiedDate":"2021-10-31"},{"lineNumber":182,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":183,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":184,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":185,"author":{"gitId":"jiayi1129"},"content":"    public void setAppointments_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-10-31"},{"lineNumber":186,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.add(TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":187,"author":{"gitId":"jiayi1129"},"content":"        List\u003cAppointment\u003e appointmentList \u003d Collections.singletonList(FIVE_MIN_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":188,"author":{"gitId":"jiayi1129"},"content":"        uniqueAppointmentList.setAppointments(appointmentList);","lastModifiedDate":"2021-10-31"},{"lineNumber":189,"author":{"gitId":"jiayi1129"},"content":"        UniqueAppointmentList expectedUniquePersonList \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-31"},{"lineNumber":190,"author":{"gitId":"jiayi1129"},"content":"        expectedUniquePersonList.add(FIVE_MIN_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":191,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(expectedUniquePersonList, uniqueAppointmentList);","lastModifiedDate":"2021-10-31"},{"lineNumber":192,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":193,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":194,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":195,"author":{"gitId":"jiayi1129"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":196,"author":{"gitId":"jiayi1129"},"content":"        List\u003cAppointment\u003e listWithDuplicateAppointments \u003d Arrays.asList(TWO_HOUR_APPOINTMENT, TWO_HOUR_APPOINTMENT);","lastModifiedDate":"2021-10-31"},{"lineNumber":197,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e uniqueAppointmentList","lastModifiedDate":"2021-10-31"},{"lineNumber":198,"author":{"gitId":"jiayi1129"},"content":"                .setAppointments(listWithDuplicateAppointments));","lastModifiedDate":"2021-10-31"},{"lineNumber":199,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":200,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":201,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":202,"author":{"gitId":"jiayi1129"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-31"},{"lineNumber":203,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueAppointmentList.asUnmodifiableObservableList()","lastModifiedDate":"2021-10-31"},{"lineNumber":204,"author":{"gitId":"jiayi1129"},"content":"                .remove(0));","lastModifiedDate":"2021-10-31"},{"lineNumber":205,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":206,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":207,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-31"}],"authorContributionMap":{"jiayi1129":207}},{"path":"src/test/java/seedu/plannermd/model/doctor/DoctorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.doctor;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_ALICE;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_BOB;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"public class DoctorTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    public void equals() {","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"        Doctor aliceCopy \u003d new DoctorBuilder(DR_ALICE).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(DR_ALICE.equals(aliceCopy));","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(DR_ALICE.equals(DR_ALICE));","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(DR_ALICE.equals(null));","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(DR_ALICE.equals(5));","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        // different doctor -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(DR_ALICE.equals(DR_BOB));","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        Doctor editedAlice \u003d new DoctorBuilder(DR_ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new DoctorBuilder(DR_ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new DoctorBuilder(DR_ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new DoctorBuilder(DR_ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new DoctorBuilder(DR_ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"jiayi1129":59}},{"path":"src/test/java/seedu/plannermd/model/patient/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_RISK_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"class PatientTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    public void equals() {","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        // different risk -\u003e returns false","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withRisk(VALID_RISK_BOB).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jiayi1129":62}},{"path":"src/test/java/seedu/plannermd/model/patient/RiskTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"class RiskTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Risk(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    public void constructor_invalidRisk_throwsIllegalArgumentException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"        String invalidRisk \u003d \"\";","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Risk(invalidRisk));","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    public void isValidRisk() {","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        // null risk","lastModifiedDate":"2021-10-02"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e Risk.isValidRisk(null));","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"        // invalid risks","lastModifiedDate":"2021-10-02"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(Risk.isValidRisk(\"\")); // empty string","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(Risk.isValidRisk(\" \")); // spaces only","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        // valid risks","lastModifiedDate":"2021-10-02"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(Risk.isValidRisk(\"HIGH\"));","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(Risk.isValidRisk(\"MEDIUM\"));","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(Risk.isValidRisk(\"LOW\"));","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    public void getUnclassifiedRisk() {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        // method returns correct risk level","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(Risk.RiskLevel.UNCLASSIFIED, Risk.getUnclassifiedRisk().riskLevel);","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    public void isUnclassified() {","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        Risk highRisk \u003d new Risk(\"HIGH\");","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        Risk mediumRisk \u003d new Risk(\"MEDIUM\");","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        Risk lowRisk \u003d new Risk(\"LOW\");","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        Risk unclassifiedRisk \u003d Risk.getUnclassifiedRisk();","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(highRisk.isUnclassified());","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(mediumRisk.isUnclassified());","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(lowRisk.isUnclassified());","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(unclassifiedRisk.isUnclassified());","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jiayi1129":56}},{"path":"src/test/java/seedu/plannermd/model/patient/UniquePersonListOfPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.model.patient;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.UniquePersonList;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.UniquePersonListTest;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"public class UniquePersonListOfPatientTest extends UniquePersonListTest\u003cPatient\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"    protected UniquePersonList\u003cPatient\u003e createSamplePersonList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"        return new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"    protected Patient typicalPersonAlice() {","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"        return ALICE;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"    protected Patient typicalPersonBob() {","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"        return BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"    protected Patient samplePerson(Person person) {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"        return new PatientBuilder(person).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"hpkoh":32}},{"path":"src/test/java/seedu/plannermd/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"-":34,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/model/person/BirthDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"public class BirthDateTest {","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new BirthDate(null));","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"    public void constructor_invalidBirthDate_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"        String invalidBirthDate \u003d \"\";","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new BirthDate(invalidBirthDate));","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"    public void isValidBirthDate_validBirthDate_success() {","lastModifiedDate":"2021-10-02"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(BirthDate.isValidBirthDate(\"12/2/2021\")); // one character","lastModifiedDate":"2021-10-02"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(BirthDate.isValidBirthDate(\"28/03/2021\"));","lastModifiedDate":"2021-10-02"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(BirthDate.isValidBirthDate(\"3/3/2021\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    public void isValidBirthDate_invalidBirthDate_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(BirthDate.isValidBirthDate(\"\")); // empty string","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(BirthDate.isValidBirthDate(\"2021-02-02\")); // in YYYY-MM-DD format","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(BirthDate.isValidBirthDate(\"12/31/2021\")); // in MM/DD/YYYY format","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(BirthDate.isValidBirthDate(\"28/03/2022\")); // birth date can\u0027t be in the future","lastModifiedDate":"2021-10-02"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(BirthDate.isValidBirthDate(\"28/03/2022 2222\"));","lastModifiedDate":"2021-10-02"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"    public void isValidBirthDate_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-02"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(NullPointerException.class, () -\u003e BirthDate.isValidBirthDate(null));","lastModifiedDate":"2021-10-02"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"    public void calculateAge_validAge_returnsCorrectAge() {","lastModifiedDate":"2021-10-02"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"        BirthDate bd \u003d new BirthDate(\"20/07/1999\");","lastModifiedDate":"2021-10-02"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(bd.calculateAge() \u003d\u003d 22);","lastModifiedDate":"2021-10-02"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        bd \u003d new BirthDate(\"30/9/1999\");","lastModifiedDate":"2021-10-02"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        assertTrue(bd.calculateAge() \u003d\u003d 22);","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"pualixue":2,"ChuangZheQuan":49}},{"path":"src/test/java/seedu/plannermd/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"-":66,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.PersonBuilder;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":73,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"-":38,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_BOB;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.PersonBuilder;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        // same name, phone and email, all other attributes different -\u003e returns true","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"                .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        // different phone, all other attributes same -\u003e returns false","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        // different email, all other attributes same -\u003e returns false","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        // email differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        editedBob \u003d new PersonBuilder(BOB).withEmail(VALID_EMAIL_BOB.toUpperCase()).build();","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"        // different birthdate -\u003e returns false","lastModifiedDate":"2021-09-28"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_BIRTH_DATE_BOB).build();","lastModifiedDate":"2021-09-28"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-09-28"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Haozeee":4,"ChuangZheQuan":12,"-":77,"jiayi1129":15}},{"path":"src/test/java/seedu/plannermd/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"-":38,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/model/person/RemarkTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hpkoh"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"hpkoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"hpkoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"class RemarkTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"hpkoh"},"content":"    void isEmpty_emptyRemark_trueReturned() {","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"hpkoh"},"content":"        assertEquals(Remark.getEmptyRemark().isEmpty(), true);","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"hpkoh"},"content":"    void isEmpty_emptyString_trueReturned() {","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"hpkoh"},"content":"        assertEquals(new Remark(\"\").isEmpty(), true);","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"    void isEmpty_sampleRemark_trueReturned() {","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"        assertEquals(new Remark(\"Sample Remark\").isEmpty(), false);","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"hpkoh"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"hpkoh":23}},{"path":"src/test/java/seedu/plannermd/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.person;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.testutil.PersonBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"hpkoh"},"content":"public abstract class UniquePersonListTest\u003cT extends Person\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"hpkoh"},"content":"    private UniquePersonList\u003cT\u003e personList;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"hpkoh"},"content":"    private T alice;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"hpkoh"},"content":"    private T bob;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"hpkoh"},"content":"    protected abstract UniquePersonList\u003cT\u003e createSamplePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"hpkoh"},"content":"    //Typical People should not be in sample list","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"hpkoh"},"content":"    protected abstract T typicalPersonAlice();","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"hpkoh"},"content":"    protected abstract T typicalPersonBob();","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"    protected abstract T samplePerson(Person person);","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"    void setUp() {","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"        personList \u003d createSamplePersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        alice \u003d typicalPersonAlice();","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"        bob \u003d typicalPersonBob();","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e personList.contains(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"hpkoh"},"content":"        assertFalse(personList.contains(alice));","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"hpkoh"},"content":"        assertTrue(personList.contains(alice));","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"hpkoh"},"content":"        Person editedAlicePerson \u003d new PersonBuilder(alice)","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"hpkoh"},"content":"                .withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"hpkoh"},"content":"                .withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"hpkoh"},"content":"        T editedAlice \u003d samplePerson(editedAlicePerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"hpkoh"},"content":"        assertTrue(personList.contains(editedAlice));","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    void getExactPerson_personNotInList_returnsEmpty() {","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(personList.getExactPerson(alice).isEmpty());","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"    public void getExactPerson_personInList_returnsPerson() {","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(personList.getExactPerson(alice).isPresent());","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"    public void getExactPerson_personWithSameIdentityFieldsInList_returnsEmpty() {","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        Person editedAlicePerson \u003d new PersonBuilder(alice)","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"                .withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"                .withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"                .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        T editedAlice \u003d samplePerson(editedAlicePerson);","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"        assertTrue(personList.getExactPerson(editedAlice).isEmpty());","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e personList.add(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"hpkoh"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e personList.add(alice));","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e personList.setPerson(null, alice));","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e personList.setPerson(alice, null));","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"hpkoh"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e personList.setPerson(alice, alice));","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"hpkoh"},"content":"        personList.setPerson(alice, alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"hpkoh"},"content":"        UniquePersonList\u003cT\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"hpkoh"},"content":"        expectedUniquePersonList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"hpkoh"},"content":"        assertEquals(expectedUniquePersonList, personList);","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"hpkoh"},"content":"        Person editedAlicePerson \u003d new PersonBuilder(alice)","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"hpkoh"},"content":"                .withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"hpkoh"},"content":"                .withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"hpkoh"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"hpkoh"},"content":"        T editedAlice \u003d samplePerson(editedAlicePerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"hpkoh"},"content":"        personList.setPerson(alice, editedAlice);","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"hpkoh"},"content":"        UniquePersonList\u003cT\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"hpkoh"},"content":"        assertEquals(expectedUniquePersonList, personList);","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"hpkoh"},"content":"        personList.setPerson(alice, bob);","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"hpkoh"},"content":"        UniquePersonList\u003cT\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"hpkoh"},"content":"        expectedUniquePersonList.add(bob);","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"hpkoh"},"content":"        assertEquals(expectedUniquePersonList, personList);","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"hpkoh"},"content":"        personList.add(bob);","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"hpkoh"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e personList.setPerson(alice, bob));","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e personList.remove(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"hpkoh"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"hpkoh"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e personList.remove(alice));","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":171,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"hpkoh"},"content":"        personList.remove(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"hpkoh"},"content":"        UniquePersonList\u003cT\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"hpkoh"},"content":"        assertEquals(expectedUniquePersonList, personList);","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":179,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e personList.setPersons((UniquePersonList\u003cT\u003e) null));","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":184,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":185,"author":{"gitId":"hpkoh"},"content":"        UniquePersonList\u003cT\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":186,"author":{"gitId":"hpkoh"},"content":"        expectedUniquePersonList.add(bob);","lastModifiedDate":"2021-10-07"},{"lineNumber":187,"author":{"gitId":"hpkoh"},"content":"        personList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":188,"author":{"gitId":"hpkoh"},"content":"        assertEquals(expectedUniquePersonList, personList);","lastModifiedDate":"2021-10-07"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":193,"author":{"gitId":"hpkoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e personList.setPersons((List\u003cT\u003e) null));","lastModifiedDate":"2021-10-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":198,"author":{"gitId":"hpkoh"},"content":"        personList.add(alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":199,"author":{"gitId":"hpkoh"},"content":"        List\u003cT\u003e newPersonList \u003d Collections.singletonList(bob);","lastModifiedDate":"2021-10-07"},{"lineNumber":200,"author":{"gitId":"hpkoh"},"content":"        personList.setPersons(newPersonList);","lastModifiedDate":"2021-10-07"},{"lineNumber":201,"author":{"gitId":"hpkoh"},"content":"        UniquePersonList\u003cT\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":202,"author":{"gitId":"hpkoh"},"content":"        expectedUniquePersonList.add(bob);","lastModifiedDate":"2021-10-07"},{"lineNumber":203,"author":{"gitId":"hpkoh"},"content":"        assertEquals(expectedUniquePersonList, personList);","lastModifiedDate":"2021-10-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":208,"author":{"gitId":"hpkoh"},"content":"        List\u003cT\u003e listWithDuplicatePersons \u003d Arrays.asList(alice, alice);","lastModifiedDate":"2021-10-07"},{"lineNumber":209,"author":{"gitId":"hpkoh"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e personList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2021-10-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":214,"author":{"gitId":"hpkoh"},"content":"        assertThrows(","lastModifiedDate":"2021-10-07"},{"lineNumber":215,"author":{"gitId":"hpkoh"},"content":"                UnsupportedOperationException.class, () -\u003e personList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-10-07"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"hpkoh":89,"-":101,"jiayi1129":27}},{"path":"src/test/java/seedu/plannermd/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.model.tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"-":24,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/storage/JsonAdaptedAppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.storage.JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.FIVE_MIN_APPOINTMENT;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"class JsonAdaptedAppointmentTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_DATE \u003d \"8-8-2022\";","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    private static final JsonAdaptedPatient VALID_PATIENT \u003d new JsonAdaptedPatient(FIVE_MIN_APPOINTMENT.getPatient());","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private static final JsonAdaptedDoctor VALID_DOCTOR \u003d new JsonAdaptedDoctor(FIVE_MIN_APPOINTMENT.getDoctor());","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_DATE \u003d FIVE_MIN_APPOINTMENT.getAppointmentDate().toInputStringFormat();","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    private static final JsonAdaptedSession VALID_SESSION \u003d new JsonAdaptedSession(FIVE_MIN_APPOINTMENT.getSession());","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_REMARK \u003d FIVE_MIN_APPOINTMENT.getRemark().toString();","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(FIVE_MIN_APPOINTMENT);","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(FIVE_MIN_APPOINTMENT, appointment.toModelType());","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_PATIENT, VALID_DOCTOR, INVALID_DATE,","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"                VALID_SESSION, VALID_REMARK);","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d AppointmentDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_PATIENT, VALID_DOCTOR, null,","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"                VALID_SESSION, VALID_REMARK);","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, JsonAdaptedAppointment.IDENTIFIER_DATE);","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullPatient_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(null, VALID_DOCTOR, VALID_DATE,","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"                VALID_SESSION, VALID_REMARK);","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Patient.class.getSimpleName());","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullDoctor_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_PATIENT, null, VALID_DATE,","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"                VALID_SESSION, VALID_REMARK);","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Doctor.class.getSimpleName());","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullSession_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_PATIENT, VALID_DOCTOR, VALID_DATE,","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"                null, VALID_REMARK);","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Session.class.getSimpleName());","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullRemark_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_PATIENT, VALID_DOCTOR, VALID_DATE,","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"                VALID_SESSION, null);","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"jiayi1129":79}},{"path":"src/test/java/seedu/plannermd/storage/JsonAdaptedDoctorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.storage.JsonAdaptedDoctor.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_BENSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"public class JsonAdaptedDoctorTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_BIRTH_DATE_1 \u003d \"10-10-2010\";","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_BIRTH_DATE_2 \u003d \"42/2/2022\";","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_BIRTH_DATE_3 \u003d \"13/01/2000 2222\";","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_NAME \u003d DR_BENSON.getName().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_PHONE \u003d DR_BENSON.getPhone().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_EMAIL \u003d DR_BENSON.getEmail().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_ADDRESS \u003d DR_BENSON.getAddress().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_BIRTH_DATE \u003d DR_BENSON.getBirthDate().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_REMARK \u003d DR_BENSON.getRemark().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d DR_BENSON.getTags().stream().map(JsonAdaptedTag::new)","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_validDoctorDetails_returnsDoctor() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(DR_BENSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(DR_BENSON, doctor.toModelType());","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullBirthDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"                null, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BirthDate.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidBirthDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"                INVALID_BIRTH_DATE_1, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d BirthDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor2 \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"                INVALID_BIRTH_DATE_2, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage2 \u003d BirthDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage2, doctor2::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor3 \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"                INVALID_BIRTH_DATE_3, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage3 \u003d BirthDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage3, doctor3::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"jiayi1129"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"jiayi1129"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, invalidTags);","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, doctor::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"jiayi1129":144}},{"path":"src/test/java/seedu/plannermd/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.BENSON;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_RISK \u003d \"SUPER\";","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final String INVALID_BIRTH_DATE \u003d \"10-10-2010\";","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final String VALID_BIRTH_DATE \u003d BENSON.getBirthDate().toString();","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream().map(JsonAdaptedTag::new)","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_RISK \u003d BENSON.getRisk().toString();","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_validPatientDetails_returnsPatient() throws Exception {","lastModifiedDate":"2021-10-02"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(BENSON, patient.toModelType());","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_ADDRESS, VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_ADDRESS, VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_ADDRESS, VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"                INVALID_ADDRESS, VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"    public void toModelType_invalidBirthDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"                INVALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d BirthDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"    public void toModelType_nullBirthDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"                null, VALID_REMARK, VALID_TAGS, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BirthDate.class.getSimpleName());","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, invalidTags, VALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidRisk_throwsIllegalValueException() {","lastModifiedDate":"2021-09-30"},{"lineNumber":138,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":139,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, INVALID_RISK);","lastModifiedDate":"2021-10-06"},{"lineNumber":140,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Risk.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-09-30"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":142,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":143,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-30"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullRisk_throwsIllegalValueException() {","lastModifiedDate":"2021-09-30"},{"lineNumber":146,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":147,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS, null);","lastModifiedDate":"2021-10-06"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Risk.class.getSimpleName());","lastModifiedDate":"2021-09-30"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-09-30"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":1,"ChuangZheQuan":43,"jiayi1129":108}},{"path":"src/test/java/seedu/plannermd/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final String INVALID_BIRTH_DATE_1 \u003d \"10-10-2010\";","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final String INVALID_BIRTH_DATE_2 \u003d \"42/2/2022\";","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final String INVALID_BIRTH_DATE_3 \u003d \"13/01/2000 2222\";","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final String VALID_BIRTH_DATE \u003d BENSON.getBirthDate().toString();","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream().map(JsonAdaptedTag::new)","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"hpkoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"hpkoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"hpkoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"hpkoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2021-10-05"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"    public void toModelType_nullBirthDate_throwsIllegalValueException() {","lastModifiedDate":"2021-09-28"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"                null, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BirthDate.class.getSimpleName());","lastModifiedDate":"2021-09-28"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-09-28"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidBirthDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"                INVALID_BIRTH_DATE_1, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage \u003d BirthDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-09-28"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-09-28"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person2 \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"                INVALID_BIRTH_DATE_2, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage2 \u003d BirthDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-02"},{"lineNumber":128,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage2, person2::toModelType);","lastModifiedDate":"2021-10-02"},{"lineNumber":129,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":130,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person3 \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":131,"author":{"gitId":"ChuangZheQuan"},"content":"                INVALID_BIRTH_DATE_3, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-10-06"},{"lineNumber":132,"author":{"gitId":"ChuangZheQuan"},"content":"        String expectedMessage3 \u003d BirthDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-02"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage3, person3::toModelType);","lastModifiedDate":"2021-10-02"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":135,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-06"},{"lineNumber":141,"author":{"gitId":"ChuangZheQuan"},"content":"                VALID_BIRTH_DATE, VALID_REMARK, invalidTags);","lastModifiedDate":"2021-10-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hpkoh":5,"ChuangZheQuan":49,"-":84,"jiayi1129":6}},{"path":"src/test/java/seedu/plannermd/storage/JsonAdaptedSessionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.storage.JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.FIVE_MIN_APPOINTMENT;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"class JsonAdaptedSessionTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_START_TIME_1 \u003d \"18-00\";","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    private static final String INVALID_START_TIME_2 \u003d \"25:00\";","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    private static final Integer INVALID_DURATION_1 \u003d 0;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    private static final Integer INVALID_DURATION_2 \u003d 121;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    private static final Session VALID_SESSION \u003d FIVE_MIN_APPOINTMENT.getSession();","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private static final String VALID_START_TIME \u003d VALID_SESSION.toInputStringFormat();","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    private static final Integer VALID_DURATION \u003d VALID_SESSION.getMinutes();","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_validSessionDetails_returnsSession() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedSession session \u003d new JsonAdaptedSession(VALID_SESSION);","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(VALID_SESSION, session.toModelType());","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedSession session \u003d new JsonAdaptedSession(INVALID_START_TIME_1, VALID_DURATION);","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Session.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        session \u003d new JsonAdaptedSession(INVALID_START_TIME_2, VALID_DURATION);","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedSession session \u003d new JsonAdaptedSession(null, VALID_DURATION);","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, JsonAdaptedSession.IDENTIFIER_START_TIME);","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidDuration_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedSession session \u003d new JsonAdaptedSession(VALID_START_TIME, INVALID_DURATION_1);","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d Duration.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        session \u003d new JsonAdaptedSession(VALID_START_TIME, INVALID_DURATION_2);","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_nullDuration_throwsIllegalValueException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        JsonAdaptedSession session \u003d new JsonAdaptedSession(VALID_START_TIME, null);","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Duration.class.getSimpleName());","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"jiayi1129":63}},{"path":"src/test/java/seedu/plannermd/storage/JsonPlannerMdStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.DANIEL;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.HOON;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.IDA;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"public class JsonPlannerMdStorageTest {","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPlannerMdStorageTest\");","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    @TempDir","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    public Path testFolder;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    public void readPlannerMd_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e readPlannerMd(null));","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    private java.util.Optional\u003cReadOnlyPlannerMd\u003e readPlannerMd(String filePath) throws Exception {","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        return new JsonPlannerMdStorage(Paths.get(filePath)).readPlannerMd(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"                : null;","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        assertFalse(readPlannerMd(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(DataConversionException.class, () -\u003e readPlannerMd(\"notJsonFormatPlannerMd.json\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    public void readPlannerMd_invalidPatientPlannerMd_throwDataConversionException() {","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(DataConversionException.class, () -\u003e readPlannerMd(\"invalidPatientPlannerMd.json\"));","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"    public void readPlannerMd_invalidAndValidPatientPlannerMd_throwDataConversionException() {","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(DataConversionException.class, () -\u003e readPlannerMd(\"invalidAndValidPatientPlannerMd.json\"));","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"    public void readAndSavePlannerMd_allInOrder_success() throws Exception {","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        Path filePath \u003d testFolder.resolve(\"TempPlannerMd.json\");","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd original \u003d getTypicalPlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        JsonPlannerMdStorage jsonPlannerMdStorage \u003d new JsonPlannerMdStorage(filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        // Save in new file and read back","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        jsonPlannerMdStorage.savePlannerMd(original, filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        ReadOnlyPlannerMd readBack \u003d jsonPlannerMdStorage.readPlannerMd(filePath).get();","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(original, new PlannerMd(readBack));","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        original.addPatient(HOON);","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        original.removePatient(DANIEL);","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"        jsonPlannerMdStorage.savePlannerMd(original, filePath);","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"        readBack \u003d jsonPlannerMdStorage.readPlannerMd(filePath).get();","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(original, new PlannerMd(readBack));","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        original.addPatient(IDA);","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"        jsonPlannerMdStorage.savePlannerMd(original); // file path not specified","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"        readBack \u003d jsonPlannerMdStorage.readPlannerMd().get(); // file path not specified","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(original, new PlannerMd(readBack));","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"    public void savePlannerMd_nullPlannerMd_throwsNullPointerException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e savePlannerMd(null, \"SomeFile.json\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"     * Saves {@code plannerMd} at the specified {@code filePath}.","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"    private void savePlannerMd(ReadOnlyPlannerMd plannerMd, String filePath) {","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"            new JsonPlannerMdStorage(Paths.get(filePath))","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"                    .savePlannerMd(plannerMd, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    public void savePlannerMd_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(NullPointerException.class, () -\u003e savePlannerMd(new PlannerMd(), null));","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"jiayi1129":110}},{"path":"src/test/java/seedu/plannermd/storage/JsonSerializablePlannerMdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.util.JsonUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.TypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"public class JsonSerializablePlannerMdTest {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"            \"src\", \"test\", \"data\", \"JsonSerializablePlannerMdTest\");","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    private static final Path TYPICAL_PLANNERMD_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPlannerMd.json\");","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsPlannerMd.json\");","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final Path TYPICAL_DOCTORS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDoctorsPlannerMd.json\");","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    private static final Path TYPICAL_APPOINTMENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAppointmentsPlannerMd.json\");","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientPlannerMd.json\");","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientPlannerMd.json\");","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    private static final Path INVALID_DOCTORS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDoctorPlannerMd.json\");","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    private static final Path DUPLICATE_DOCTORS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateDoctorPlannerMd.json\");","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    private static final Path INVALID_APPOINTMENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAppointmentPlannerMd.json\");","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    private static final Path DUPLICATE_APPOINTMENTS_FILE \u003d TEST_DATA_FOLDER.resolve(","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"            \"duplicateAppointmentPlannerMd.json\");","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    private static final Path CLASHING_PATIENT_APPOINTMENTS_FILE \u003d TEST_DATA_FOLDER.resolve(","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"            \"clashingPatientAppointmentPlannerMd.json\");","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    private static final Path CLASHING_DOCTOR_APPOINTMENTS_FILE \u003d TEST_DATA_FOLDER.resolve(","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"            \"clashingDoctorAppointmentPlannerMd.json\");","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_typicalPlannerMdFile_success() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(TYPICAL_PLANNERMD_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd plannerMdFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd typicalPlannerMd \u003d TypicalPlannerMd.getTypicalPlannerMd();","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(plannerMdFromFile, typicalPlannerMd);","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_typicalPatientsFile_success() throws Exception {","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"                .readJsonFile(TYPICAL_PATIENTS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd plannerMdFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd typicalPlannerMd \u003d TypicalPlannerMd.getTypicalPatientsPlannerMd();","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(plannerMdFromFile, typicalPlannerMd);","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"                .readJsonFile(INVALID_PATIENT_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"                .readJsonFile(DUPLICATE_PATIENT_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePlannerMd.MESSAGE_DUPLICATE_PATIENT,","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_typicalDoctorsFile_success() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(TYPICAL_DOCTORS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd plannerMdFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd typicalPlannerMd \u003d TypicalPlannerMd.getTypicalDoctorsPlannerMd();","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(plannerMdFromFile, typicalPlannerMd);","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidDoctorFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(INVALID_DOCTORS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_duplicateDoctors_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(DUPLICATE_DOCTORS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePlannerMd.MESSAGE_DUPLICATE_DOCTOR,","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_typicalAppointmentsFile_success() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(TYPICAL_APPOINTMENTS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd plannerMdFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd typicalPlannerMd \u003d TypicalPlannerMd.getTypicalAppointmentsPlannerMd();","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(plannerMdFromFile, typicalPlannerMd);","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_invalidAppointmentFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(INVALID_APPOINTMENTS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_duplicateAppointments_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-23"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(DUPLICATE_APPOINTMENTS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-23"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePlannerMd.MESSAGE_DUPLICATE_APPOINTMENTS,","lastModifiedDate":"2021-10-23"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-10-23"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_clashingPatientAppointments_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(CLASHING_PATIENT_APPOINTMENTS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePlannerMd.MESSAGE_CLASHING_APPOINTMENTS,","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"    public void toModelType_clashingDoctorAppointments_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"        JsonSerializablePlannerMd dataFromFile \u003d JsonUtil","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"                .readJsonFile(CLASHING_DOCTOR_APPOINTMENTS_FILE, JsonSerializablePlannerMd.class).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePlannerMd.MESSAGE_CLASHING_APPOINTMENTS,","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"ChuangZheQuan":7,"jiayi1129":125}},{"path":"src/test/java/seedu/plannermd/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        userPrefs.setPlannerMdFilePath(Paths.get(\"plannermd.json\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":117,"jiayi1129":6}},{"path":"src/test/java/seedu/plannermd/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPlannerMd.getTypicalPlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.GuiSettings;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.ReadOnlyPlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.UserPrefs;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        JsonPlannerMdStorage plannerMdStorage \u003d new JsonPlannerMdStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        storageManager \u003d new StorageManager(plannerMdStorage, userPrefsStorage);","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"    public void plannerMdReadSave() throws Exception {","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"         * {@link JsonPlannerMdStorage} class.","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonPlannerMdStorageTest} class.","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd original \u003d getTypicalPlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        storageManager.savePlannerMd(original);","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        ReadOnlyPlannerMd retrieved \u003d storageManager.readPlannerMd().get();","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        assertEquals(original, new PlannerMd(retrieved));","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"    public void getPlannerMdFilePath() {","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        assertNotNull(storageManager.getPlannerMdFilePath());","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":51,"jiayi1129":17}},{"path":"src/test/java/seedu/plannermd/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"-":33,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.util.SampleDataUtil;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"    public static final String DEFAULT_BIRTH_DATE \u003d \"20/02/1967\";","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"    private BirthDate birthDate;","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"    private Remark remark;","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"        birthDate \u003d new BirthDate(DEFAULT_BIRTH_DATE);","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"hpkoh"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"        birthDate \u003d personToCopy.getBirthDate();","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"hpkoh"},"content":"        remark \u003d personToCopy.getRemark();","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code Person} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2021-09-28"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"    public PersonBuilder withBirthDate(String birthDate) {","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"        this.birthDate \u003d new BirthDate(birthDate);","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-09-28"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":111,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":112,"author":{"gitId":"hpkoh"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":114,"author":{"gitId":"hpkoh"},"content":"    public PersonBuilder withRemark(String remark) {","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"hpkoh"},"content":"        this.remark \u003d new Remark(remark);","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"hpkoh"},"content":"        return this;","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"        return new Person(name, phone, email, address, birthDate, remark, tags);","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"hpkoh":12,"ChuangZheQuan":16,"-":86,"jiayi1129":9}},{"path":"src/test/java/seedu/plannermd/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_BIRTH_DATE;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"        sb.append(PREFIX_BIRTH_DATE + person.getBirthDate().toString() + \" \");","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"        person.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns the part of command string for the given","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code EditPatientDescriptor}\u0027s details.","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    public static String getEditPersonDescriptorDetails(EditPatientDescriptor descriptor) {","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor.getBirthDate()","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"                .ifPresent(birthDate -\u003e sb.append(PREFIX_BIRTH_DATE).append(birthDate.toString()).append(\" \"));","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"                sb.append(PREFIX_TAG).append(\" \");","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"     * Returns the part of command string for the given {@code EditDoctorDescriptor}\u0027s details.","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"    public static String getEditDoctorDescriptorDetails(EditDoctorCommand.EditDoctorDescriptor descriptor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"        descriptor.getBirthDate().ifPresent(birthDate -\u003e sb.append(PREFIX_BIRTH_DATE)","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"                .append(birthDate.toString()).append(\" \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"            } else {","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"pualixue":23,"ChuangZheQuan":13,"-":44,"jiayi1129":8}},{"path":"src/test/java/seedu/plannermd/testutil/PlannerMdBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":" * A utility class to help with building PlannerMd objects.","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":" *     {@code PlannerMd ab \u003d new PlannerMdBuilder().withPatient(\"John\", \"Doe\").build();}","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"public class PlannerMdBuilder {","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    private PlannerMd plannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    public PlannerMdBuilder() {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"        plannerMd \u003d new PlannerMd();","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    public PlannerMdBuilder(PlannerMd plannerMd) {","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"        this.plannerMd \u003d plannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"     * Adds a new {@code Patient} to the {@code PlannerMd} that we are building.","lastModifiedDate":"2021-10-02"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    public PlannerMdBuilder withPatient(Patient patient) {","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"        plannerMd.addPatient(patient);","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"hpkoh"},"content":"     * Adds a new {@code Doctor} to the {@code PlannerMd} that we are building.","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"hpkoh"},"content":"    public PlannerMdBuilder withDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"hpkoh"},"content":"        plannerMd.addDoctor(doctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"        return this;","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    public PlannerMd build() {","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        return plannerMd;","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"hpkoh":9,"jiayi1129":34}},{"path":"src/test/java/seedu/plannermd/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":71,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"        return model.getFilteredPatientList().get(index.getZeroBased());","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":48,"jiayi1129":7}},{"path":"src/test/java/seedu/plannermd/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"    public static final Index INDEX_FIRST_APPT \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"    public static final Index INDEX_SECOND_APPT \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"    public static final Index INDEX_THIRD_APPT \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"pualixue":3,"-":10,"jiayi1129":2}},{"path":"src/test/java/seedu/plannermd/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_AMY;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_BIRTH_DATE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"hpkoh"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_REMARK_BOB;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":" * A utility class containing a list of {@code Person} objects to be used in","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":" * tests.","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"            .withPhone(\"94351253\").withRemark(\"Awaiting PCR test result\").withTags(\"friends\")","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"            .withBirthDate(\"20/07/1964\").build();","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withBirthDate(\"20/07/1964\")","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withRemark(\"Hypochondriac\")","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRemark(\"Prefers liquid medication\")","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"            .withBirthDate(\"20/07/1965\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withBirthDate(\"20/07/1964\")","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withBirthDate(\"19/05/1955\")","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withBirthDate(\"20/08/1948\").build();","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withBirthDate(\"9/1/1944\").build();","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withBirthDate(\"3/01/1946\").build();","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withBirthDate(\"31/05/1948\").build();","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"            .withBirthDate(VALID_BIRTH_DATE_AMY)","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"            .withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthDate(VALID_BIRTH_DATE_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"            .withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"    private TypicalPersons() {","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"hpkoh":2,"ChuangZheQuan":19,"-":27,"jiayi1129":18}},{"path":"src/test/java/seedu/plannermd/testutil/TypicalPlannerMd.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.appointment.TypicalAppointments.getTypicalAppointments;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.getTypicalDoctors;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.getTypicalPatients;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.PlannerMd;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"public class TypicalPlannerMd {","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"     * Returns an {@code PlannerMd} with all the typical appointments, patients and doctors.","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"    public static PlannerMd getTypicalPlannerMd() {","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd pm \u003d new PlannerMd();","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"        for (Patient patient : getTypicalPatients()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"            pm.addPatient(patient);","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        for (Doctor doctor : getTypicalDoctors()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"            pm.addDoctor(doctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Appointment appointment: getTypicalAppointments()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"            pm.addAppointment(appointment);","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        return pm;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"     * Returns an {@code PlannerMd} with all the typical patients.","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    public static PlannerMd getTypicalPatientsPlannerMd() {","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd pm \u003d new PlannerMd();","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        for (Patient patient : getTypicalPatients()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"            pm.addPatient(patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        return pm;","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"     * Returns an {@code PlannerMd} with all the typical doctors.","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"    public static PlannerMd getTypicalDoctorsPlannerMd() {","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        PlannerMd pm \u003d new PlannerMd();","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"        for (Doctor doctor : getTypicalDoctors()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"            pm.addDoctor(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        return pm;","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns an {@code PlannerMd} with all the typical appointments.","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"    public static PlannerMd getTypicalAppointmentsPlannerMd() {","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        PlannerMd pm \u003d new PlannerMd();","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        // For appointments to exist, the patients and doctors need to be added as well","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        for (Patient patient : getTypicalPatients()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"            pm.addPatient(patient);","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        for (Doctor doctor : getTypicalDoctors()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"            pm.addDoctor(doctor);","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"            pm.addAppointment(appointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"        return pm;","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"Haozeee":7,"ChuangZheQuan":15,"jiayi1129":53}},{"path":"src/test/java/seedu/plannermd/testutil/appointment/AddAppointmentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.testutil.appointment;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.apptcommand.AddAppointmentCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"/**","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":" * A utility class to help with building EditAppointmentDescriptor objects.","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":" */","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"public class AddAppointmentDescriptorBuilder {","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"    private AddAppointmentCommand.AddAppointmentDescriptor descriptor;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"    public AddAppointmentDescriptorBuilder() {","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor \u003d new AddAppointmentCommand.AddAppointmentDescriptor();","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"    public AddAppointmentDescriptorBuilder(AddAppointmentCommand.AddAppointmentDescriptor descriptor) {","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"        this.descriptor \u003d new AddAppointmentCommand.AddAppointmentDescriptor(descriptor);","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns an {@code AddAppointmentDescriptor} with fields containing","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code Appointment}\u0027s details","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    public AddAppointmentDescriptorBuilder(Appointment appointment) {","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor \u003d new AddAppointmentCommand.AddAppointmentDescriptor();","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor.setAppointmentDate(appointment.getAppointmentDate());","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor.setSession(appointment.getSession());","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor.setRemark(appointment.getRemark());","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code appointment date} of the {@code AddAppointmentDescriptorBuilder} that we are","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"     * building.","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"    public seedu.plannermd.testutil.appointment.AddAppointmentDescriptorBuilder withAppointmentDate(String date) {","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor.setAppointmentDate(new AppointmentDate(date));","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code session} of the {@code AddAppointmentDescriptorBuilder} that we are","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"     * building.","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"    public seedu.plannermd.testutil.appointment.AddAppointmentDescriptorBuilder withSession(String time, int duration) {","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor.setSession(new Session(time, new Duration(duration)));","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code remark} of the {@code AddAppointmentDescriptor} that we are","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"     * building.","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"    public seedu.plannermd.testutil.appointment.AddAppointmentDescriptorBuilder withRemark(String remark) {","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor.setRemark(new Remark(remark));","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"    public AddAppointmentCommand.AddAppointmentDescriptor build() {","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"        return descriptor;","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"ChuangZheQuan":66}},{"path":"src/test/java/seedu/plannermd/testutil/appointment/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.testutil.appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_REMARK;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Session;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.doctor.DoctorBuilder;","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.patient.PatientBuilder;","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"/**","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":" * A utility class to help with building Appointment objects.","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":" */","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final Doctor DEFAULT_DOCTOR \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final Patient DEFAULT_PATIENT \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final String DEFAULT_DATE \u003d \"1/1/2025\";","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final String DEFAULT_TIME \u003d \"12:00\";","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"    private static final Integer DEFAULT_DURATION \u003d 30;","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"    private Doctor doctor;","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    private Patient patient;","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    private AppointmentDate date;","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"    private Session session;","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"    private Remark remark;","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"ChuangZheQuan"},"content":"     * Creates a {@code AppointmentBuilder} with the default details.","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"ChuangZheQuan"},"content":"        doctor \u003d DEFAULT_DOCTOR;","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"ChuangZheQuan"},"content":"        patient \u003d DEFAULT_PATIENT;","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"ChuangZheQuan"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"        date \u003d new AppointmentDate(DEFAULT_DATE);","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"        session \u003d new Session(DEFAULT_TIME, new Duration(DEFAULT_DURATION));","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"ChuangZheQuan"},"content":"     * Initializes the AppointmentBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"        doctor \u003d appointmentToCopy.getDoctor();","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"ChuangZheQuan"},"content":"        patient \u003d appointmentToCopy.getPatient();","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"ChuangZheQuan"},"content":"        date \u003d appointmentToCopy.getAppointmentDate();","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"        session \u003d appointmentToCopy.getSession();","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"        remark \u003d appointmentToCopy.getRemark();","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Doctor} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder withDoctor(Name name, Phone phone, Email email, Address address, BirthDate birthDate,","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"ChuangZheQuan"},"content":"                                         Remark remark, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"        this.doctor \u003d new Doctor(name, phone, email, address, birthDate, remark, tags);","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Doctor} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder withDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"        this.doctor \u003d doctor;","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Patient} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder withPatient(Name name, Phone phone, Email email, Address address, BirthDate birthDate,","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"                                          Remark remark, Set\u003cTag\u003e tags, Risk risk) {","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"        this.patient \u003d new Patient(name, phone, email, address, birthDate, remark, tags, risk);","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Patient} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder withPatient(Patient patient) {","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code AppointmentDate} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder withDate(String date) {","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"ChuangZheQuan"},"content":"        this.date \u003d new AppointmentDate(date);","lastModifiedDate":"2021-10-16"},{"lineNumber":102,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-16"},{"lineNumber":103,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":105,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Session} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-16"},{"lineNumber":107,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":108,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder withSession(String startTime, Integer duration) {","lastModifiedDate":"2021-10-16"},{"lineNumber":109,"author":{"gitId":"ChuangZheQuan"},"content":"        Duration dur \u003d new Duration(duration);","lastModifiedDate":"2021-10-16"},{"lineNumber":110,"author":{"gitId":"ChuangZheQuan"},"content":"        this.session \u003d new Session(startTime, dur);","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-16"},{"lineNumber":112,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":114,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":115,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Remark} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-16"},{"lineNumber":116,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"    public AppointmentBuilder withRemark(String remark) {","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"        this.remark \u003d new Remark(remark);","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-16"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"    public Appointment build() {","lastModifiedDate":"2021-10-16"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"        return new Appointment(patient, doctor, date, session, remark);","lastModifiedDate":"2021-10-16"},{"lineNumber":124,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"ChuangZheQuan":126}},{"path":"src/test/java/seedu/plannermd/testutil/appointment/AppointmentFiltersBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package seedu.plannermd.testutil.appointment;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.logic.commands.apptcommand.AppointmentFilters;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentContainsDoctorPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentContainsPatientPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentIsAfterPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import seedu.plannermd.model.appointment.AppointmentIsBeforePredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":" * A utility class to help with building Appointment Filter objects.","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"public class AppointmentFiltersBuilder {","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private AppointmentFilters filters;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     * Initializes the AppointmentFilterBuilder with the default values.","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder() {","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        filters \u003d AppointmentFilters.allAppointmentsFilter();","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * Initializes the AppointmentFilterBuilder with the data of","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     * {@code appointmentFilterToCopy}","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder(AppointmentFilters appointmentFilterToCopy) {","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        requireNonNull(appointmentFilterToCopy);","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        filters \u003d AppointmentFilters.copyAppointmentFilters(appointmentFilterToCopy);","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     * Sets the {@code AppointmentFilters} that we are building to filter for upcoming appointments.","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder withUpcoming() {","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        filters.setStartAfter(new AppointmentIsAfterPredicate(LocalDateTime.now()));","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     * Sets the {@code startAfter} of the {@code AppointmentFilters} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder withStartDate(LocalDate date) {","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        filters.setStartAfter(new AppointmentIsAfterPredicate(date));","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"     * Sets the {@code startAfter} of the {@code AppointmentFilters} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder withStartDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        filters.setStartAfter(new AppointmentIsAfterPredicate(dateTime));","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"     * Sets the {@code startBefore} of the {@code AppointmentFilters} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder withEndDate(LocalDate date) {","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        filters.setStartBefore(new AppointmentIsBeforePredicate(date));","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"     * Sets the {@code hasPatient} of the {@code AppointmentFilters} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder withPatientKeywords(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        filters.setHasPatient(new AppointmentContainsPatientPredicate(keywords));","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"     * Sets the {@code hasPatient} of the {@code AppointmentFilters} that we are building.","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder withPatientKeywords(String... keywords) {","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        filters.setHasPatient(new AppointmentContainsPatientPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        return this;","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"     * Sets the {@code hasDoctor} of the {@code AppointmentFilters} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder withDoctorKeywords(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        filters.setHasDoctor(new AppointmentContainsDoctorPredicate(keywords));","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"     * Sets the {@code hasDoctor} of the {@code AppointmentFilters} that we are building.","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFiltersBuilder withDoctorKeywords(String... keywords) {","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        filters.setHasDoctor(new AppointmentContainsDoctorPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        return this;","lastModifiedDate":"2021-10-20"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"     * Builds the {@code AppointmentFilter} object.","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"    public AppointmentFilters build() {","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        return filters;","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Haozeee":109}},{"path":"src/test/java/seedu/plannermd/testutil/appointment/AppointmentUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.testutil.appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.testutil.PersonUtil;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"ChuangZheQuan"},"content":"public class AppointmentUtil {","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns an add command string for adding the {@code appointment}.","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"    public static String getAddAppointmentCommand(Doctor doctor) {","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"ChuangZheQuan"},"content":"        //TODO: implement this","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"ChuangZheQuan"},"content":"        return \"\";","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details.","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"    public static String getAppointmentDetails(Appointment appointment) {","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"        //TODO: implement this","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"ChuangZheQuan"},"content":"        sb.append(getAppointmentDetails(appointment));","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"ChuangZheQuan"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns the part of command string for the given {@code EditAppointmentDescriptor}\u0027s details.","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"ChuangZheQuan"},"content":"    public static String getEditAppointmentDescriptorDetails(EditDoctorCommand.EditDoctorDescriptor descriptor) {","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"ChuangZheQuan"},"content":"        //TODO: implement this","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"ChuangZheQuan"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"ChuangZheQuan"},"content":"        sb.append(PersonUtil.getEditDoctorDescriptorDetails(descriptor));","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"ChuangZheQuan":40}},{"path":"src/test/java/seedu/plannermd/testutil/appointment/EditAppointmentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pualixue"},"content":"package seedu.plannermd.testutil.appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.commons.core.index.Index;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.apptcommand.EditAppointmentCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.AppointmentDate;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.appointment.Duration;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":" * A utility class to help with building EditAppointmentDescriptor objects.","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"public class EditAppointmentDescriptorBuilder {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"    private final EditAppointmentCommand.EditAppointmentDescriptor descriptor;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder() {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor();","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder(EditAppointmentCommand.EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"        this.descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor(descriptor);","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"     * Returns an {@code EditAppointmentDescriptor} with fields containing","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"     * {@code Appointment}\u0027s details","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder(Index patientIndex, Index doctorIndex, Appointment appointment) {","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditAppointmentCommand.EditAppointmentDescriptor();","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"        descriptor.setPatientIndex(patientIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"        descriptor.setDoctorIndex(doctorIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"        descriptor.setAppointmentDate(appointment.getAppointmentDate());","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"        descriptor.setStartTime(appointment.getSession().getFormattedStartTime());","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"        descriptor.setDuration(appointment.getSession().duration);","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        descriptor.setRemark(appointment.getRemark());","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code patient index} of the {@code EditAppointmentDescriptor} that we are","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"     * building.","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder withPatientIndex(String patientIndex) {","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"        int index \u003d Integer.parseInt(patientIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"        descriptor.setPatientIndex(Index.fromOneBased(index));","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code doctor index} of the {@code EditAppointmentDescriptor} that we are","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"     * building.","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder withDoctorIndex(String doctorIndex) {","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"        int index \u003d Integer.parseInt(doctorIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"        descriptor.setDoctorIndex(Index.fromOneBased(index));","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code AppointmentDate} of the {@code EditAppointmentDescriptor} that we are","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"     * building.","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder withAppointmentDate(String appointmentDate) {","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"        descriptor.setAppointmentDate(new AppointmentDate(appointmentDate));","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code start time} of the {@code EditAppointmentDescriptor} that we are","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"     * building.","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder withStartTime(String startTime) {","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"        descriptor.setStartTime(startTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code Duration} of the {@code EditAppointmentDescriptor}","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"     * that we are building.","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder withDuration(String duration) {","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"        int dur \u003d Integer.parseInt(duration);","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"        descriptor.setDuration(new Duration(dur));","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code Remark} of the {@code EditAppointmentDescriptor}","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"     * that we are building.","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentDescriptorBuilder withRemark(String remark) {","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"        descriptor.setRemark(new Remark(remark));","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"    public EditAppointmentCommand.EditAppointmentDescriptor build() {","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        return descriptor;","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"pualixue":99}},{"path":"src/test/java/seedu/plannermd/testutil/appointment/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.testutil.appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_ALICE;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_BENSON;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_CARL;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_ELLE;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_FIONA;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.doctor.TypicalDoctors.DR_GEORGE;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.BENSON;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.CARL;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.ELLE;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.FIONA;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.patient.TypicalPatients.GEORGE;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"ChuangZheQuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.appointment.Appointment;","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"ChuangZheQuan"},"content":"public class TypicalAppointments {","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    public static final Appointment TWO_HOUR_APPOINTMENT \u003d new AppointmentBuilder()","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"            .withPatient(ALICE).withDoctor(DR_GEORGE).withDate(\"6/6/2022\")","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"            .withSession(\"18:00\", 120)","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"            .withRemark(\"Therapy Session\").build();","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    public static final Appointment FIVE_MIN_APPOINTMENT \u003d new AppointmentBuilder()","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"            .withPatient(BENSON).withDoctor(DR_FIONA).withDate(\"8/8/2022\")","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"            .withSession(\"12:00\", 5)","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"            .withRemark(\"Blocked Nose\").build();","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    public static final Appointment THIRTY_MIN_APPOINTMENT \u003d new AppointmentBuilder()","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"            .withPatient(CARL).withDoctor(DR_ELLE).withDate(\"10/10/2022\")","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"            .withSession(\"09:00\", 30)","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"            .withRemark(\"High Fever and Cough\").build();","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public static final Appointment ANOTHER_TWO_HOUR_APPOINTMENT \u003d new AppointmentBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"            .withPatient(GEORGE).withDoctor(DR_ALICE).withDate(\"6/6/2023\")","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"            .withSession(\"20:00\", 120)","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"            .withRemark(\"Therapy Session\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    public static final Appointment ANOTHER_FIVE_MIN_APPOINTMENT \u003d new AppointmentBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"            .withPatient(FIONA).withDoctor(DR_BENSON).withDate(\"8/8/2023\")","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"            .withSession(\"12:05\", 5)","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"            .withRemark(\"Head Trauma\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    public static final Appointment ANOTHER_THIRTY_MIN_APPOINTMENT \u003d new AppointmentBuilder()","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"            .withPatient(ELLE).withDoctor(DR_CARL).withDate(\"10/10/2023\")","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"            .withSession(\"09:30\", 30)","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"            .withRemark(\"Sore throat\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"    private TypicalAppointments() {","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"ChuangZheQuan"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TWO_HOUR_APPOINTMENT, FIVE_MIN_APPOINTMENT, THIRTY_MIN_APPOINTMENT,","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"                ANOTHER_TWO_HOUR_APPOINTMENT, ANOTHER_FIVE_MIN_APPOINTMENT, ANOTHER_THIRTY_MIN_APPOINTMENT));","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"ChuangZheQuan"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"ChuangZheQuan":15,"jiayi1129":40}},{"path":"src/test/java/seedu/plannermd/testutil/doctor/DoctorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil.doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_ADDRESS;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_BIRTH_DATE;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_EMAIL;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_NAME;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_PHONE;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_REMARK;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":" * A utility class to help with building Doctor objects.","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"public class DoctorBuilder {","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    private Name name;","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    private Phone phone;","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    private Email email;","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    private Address address;","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    private BirthDate birthDate;","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    private Remark remark;","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"     * Creates a {@code DoctorBuilder} with the default details.","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder() {","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        birthDate \u003d new BirthDate(DEFAULT_BIRTH_DATE);","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"     * Initializes the DoctorBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder(Person personToCopy) {","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"        birthDate \u003d personToCopy.getBirthDate();","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        remark \u003d personToCopy.getRemark();","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"     * Initializes the DoctorBuilder with the data of {@code doctorToCopy}.","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder(Doctor doctorToCopy) {","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"        name \u003d doctorToCopy.getName();","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"        phone \u003d doctorToCopy.getPhone();","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"        email \u003d doctorToCopy.getEmail();","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"        address \u003d doctorToCopy.getAddress();","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"        birthDate \u003d doctorToCopy.getBirthDate();","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"        remark \u003d doctorToCopy.getRemark();","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        tags \u003d new HashSet\u003c\u003e(doctorToCopy.getTags());","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Name} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder withName(String name) {","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder withTags(String ... tags) {","lastModifiedDate":"2021-10-05"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":92,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Email} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder withBirthDate(String birthDate) {","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"        this.birthDate \u003d new BirthDate(birthDate);","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Address} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder withAddress(String address) {","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2021-10-05"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Phone} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder withPhone(String phone) {","lastModifiedDate":"2021-10-05"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Email} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder withEmail(String email) {","lastModifiedDate":"2021-10-05"},{"lineNumber":120,"author":{"gitId":"jiayi1129"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":122,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":123,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Remark} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"jiayi1129"},"content":"    public DoctorBuilder withRemark(String remark) {","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"jiayi1129"},"content":"        this.remark \u003d new Remark(remark);","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"jiayi1129"},"content":"    public Doctor build() {","lastModifiedDate":"2021-10-05"},{"lineNumber":133,"author":{"gitId":"jiayi1129"},"content":"        return new Doctor(name, phone, email, address, birthDate, remark, tags);","lastModifiedDate":"2021-10-08"},{"lineNumber":134,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":135,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":136,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"jiayi1129":136}},{"path":"src/test/java/seedu/plannermd/testutil/doctor/DoctorUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil.doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonUtil.getPersonDetails;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.addcommand.AddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.testutil.PersonUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":" * A utility class for Doctor.","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"public class DoctorUtil {","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"     * Returns an add command string for adding the {@code doctor}.","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    public static String getAddCommand(Doctor doctor) {","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getDoctorDetails(doctor);","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"     * Returns the part of command string for the given {@code doctor}\u0027s details.","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public static String getDoctorDetails(Doctor doctor) {","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        sb.append(getPersonDetails(doctor));","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"     * Returns the part of command string for the given {@code EditDoctorDescriptor}\u0027s details.","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"    public static String getEditDoctorDescriptorDetails(EditDoctorCommand.EditDoctorDescriptor descriptor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        sb.append(PersonUtil.getEditDoctorDescriptorDetails(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"pualixue":5,"jiayi1129":34}},{"path":"src/test/java/seedu/plannermd/testutil/doctor/EditDoctorDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ChuangZheQuan"},"content":"package seedu.plannermd.testutil.doctor;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"pualixue"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"pualixue"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"pualixue"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"pualixue"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"pualixue"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"pualixue"},"content":" * A utility class to help with building EditDoctorDescriptor objects.","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"pualixue"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"pualixue"},"content":"public class EditDoctorDescriptorBuilder {","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"pualixue"},"content":"    private EditDoctorCommand.EditDoctorDescriptor descriptor;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder() {","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditDoctorCommand.EditDoctorDescriptor();","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder(EditDoctorCommand.EditDoctorDescriptor descriptor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"pualixue"},"content":"        this.descriptor \u003d new EditDoctorCommand.EditDoctorDescriptor(descriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"pualixue"},"content":"     * Returns an {@code EditDoctorDescriptor} with fields containing","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"pualixue"},"content":"     * {@code Doctor}\u0027s details","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"pualixue"},"content":"        descriptor \u003d new EditDoctorCommand.EditDoctorDescriptor();","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"pualixue"},"content":"        descriptor.setName(doctor.getName());","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"pualixue"},"content":"        descriptor.setPhone(doctor.getPhone());","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"pualixue"},"content":"        descriptor.setEmail(doctor.getEmail());","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"pualixue"},"content":"        descriptor.setAddress(doctor.getAddress());","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"pualixue"},"content":"        descriptor.setBirthDate(doctor.getBirthDate());","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"pualixue"},"content":"        descriptor.setTags(doctor.getTags());","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code Name} of the {@code EditDoctorDescriptor} that we are","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"pualixue"},"content":"     * building.","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"pualixue"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code Phone} of the {@code EditDoctorDescriptor} that we are","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"pualixue"},"content":"     * building.","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"pualixue"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code Email} of the {@code EditDoctorDescriptor} that we are","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"pualixue"},"content":"     * building.","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"pualixue"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code Address} of the {@code EditDoctorDescriptor} that we are","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"pualixue"},"content":"     * building.","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"pualixue"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"pualixue"},"content":"     * Sets the {@code BirthDate} of the {@code EditDoctorDescriptor}","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"pualixue"},"content":"     * that we are building.","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder withBirthDate(String birthDate) {","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"pualixue"},"content":"        descriptor.setBirthDate(new BirthDate(birthDate));","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"pualixue"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"pualixue"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"pualixue"},"content":"     * {@code EditDoctorDescriptor} that we are building.","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"pualixue"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"pualixue"},"content":"    public EditDoctorDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"pualixue"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"pualixue"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"pualixue"},"content":"        return this;","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"pualixue"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"pualixue"},"content":"    public EditDoctorCommand.EditDoctorDescriptor build() {","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"pualixue"},"content":"        return descriptor;","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"pualixue"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"pualixue"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"pualixue":102,"ChuangZheQuan":1}},{"path":"src/test/java/seedu/plannermd/testutil/doctor/TypicalDoctors.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil.doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.TypicalPersons.IDA;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.doctor.Doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":" * A utility class containing a list of {@code Patient} objects to be used in tests.","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"public class TypicalDoctors {","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_ALICE \u003d new DoctorBuilder(ALICE).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_BENSON \u003d new DoctorBuilder(BENSON).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_CARL \u003d new DoctorBuilder(CARL).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_DANIEL \u003d new DoctorBuilder(DANIEL).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_ELLE \u003d new DoctorBuilder(ELLE).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_FIONA \u003d new DoctorBuilder(FIONA).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_GEORGE \u003d new DoctorBuilder(GEORGE).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    // Manually added","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_HOON \u003d new DoctorBuilder(HOON).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_IDA \u003d new DoctorBuilder(IDA).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_AMY \u003d new DoctorBuilder(AMY).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    public static final Doctor DR_BOB \u003d new DoctorBuilder(BOB).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    private TypicalDoctors() {} // prevents instantiation","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    public static List\u003cDoctor\u003e getTypicalDoctors() {","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(DR_ALICE, DR_BENSON, DR_CARL, DR_DANIEL, DR_ELLE, DR_FIONA, DR_GEORGE));","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"jiayi1129":50}},{"path":"src/test/java/seedu/plannermd/testutil/patient/EditPatientDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil.patient;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":" * A utility class to help with building EditPatientDescriptor objects.","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"public class EditPatientDescriptorBuilder {","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    private EditPatientCommand.EditPatientDescriptor descriptor;","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder() {","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientCommand.EditPatientDescriptor();","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder(EditPatientCommand.EditPatientDescriptor descriptor) {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"        this.descriptor \u003d new EditPatientCommand.EditPatientDescriptor(descriptor);","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"ChuangZheQuan"},"content":"     * Returns an {@code EditPatientDescriptor} with fields containing","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"     * {@code Patient}\u0027s details","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder(Patient patient) {","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"        descriptor \u003d new EditPatientCommand.EditPatientDescriptor();","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"        descriptor.setName(patient.getName());","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"        descriptor.setPhone(patient.getPhone());","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"        descriptor.setEmail(patient.getEmail());","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"        descriptor.setAddress(patient.getAddress());","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"        descriptor.setBirthDate(patient.getBirthDate());","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"        descriptor.setTags(patient.getTags());","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        descriptor.setRisk(patient.getRisk());","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"ChuangZheQuan"},"content":"     * building.","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"ChuangZheQuan"},"content":"     * building.","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Email} of the {@code EditPatientDescriptor} that we are","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"ChuangZheQuan"},"content":"     * building.","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"     * building.","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"ChuangZheQuan"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":85,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code BirthDate} of the {@code EditPersonDescriptor}","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder withBirthDate(String birthDate) {","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"ChuangZheQuan"},"content":"        descriptor.setBirthDate(new BirthDate(birthDate));","lastModifiedDate":"2021-10-02"},{"lineNumber":90,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-09-28"},{"lineNumber":91,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the","lastModifiedDate":"2021-10-05"},{"lineNumber":95,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code EditPersonDescriptor} \u003d\u003d\u003d\u003d\u003d\u003d\u003d Parses the {@code tags} into a","lastModifiedDate":"2021-10-05"},{"lineNumber":96,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code Set\u003cTag\u003e} and set it to the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Risk} of the {@code EditPatientDescriptor}","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"     * that we are building.","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptorBuilder withRisk(String risk) {","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"        descriptor.setRisk(Risk.getUnclassifiableRisk(risk));","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"    public EditPatientDescriptor build() {","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"ChuangZheQuan":20,"-":53,"jiayi1129":43}},{"path":"src/test/java/seedu/plannermd/testutil/patient/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil.patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_ADDRESS;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_BIRTH_DATE;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_EMAIL;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_NAME;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_PHONE;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonBuilder.DEFAULT_REMARK;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import java.util.Set;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Address;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":"import seedu.plannermd.model.person.BirthDate;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Email;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Name;","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Person;","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.person.Phone;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"hpkoh"},"content":"import seedu.plannermd.model.person.Remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.tag.Tag;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.util.SampleDataUtil;","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":" * A utility class to help with building Patient objects.","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"public class PatientBuilder {","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    public static final String DEFAULT_RISK \u003d \"LOW\";","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"    private Name name;","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    private Phone phone;","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    private Email email;","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    private Address address;","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"ChuangZheQuan"},"content":"    private BirthDate birthDate;","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"hpkoh"},"content":"    private Remark remark;","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"    private Risk risk;","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"     * Creates a {@code PatientBuilder} with the default details.","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"    public PatientBuilder() {","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jiayi1129"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"        birthDate \u003d new BirthDate(DEFAULT_BIRTH_DATE);","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"hpkoh"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        risk \u003d new Risk(DEFAULT_RISK);","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"jiayi1129"},"content":"     * Initializes the PatientBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"jiayi1129"},"content":"    public PatientBuilder(Person personToCopy) {","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"jiayi1129"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"jiayi1129"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"jiayi1129"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"jiayi1129"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"jiayi1129"},"content":"        birthDate \u003d personToCopy.getBirthDate();","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"jiayi1129"},"content":"        remark \u003d personToCopy.getRemark();","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"jiayi1129"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"jiayi1129"},"content":"        risk \u003d new Risk(DEFAULT_RISK);","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jiayi1129"},"content":"     * Initializes the PatientBuilder with the data of {@code patientToCopy}.","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jiayi1129"},"content":"    public PatientBuilder(Patient patientToCopy) {","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jiayi1129"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"jiayi1129"},"content":"        phone \u003d patientToCopy.getPhone();","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"jiayi1129"},"content":"        email \u003d patientToCopy.getEmail();","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jiayi1129"},"content":"        address \u003d patientToCopy.getAddress();","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"ChuangZheQuan"},"content":"        birthDate \u003d patientToCopy.getBirthDate();","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"hpkoh"},"content":"        remark \u003d patientToCopy.getRemark();","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"jiayi1129"},"content":"        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jiayi1129"},"content":"        risk \u003d patientToCopy.getRisk();","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building.","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"jiayi1129"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"jiayi1129"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"ChuangZheQuan"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the","lastModifiedDate":"2021-10-05"},{"lineNumber":93,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code Patient} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":94,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"jiayi1129"},"content":"    public PatientBuilder withTags(String... tags) {","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"jiayi1129"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Phone} of the {@code Patient} that we are building.","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"jiayi1129"},"content":"    public PatientBuilder withPhone(String phone) {","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"jiayi1129"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"jiayi1129"},"content":"     * Sets the {@code Email} of the {@code Patient} that we are building.","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"jiayi1129"},"content":"    public PatientBuilder withEmail(String email) {","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"jiayi1129"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Email} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"ChuangZheQuan"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"ChuangZheQuan"},"content":"    public PatientBuilder withBirthDate(String birthDate) {","lastModifiedDate":"2021-10-05"},{"lineNumber":120,"author":{"gitId":"ChuangZheQuan"},"content":"        this.birthDate \u003d new BirthDate(birthDate);","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"ChuangZheQuan"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":122,"author":{"gitId":"ChuangZheQuan"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":123,"author":{"gitId":"ChuangZheQuan"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"hpkoh"},"content":"     * Sets the {@code Address} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-05"},{"lineNumber":126,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":127,"author":{"gitId":"hpkoh"},"content":"    public PatientBuilder withAddress(String address) {","lastModifiedDate":"2021-10-05"},{"lineNumber":128,"author":{"gitId":"hpkoh"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2021-10-05"},{"lineNumber":129,"author":{"gitId":"hpkoh"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":130,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":131,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":132,"author":{"gitId":"hpkoh"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":133,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Remark} of the","lastModifiedDate":"2021-10-06"},{"lineNumber":134,"author":{"gitId":"ChuangZheQuan"},"content":"     * {@code Patient} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":135,"author":{"gitId":"hpkoh"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":136,"author":{"gitId":"hpkoh"},"content":"    public PatientBuilder withRemark(String remark) {","lastModifiedDate":"2021-10-05"},{"lineNumber":137,"author":{"gitId":"hpkoh"},"content":"        this.remark \u003d new Remark(remark);","lastModifiedDate":"2021-10-05"},{"lineNumber":138,"author":{"gitId":"hpkoh"},"content":"        return this;","lastModifiedDate":"2021-10-05"},{"lineNumber":139,"author":{"gitId":"hpkoh"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":140,"author":{"gitId":"hpkoh"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":141,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"ChuangZheQuan"},"content":"     * Sets the {@code Risk} of the {@code Patient} that we are building. Accepts","lastModifiedDate":"2021-10-05"},{"lineNumber":143,"author":{"gitId":"ChuangZheQuan"},"content":"     * UNCLASSIFIED risk.","lastModifiedDate":"2021-10-06"},{"lineNumber":144,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"jiayi1129"},"content":"    public PatientBuilder withRisk(String risk) {","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"jiayi1129"},"content":"        this.risk \u003d Risk.getUnclassifiableRisk(risk);","lastModifiedDate":"2021-09-30"},{"lineNumber":147,"author":{"gitId":"jiayi1129"},"content":"        return this;","lastModifiedDate":"2021-09-29"},{"lineNumber":148,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":149,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"jiayi1129"},"content":"    public Patient build() {","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"ChuangZheQuan"},"content":"        return new Patient(name, phone, email, address, birthDate, remark, tags, risk);","lastModifiedDate":"2021-10-06"},{"lineNumber":152,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"hpkoh":19,"ChuangZheQuan":18,"jiayi1129":117}},{"path":"src/test/java/seedu/plannermd/testutil/patient/PatientUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil.patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.parser.CliSyntax.PREFIX_RISK;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonUtil.getEditPersonDescriptorDetails;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.PersonUtil.getPersonDetails;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.logic.commands.editcommand.EditPatientCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"public class PatientUtil {","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"     * Returns an add command string for adding the {@code patient}.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jiayi1129"},"content":"    public static String getAddCommand(Patient patient) {","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"     * Returns the part of command string for the given {@code patient}\u0027s details.","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    public static String getPatientDetails(Patient patient) {","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"        sb.append(getPersonDetails(patient));","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"        sb.append(PREFIX_RISK + patient.getRisk().toString() + \" \");","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"        return sb.toString();","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details.","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"    public static String getEditPatientDescriptorDetails(EditPatientCommand.EditPatientDescriptor descriptor) {","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"        sb.append(getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"        descriptor.getRisk().ifPresent(risk -\u003e sb.append(PREFIX_RISK).append(risk).append(\" \"));","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"        return sb.toString();","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"jiayi1129":39}},{"path":"src/test/java/seedu/plannermd/testutil/patient/TypicalPatients.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.testutil.patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_RISK_AMY;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.logic.commands.CommandTestUtil.VALID_RISK_BOB;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.model.patient.Risk.UNCLASSIFIED_RISK;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jiayi1129"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jiayi1129"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jiayi1129"},"content":"import java.util.List;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.model.patient.Patient;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.testutil.TypicalPersons;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"ChuangZheQuan"},"content":" * A utility class containing a list of {@code Patient} objects to be used in","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"ChuangZheQuan"},"content":" * tests.","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"jiayi1129"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jiayi1129"},"content":"public class TypicalPatients {","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient ALICE \u003d new PatientBuilder(TypicalPersons.ALICE)","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(\"LOW\").build();","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient BENSON \u003d new PatientBuilder(TypicalPersons.BENSON)","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(\"LOW\").build();","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient CARL \u003d new PatientBuilder(TypicalPersons.CARL)","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(UNCLASSIFIED_RISK).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient DANIEL \u003d new PatientBuilder(TypicalPersons.DANIEL)","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(\"MEDIUM\").build();","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient ELLE \u003d new PatientBuilder(TypicalPersons.ELLE)","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(\"LOW\").build();","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient FIONA \u003d new PatientBuilder(TypicalPersons.FIONA)","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(UNCLASSIFIED_RISK).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient GEORGE \u003d new PatientBuilder(TypicalPersons.GEORGE)","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(\"HIGH\").build();","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jiayi1129"},"content":"    // Manually added","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient HOON \u003d new PatientBuilder(TypicalPersons.HOON)","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(\"LOW\").build();","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient IDA \u003d new PatientBuilder(TypicalPersons.IDA)","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(\"LOW\").build();","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jiayi1129"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient AMY \u003d new PatientBuilder(TypicalPersons.AMY)","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(VALID_RISK_AMY).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jiayi1129"},"content":"    public static final Patient BOB \u003d new PatientBuilder(TypicalPersons.BOB)","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"jiayi1129"},"content":"            .withRisk(VALID_RISK_BOB).build();","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jiayi1129"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"ChuangZheQuan"},"content":"    private TypicalPatients() {","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"ChuangZheQuan"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"jiayi1129"},"content":"    public static List\u003cPatient\u003e getTypicalPatients() {","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"jiayi1129"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"jiayi1129"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"jiayi1129"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"jiayi1129"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"ChuangZheQuan":4,"jiayi1129":51}},{"path":"src/test/java/seedu/plannermd/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":34,"jiayi1129":1}},{"path":"src/test/java/seedu/plannermd/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiayi1129"},"content":"package seedu.plannermd.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"jiayi1129"},"content":"import static seedu.plannermd.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"jiayi1129"},"content":"import seedu.plannermd.MainApp;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":111,"jiayi1129":3}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"\u003c?import seedu.plannermd.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":3,"jiayi1129":1}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"jiayi1129"},"content":"\u003cfx:root type\u003d\"seedu.plannermd.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":5,"jiayi1129":1}}]
