[{"path":".github/pull_request_template.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"### Summary","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"_resolve the linked issue using **resolves #\u003cissue_number\u003e**_","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"_provide of an overview about this PR_","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"### Detail","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"_provide more detailed steps, on how to start to review, whether it has been tested on desktop, etc_","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"### Pictures / Gif","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"_provide gif or screenshot of the features if there is any_","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"### Checks","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"- [ ] Link PR to issue","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"- [ ] Add Reviewer","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"- [ ] Pass CI","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"simonjulianl":2,"-":17}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T15-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T15-1/tp/actions)","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"# About GoMedic","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"GoMedic is a desktop application designed for doctors and medical residents to manage contacts and patient details.","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"We aim GoMedic to be used by someone who can type fast and take advantage of the optimized features for","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"Command Line Interface.","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"# User Interface","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"# Acknowledgement","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org/).","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"* The project simulates an ongoing software project for a desktop application (called AddressBook)","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"  used for managing contact details.","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    * It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"      students usually write in beginner-level SE modules, without being overwhelmingly big.","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    * It comes with a reasonable level of user and developer documentation.","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"radiankrisno":14,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"mainClassName \u003d \u0027gomedic.Main\u0027","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"ngsengleng"},"content":"    compile \u0027org.apache.commons:commons-text:1.9\u0027","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    archiveName \u003d \u0027gomedic.jar\u0027","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ngsengleng":2,"simonjulianl":2,"-":70}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2019-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2019-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for a modified version of the module\u0027s code standard at","lastModifiedDate":"2016-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html","lastModifiedDate":"2016-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e","lastModifiedDate":"2019-02-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-10-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    IMPORT CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.","lastModifiedDate":"2017-01-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:","lastModifiedDate":"2017-01-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      1. STATIC: static imports","lastModifiedDate":"2017-01-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      2. STANDARD_JAVA_PACKAGE: standard java/javax imports","lastModifiedDate":"2017-01-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      3. SPECIAL_IMPORTS: defined as org imports","lastModifiedDate":"2017-01-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      4. THIRD_PARTY_PACKAGE: defined as com imports","lastModifiedDate":"2017-01-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CustomImportOrder\"\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"customImportOrderRules\"","lastModifiedDate":"2017-01-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    An import statement is redundant if:","lastModifiedDate":"2017-01-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2017-01-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2017-01-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2017-01-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for unused import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    An import statement is unused if:","lastModifiedDate":"2017-01-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      It\u0027s not referenced in the file.","lastModifiedDate":"2017-01-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    NAMING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    LENGTH and CODING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2017-04-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      the same line. e.g., the following example is fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } else","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      \u003c!-- This next example is not fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        else","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      if (true) return 1; // Not allowed","lastModifiedDate":"2017-04-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      if (true) { return 1; } // Not allowed","lastModifiedDate":"2016-10-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      else if {","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return 1; // else if should always be multi line","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      if (true)","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return 1; // Not allowed","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2017-09-17"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-17"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that Class variables should never be declared public. --\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"VisibilityModifier\"\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    ORDER CHECKS","lastModifiedDate":"2017-01-16"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2017-04-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2017-04-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2017-04-01"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":243,"author":{"gitId":"-"},"content":"      3. Constructors","lastModifiedDate":"2017-04-01"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      4. Methods","lastModifiedDate":"2017-04-01"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"           8.4.3.  The prescribed order is:","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"           public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"           synchronized, native, strictfp","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2017-01-16"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    WHITESPACE CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAround\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that various tokens are surrounded by whitespace.","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"           This includes most binary operators and keywords followed","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"           by regular or curly braces.","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,","lastModifiedDate":"2016-12-10"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty methods e.g. void func() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":286,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        UNARY_PLUS\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    \u003c!-- No trailing whitespace --\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Regexp\"\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":310,"author":{"gitId":"-"},"content":"           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\",","lastModifiedDate":"2017-05-22"},{"lineNumber":311,"author":{"gitId":"-"},"content":"           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\",","lastModifiedDate":"2017-05-22"},{"lineNumber":312,"author":{"gitId":"-"},"content":"           \"\u0026\" when used in a generic upper or lower bounds constraints,","lastModifiedDate":"2017-05-22"},{"lineNumber":313,"author":{"gitId":"-"},"content":"             e.g. \u003cT extends Foo \u0026 Bar\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":314,"author":{"gitId":"-"},"content":"           \"::\" when used as a reference to a method or constructor without arguments.","lastModifiedDate":"2017-05-22"},{"lineNumber":315,"author":{"gitId":"-"},"content":"             e.g. String::compareToIgnoreCase","lastModifiedDate":"2017-05-22"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,","lastModifiedDate":"2017-05-22"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":323,"author":{"gitId":"-"},"content":"           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\".","lastModifiedDate":"2017-05-22"},{"lineNumber":324,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,","lastModifiedDate":"2017-05-22"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":332,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":336,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":338,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-14"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":342,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"arrayInitIndent\" value\u003d\"8\"/\u003e","lastModifiedDate":"2021-09-15"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":348,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParenPad\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":354,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character.","lastModifiedDate":"2018-08-15"},{"lineNumber":358,"author":{"gitId":"-"},"content":"         a \u003d 1; // Allowed","lastModifiedDate":"2018-08-15"},{"lineNumber":359,"author":{"gitId":"-"},"content":"         a  \u003d 1; // Not allowed (more than one space before \u003d)","lastModifiedDate":"2018-08-15"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":362,"author":{"gitId":"-"},"content":"      \u003c!-- Validate whitespace surrounding comments as well.","lastModifiedDate":"2018-08-15"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":364,"author":{"gitId":"-"},"content":"           a \u003d 1; // Allowed (single space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":365,"author":{"gitId":"-"},"content":"           a \u003d 1; /* Allowed (single space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"           /* Allowed (single space after end of comment) */ a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":367,"author":{"gitId":"-"},"content":"           a \u003d 1;  // Not allowed (more than one space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":368,"author":{"gitId":"-"},"content":"           a \u003d 1;  /* Not allowed (more than one space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":369,"author":{"gitId":"-"},"content":"           /* Not allowed (more than one space after end of comment) */  a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":371,"author":{"gitId":"-"},"content":"           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed.","lastModifiedDate":"2018-08-15"},{"lineNumber":372,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":373,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2017-08-20"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    JAVADOC CHECKS","lastModifiedDate":"2017-08-20"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":382,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":387,"author":{"gitId":"simonjulianl"},"content":"      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"TempDir, Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2021-10-03"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":389,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":390,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":391,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":392,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":398,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":399,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":400,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":403,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":404,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":1,"-":403}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"### Simon Julian Lauw","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"\u003cimg src\u003d\"images/simonjulianl.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"[[homepage](https://simonjulianl.github.io)]","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"[[github](https://github.com/simonjulianl)]","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"[[portfolio](team/simonjulianlauw.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"* Role: Team Lead ","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"* Responsibilities: Deliverables and deadlines  ","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"### Radian Krisno","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"\u003cimg src\u003d\"images/radiankrisno.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"[[github](http://github.com/radiankrisno)]","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"[[portfolio](team/radiankrisno.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"* Role: Developer","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"* Responsibilities: Program structure","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"### Yap Yuhang","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"\u003cimg src\u003d\"images/yyhangz.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"[[github](http://github.com/yyhangz)] [[portfolio](team/yapyuhang.md)]","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"* Responsibilities: Code quality","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"ngsengleng"},"content":"### Ng Seng Leng","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"\u003cimg src\u003d\"images/ngsengleng.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"ngsengleng"},"content":"[[github](http://github.com/ngsengleng)]","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"ngsengleng"},"content":"[[portfolio](team/ngsengleng.md)]","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"ramaven"},"content":"### Rama Venkatesh","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"\u003cimg src\u003d\"images/ramaven.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"ramaven"},"content":"[[github](http://github.com/ramaven)]","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"ramaven"},"content":"[[portfolio](team/ramavenkatesh.md)]","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"radiankrisno":5,"ngsengleng":3,"ramaven":3,"simonjulianl":11,"yyhangz":3,"-":35}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"* Table of Contents ","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" * The project is bootstrapped from [SE-EDU Address Book 3](\"https://se-education.org/addressbook-level3/)","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":" * {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"   original source as well}","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"the [diagrams](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"diagrams.","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"**`Main`** has two classes","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"called [`Main`](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/src/main/java/gomedic/Main.java)","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"and [`MainApp`](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/src/main/java/gomedic/MainApp.java). It","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"is responsible for,","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"the command `delete 1`.","lastModifiedDate":"2021-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"  API `interface` mentioned in the previous point.","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"The **API** of this component is specified","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"in [`Ui.java`](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/src/main/java/gomedic/ui/Ui.java)","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":", `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures","lastModifiedDate":"2021-09-24"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that","lastModifiedDate":"2021-09-24"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"are in the `src/main/resources/view` folder. For example, the layout of","lastModifiedDate":"2021-09-24"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"the [`MainWindow`](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/src/main/java/gomedic/ui/MainWindow.java)","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"is specified","lastModifiedDate":"2021-09-24"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"in [`MainWindow.fxml`](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"The original Figma design for the `UI` component can be found [here](https://www.figma.com/file/zqo6peKfu0Wxeay679eVq9/cs2103t-tp?node-id\u003d0%3A1)","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"**API** : [`Logic.java`](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/src/main/java/gomedic/logic/Logic.java)","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"2. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"   executed by the `LogicManager`.","lastModifiedDate":"2021-09-24"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"3. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"4. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API","lastModifiedDate":"2021-09-24"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"call.","lastModifiedDate":"2021-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a","lastModifiedDate":"2021-09-24"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"  placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"  the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as","lastModifiedDate":"2021-09-24"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"  a `Command` object.","lastModifiedDate":"2021-09-24"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser`","lastModifiedDate":"2021-09-24"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"  interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"**API** : [`Model.java`](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/src/main/java/gomedic/model/Model.java)","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which","lastModifiedDate":"2021-09-24"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"  is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to","lastModifiedDate":"2021-09-24"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"  this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-09-24"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as","lastModifiedDate":"2021-09-24"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"  a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-09-24"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they","lastModifiedDate":"2021-09-24"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"  should make sense on their own without depending on other components)","lastModifiedDate":"2021-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"**API** : [`Storage.java`](https://github.com/AY2122S1-CS2103T-T15-1/tp/tree/master/src/main/java/gomedic/storage/Storage.java)","lastModifiedDate":"2021-10-01"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":178,"author":{"gitId":"simonjulianl"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding","lastModifiedDate":"2021-09-24"},{"lineNumber":179,"author":{"gitId":"simonjulianl"},"content":"  objects.","lastModifiedDate":"2021-09-24"},{"lineNumber":180,"author":{"gitId":"simonjulianl"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only","lastModifiedDate":"2021-09-24"},{"lineNumber":181,"author":{"gitId":"simonjulianl"},"content":"  the functionality of only one is needed).","lastModifiedDate":"2021-09-24"},{"lineNumber":182,"author":{"gitId":"simonjulianl"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects","lastModifiedDate":"2021-09-24"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"  that belong to the `Model`)","lastModifiedDate":"2021-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"simonjulianl"},"content":"Classes used by multiple components are in the `gomedic.commons` package.","lastModifiedDate":"2021-09-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo","lastModifiedDate":"2021-09-24"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the","lastModifiedDate":"2021-09-24"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"following operations:","lastModifiedDate":"2021-09-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2021-09-24"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2021-09-24"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2021-09-24"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()`","lastModifiedDate":"2021-09-24"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2021-09-24"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the","lastModifiedDate":"2021-09-24"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2021-09-24"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"simonjulianl"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command","lastModifiedDate":"2021-09-24"},{"lineNumber":218,"author":{"gitId":"simonjulianl"},"content":"calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes","lastModifiedDate":"2021-09-24"},{"lineNumber":219,"author":{"gitId":"simonjulianl"},"content":"to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book","lastModifiedDate":"2021-09-24"},{"lineNumber":220,"author":{"gitId":"simonjulianl"},"content":"state.","lastModifiedDate":"2021-09-24"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"simonjulianl"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`","lastModifiedDate":"2021-09-24"},{"lineNumber":225,"author":{"gitId":"simonjulianl"},"content":", causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2021-09-24"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"simonjulianl"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing","lastModifiedDate":"2021-09-24"},{"lineNumber":234,"author":{"gitId":"simonjulianl"},"content":"the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer`","lastModifiedDate":"2021-09-24"},{"lineNumber":235,"author":{"gitId":"simonjulianl"},"content":"once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2021-09-24"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"simonjulianl"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once","lastModifiedDate":"2021-09-24"},{"lineNumber":253,"author":{"gitId":"simonjulianl"},"content":"to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2021-09-24"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"simonjulianl"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such","lastModifiedDate":"2021-09-24"},{"lineNumber":260,"author":{"gitId":"simonjulianl"},"content":"as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`.","lastModifiedDate":"2021-09-24"},{"lineNumber":261,"author":{"gitId":"simonjulianl"},"content":"Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2021-09-24"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"simonjulianl"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not","lastModifiedDate":"2021-09-24"},{"lineNumber":266,"author":{"gitId":"simonjulianl"},"content":"pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be","lastModifiedDate":"2021-09-24"},{"lineNumber":267,"author":{"gitId":"simonjulianl"},"content":"purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern","lastModifiedDate":"2021-09-24"},{"lineNumber":268,"author":{"gitId":"simonjulianl"},"content":"desktop applications follow.","lastModifiedDate":"2021-09-24"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"simonjulianl"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself.","lastModifiedDate":"2021-09-24"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":300,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":301,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":302,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":303,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"simonjulianl"},"content":"* has a need to manage a significant number of patients and colleagues","lastModifiedDate":"2021-09-24"},{"lineNumber":314,"author":{"gitId":"simonjulianl"},"content":"* is a very busy man with lots of appointments and activities","lastModifiedDate":"2021-09-24"},{"lineNumber":315,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"simonjulianl"},"content":"* can type fast and prefer CLI-formatted commands","lastModifiedDate":"2021-09-24"},{"lineNumber":317,"author":{"gitId":"simonjulianl"},"content":"* prefers typing to mouse interactions and is reasonably comfortable using CLI apps","lastModifiedDate":"2021-09-24"},{"lineNumber":318,"author":{"gitId":"simonjulianl"},"content":"* often forgets about his patient details and his schedule","lastModifiedDate":"2021-09-24"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"simonjulianl"},"content":"**Value proposition**:","lastModifiedDate":"2021-09-24"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"simonjulianl"},"content":"* manage patients contacts faster than a typical mouse/GUI driven app","lastModifiedDate":"2021-09-24"},{"lineNumber":323,"author":{"gitId":"simonjulianl"},"content":"* able to manage other doctors\u0027 details","lastModifiedDate":"2021-09-24"},{"lineNumber":324,"author":{"gitId":"simonjulianl"},"content":"* able to store sheer amount of patient details and retrieve them very fast","lastModifiedDate":"2021-09-24"},{"lineNumber":325,"author":{"gitId":"simonjulianl"},"content":"* able to compare patient medical histories very fast","lastModifiedDate":"2021-09-24"},{"lineNumber":326,"author":{"gitId":"simonjulianl"},"content":"* able to remind user of upcoming activities and appointments","lastModifiedDate":"2021-09-24"},{"lineNumber":327,"author":{"gitId":"simonjulianl"},"content":"* easy to use and would give suggestion on the closest command whenever typo is made","lastModifiedDate":"2021-09-24"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"simonjulianl"},"content":"#### Priorities:","lastModifiedDate":"2021-09-24"},{"lineNumber":332,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":333,"author":{"gitId":"simonjulianl"},"content":"* **High (must have)** - `* * *`","lastModifiedDate":"2021-09-24"},{"lineNumber":334,"author":{"gitId":"simonjulianl"},"content":"* **Medium (nice to have)** - `* *`","lastModifiedDate":"2021-09-24"},{"lineNumber":335,"author":{"gitId":"simonjulianl"},"content":"* **Low (unlikely to have)** - `*`","lastModifiedDate":"2021-09-24"},{"lineNumber":336,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":337,"author":{"gitId":"simonjulianl"},"content":"#### [EPIC] Basic CRUD Functionality for patients and doctors","lastModifiedDate":"2021-09-24"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                             | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"simonjulianl"},"content":"| -------- | ------------------------------------------ | --------------------------------------------| ---------------------------------------------------------------------- |","lastModifiedDate":"2021-09-24"},{"lineNumber":341,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | user                                       | add a new patient detail                    | retrieve and update them later                                                                        |","lastModifiedDate":"2021-09-24"},{"lineNumber":342,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | doctor                                     | add a new colleague detail                  | remember their contact number and office numbers","lastModifiedDate":"2021-09-24"},{"lineNumber":343,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | user                                       | delete an existing patient / doctor details | remove entries that I no longer need","lastModifiedDate":"2021-09-24"},{"lineNumber":344,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | user                                       | update my patient details                   | change the details without deleting and adding the info again","lastModifiedDate":"2021-09-24"},{"lineNumber":345,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | doctor                                     | update my colleague details                 | change the details without deleting and adding the info again","lastModifiedDate":"2021-09-24"},{"lineNumber":346,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | user                                       | view all my patient details in a list       | know my entire list of patients at a glance","lastModifiedDate":"2021-09-24"},{"lineNumber":347,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | user                                       | view all my colleague details in a list     | know my entire list of colleague at a glance","lastModifiedDate":"2021-09-24"},{"lineNumber":348,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":349,"author":{"gitId":"simonjulianl"},"content":"#### [EPIC] Scheduling","lastModifiedDate":"2021-09-24"},{"lineNumber":350,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":351,"author":{"gitId":"simonjulianl"},"content":"| Priority | As a …​                                 | I want to …​                                            | So that I can…​                                                        |","lastModifiedDate":"2021-09-24"},{"lineNumber":352,"author":{"gitId":"simonjulianl"},"content":"| -------- | ------------------------------------------ | -----------------------------------------------------------| ---------------------------------------------------------------------- |","lastModifiedDate":"2021-09-24"},{"lineNumber":353,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | busy user                                  | add a new appointment with one of my patient               | so that I can remember my appointments with them and be reminded of them in the future","lastModifiedDate":"2021-09-24"},{"lineNumber":354,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | busy user                                  | add new activities such as meeting with colleagues         |  so that I can remember my schedules today with and be reminded of them in the future","lastModifiedDate":"2021-09-24"},{"lineNumber":355,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | user                                       | delete existing appointments with my patients              | remove appointments that are no longer happening                |","lastModifiedDate":"2021-09-24"},{"lineNumber":356,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | user                                       | delete any existing activity                               | remove activities that are no longer happening and free my schedules up                                                 |","lastModifiedDate":"2021-09-24"},{"lineNumber":357,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | organized user                                  | list all my future appointments with a certain patient     | plan my schedules and track the appointments                                                 |","lastModifiedDate":"2021-09-24"},{"lineNumber":358,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | organized user                             | list all my future activities                              | know my schedules and plan future activities accordingly                           |","lastModifiedDate":"2021-09-24"},{"lineNumber":359,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | busy user                                  | be reminded of my patients\u0027 appointment 15 minutes before the schedule             | prepare myself for the appointment                         |","lastModifiedDate":"2021-09-24"},{"lineNumber":360,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | busy user                                  | be reminded of my daily schedule when the app is started / at the start of the day |   know what I will be doing for the day and plan ahead                          |","lastModifiedDate":"2021-09-24"},{"lineNumber":361,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | forgetful user                             | search for specific activities and appointments within a specific time frame       | plan ahead and focus on those time slots only                         |","lastModifiedDate":"2021-09-24"},{"lineNumber":362,"author":{"gitId":"simonjulianl"},"content":"| `* * `   | organized user                             | change the reminder settings (minutes)                     | tailor it according to my preference                         |","lastModifiedDate":"2021-09-24"},{"lineNumber":363,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":364,"author":{"gitId":"simonjulianl"},"content":"#### [EPIC] Information Retrieval and Organization","lastModifiedDate":"2021-09-24"},{"lineNumber":365,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":366,"author":{"gitId":"simonjulianl"},"content":"| Priority | As a …​                                 | I want to …​                                                        | So that I can…​                                                        |","lastModifiedDate":"2021-09-24"},{"lineNumber":367,"author":{"gitId":"simonjulianl"},"content":"| -------- | ------------------------------------------ | -----------------------------------------------------------------------| --------------------------------------------------------------------------|","lastModifiedDate":"2021-09-24"},{"lineNumber":368,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | experienced user                           | write custom tags for activities stored                                | group the activities according to my choices","lastModifiedDate":"2021-09-24"},{"lineNumber":369,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | experienced user                           | search for activities based on tags                                    | retrieve certain grouped activities very fast such as meetings and visitations","lastModifiedDate":"2021-09-24"},{"lineNumber":370,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | busy user                                  | search for patients whose details contain a user-specified substring   | retrieve certain patients that I don\u0027t really remember which fields where the details are stored at","lastModifiedDate":"2021-09-24"},{"lineNumber":371,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | busy user                                  | search for doctors whose details contain a user-specified substring    | retrieve my colleague details without any need to remember which fields the data are stored at","lastModifiedDate":"2021-09-24"},{"lineNumber":372,"author":{"gitId":"simonjulianl"},"content":"| `* * `   | forgetful user                             | compare patients with similar medical histories                        | refer to them when I make new diagnosis on future patients","lastModifiedDate":"2021-09-24"},{"lineNumber":373,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":374,"author":{"gitId":"simonjulianl"},"content":"#### [EPIC] Misc Helpful Features","lastModifiedDate":"2021-09-24"},{"lineNumber":375,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":376,"author":{"gitId":"simonjulianl"},"content":"| Priority | As a …​                                 | I want to …​                                                        | So that I can…​                                                        |","lastModifiedDate":"2021-09-24"},{"lineNumber":377,"author":{"gitId":"simonjulianl"},"content":"| -------- | ------------------------------------------ | -----------------------------------------------------------------------| --------------------------------------------------------------------------|","lastModifiedDate":"2021-09-24"},{"lineNumber":378,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | new and forgetful user                     | pull up a list of commands                                             | pick the right commands quickly","lastModifiedDate":"2021-09-24"},{"lineNumber":379,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | new user                                   | sample entries in the app                                              | know how the app would look like when I would populate it with my data","lastModifiedDate":"2021-09-24"},{"lineNumber":380,"author":{"gitId":"simonjulianl"},"content":"| `* * *`  | new user                                   | have suggestions on typo that I made on commands                       | learn from my mistakes and correct it quickly","lastModifiedDate":"2021-09-24"},{"lineNumber":381,"author":{"gitId":"simonjulianl"},"content":"| `* *`  | fickle user                                | have the app accept multiple fixed ways to write dates and times       | do not need to remember the correct format all the time","lastModifiedDate":"2021-09-24"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"simonjulianl"},"content":"(For all use cases below, the **System** is the `GoMedic` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-24"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"simonjulianl"},"content":"**Use Case: [UC1] - Adding a new patient record**","lastModifiedDate":"2021-09-24"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"simonjulianl"},"content":"1. User requests to add a new patient record.","lastModifiedDate":"2021-09-24"},{"lineNumber":394,"author":{"gitId":"simonjulianl"},"content":"2. GoMedic shows confirmation about the new patient record being added, and displays the patient\u0027s full details.","lastModifiedDate":"2021-09-24"},{"lineNumber":395,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":396,"author":{"gitId":"simonjulianl"},"content":"   Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":397,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":398,"author":{"gitId":"simonjulianl"},"content":"**Extensions**","lastModifiedDate":"2021-09-24"},{"lineNumber":399,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":400,"author":{"gitId":"simonjulianl"},"content":"* 1a. Incomplete patient details are given by users","lastModifiedDate":"2021-09-24"},{"lineNumber":401,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":402,"author":{"gitId":"simonjulianl"},"content":"    * 1a1. GoMedic shows a feedback to the user about the missing data.","lastModifiedDate":"2021-09-24"},{"lineNumber":403,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":404,"author":{"gitId":"simonjulianl"},"content":"      Use Case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":406,"author":{"gitId":"simonjulianl"},"content":"**Use Case: [UC2] - Delete an existing patient record**","lastModifiedDate":"2021-09-24"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":408,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-09-24"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":410,"author":{"gitId":"simonjulianl"},"content":"1. User requests to list all patients.","lastModifiedDate":"2021-09-24"},{"lineNumber":411,"author":{"gitId":"simonjulianl"},"content":"2. GoMedic shows a list of patients.","lastModifiedDate":"2021-09-24"},{"lineNumber":412,"author":{"gitId":"simonjulianl"},"content":"3. User requests to delete a specific person in the list.","lastModifiedDate":"2021-09-24"},{"lineNumber":413,"author":{"gitId":"simonjulianl"},"content":"4. GoMedic deletes the person.","lastModifiedDate":"2021-09-24"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"simonjulianl"},"content":"    * 3a1. GoMedic shows a feedback to the user about invalid index.","lastModifiedDate":"2021-09-24"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"simonjulianl"},"content":"      Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"simonjulianl"},"content":"**Use Case: [UC3] - Command Suggestions**","lastModifiedDate":"2021-09-24"},{"lineNumber":430,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":431,"author":{"gitId":"simonjulianl"},"content":"**MSS**","lastModifiedDate":"2021-09-24"},{"lineNumber":432,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":433,"author":{"gitId":"simonjulianl"},"content":"1. User types in a certain command such as creating \u003cu\u003enew patient record (UC1)\u003c/u\u003e and \u003cu\u003edeleting an existing patient","lastModifiedDate":"2021-09-24"},{"lineNumber":434,"author":{"gitId":"simonjulianl"},"content":"   record (UC2)\u003c/u\u003e with typo.","lastModifiedDate":"2021-09-24"},{"lineNumber":435,"author":{"gitId":"simonjulianl"},"content":"2. GoMedic shows a list of suggested commands.","lastModifiedDate":"2021-09-24"},{"lineNumber":436,"author":{"gitId":"simonjulianl"},"content":"3. User retypes the command and requests GoMedic to perform certain action.","lastModifiedDate":"2021-09-24"},{"lineNumber":437,"author":{"gitId":"simonjulianl"},"content":"4. GoMedic performs the specified action.","lastModifiedDate":"2021-09-24"},{"lineNumber":438,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":439,"author":{"gitId":"simonjulianl"},"content":"   Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":440,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":441,"author":{"gitId":"simonjulianl"},"content":"**Extensions**","lastModifiedDate":"2021-09-24"},{"lineNumber":442,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":443,"author":{"gitId":"simonjulianl"},"content":"* 1a. Command is valid.","lastModifiedDate":"2021-09-24"},{"lineNumber":444,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":445,"author":{"gitId":"simonjulianl"},"content":"  Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":446,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":447,"author":{"gitId":"simonjulianl"},"content":"* 2a. User decides not to retype the commands.","lastModifiedDate":"2021-09-24"},{"lineNumber":448,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":449,"author":{"gitId":"simonjulianl"},"content":"  Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":450,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":451,"author":{"gitId":"simonjulianl"},"content":"* 3a. User input an invalid command.","lastModifiedDate":"2021-09-24"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":453,"author":{"gitId":"simonjulianl"},"content":"  Use case resumes at step 1.","lastModifiedDate":"2021-09-24"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":455,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"simonjulianl"},"content":"2. Should be able to be run without any installation required as long as the user has Java `11` installed.","lastModifiedDate":"2021-09-24"},{"lineNumber":461,"author":{"gitId":"simonjulianl"},"content":"3. Should be able to hold up to 1000 patients and colleagues without a noticeable delay (less than 2 seconds) in","lastModifiedDate":"2021-09-24"},{"lineNumber":462,"author":{"gitId":"simonjulianl"},"content":"   performance for typical usage.","lastModifiedDate":"2021-09-24"},{"lineNumber":463,"author":{"gitId":"simonjulianl"},"content":"4. Should be able to hold up to 200 future activities and future appointments, and be retrieved without a noticeable","lastModifiedDate":"2021-09-24"},{"lineNumber":464,"author":{"gitId":"simonjulianl"},"content":"   delay (less than 2 seconds) for typical searches.","lastModifiedDate":"2021-09-24"},{"lineNumber":465,"author":{"gitId":"simonjulianl"},"content":"5. Should be only used by a single user and do not require other users to make changes to the app such as making","lastModifiedDate":"2021-09-24"},{"lineNumber":466,"author":{"gitId":"simonjulianl"},"content":"   appointment or sharing activities.","lastModifiedDate":"2021-09-24"},{"lineNumber":467,"author":{"gitId":"simonjulianl"},"content":"6. The data should not be stored using a _DBMS_.","lastModifiedDate":"2021-09-24"},{"lineNumber":468,"author":{"gitId":"simonjulianl"},"content":"7. The data should be stored _locally_ and should be in a human _editable_ and easily modified text file.","lastModifiedDate":"2021-09-24"},{"lineNumber":469,"author":{"gitId":"simonjulianl"},"content":"8. The project is expected to adhere to a _biweekly version release_ using breadth-first incremental technique.","lastModifiedDate":"2021-09-24"},{"lineNumber":470,"author":{"gitId":"simonjulianl"},"content":"9. Should be less than **100 MB** in size for the software, and less than **15 MB** per file for each document.","lastModifiedDate":"2021-09-24"},{"lineNumber":471,"author":{"gitId":"simonjulianl"},"content":"10. The developer guide and user guide must be pdf-friendly (meaning no embedded video, animations, embedded PowerPoint,","lastModifiedDate":"2021-09-24"},{"lineNumber":472,"author":{"gitId":"simonjulianl"},"content":"    etc.).","lastModifiedDate":"2021-09-24"},{"lineNumber":473,"author":{"gitId":"simonjulianl"},"content":"11. Should be delivered to the user using a single JAR file.","lastModifiedDate":"2021-09-24"},{"lineNumber":474,"author":{"gitId":"simonjulianl"},"content":"12. Graphical User Interface (GUI) should work reasonable well for standard screen resolution of 1920 x 1080 and higher","lastModifiedDate":"2021-09-24"},{"lineNumber":475,"author":{"gitId":"simonjulianl"},"content":"    with screen scales 100% and 125%, and also usable for screen resolutions 1280 x 720 and higher with screen scales","lastModifiedDate":"2021-09-24"},{"lineNumber":476,"author":{"gitId":"simonjulianl"},"content":"    150%.","lastModifiedDate":"2021-09-24"},{"lineNumber":477,"author":{"gitId":"simonjulianl"},"content":"13. Should be written mainly using Object-oriented paradigm.","lastModifiedDate":"2021-09-24"},{"lineNumber":478,"author":{"gitId":"simonjulianl"},"content":"14. The app is not required to be able to interact with external pieces of hardware such as printer.","lastModifiedDate":"2021-09-24"},{"lineNumber":479,"author":{"gitId":"simonjulianl"},"content":"15. The data stored within the app should be encrypted for security purposes (to prevent the raw data being read by","lastModifiedDate":"2021-09-24"},{"lineNumber":480,"author":{"gitId":"simonjulianl"},"content":"    external parties).","lastModifiedDate":"2021-09-24"},{"lineNumber":481,"author":{"gitId":"simonjulianl"},"content":"16. The app is mainly used for users based in Singapore, and therefore some local terms are tolerable, and the app is","lastModifiedDate":"2021-09-24"},{"lineNumber":482,"author":{"gitId":"simonjulianl"},"content":"    not expected to operate in other languages except English.","lastModifiedDate":"2021-09-24"},{"lineNumber":483,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"simonjulianl"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X.","lastModifiedDate":"2021-09-24"},{"lineNumber":489,"author":{"gitId":"simonjulianl"},"content":"* **DBMS** : Database Management System such as MySQL, Oracle, PSQL, MongoDB, etc.","lastModifiedDate":"2021-09-24"},{"lineNumber":490,"author":{"gitId":"simonjulianl"},"content":"* **JAR** : Java Archive file format, which is typically used to aggregate many Java class files and associated metadata","lastModifiedDate":"2021-09-24"},{"lineNumber":491,"author":{"gitId":"simonjulianl"},"content":"  into one file for distribution.","lastModifiedDate":"2021-09-24"},{"lineNumber":492,"author":{"gitId":"simonjulianl"},"content":"* **typical usage/searches** : Finding by keyword, name, medical histories, and any combination of the field manually.","lastModifiedDate":"2021-09-24"},{"lineNumber":493,"author":{"gitId":"simonjulianl"},"content":"* **Object-Oriented Paradigm** : programming paradigm that organizes software design around objects rather than","lastModifiedDate":"2021-09-24"},{"lineNumber":494,"author":{"gitId":"simonjulianl"},"content":"  functions and logic. For complete list of Features that OO design should have,","lastModifiedDate":"2021-09-24"},{"lineNumber":495,"author":{"gitId":"simonjulianl"},"content":"  please [visit this wikipedia page](https://en.wikipedia.org/wiki/Object-oriented_programming)","lastModifiedDate":"2021-09-24"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"    1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"simonjulianl"},"content":"    1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be","lastModifiedDate":"2021-09-24"},{"lineNumber":515,"author":{"gitId":"simonjulianl"},"content":"       optimum.","lastModifiedDate":"2021-09-24"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"    1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"    1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"    1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"    1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"simonjulianl"},"content":"       Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message.","lastModifiedDate":"2021-09-24"},{"lineNumber":534,"author":{"gitId":"simonjulianl"},"content":"       Timestamp in the status bar is updated.","lastModifiedDate":"2021-09-24"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"       Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"    1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"    1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"simonjulianl":237,"-":313}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"   1. Run the `Main` and try a few commands.","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"simonjulianl":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   e.g. `seedu.address.commons.StringUtilTest`","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"   e.g. `StorageManagerTest`","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"   e.g. `LogicManagerTest`","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"simonjulianl":2,"-":34}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"layout: page ","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"GoMedic is a **cross-platform desktop application written in Java and designed for doctors and medical residents to","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"manage contacts and patient details**. We aim GoMedic to be used by someone who can type fast and take advantage of the","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"optimized features for Command Line Interface.","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"GoMedic is bootstrapped using SE-EDU Address Book 3 and inherits some of its features such as `clear`, parameter","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"formatting, etc.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"* Table of Contents ","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"2. Download the latest `gomedic.jar` from [here](https://github.com/AY2122S1-CS2103T-T15-1/tp/releases).","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your GoMedic.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"   contains some sample data.\u003cbr\u003e ","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"ramaven"},"content":"   ![Ui-activity](images/Ui-activity.png)","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"   ","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"   open the help window.\u003cbr\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    * **`list t/patient`** : Lists all patients.","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"    * **`add t/patient n/John-Doe a/30 g/M h/174 w/72 b/O p/12345678 o/heart-failure o/diabetes`** : Adds a contact","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"      named `John Doe` to the Address Book.","lastModifiedDate":"2021-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    * **`delete t/patient i/P001`** : Deletes the patient whose id is P001.","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    * **`clear`** : Deletes all contacts including patients, doctors, and activities.","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"6. **Address Book, GoMedic Address Book, and GoMedic** refers to the same term, which is just the application itself. ","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"7. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"* Words in `LOWER_CASE` are required flags to be written together with the command. \u003cbr\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"  e.g. in `add t/activity`, `t/activity` is a flag that must be written as it is and should not be changed or treated as","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"  a parameter.","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"  e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"  the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"  ignored.\u003cbr\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"* There are fixed multiple valid date and time formats (GMT+8 24-Hour Time format):","lastModifiedDate":"2021-09-24"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"    1. dd/MM/yyyy HH:mm (e.g. 15/09/2022 13:00)","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"    2. dd-MM-yyyy HH:mm (e.g. 15-09-2022 13:00)","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"    3. yyyy-MM-dd HH:mm (e.g. 2022-09-15 13:00)","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2021-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"ngsengleng"},"content":"### Suggestions","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"GoMedic will suggest up to the 5 closest command to be executed if you make a typo and send an invalid command.","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"### Adding a new patient\u0027s details: `add t/patient`","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"Adds a new patient into the GoMedic application.","lastModifiedDate":"2021-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"Format: `add t/patient n/NAME a/AGE g/GENDER h/HEIGHT w/WEIGHT b/BLOOD_TYPE p/PHONE_NUMBER [o/MEDICAL_CONDITION]...`","lastModifiedDate":"2021-10-03"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"The parameters are : ","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"* `n/NAME` indicates the full name of the patient, first name and last name are separated by `space`.","lastModifiedDate":"2021-10-02"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"* `a/AGE` is greater than or equal to 0.","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"* `g/GENDER` is chosen from one of 3 choices, `M/F/O` where `M` is for Male, `F` is for Female, and `O` is for Others.","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"* `h/HEIGHT` is the height of patient in centimeters rounded to the nearest integer.","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"* `w/WEIGHT` is the weight of patient in kilograms rounded to the nearest integer.","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"* `b/BLOOD_TYPE` is chosen from one of the 4 choices, `A/B/AB/O`.","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"yyhangz"},"content":"* `p/PHONE_NUMBER` must be 8-digit Singapore phone number.","lastModifiedDate":"2021-10-03"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"* `o/MEDICAL_CONDITION` is the list of patient\u0027s past/pre-existing medical conditions. For medical condition that has multiple","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"  words, use `space` to combine the words, e.g. `heart failure`. ","lastModifiedDate":"2021-10-02"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"* `add t/patient n/John Doe a/30 g/M h/174 w/72 b/O p/12345678 o/heart failure o/diabetes`","lastModifiedDate":"2021-10-03"},{"lineNumber":119,"author":{"gitId":"yyhangz"},"content":"* `add t/patient n/Tom Doe a/20 g/M h/167 w/61 b/AB p/12341234`","lastModifiedDate":"2021-10-03"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"### Display full details of a patient: `view t/patient`","lastModifiedDate":"2021-09-28"},{"lineNumber":122,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"ramaven"},"content":"Displays the full details of a doctor","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"Format: `view t/patient i/PATIENT_ID`","lastModifiedDate":"2021-09-28"},{"lineNumber":126,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"The parameters are : ","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"* `i/PATIENT_ID` indicates the ID number of the doctor which is assigned when a new doctor is added.","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"ramaven"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"* `view t/patient i/P001`","lastModifiedDate":"2021-09-28"},{"lineNumber":134,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"### Deleting an existing patient: `delete t/patient`","lastModifiedDate":"2021-09-25"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"Deletes a patient from the GoMedic application.","lastModifiedDate":"2021-09-24"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"Format: `delete t/patient i/PATIENT_ID`","lastModifiedDate":"2021-09-25"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"The parameters are :","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"* `i/PATIENT_ID` indicates the ID number of the doctor which is assigned when a new doctor is added.","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"Notes: ","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"* Patient ID can be obtained by listing all the patients or search for a certain patients with available filters.","lastModifiedDate":"2021-09-24"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"* Patient ID is **unique** (i.e. every patient will be assigned to a unique ID, hence this guarantees","lastModifiedDate":"2021-09-24"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"  1 `delete t/patient` command will not delete 2 patients at once).","lastModifiedDate":"2021-09-25"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"* Invalid Patient ID being supplied would be flagged by GoMedic, and do not cause changes to any existing patients.","lastModifiedDate":"2021-09-24"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":154,"author":{"gitId":"radiankrisno"},"content":"* `delete t/patient i/P001`","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"### Updating an existing patient: `edit t/patient`","lastModifiedDate":"2021-10-14"},{"lineNumber":157,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"Edits a patient\u0027s details from the GoMedic application.","lastModifiedDate":"2021-10-14"},{"lineNumber":159,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"Format: `edit t/patient i/PATIENT_ID [OPTIONAL_PARAMETER]...`","lastModifiedDate":"2021-10-14"},{"lineNumber":161,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"The parameters are:","lastModifiedDate":"2021-09-29"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":164,"author":{"gitId":"radiankrisno"},"content":"* `n/NAME` indicates the full name of the patient, first name and last name are separated by `-`.","lastModifiedDate":"2021-09-25"},{"lineNumber":165,"author":{"gitId":"radiankrisno"},"content":"* `a/AGE` is greater than or equal to 0.","lastModifiedDate":"2021-09-25"},{"lineNumber":166,"author":{"gitId":"radiankrisno"},"content":"* `g/GENDER` is chosen from one of 3 choices, `M/F/O` where `M` is for Male, `F` is for Female, and `O` is for Others.","lastModifiedDate":"2021-09-25"},{"lineNumber":167,"author":{"gitId":"radiankrisno"},"content":"* `h/HEIGHT` is the height of patient in centimeters rounded to the nearest integer.","lastModifiedDate":"2021-09-25"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"* `w/WEIGHT` is the weight of patient in kilograms rounded to the nearest integer.","lastModifiedDate":"2021-09-25"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"* `b/BLOOD_TYPE` is chosen from one of the 4 choices, `A/B/AB/O`.","lastModifiedDate":"2021-09-25"},{"lineNumber":170,"author":{"gitId":"yyhangz"},"content":"* `p/PHONE_NUMBER` must be 8-digit Singapore phone number.","lastModifiedDate":"2021-10-03"},{"lineNumber":171,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"The optional parameters are: ","lastModifiedDate":"2021-09-29"},{"lineNumber":173,"author":{"gitId":"simonjulianl"},"content":"* `o/description` is the list of patient\u0027s past/pre-existing medical conditions to be **added**. For medical condition that has","lastModifiedDate":"2021-09-29"},{"lineNumber":174,"author":{"gitId":"simonjulianl"},"content":"  multiple words, use `space` to combine the words, e.g. `heart failure`. To separate between conditions, use more tags `o/`.","lastModifiedDate":"2021-10-02"},{"lineNumber":175,"author":{"gitId":"simonjulianl"},"content":"* `do/description` is the list of patient\u0027s past/pre-existing medical conditions to be **deleted**. For medical","lastModifiedDate":"2021-09-29"},{"lineNumber":176,"author":{"gitId":"simonjulianl"},"content":"  condition that has multiple words, use `space` to combine the words, e.g. `heart failure`. ","lastModifiedDate":"2021-10-02"},{"lineNumber":177,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":178,"author":{"gitId":"simonjulianl"},"content":"Notes: ","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"* Patient ID can be obtained by listing all the patients or search for a certain patients with available filters.","lastModifiedDate":"2021-09-24"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"* Patient ID is **unique** (i.e. every patient will be assigned to a unique ID, hence this guarantees","lastModifiedDate":"2021-09-24"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"  1 `delete t/patient` command will not delete 2 patients at once).","lastModifiedDate":"2021-09-25"},{"lineNumber":182,"author":{"gitId":"radiankrisno"},"content":"* Invalid Patient ID being supplied would be flagged by GoMedic, and do not cause changes to any existing patients.","lastModifiedDate":"2021-09-24"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"* Invalid `OPTIONAL_TO_DELETE` conditions supplied would be flagged by GoMedic, and do not cause changes to the existing","lastModifiedDate":"2021-09-29"},{"lineNumber":184,"author":{"gitId":"simonjulianl"},"content":"  patient.","lastModifiedDate":"2021-09-29"},{"lineNumber":185,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":186,"author":{"gitId":"radiankrisno"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":187,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":188,"author":{"gitId":"yyhangz"},"content":"* `edit t/patient i/P123 n/John Doe a/30 g/M`","lastModifiedDate":"2021-10-14"},{"lineNumber":189,"author":{"gitId":"yyhangz"},"content":"* `edit t/patient i/P003 n/Tom Doe a/20 g/M h/167 w/61 b/AB p/12341234 do/diabetes`","lastModifiedDate":"2021-10-14"},{"lineNumber":190,"author":{"gitId":"yyhangz"},"content":"* `edit t/patient i/P003 n/Tom Doe a/20 g/M h/167 w/61 b/AB p/12341234 o/fever o/headache do/diabetes do/heart feailure`","lastModifiedDate":"2021-10-14"},{"lineNumber":191,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":192,"author":{"gitId":"ramaven"},"content":"### Viewing the list of patients `list t/patient`","lastModifiedDate":"2021-09-27"},{"lineNumber":193,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":194,"author":{"gitId":"ramaven"},"content":"List all existing patients’ previews in the GoMedic application.","lastModifiedDate":"2021-09-27"},{"lineNumber":195,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":196,"author":{"gitId":"ramaven"},"content":"Format: `list t/patient`","lastModifiedDate":"2021-09-27"},{"lineNumber":197,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":198,"author":{"gitId":"ramaven"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":199,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"* `list t/patient`","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":202,"author":{"gitId":"radiankrisno"},"content":"### Adding a new doctor\u0027s details: `add t/doctor`","lastModifiedDate":"2021-09-25"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":204,"author":{"gitId":"radiankrisno"},"content":"Adds a new doctor into the GoMedic application.","lastModifiedDate":"2021-09-24"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":206,"author":{"gitId":"yyhangz"},"content":"Format: `add t/doctor n/NAME p/PHONE_NUMBER de/DEPARTMENT`","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"The parameters are: ","lastModifiedDate":"2021-09-29"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"* `n/NAME` indicates the full name of the doctor, first name and last name are separated by `space`.","lastModifiedDate":"2021-10-02"},{"lineNumber":211,"author":{"gitId":"yyhangz"},"content":"* `p/PHONE_NUMBER` must be 8-digit Singapore phone number.","lastModifiedDate":"2021-10-03"},{"lineNumber":212,"author":{"gitId":"yyhangz"},"content":"* `de/DEPARTMENT` is the name of the department where the doctor serves in String.","lastModifiedDate":"2021-10-10"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":215,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":216,"author":{"gitId":"yyhangz"},"content":"* `add t/doctor n/Timmy Tom p/98765432 de/neurology`","lastModifiedDate":"2021-10-10"},{"lineNumber":217,"author":{"gitId":"yyhangz"},"content":"* `add t/doctor n/John White p/12312312 de/cardiology`","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"simonjulianl"},"content":"### Display full details of a doctor: `view t/doctor`","lastModifiedDate":"2021-09-28"},{"lineNumber":220,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":221,"author":{"gitId":"ramaven"},"content":"Displays the full details of a doctor","lastModifiedDate":"2021-09-27"},{"lineNumber":222,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":223,"author":{"gitId":"simonjulianl"},"content":"Format: `view t/doctor i/DOCTOR_ID`","lastModifiedDate":"2021-09-28"},{"lineNumber":224,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":225,"author":{"gitId":"simonjulianl"},"content":"The parameters are: ","lastModifiedDate":"2021-09-29"},{"lineNumber":226,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":227,"author":{"gitId":"simonjulianl"},"content":"* `i/DOCTOR_ID` indicates the ID number of the doctor which is assigned when a new doctor is added.","lastModifiedDate":"2021-09-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":229,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":231,"author":{"gitId":"simonjulianl"},"content":"* `view t/doctor i/D001`","lastModifiedDate":"2021-09-28"},{"lineNumber":232,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":233,"author":{"gitId":"radiankrisno"},"content":"### Deleting an existing doctor: `delete t/doctor`","lastModifiedDate":"2021-09-25"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"radiankrisno"},"content":"Deletes a doctor from the GoMedic application.","lastModifiedDate":"2021-09-24"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"radiankrisno"},"content":"Format: `delete t/doctor i/DOCTOR_ID`","lastModifiedDate":"2021-09-25"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"simonjulianl"},"content":"The parameters are:","lastModifiedDate":"2021-09-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":241,"author":{"gitId":"simonjulianl"},"content":"* `i/DOCTOR_ID` indicates the ID number of the doctor which is assigned when a new doctor is added.","lastModifiedDate":"2021-09-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":243,"author":{"gitId":"simonjulianl"},"content":"Notes: ","lastModifiedDate":"2021-09-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":245,"author":{"gitId":"radiankrisno"},"content":"* Doctor ID can be obtained by listing all the doctors or search for a certain doctors with available filters.","lastModifiedDate":"2021-09-24"},{"lineNumber":246,"author":{"gitId":"simonjulianl"},"content":"* Doctor ID is **unique** (i.e. every doctor will be assigned to a unique ID, hence this guarantees 1 `delete t/doctor`","lastModifiedDate":"2021-09-29"},{"lineNumber":247,"author":{"gitId":"simonjulianl"},"content":"  command will not delete 2 doctors at once).","lastModifiedDate":"2021-09-29"},{"lineNumber":248,"author":{"gitId":"radiankrisno"},"content":"* Invalid Doctor ID being supplied would be flagged by GoMedic, and do not cause changes to any existing doctors.","lastModifiedDate":"2021-09-24"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":252,"author":{"gitId":"radiankrisno"},"content":"* `delete t/doctor i/D001`","lastModifiedDate":"2021-09-25"},{"lineNumber":253,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":254,"author":{"gitId":"yyhangz"},"content":"### Updating an existing doctor: `edit t/doctor`","lastModifiedDate":"2021-10-14"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"yyhangz"},"content":"Edits a doctor\u0027s details from the GoMedic application.","lastModifiedDate":"2021-10-14"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"yyhangz"},"content":"Format: `edit t/doctor i/DOCTOR_ID [OPTIONAL_PARAMETER]...`","lastModifiedDate":"2021-10-14"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"simonjulianl"},"content":"The parameters are:","lastModifiedDate":"2021-09-29"},{"lineNumber":261,"author":{"gitId":"simonjulianl"},"content":"* `i/DOCTOR_ID` indicates the ID number of the doctor which is assigned when a new doctor is added.","lastModifiedDate":"2021-09-29"},{"lineNumber":262,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":263,"author":{"gitId":"simonjulianl"},"content":"The parameters are:","lastModifiedDate":"2021-09-29"},{"lineNumber":264,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":265,"author":{"gitId":"radiankrisno"},"content":"* `n/NAME` indicates the full name of the doctor, first name and last name are separated by `-`.","lastModifiedDate":"2021-09-25"},{"lineNumber":266,"author":{"gitId":"yyhangz"},"content":"* `p/PHONE_NUMBER` must be 8-digit Singapore phone number.","lastModifiedDate":"2021-10-03"},{"lineNumber":267,"author":{"gitId":"radiankrisno"},"content":"* `d/DEPARTMENT` is the name of the department where the doctor serves in String.","lastModifiedDate":"2021-09-25"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"yyhangz"},"content":"* `add t/doctor i/D123 p/11112222`","lastModifiedDate":"2021-10-03"},{"lineNumber":272,"author":{"gitId":"yyhangz"},"content":"* `add t/doctor i/D101 de/orthopaedics`","lastModifiedDate":"2021-10-10"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"ramaven"},"content":"### Viewing the list of doctors `list t/doctor`","lastModifiedDate":"2021-09-27"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":276,"author":{"gitId":"ramaven"},"content":"Format: `list t/doctor`","lastModifiedDate":"2021-09-27"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":278,"author":{"gitId":"ramaven"},"content":"List all existing patients’ previews in the GoMedic application.","lastModifiedDate":"2021-09-27"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":280,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":281,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":282,"author":{"gitId":"ramaven"},"content":"* `list t/doctor`","lastModifiedDate":"2021-09-27"},{"lineNumber":283,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":284,"author":{"gitId":"yyhangz"},"content":"### Tagging an activity: `tag t/activity`","lastModifiedDate":"2021-09-24"},{"lineNumber":285,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":286,"author":{"gitId":"yyhangz"},"content":"Tags a specific activity with the tags specified in the command.","lastModifiedDate":"2021-09-24"},{"lineNumber":287,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":288,"author":{"gitId":"yyhangz"},"content":"Format: `tag t/activity i/ACTIVITY_ID [ta/TAG_DESCRIPTION]...`","lastModifiedDate":"2021-09-24"},{"lineNumber":289,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":290,"author":{"gitId":"simonjulianl"},"content":"The parameters are: ","lastModifiedDate":"2021-09-29"},{"lineNumber":291,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":292,"author":{"gitId":"simonjulianl"},"content":"* `i/ACTIVITY_ID` indicates the ID number of the activity to be tagged.","lastModifiedDate":"2021-09-29"},{"lineNumber":293,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":294,"author":{"gitId":"simonjulianl"},"content":"The optional parameters are:","lastModifiedDate":"2021-09-29"},{"lineNumber":295,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":296,"author":{"gitId":"simonjulianl"},"content":"* `ta/TAG_DESCRIPTION` indicates a series of tag to be added into the activity. In the case there is no `ta/TAG_DESCRIPTION` parameter found, this command does nothing to the activity identified by its id.","lastModifiedDate":"2021-09-29"},{"lineNumber":297,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":298,"author":{"gitId":"simonjulianl"},"content":"Notes:","lastModifiedDate":"2021-09-29"},{"lineNumber":299,"author":{"gitId":"yyhangz"},"content":"* Activity ID can be obtained by listing all the activities or a search for certain activities within a certain time","lastModifiedDate":"2021-09-24"},{"lineNumber":300,"author":{"gitId":"yyhangz"},"content":"  frame.","lastModifiedDate":"2021-09-24"},{"lineNumber":301,"author":{"gitId":"yyhangz"},"content":"* Activity ID is **unique** (i.e. every activity will be assigned to a unique ID, hence this guarantees","lastModifiedDate":"2021-09-24"},{"lineNumber":302,"author":{"gitId":"yyhangz"},"content":"  1 `tag t/activity` command will not tag 2 activities at once).","lastModifiedDate":"2021-09-24"},{"lineNumber":303,"author":{"gitId":"yyhangz"},"content":"* Invalid Activity IDs supplied would be flagged by GoMedic, and do not cause changes to any existing activities.","lastModifiedDate":"2021-09-24"},{"lineNumber":304,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":305,"author":{"gitId":"yyhangz"},"content":"_Tagging for doctors and patients coming soon..._","lastModifiedDate":"2021-09-24"},{"lineNumber":306,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":307,"author":{"gitId":"yyhangz"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":308,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":309,"author":{"gitId":"yyhangz"},"content":"* `tag t/activity i/A420 ta/important ta/NUS ta/schoolwork`","lastModifiedDate":"2021-09-24"},{"lineNumber":310,"author":{"gitId":"yyhangz"},"content":"* `tag t/activity i/A421 ta/important`","lastModifiedDate":"2021-09-24"},{"lineNumber":311,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":312,"author":{"gitId":"simonjulianl"},"content":"### Find results that contain keyword: `find [OPTIONAL_PARAMETERS]...`","lastModifiedDate":"2021-09-29"},{"lineNumber":313,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":314,"author":{"gitId":"yyhangz"},"content":"Searches for doctors, patients and activities that contain the specified keyword as a substring in any of their details.","lastModifiedDate":"2021-09-24"},{"lineNumber":315,"author":{"gitId":"yyhangz"},"content":"If more than 1 keyword is specified, results that contain at least 1 of the keywords will be returned (i.e. `OR` search)","lastModifiedDate":"2021-09-24"},{"lineNumber":316,"author":{"gitId":"yyhangz"},"content":"E.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2021-09-24"},{"lineNumber":317,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":318,"author":{"gitId":"simonjulianl"},"content":"Users can specify additional optional parameters to limit the keyword matching to the fields that is associated with each","lastModifiedDate":"2021-09-29"},{"lineNumber":319,"author":{"gitId":"simonjulianl"},"content":"flag. Parameters will only match results that contain the associated field (E.g. n/Hans will not return any `activities`","lastModifiedDate":"2021-09-29"},{"lineNumber":320,"author":{"gitId":"yyhangz"},"content":"since `activities` do not have a `name` field.)","lastModifiedDate":"2021-09-24"},{"lineNumber":321,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":322,"author":{"gitId":"simonjulianl"},"content":"Format: `find [OPTIONAL_PARAMETERS]...`","lastModifiedDate":"2021-09-29"},{"lineNumber":323,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":324,"author":{"gitId":"simonjulianl"},"content":"The parameters are:","lastModifiedDate":"2021-09-29"},{"lineNumber":325,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":326,"author":{"gitId":"yyhangz"},"content":"* `n/NAME`: Matches the name field (Valid for: `Patients`, `Doctors`)","lastModifiedDate":"2021-09-24"},{"lineNumber":327,"author":{"gitId":"yyhangz"},"content":"* `p/PHONE_NUMBER`: Matches the phone number field (Valid for: `Patients`, `Doctors`)","lastModifiedDate":"2021-10-03"},{"lineNumber":328,"author":{"gitId":"yyhangz"},"content":"* `a/AGE`: Matches the age field (Valid for: `Patients`)","lastModifiedDate":"2021-09-24"},{"lineNumber":329,"author":{"gitId":"yyhangz"},"content":"* `g/GENDER`: Matches the gender field; The only valid keywords for this field are `M/F/O` (Valid for: `Patients`)","lastModifiedDate":"2021-09-24"},{"lineNumber":330,"author":{"gitId":"yyhangz"},"content":"* `h/HEIGHT`: Matches the height field (Valid for: `Patients`)","lastModifiedDate":"2021-09-24"},{"lineNumber":331,"author":{"gitId":"yyhangz"},"content":"* `w/WEIGHT`: Matches the weight field (Valid for: `Patients`)","lastModifiedDate":"2021-09-24"},{"lineNumber":332,"author":{"gitId":"yyhangz"},"content":"* `b/BLOOD_TYPE`: Matches the blood type field; The only valid keywords for this field are `A/B/AB/O`","lastModifiedDate":"2021-09-24"},{"lineNumber":333,"author":{"gitId":"yyhangz"},"content":"  (Valid for: `Patients`)","lastModifiedDate":"2021-09-24"},{"lineNumber":334,"author":{"gitId":"simonjulianl"},"content":"* `o/MEDICAL_CONDITION`: Limits the keyword search to the list of medical conditions of a patient (Valid","lastModifiedDate":"2021-09-30"},{"lineNumber":335,"author":{"gitId":"simonjulianl"},"content":"  for: `Patients`)","lastModifiedDate":"2021-09-29"},{"lineNumber":336,"author":{"gitId":"yyhangz"},"content":"* `de/DEPARTMENT`: Matches the department field (Valid for: `Doctors`)","lastModifiedDate":"2021-10-10"},{"lineNumber":337,"author":{"gitId":"yyhangz"},"content":"* `ti/TITLE`: Matches the title field (Valid for: `Activities`)","lastModifiedDate":"2021-09-24"},{"lineNumber":338,"author":{"gitId":"yyhangz"},"content":"* `ta/TAG_DESCRIPTION`: Matches results that contain the specified tag in its list of tags (Valid for: `Activities`,","lastModifiedDate":"2021-09-24"},{"lineNumber":339,"author":{"gitId":"yyhangz"},"content":"  _Tagging for `Doctors` and `Patients` coming soon_)","lastModifiedDate":"2021-09-24"},{"lineNumber":340,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":341,"author":{"gitId":"simonjulianl"},"content":"Note: ","lastModifiedDate":"2021-09-29"},{"lineNumber":342,"author":{"gitId":"simonjulianl"},"content":"* Keyword is case-insensitive for convenience (“dia” will match diabetic patients even if the user stored the patient\u0027s","lastModifiedDate":"2021-09-29"},{"lineNumber":343,"author":{"gitId":"simonjulianl"},"content":"  condition as “Diabetes”)","lastModifiedDate":"2021-09-29"},{"lineNumber":344,"author":{"gitId":"simonjulianl"},"content":"* Parameters can be repeated (e.g. `find n/Hans n/Bo` will return both `Hans Gruber` and `Bo Yang`)","lastModifiedDate":"2021-09-29"},{"lineNumber":345,"author":{"gitId":"simonjulianl"},"content":"* If the optional parameters is not specified, the keyword will match any fields. E.g. `find dia` will return:","lastModifiedDate":"2021-09-29"},{"lineNumber":346,"author":{"gitId":"yyhangz"},"content":"    1. Doctor Claudia, whose name matches `dia`","lastModifiedDate":"2021-09-24"},{"lineNumber":347,"author":{"gitId":"yyhangz"},"content":"    2. Patient Jaryl, whose medical condition, `diabetes`, matches `dia`","lastModifiedDate":"2021-09-24"},{"lineNumber":348,"author":{"gitId":"yyhangz"},"content":"    3. Doctor Tom, whose specialty, `Pediatrics`, matches `dia`","lastModifiedDate":"2021-09-24"},{"lineNumber":349,"author":{"gitId":"yyhangz"},"content":"    4. Patient Lydia, whose name matches `dia`","lastModifiedDate":"2021-09-24"},{"lineNumber":350,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":351,"author":{"gitId":"yyhangz"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":352,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":353,"author":{"gitId":"simonjulianl"},"content":"* `find o/diabetes a/42 n/Jaryl`","lastModifiedDate":"2021-09-30"},{"lineNumber":354,"author":{"gitId":"yyhangz"},"content":"* `find ta/important ti/tutorial`","lastModifiedDate":"2021-09-24"},{"lineNumber":355,"author":{"gitId":"yyhangz"},"content":"* `find dia`","lastModifiedDate":"2021-09-24"},{"lineNumber":356,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":357,"author":{"gitId":"radiankrisno"},"content":"### Adding a new activity: `add t/activity`","lastModifiedDate":"2021-09-24"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"radiankrisno"},"content":"Adds a new activity into your GoMedic scheduler.","lastModifiedDate":"2021-09-24"},{"lineNumber":360,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":361,"author":{"gitId":"radiankrisno"},"content":"Format: `add t/activity s/START_TIME e/END_TIME ti/TITLE [d/DESCRIPTION]`","lastModifiedDate":"2021-09-24"},{"lineNumber":362,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":363,"author":{"gitId":"simonjulianl"},"content":"The parameters are:","lastModifiedDate":"2021-09-29"},{"lineNumber":364,"author":{"gitId":"simonjulianl"},"content":"* `s/START_TIME` the starting time of the activity, must be one of the accepted date time format. ","lastModifiedDate":"2021-09-29"},{"lineNumber":365,"author":{"gitId":"simonjulianl"},"content":"* `e/END_TIME` the ending time of the activity, must be one of the accepted date time format.","lastModifiedDate":"2021-09-29"},{"lineNumber":366,"author":{"gitId":"simonjulianl"},"content":"* `ti/TITLE` the title of the activity.","lastModifiedDate":"2021-10-02"},{"lineNumber":367,"author":{"gitId":"simonjulianl"},"content":"* `d/DESCRIPTION` the description of the activity.","lastModifiedDate":"2021-10-02"},{"lineNumber":368,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":369,"author":{"gitId":"simonjulianl"},"content":"Note: ","lastModifiedDate":"2021-09-29"},{"lineNumber":370,"author":{"gitId":"radiankrisno"},"content":"* `START_TIME` and `END_TIME` must follow one of the formats specified.","lastModifiedDate":"2021-09-24"},{"lineNumber":371,"author":{"gitId":"radiankrisno"},"content":"* `START_TIME` is strictly less than `END_TIME`.","lastModifiedDate":"2021-09-24"},{"lineNumber":372,"author":{"gitId":"simonjulianl"},"content":"* Clashing activity (including partial overlap with other activities) would be considered as invalid","lastModifiedDate":"2021-09-29"},{"lineNumber":373,"author":{"gitId":"radiankrisno"},"content":"  activity (i.e. not to be added).","lastModifiedDate":"2021-09-24"},{"lineNumber":374,"author":{"gitId":"radiankrisno"},"content":"* `TITLE` ideally should be very short so that it can be displayed in the list without being truncated.","lastModifiedDate":"2021-09-24"},{"lineNumber":375,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":378,"author":{"gitId":"simonjulianl"},"content":"* `add t/activity s/2022-09-15-14-00 e/15/09/2022 15:00 ti/Meeting with Mr. X d/about a certain paper`","lastModifiedDate":"2021-10-02"},{"lineNumber":379,"author":{"gitId":"simonjulianl"},"content":"* `add t/activity s/15/09/2022 14:00 e/15/09/2022 15:00 ti/Meeting with Mr. Y`","lastModifiedDate":"2021-10-02"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"radiankrisno"},"content":"### Deleting an existing activity: `delete t/activity`","lastModifiedDate":"2021-09-24"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"radiankrisno"},"content":"Delete a certain existing activity","lastModifiedDate":"2021-09-24"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"radiankrisno"},"content":"Format: `delete t/activity i/ACTIVITY_ID`","lastModifiedDate":"2021-09-24"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"simonjulianl"},"content":"The parameters are: ","lastModifiedDate":"2021-09-29"},{"lineNumber":388,"author":{"gitId":"simonjulianl"},"content":"* `i/ACTIVITY_ID` indicates the ID number of the activity which is assigned when a new activity is added.","lastModifiedDate":"2021-09-29"},{"lineNumber":389,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":390,"author":{"gitId":"simonjulianl"},"content":"Note: ","lastModifiedDate":"2021-09-29"},{"lineNumber":391,"author":{"gitId":"radiankrisno"},"content":"* Activity ID can be obtained by listing all the activities or search for a certain activities within a certain time","lastModifiedDate":"2021-09-24"},{"lineNumber":392,"author":{"gitId":"radiankrisno"},"content":"  frame.","lastModifiedDate":"2021-09-24"},{"lineNumber":393,"author":{"gitId":"radiankrisno"},"content":"* Activity ID is **unique** (i.e. every activity will be assigned to a unique ID, hence this guarantees","lastModifiedDate":"2021-09-24"},{"lineNumber":394,"author":{"gitId":"radiankrisno"},"content":"  1 `delete t/activity` command will not delete 2 activities at once).","lastModifiedDate":"2021-09-24"},{"lineNumber":395,"author":{"gitId":"radiankrisno"},"content":"* Invalid Activity ID being supplied would be flagged by GoMedic, and do not cause changes to any existing activities.","lastModifiedDate":"2021-09-24"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":399,"author":{"gitId":"radiankrisno"},"content":"* `delete t/activity i/A123`","lastModifiedDate":"2021-09-24"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"radiankrisno"},"content":"### List all activities: `list t/activity`","lastModifiedDate":"2021-09-24"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"radiankrisno"},"content":"List all existing (past, present and future) activities that exist in GoMedic.","lastModifiedDate":"2021-09-24"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"radiankrisno"},"content":"Format: `list t/activity`","lastModifiedDate":"2021-09-24"},{"lineNumber":406,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":407,"author":{"gitId":"radiankrisno"},"content":"* Activities would be displayed in ascending `START_TIME` (The past activities would be at the top if any and Future","lastModifiedDate":"2021-09-24"},{"lineNumber":408,"author":{"gitId":"radiankrisno"},"content":"  activities at the bottom).","lastModifiedDate":"2021-09-24"},{"lineNumber":409,"author":{"gitId":"radiankrisno"},"content":"* The summary or description that are too long would be truncated.","lastModifiedDate":"2021-09-24"},{"lineNumber":410,"author":{"gitId":"radiankrisno"},"content":"* The `START_TIME` and `END_TIME` would be displayed in `dd-MM-yyyy HH:mm` GMT+8 24-Hour format.","lastModifiedDate":"2021-09-24"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"simonjulianl"},"content":":bulb: **Tip:** _There are other upcoming `list` commands that can list future activities only and past activities only._","lastModifiedDate":"2021-09-29"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":416,"author":{"gitId":"radiankrisno"},"content":"* `list t/activity`","lastModifiedDate":"2021-09-24"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"simonjulianl"},"content":"GoMedic data are saved in the hard disk automatically after any command that changes the data. There is no need to save","lastModifiedDate":"2021-09-29"},{"lineNumber":433,"author":{"gitId":"simonjulianl"},"content":"manually.","lastModifiedDate":"2021-09-29"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":437,"author":{"gitId":"simonjulianl"},"content":"Currently, all the data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome","lastModifiedDate":"2021-09-29"},{"lineNumber":438,"author":{"gitId":"simonjulianl"},"content":"to update data directly by editing that data file.","lastModifiedDate":"2021-09-29"},{"lineNumber":439,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":440,"author":{"gitId":"simonjulianl"},"content":"In the subsequent releases, the patient data can be found at `[JAR file location]/data/patients.json`, doctors data","lastModifiedDate":"2021-09-29"},{"lineNumber":441,"author":{"gitId":"simonjulianl"},"content":"at `[JAR file location]/data/doctors.json`, and finally all activities at `[JAR file location]/data/activities.json`","lastModifiedDate":"2021-09-29"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":443,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":444,"author":{"gitId":"simonjulianl"},"content":"If your changes to the data file makes its format invalid, GoMedic will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-09-29"},{"lineNumber":445,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":447,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"simonjulianl"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains","lastModifiedDate":"2021-09-24"},{"lineNumber":453,"author":{"gitId":"simonjulianl"},"content":"the data of your previous GoMedic home folder.","lastModifiedDate":"2021-09-29"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"simonjulianl"},"content":"* `{type}` indicates one of these three values `t/activity`,`t/patient`, `t/doctor` and `{type}_id` means `ACTIVITY_ID` for `{type} \u003d t/activity`","lastModifiedDate":"2021-09-29"},{"lineNumber":459,"author":{"gitId":"simonjulianl"},"content":"* `{PARAMETERS}` indicates the mandatory parameters as specified in the [Features](#features) section.","lastModifiedDate":"2021-09-29"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"simonjulianl"},"content":"Action        | Format, Examples |","lastModifiedDate":"2021-09-29"},{"lineNumber":462,"author":{"gitId":"simonjulianl"},"content":"--------------|------------------ |","lastModifiedDate":"2021-09-29"},{"lineNumber":463,"author":{"gitId":"yyhangz"},"content":"**Add**       | `add {type} {PARAMETERS}`\u003cbr\u003e e.g., `add t/doctor n/Timmy Tom p/98765432 de/neurology`","lastModifiedDate":"2021-10-10"},{"lineNumber":464,"author":{"gitId":"simonjulianl"},"content":"**Delete**    | `delete {type} i/{type}_ID` \u003cbr\u003e e.g., `delete t/patient i/P003`\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":465,"author":{"gitId":"yyhangz"},"content":"**Edit**      | `edit {type} i/{type}_ID [OPTIONAL PARAMETER]...`\u003cbr\u003ee.g.,`edit t/patient i/P123 n/John Doe a/30 g/M`\u003cbr\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":466,"author":{"gitId":"simonjulianl"},"content":"**Find**      | `find [OPTIONAL_PARAMATERS]...`\u003cbr\u003e e.g., `find ta/important ti/tutorial`\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":467,"author":{"gitId":"simonjulianl"},"content":"**View**      | `view t/doctor i/DOCTOR_ID`, `view t/patient i/PATIENT_ID`\u003cbr\u003e e.g., `view t/patient i/P003`","lastModifiedDate":"2021-09-29"},{"lineNumber":468,"author":{"gitId":"simonjulianl"},"content":"**Tag**       | `tag t/activity  i/ACTIVITY_ID [ta/TAG_DESCRIPTION]...` \u003cbr\u003e e.g., `tag t/activity i/A420 ta/important ta/NUS ta/schoolwork`","lastModifiedDate":"2021-09-29"},{"lineNumber":469,"author":{"gitId":"ngsengleng"},"content":"**Clear**     | `clear`\u003cbr\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":470,"author":{"gitId":"simonjulianl"},"content":"**List**      | `list {type}`\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":471,"author":{"gitId":"simonjulianl"},"content":"**Exit**      | `exit`\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":472,"author":{"gitId":"ngsengleng"},"content":"**Help**      | `help`\u003cbr\u003e","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"ngsengleng":3,"radiankrisno":65,"ramaven":26,"simonjulianl":176,"yyhangz":73,"-":129}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page ","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"title: GoMedic","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T15-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103T-T15-1/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T15-1/tp/branch/master/graph/badge.svg?token\u003dPY49G4GN2U)](https://codecov.io/gh/AY2122S1-CS2103T-T15-1/tp)","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"**GoMedic is a desktop application for managing your contact details.** While it has a GUI, most of the user","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"* If you are interested in using GoMedic, head over to the [_Quick Start_ section of the **User","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"  Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"* If you are interested about developing GoMedic, the [**Developer Guide**](DeveloperGuide.html) is a good place to","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"  start.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"* Project bootstrapped from: [SE-EDU Address Book 3](https://se-education.org/addressbook-level3/)","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson)","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"  , [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"simonjulianl":10,"-":13}},{"path":"docs/team/ngsengleng.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ngsengleng"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"ngsengleng"},"content":"layout: page","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"ngsengleng"},"content":"title: Ng Seng Leng\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"ngsengleng"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"ngsengleng"},"content":"### Project: GoMedic","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"ngsengleng"},"content":"GoMedic is a cross-platform desktop application written in Java and designed for doctors and medical residents to manage contacts and patient details.","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"ngsengleng"},"content":"We aim GoMedic to be used by someone who can type fast and take advantage of the optimized features for","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"ngsengleng"},"content":"Command Line Interface.","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"ngsengleng"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"ngsengleng":12}},{"path":"docs/team/radiankrisno.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"title: Radian Krisno\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"### Project: GoMedic","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"GoMedic is a cross-platform desktop application written in Java and designed for doctors and medical residents to manage contacts and patient details.","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"We aim GoMedic to be used by someone who can type fast and take advantage of the optimized features for ","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"Command Line Interface. ","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"radiankrisno":10,"simonjulianl":2}},{"path":"docs/team/ramavenkatesh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ramaven"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"ramaven"},"content":"layout: page","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"ramaven"},"content":"title: Rama Venkatesh\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"ramaven"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"ramaven"},"content":"### Project: GoMedic","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"ramaven"},"content":"GoMedic is a cross-platform desktop application written in Java and designed for doctors and medical residents to manage contacts and patient details.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"ramaven"},"content":"We aim GoMedic to be used by someone who can type fast and take advantage of the optimized features for","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"ramaven"},"content":"Command Line Interface.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"ramaven"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"ramaven"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"ramaven"},"content":"    * UI:","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"ramaven"},"content":"        * Designed the UI mockup for GoMedic using Figma","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"ramaven":14}},{"path":"docs/team/simonjulianlauw.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"title: Simon Julian Lauw\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"### Project: GoMedic","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"GoMedic is a cross-platform desktop application written in Java and designed for doctors and medical residents to manage contacts and patient details.","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"We aim GoMedic to be used by someone who can type fast and take advantage of the optimized features for","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"Command Line Interface.","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"simonjulianl":13}},{"path":"docs/team/yapyuhang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"layout: page","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"title: Yap Yuhang\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"### Project: GoMedic","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"GoMedic is a cross-platform desktop application written in Java and designed for doctors and medical residents to manage contacts and patient details.","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"We aim GoMedic to be used by someone who can type fast and take advantage of the optimized features for","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"Command Line Interface.","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"yyhangz":13}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"import Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"import static CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"simonjulianl"},"content":"Simply add the following to [`PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-09-28"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2021-08-01"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"simonjulianl":3,"-":398}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"The `address` field in `Person` is actually an instance of the `Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"simonjulianl":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `Logic`.","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"A quick look at the `Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"simonjulianl":2,"-":299}},{"path":"src/main/java/gomedic/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.FileUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        return configPath;","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"simonjulianl":11,"-":53}},{"path":"src/main/java/gomedic/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"simonjulianl":5,"-":20}},{"path":"src/main/java/gomedic/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Config;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Version;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.ConfigUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.StringUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.Logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.LogicManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.util.SampleDataUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.AddressBookStorage;","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.StorageManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.UserPrefsStorage;","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"import gomedic.ui.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"import gomedic.ui.UiManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookRootFilePath());","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":25,"-":158}},{"path":"src/main/java/gomedic/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":1,"-":62}},{"path":"src/main/java/gomedic/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"        return \"Width : \" + windowWidth + \"\\n\"","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"                + \"Height : \" + windowHeight + \"\\n\"","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"                + \"Position : \" + windowCoordinates;","lastModifiedDate":"2021-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":4,"-":73}},{"path":"src/main/java/gomedic/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":3,"-":110}},{"path":"src/main/java/gomedic/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"ngsengleng"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"ngsengleng"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"ngsengleng"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"ngsengleng"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"ngsengleng"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"ngsengleng"},"content":"import org.apache.commons.text.similarity.LevenshteinDistance;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"ngsengleng"},"content":"import javafx.util.Pair;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Sorry, %s is an invalid command.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_CONFLICTING_ACTIVITY \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"            \"Sorry, the activity\u0027s timing is conflicting with another activity\";","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_INVALID_ACTIVITY_ID \u003d \"The activity id doesn\u0027t exist in the list\";","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_INVALID_DOCTOR_ID \u003d \"The doctor id doesn\u0027t exist in the list\";","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_INVALID_PATIENT_ID \u003d \"The patient id doesn\u0027t exist in the list\";","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_ITEMS_LISTED_OVERVIEW \u003d \"%1$d items listed!\";","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"ngsengleng"},"content":"    public static final String MESSAGE_HELP_COMMANDS \u003d generateHelpText();","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"ngsengleng"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"ngsengleng"},"content":"     * Returns the 5 most similar commands calculated using Levenshtein Distance Algorithm.","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"ngsengleng"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"ngsengleng"},"content":"     * @param command the invalid command to be evaluated.","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"ngsengleng"},"content":"     * @return message containing similar commands to be displayed to the user.","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"ngsengleng"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"ngsengleng"},"content":"    public static String getSuggestions(String command) {","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"ngsengleng"},"content":"        List\u003cString\u003e listOfCommands \u003d Arrays.asList(\"add\", \"edit\", \"delete\",","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"ngsengleng"},"content":"                \"clear\", \"find\", \"list\", \"exit\", \"help\");","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"ngsengleng"},"content":"        LevenshteinDistance stringChecker \u003d new LevenshteinDistance();","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"ngsengleng"},"content":"        List\u003cPair\u003cInteger, String\u003e\u003e closestStrings \u003d listOfCommands.stream()","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"ngsengleng"},"content":"                .map(x -\u003e new Pair\u003c\u003e(stringChecker.apply(x, command), x))","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"ngsengleng"},"content":"                .sorted(Comparator.comparingInt(Pair::getKey))","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"ngsengleng"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"        String reply \u003d String.format(MESSAGE_UNKNOWN_COMMAND, command);","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"ngsengleng"},"content":"        Iterator\u003cPair\u003cInteger, String\u003e\u003e iterator \u003d closestStrings.stream()","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"ngsengleng"},"content":"                .filter(x -\u003e x.getKey() \u003c\u003d Math.ceil(x.getValue().length() / 2))","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"ngsengleng"},"content":"                .iterator();","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"ngsengleng"},"content":"        if (iterator.hasNext()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"ngsengleng"},"content":"            String additionalReply \u003d \" You can choose from these commands instead: \\n\";","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"ngsengleng"},"content":"            while (iterator.hasNext()) {","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"ngsengleng"},"content":"                additionalReply +\u003d iterator.next().getValue() + \"\\n\";","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"ngsengleng"},"content":"            }","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"ngsengleng"},"content":"            reply +\u003d additionalReply;","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"ngsengleng"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"ngsengleng"},"content":"        return reply;","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"ngsengleng"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"ngsengleng"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"ngsengleng"},"content":"     * Returns a summary of what each command does in String format to be passed to JavaFX.","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"ngsengleng"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"ngsengleng"},"content":"     * @return a string of command descriptions.","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"ngsengleng"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"ngsengleng"},"content":"    private static String generateHelpText() {","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"ngsengleng"},"content":"        String addDescription \u003d \"add:\\n   Adds a patient, doctor or activity to the address book.\\n\\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"ngsengleng"},"content":"        String clearDescription \u003d \"clear:\\n  Empties all data in GoMedic.\\n\\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"ngsengleng"},"content":"        String deleteDescription \u003d \"delete:\\n    Deletes the patient, doctor or activity identified \"","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"ngsengleng"},"content":"                + \"by the index number used in their respective list.\\n\\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"ngsengleng"},"content":"        String editDescription \u003d \"edit:\\n    Edits the details of the patient, doctor or activity identified \"","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"                + \"by the index number used in the displayed list.\\n\"","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"ngsengleng"},"content":"                + \"    Existing values will be overwritten by the input values.\\n\\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"ngsengleng"},"content":"        String exitDescription \u003d \"exit:\\n    Exits GoMedic and closes the window.\\n\\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"ngsengleng"},"content":"        String findDescription \u003d \"find:\\n    Finds entries that contain the given keyword as substring \"","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"ngsengleng"},"content":"                + \"in their entry attributes.\\n\\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"ngsengleng"},"content":"        String listDescription \u003d \"list:\\n    List all patients, doctors or activities \"","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"ngsengleng"},"content":"                + \"as specified by the user.\\n\\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"ngsengleng"},"content":"        String helpDescription \u003d \"help:\\n    Returns a list of commands and a \"","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"ngsengleng"},"content":"                + \"brief description on what they do.\\n\\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"ngsengleng"},"content":"        return addDescription + clearDescription + deleteDescription + editDescription + exitDescription","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"ngsengleng"},"content":"                + findDescription + listDescription + helpDescription;","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"ngsengleng"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ngsengleng":65,"radiankrisno":1,"simonjulianl":7,"yyhangz":3,"-":8}},{"path":"src/main/java/gomedic/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"                versionMatcher.group(4) !\u003d null);","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"    public int getMajor() {","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        return major;","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    public int getMinor() {","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        return minor;","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    public int getPatch() {","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        return patch;","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        return isEarlyAccess;","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":19,"-":98}},{"path":"src/main/java/gomedic/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core.index;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"    private final int zeroBasedIndex;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"simonjulianl":2,"-":52}},{"path":"src/main/java/gomedic/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.exceptions;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":1,"-":10}},{"path":"src/main/java/gomedic/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.exceptions;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":1,"-":20}},{"path":"src/main/java/gomedic/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.MainApp;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"        return new Image(requireNonNull(MainApp.class.getResourceAsStream(imagePath)));","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"simonjulianl":3,"-":39}},{"path":"src/main/java/gomedic/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":1,"-":34}},{"path":"src/main/java/gomedic/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Config;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"simonjulianl":3,"-":20}},{"path":"src/main/java/gomedic/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":1,"-":82}},{"path":"src/main/java/gomedic/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"    private static final ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":4,"-":139}},{"path":"src/main/java/gomedic/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        return t.getMessage() + \"\\n\" + sw;","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":6,"-":63}},{"path":"src/main/java/gomedic/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"     * @see Model#getAddressBook()","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    /** Returns an unmodifiable view of the filtered list of patients */","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    /** Returns an unmodifiable view of the filtered list of doctors */","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    ObservableList\u003cDoctor\u003e getFilteredDoctorList();","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    /** Returns an unmodifiable view of the filtered list of activities */","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"    ObservableList\u003cActivity\u003e getFilteredActivityList();","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"     * Returns the user prefs\u0027 address root file path.","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    Path getAddressBookRootFilePath();","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"     * Returns the integer showing current item being shown.","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"     * 0 -\u003e activity","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"     * 1 -\u003e doctor","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"     * 2 -\u003e patient","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    ObservableValue\u003cInteger\u003e getModelBeingShown();","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"radiankrisno":4,"simonjulianl":22,"yyhangz":7,"-":36}},{"path":"src/main/java/gomedic/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.AddressBookParser;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        return model.getFilteredPatientList();","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        return model.getFilteredDoctorList();","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"    public ObservableList\u003cActivity\u003e getFilteredActivityList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"        return model.getFilteredActivityList();","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"    public Path getAddressBookRootFilePath() {","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"        return model.getAddressBookDataRootFilePath();","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"    public ObservableValue\u003cInteger\u003e getModelBeingShown() {","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"        return model.getModelBeingShown();","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"radiankrisno":5,"simonjulianl":26,"yyhangz":4,"-":65}},{"path":"src/main/java/gomedic/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":3,"-":17}},{"path":"src/main/java/gomedic/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":1,"-":70}},{"path":"src/main/java/gomedic/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"simonjulianl":2,"-":17}},{"path":"src/main/java/gomedic/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.util.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":" * Finds and lists all entries in address book whose name contains any of the argument keywords.","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    // NOTE: CURRENTLY, FINDCOMMAND ONLY FINDS THE NAMES OF THE DOCTORS WHOSE NAME MATCHES THE KEYWORD ARGUMENTS","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    // TODO: CHANGE FIND COMMAND TO WORK ON ALL TYPES OF ENTRIES AS WELL AS IMPLEMENT FEATURE TO FILTER BASED ON","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    //          SPECIFIC PREFIXES","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all doctors whose names contain any of \"","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    private final NameContainsKeywordsPredicate\u003cDoctor\u003e predicate;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    public FindCommand(NameContainsKeywordsPredicate\u003cDoctor\u003e predicate) {","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        model.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        model.setModelBeingShown(ModelItem.DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"                String.format(Messages.MESSAGE_ITEMS_LISTED_OVERVIEW, model.getFilteredDoctorList().size()));","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"simonjulianl":4,"yyhangz":12,"-":31}},{"path":"src/main/java/gomedic/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":2,"-":19}},{"path":"src/main/java/gomedic/logic/commands/addcommand/AddActivityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.model.Model.PREDICATE_SHOW_ALL_ITEMS;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":" * Adds an activity to the address book","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"public class AddActivityCommand extends Command {","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"add\" + \" \" + PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an activity to the address book. \"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_START_TIME + \"START_TIME \"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_END_TIME + \"END_TIME \"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_TITLE + \"TITLE \"","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_START_TIME + \"15/09/2022 14:00 \"","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_END_TIME + \"15/09/2022 15:00 \"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_TITLE + \"Meeting with Mr. Y \"","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_DESCRIPTION + \"Discussing the future of CS2103T-T15 Group!\";","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New activity added: %1$s\";","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"            \"This Activity already exists in the address book, duplicate id\";","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_CONFLICTING_ACTIVITY \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"            \"There exists an activity that overlaps with this activity\u0027s timing of this activity.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    private final Time startTime;","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    private final Time endTime;","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    private final Title title;","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    private final Description description;","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"     * Creates an AddCommand to add the specified {@code Activity}.","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"     * Because we need id, and we can only obtain the model when we execute it,","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"     * we do not pass activity as the constructor.","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"    public AddActivityCommand(Time startTime, Time endTime, Title title, Description description) {","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(startTime, endTime, title, description);","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        Activity toAdd \u003d new Activity(","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"                new ActivityId(model.getNewActivityId()),","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"                startTime,","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"                endTime,","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"                title,","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"                description);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        if (model.hasActivity(toAdd)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"        if (model.hasConflictingActivity(toAdd)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"            throw new CommandException(MESSAGE_CONFLICTING_ACTIVITY);","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        model.addActivity(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"        model.setModelBeingShown(ModelItem.ACTIVITY);","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        model.updateFilteredActivitiesList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"                || (other instanceof AddActivityCommand // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 startTime.equals(((AddActivityCommand) other).startTime)","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 endTime.equals(((AddActivityCommand) other).endTime)","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 title.equals(((AddActivityCommand) other).title)","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 description.equals(((AddActivityCommand) other).description));","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"simonjulianl":98,"yyhangz":2}},{"path":"src/main/java/gomedic/logic/commands/addcommand/AddDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_DEPARTMENT;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.model.Model.PREDICATE_SHOW_ALL_ITEMS;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":" * Adds an doctor to the address book","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"public class AddDoctorCommand extends Command {","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"add\" + \" \" + PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a doctor to the address book. \"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_DEPARTMENT + \"DEPARTMENT \\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"            + PREFIX_NAME + \"John Smith \"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"            + PREFIX_DEPARTMENT + \"Cardiology\";","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New doctor added: %1$s\";","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"            \"This Doctor already exists in the address book, duplicate id\";","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_MAXIMUM_CAPACITY_EXCEEDED \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"            \"The maximum capacity for the number of doctors that can be added in the address book has been reached; \"","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"                    + \"No more doctors can be added.\";","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"    private final Name name;","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"    private final Phone phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    private final Department department;","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"     * Creates an AddCommand to add the specified {@code Doctor}.","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"     * Because we need id, and we can only obtain the model when we execute it,","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"     * we do not pass activity as the constructor.","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    public AddDoctorCommand(Name name, Phone phone, Department department) {","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        CollectionUtil.requireAllNonNull(name, phone, department);","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        this.department \u003d department;","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        if (!model.hasNewDoctorId()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"            throw new CommandException(MESSAGE_MAXIMUM_CAPACITY_EXCEEDED);","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"        Doctor toAdd \u003d new Doctor(name, phone, new DoctorId(model.getNewDoctorId()), department);","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        if (model.hasDoctor(toAdd)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        model.addDoctor(toAdd);","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        model.setModelBeingShown(ModelItem.DOCTOR);","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"                || (other instanceof AddDoctorCommand // instanceof handles nulls","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"                \u0026\u0026 name.equals(((AddDoctorCommand) other).name)","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"                \u0026\u0026 phone.equals(((AddDoctorCommand) other).phone)","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"                \u0026\u0026 department.equals(((AddDoctorCommand) other).department));","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"simonjulianl":5,"yyhangz":84}},{"path":"src/main/java/gomedic/logic/commands/addcommand/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_HEIGHT;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_MEDICALCONDITIONS;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_PATIENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_WEIGHT;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.model.Model.PREDICATE_SHOW_ALL_ITEMS;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Age;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.BloodType;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Gender;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Height;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.PatientId;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Weight;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":" * Adds a patient to the address book","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"public class AddPatientCommand extends Command {","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"add\" + \" \" + PREFIX_TYPE_PATIENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the address book. \"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_AGE + \"AGE \"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_BLOODTYPE + \"BLOODTYPE \"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_GENDER + \"GENDER \"","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_HEIGHT + \"HEIGHT \"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_WEIGHT + \"WEIGHT \"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"            + \"[\" + PREFIX_MEDICALCONDITIONS + \"TAG]...\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_NAME + \"John Smith \"","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_AGE + \"45 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_BLOODTYPE + \"AB \"","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_GENDER + \"M \"","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_HEIGHT + \"175 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_WEIGHT + \"70 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_MEDICALCONDITIONS + \"heart failure \"","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"            + PREFIX_MEDICALCONDITIONS + \"diabetes\";","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"            \"This Patient already exists in the address book, duplicate id\";","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_MAXIMUM_CAPACITY_EXCEEDED \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"            \"The maximum capacity for the number of patients that can be added in the address book has been reached; \"","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"                    + \"No more patients can be added.\";","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"    private final Name name;","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"    private final Phone phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"    private final Age age;","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"    private final BloodType bloodType;","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"    private final Gender gender;","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"    private final Height height;","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"    private final Weight weight;","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"    private final Set\u003cTag\u003e medicalConditions;","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"     * Creates an AddCommand to add the specified {@code Patient}.","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"     * Because we need id, and we can only obtain the model when we execute it,","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"     * we do not pass activity as the constructor.","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"    public AddPatientCommand(Name name, Phone phone, Age age, BloodType bloodType, Gender gender, Height height,","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"                             Weight weight, Set\u003cTag\u003e medicalConditions) {","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"        CollectionUtil.requireAllNonNull(name, phone, age, bloodType, gender, height, weight, medicalConditions);","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"        this.medicalConditions \u003d medicalConditions;","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"        if (!model.hasNewPatientId()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"            throw new CommandException(MESSAGE_MAXIMUM_CAPACITY_EXCEEDED);","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"        Patient toAdd \u003d new Patient(name, phone, new PatientId(model.getNewPatientId()), age, bloodType, gender,","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"                height, weight, medicalConditions);","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"        if (model.hasPatient(toAdd)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"        model.setModelBeingShown(ModelItem.PATIENT);","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"                || (other instanceof AddPatientCommand // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 name.equals(((AddPatientCommand) other).name)","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 phone.equals(((AddPatientCommand) other).phone)","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 age.equals(((AddPatientCommand) other).age)","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 bloodType.equals(((AddPatientCommand) other).bloodType)","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 gender.equals(((AddPatientCommand) other).gender)","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 height.equals(((AddPatientCommand) other).height)","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 weight.equals(((AddPatientCommand) other).weight)","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 medicalConditions.equals(((AddPatientCommand) other).medicalConditions));","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":123,"simonjulianl":4,"yyhangz":2}},{"path":"src/main/java/gomedic/logic/commands/clearcommand/ClearActivityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.clearcommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":" * Clears the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"public class ClearActivityCommand extends Command {","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"clear\" + \" \" + PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"activities in GoMedic has been cleared!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        AddressBook newAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        ReadOnlyAddressBook oldAddressBook \u003d model.getAddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setDoctors(oldAddressBook.getDoctorListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setPatients(oldAddressBook.getPatientListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        model.setAddressBook(newAddressBook);","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"radiankrisno":29,"yyhangz":2}},{"path":"src/main/java/gomedic/logic/commands/clearcommand/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.clearcommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"GoMedic has been cleared!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"radiankrisno":4,"simonjulianl":2,"-":19}},{"path":"src/main/java/gomedic/logic/commands/clearcommand/ClearDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.clearcommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":" * Clears the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"public class ClearDoctorCommand extends Command {","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"clear\" + \" \" + PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"doctors in GoMedic has been cleared!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        AddressBook newAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        ReadOnlyAddressBook oldAddressBook \u003d model.getAddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setActivities(oldAddressBook.getActivityListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setPatients(oldAddressBook.getPatientListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        model.setAddressBook(newAddressBook);","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"radiankrisno":29,"yyhangz":2}},{"path":"src/main/java/gomedic/logic/commands/clearcommand/ClearPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.clearcommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_PATIENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":" * Clears the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"public class ClearPatientCommand extends Command {","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"clear\" + \" \" + PREFIX_TYPE_PATIENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"patients in GoMedic has been cleared!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        AddressBook newAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        ReadOnlyAddressBook oldAddressBook \u003d model.getAddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setActivities(oldAddressBook.getActivityListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setDoctors(oldAddressBook.getDoctorListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        model.setAddressBook(newAddressBook);","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"radiankrisno":29,"yyhangz":2}},{"path":"src/main/java/gomedic/logic/commands/deletecommand/DeleteActivityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.deletecommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":" * Deletes an activity identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"public class DeleteActivityCommand extends Command {","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"delete\" + \" \" + PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"            + \": Deletes the activity identified by the index shown in the activity list.\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"            + \"Parameters: INDEX (must be exactly the same as shown in the list, e.g. A001)\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"            + \"Example: \" + COMMAND_WORD + \" A001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_DELETE_ACTIVITY_SUCCESS \u003d \"Deleted Activity: %1$s\";","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    private final Id targetId;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    public DeleteActivityCommand(Id targetId) {","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        this.targetId \u003d targetId;","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        Activity activityToDelete \u003d lastShownList","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"                .stream()","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                .filter(activity -\u003e activity","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                        .getActivityId()","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                        .toString().equals(targetId.toString()))","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"                .findFirst()","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"                .orElse(null);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        if (activityToDelete \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        model.deleteActivity(activityToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete));","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"                || (other instanceof DeleteActivityCommand // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 targetId.equals(((DeleteActivityCommand) other).targetId)); // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"simonjulianl":54,"yyhangz":8}},{"path":"src/main/java/gomedic/logic/commands/deletecommand/DeleteDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.deletecommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":" * Deletes a doctor identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"public class DeleteDoctorCommand extends Command {","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"delete\" + \" \" + PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"            + \": Deletes the doctor identified by the index shown in the doctor list.\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"            + \"Parameters: INDEX (must be exactly the same as shown in the list, e.g. D001)\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"            + \"Example: \" + COMMAND_WORD + \" D001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_DELETE_DOCTOR_SUCCESS \u003d \"Deleted Doctor: %1$s\";","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    private final Id targetId;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    public DeleteDoctorCommand(Id targetId) {","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"        this.targetId \u003d targetId;","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorToDelete \u003d lastShownList","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"                .stream()","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                .filter(doctor -\u003e doctor","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"                        .getId()","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"                        .toString().equals(targetId.toString()))","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"                .findFirst()","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"                .orElse(null);","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        if (doctorToDelete \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        model.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete));","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"                || (other instanceof DeleteDoctorCommand // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"                \u0026\u0026 targetId.equals(((DeleteDoctorCommand) other).targetId)); // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":61}},{"path":"src/main/java/gomedic/logic/commands/deletecommand/DeletePatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.deletecommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_PATIENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":" * Deletes a patient identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"public class DeletePatientCommand extends Command {","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"delete\" + \" \" + PREFIX_TYPE_PATIENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        + \": Deletes the patient identified by the index shown in the patient list.\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        + \"Parameters: INDEX (must be exactly the same as shown in the list, e.g. P001)\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"        + \"Example: \" + COMMAND_WORD + \" P001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    private final Id targetId;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"    public DeletePatientCommand(Id targetId) {","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"        this.targetId \u003d targetId;","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        Patient patientToDelete \u003d lastShownList","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"            .stream()","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"            .filter(patient -\u003e patient","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"                .getId()","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"                .toString().equals(targetId.toString()))","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"            .findFirst()","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"            .orElse(null);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        if (patientToDelete \u003d\u003d null) {","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        model.deletePatient(patientToDelete);","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"            || (other instanceof DeletePatientCommand // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"            \u0026\u0026 targetId.equals(((DeletePatientCommand) other).targetId)); // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":56,"yyhangz":6}},{"path":"src/main/java/gomedic/logic/commands/editcommand/EditActivityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.editcommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.model.Model.PREDICATE_SHOW_ALL_ITEMS;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import java.util.List;","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":" * Edits the details of an existing doctor in the address book.","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"public class EditActivityCommand extends Command {","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    public static final String COMMAND_WORD \u003d \"edit\" + \" \" + PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the activity identified \"","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"            + \"by the index number used in the displayed activity list. \"","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"            + \"[\" + PREFIX_ID + \"ID] \"","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"            + \"[\" + PREFIX_START_TIME + \"NAME] \"","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"            + \"[\" + PREFIX_END_TIME + \"PHONE] \"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \"","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"TITLE] \"","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_ID + \" A001 \"","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_START_TIME + \"17/10/2021 14:00 \"","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_END_TIME + \"17/10/2021 15:00 \"","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"            + PREFIX_TITLE + \"Another new title\";","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_EDIT_ACTIVITY_SUCCESS \u003d \"Edited Activity: %1$s\";","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"Must provide at least one field (other than ID).\";","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    private final Id targetId;","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"    private final EditActivityDescriptor editActivityDescriptor;","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"     * @param targetId of the activity in the filtered activity list to edit","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"     * @param editActivityDescriptor details to edit the activity with","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityCommand(Id targetId, EditActivityDescriptor editActivityDescriptor) {","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(targetId);","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(editActivityDescriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        this.targetId \u003d targetId;","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        this.editActivityDescriptor \u003d new EditActivityDescriptor(editActivityDescriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"     * Creates and returns a {@code Activity} with the details of {@code activityToEdit}","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"     * edited with {@code activityDoctorDescriptor}.","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"    private static Activity createEditedActivity(Activity activityToEdit,","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"                                                 EditActivityDescriptor editActivityDescriptor) {","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(activityToEdit);","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        ActivityId activityId \u003d activityToEdit.getActivityId();","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"        Time startTime \u003d editActivityDescriptor.getStartTime().orElse(activityToEdit.getStartTime());","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"        Time endTime \u003d editActivityDescriptor.getEndTime().orElse(activityToEdit.getEndTime());","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"        Title title \u003d editActivityDescriptor.getTitle().orElse(activityToEdit.getTitle());","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"        Description description \u003d editActivityDescriptor.getDescription().orElse(activityToEdit.getDescription());","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"        return new Activity(activityId, startTime, endTime, title, description);","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"        Activity activityToEdit \u003d lastShownList","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"                .stream()","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"                .filter(activity -\u003e activity.getActivityId().toString().equals(targetId.toString()))","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"                .findFirst()","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"                .orElse(null);","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        if (activityToEdit \u003d\u003d null) {","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_ID);","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"        Activity editedActivity \u003d createEditedActivity(activityToEdit, editActivityDescriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"        boolean anyConflicting \u003d model","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"                .getFilteredActivityList()","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"                .stream()","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"                .anyMatch(it -\u003e it.isConflicting(editedActivity) \u0026\u0026 !it.getActivityId()","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"                        .equals(editedActivity.getActivityId()));","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"        if (anyConflicting) {","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"            throw new CommandException(Messages.MESSAGE_CONFLICTING_ACTIVITY);","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"        model.setActivity(activityToEdit, editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"        model.updateFilteredActivitiesList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"        model.setModelBeingShown(ModelItem.ACTIVITY);","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity));","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-15"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-15"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-15"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        if (!(other instanceof EditActivityCommand)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"        // state check","lastModifiedDate":"2021-10-15"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand e \u003d (EditActivityCommand) other;","lastModifiedDate":"2021-10-15"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"        return targetId.equals(e.targetId)","lastModifiedDate":"2021-10-15"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 editActivityDescriptor.equals(e.editActivityDescriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"     * Stores the details to edit the activity with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-15"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"     * corresponding field value of the doctor.","lastModifiedDate":"2021-10-15"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"    public static class EditActivityDescriptor {","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"        private Time startTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"        private Time endTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"        private Title title;","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"        private Description description;","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"        public EditActivityDescriptor() {","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"        /**","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-15"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"         */","lastModifiedDate":"2021-10-15"},{"lineNumber":154,"author":{"gitId":"simonjulianl"},"content":"        public EditActivityDescriptor(EditActivityDescriptor toCopy) {","lastModifiedDate":"2021-10-15"},{"lineNumber":155,"author":{"gitId":"simonjulianl"},"content":"            setStartTime(toCopy.startTime);","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"            setEndTime(toCopy.endTime);","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"            setTitle(toCopy.title);","lastModifiedDate":"2021-10-15"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2021-10-15"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"        /**","lastModifiedDate":"2021-10-15"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-15"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"         */","lastModifiedDate":"2021-10-15"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"simonjulianl"},"content":"            return CollectionUtil.isAnyNonNull(startTime, endTime, title, description);","lastModifiedDate":"2021-10-15"},{"lineNumber":166,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":167,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":168,"author":{"gitId":"simonjulianl"},"content":"        public Optional\u003cTime\u003e getStartTime() {","lastModifiedDate":"2021-10-15"},{"lineNumber":169,"author":{"gitId":"simonjulianl"},"content":"            return Optional.ofNullable(startTime);","lastModifiedDate":"2021-10-15"},{"lineNumber":170,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":171,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"        public void setStartTime(Time startTime) {","lastModifiedDate":"2021-10-15"},{"lineNumber":173,"author":{"gitId":"simonjulianl"},"content":"            this.startTime \u003d startTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":174,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":175,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":176,"author":{"gitId":"simonjulianl"},"content":"        public Optional\u003cTime\u003e getEndTime() {","lastModifiedDate":"2021-10-15"},{"lineNumber":177,"author":{"gitId":"simonjulianl"},"content":"            return Optional.ofNullable(endTime);","lastModifiedDate":"2021-10-15"},{"lineNumber":178,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"simonjulianl"},"content":"        public void setEndTime(Time endTime) {","lastModifiedDate":"2021-10-15"},{"lineNumber":181,"author":{"gitId":"simonjulianl"},"content":"            this.endTime \u003d endTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":182,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":184,"author":{"gitId":"simonjulianl"},"content":"        public Optional\u003cTitle\u003e getTitle() {","lastModifiedDate":"2021-10-15"},{"lineNumber":185,"author":{"gitId":"simonjulianl"},"content":"            return Optional.ofNullable(title);","lastModifiedDate":"2021-10-15"},{"lineNumber":186,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":187,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":188,"author":{"gitId":"simonjulianl"},"content":"        public void setTitle(Title title) {","lastModifiedDate":"2021-10-15"},{"lineNumber":189,"author":{"gitId":"simonjulianl"},"content":"            this.title \u003d title;","lastModifiedDate":"2021-10-15"},{"lineNumber":190,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":191,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":192,"author":{"gitId":"simonjulianl"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2021-10-15"},{"lineNumber":193,"author":{"gitId":"simonjulianl"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2021-10-15"},{"lineNumber":194,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":195,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":196,"author":{"gitId":"simonjulianl"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2021-10-15"},{"lineNumber":197,"author":{"gitId":"simonjulianl"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-10-15"},{"lineNumber":198,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-15"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-15"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-15"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"                return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-15"},{"lineNumber":206,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-15"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"            if (!(other instanceof EditActivityDescriptor)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"                return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-15"},{"lineNumber":211,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"            // state check","lastModifiedDate":"2021-10-15"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"            EditActivityDescriptor e \u003d (EditActivityDescriptor) other;","lastModifiedDate":"2021-10-15"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":215,"author":{"gitId":"simonjulianl"},"content":"            return getStartTime().equals(e.getStartTime())","lastModifiedDate":"2021-10-15"},{"lineNumber":216,"author":{"gitId":"simonjulianl"},"content":"                    \u0026\u0026 getEndTime().equals(e.getEndTime())","lastModifiedDate":"2021-10-15"},{"lineNumber":217,"author":{"gitId":"simonjulianl"},"content":"                    \u0026\u0026 getTitle().equals(e.getTitle())","lastModifiedDate":"2021-10-15"},{"lineNumber":218,"author":{"gitId":"simonjulianl"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription());","lastModifiedDate":"2021-10-15"},{"lineNumber":219,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":220,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":221,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"simonjulianl":221}},{"path":"src/main/java/gomedic/logic/commands/editcommand/EditDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.editcommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_DEPARTMENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.model.Model.PREDICATE_SHOW_ALL_ITEMS;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":" * Edits the details of an existing doctor in the address book.","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"public class EditDoctorCommand extends Command {","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"edit\" + \" \" + PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the doctor identified \"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"            + \"by the index number used in the displayed doctor list. \"","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"            + \"[\" + PREFIX_ID + \"ID] \"","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"            + \"[\" + PREFIX_DEPARTMENT + \"DEPARTMENT] \"","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"            + PREFIX_ID + \" D001 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"            + PREFIX_NAME + \"John Snow \"","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"            + PREFIX_DEPARTMENT + \"Neurology\";","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_EDIT_DOCTOR_SUCCESS \u003d \"Edited Doctor: %1$s\";","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"Must provide at least one field (other than ID).\";","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"    private final Id targetId;","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    private final EditDoctorDescriptor editDoctorDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"     * @param targetId of the doctor in the filtered doctor list to edit","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"     * @param editDoctorDescriptor details to edit the doctor with","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorCommand(Id targetId, EditDoctorDescriptor editDoctorDescriptor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(targetId);","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(editDoctorDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        this.targetId \u003d targetId;","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        this.editDoctorDescriptor \u003d new EditDoctorDescriptor(editDoctorDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"     * Creates and returns a {@code Doctor} with the details of {@code doctorToEdit}","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"     * edited with {@code editDoctorDescriptor}.","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"    private static Doctor createEditedDoctor(Doctor doctorToEdit, EditDoctorDescriptor editDoctorDescriptor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(doctorToEdit);","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        DoctorId doctorId \u003d doctorToEdit.getId();","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        Name updatedName \u003d editDoctorDescriptor.getName().orElse(doctorToEdit.getName());","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        Phone updatedPhone \u003d editDoctorDescriptor.getPhone().orElse(doctorToEdit.getPhone());","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        Department updatedDepartment \u003d editDoctorDescriptor.getDepartment().orElse(doctorToEdit.getDepartment());","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"        return new Doctor(updatedName, updatedPhone, doctorId, updatedDepartment);","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorToEdit \u003d lastShownList","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"                .stream()","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"                .filter(doctor -\u003e doctor.getId().toString().equals(targetId.toString()))","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"                .findFirst()","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"                .orElse(null);","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"        if (doctorToEdit \u003d\u003d null) {","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_ID);","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"        Doctor editedDoctor \u003d createEditedDoctor(doctorToEdit, editDoctorDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"        model.setDoctor(doctorToEdit, editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"        model.setModelBeingShown(ModelItem.DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor));","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"yyhangz"},"content":"        if (!(other instanceof EditDoctorCommand)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand e \u003d (EditDoctorCommand) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"yyhangz"},"content":"        return targetId.equals(e.targetId)","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"yyhangz"},"content":"                \u0026\u0026 editDoctorDescriptor.equals(e.editDoctorDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":124,"author":{"gitId":"yyhangz"},"content":"     * Stores the details to edit the doctor with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"yyhangz"},"content":"     * corresponding field value of the doctor.","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"yyhangz"},"content":"    public static class EditDoctorDescriptor {","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":130,"author":{"gitId":"yyhangz"},"content":"        private Department department;","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"yyhangz"},"content":"        public EditDoctorDescriptor() {","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":138,"author":{"gitId":"yyhangz"},"content":"        public EditDoctorDescriptor(EditDoctorDescriptor toCopy) {","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"            setDepartment(toCopy.department);","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, department);","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"simonjulianl"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-09-28"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-09-28"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2021-09-28"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2021-09-28"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"        public Optional\u003cDepartment\u003e getDepartment() {","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"            return Optional.ofNullable(department);","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":171,"author":{"gitId":"yyhangz"},"content":"        public void setDepartment(Department department) {","lastModifiedDate":"2021-10-14"},{"lineNumber":172,"author":{"gitId":"yyhangz"},"content":"            this.department \u003d department;","lastModifiedDate":"2021-10-14"},{"lineNumber":173,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":174,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":183,"author":{"gitId":"yyhangz"},"content":"            if (!(other instanceof EditDoctorDescriptor)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":188,"author":{"gitId":"yyhangz"},"content":"            EditDoctorDescriptor e \u003d (EditDoctorDescriptor) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"yyhangz"},"content":"                    \u0026\u0026 getDepartment().equals(e.getDepartment());","lastModifiedDate":"2021-10-14"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"simonjulianl":24,"yyhangz":75,"-":96}},{"path":"src/main/java/gomedic/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.exceptions;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"simonjulianl":1,"-":16}},{"path":"src/main/java/gomedic/logic/commands/listcommand/ListActivityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.listcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.model.Model.PREDICATE_SHOW_ALL_ITEMS;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":" * Lists all activities in the address book to the user.","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"public class ListActivityCommand extends Command {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"list\" + \" \" + PREFIX_TYPE_ACTIVITY;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all activities sorted by id\";","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        model.setModelBeingShown(ModelItem.ACTIVITY);","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        model.updateFilteredActivitiesList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"simonjulianl":26,"yyhangz":2}},{"path":"src/main/java/gomedic/logic/commands/listcommand/ListDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.listcommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.model.Model.PREDICATE_SHOW_ALL_ITEMS;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"public class ListDoctorCommand extends Command {","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"list\" + \" \" + PREFIX_TYPE_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all doctor sorted by id\";","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"        model.setModelBeingShown(ModelItem.DOCTOR);","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":24}},{"path":"src/main/java/gomedic/logic/commands/listcommand/ListPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.listcommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.parser.CliSyntax.PREFIX_TYPE_PATIENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.model.Model.PREDICATE_SHOW_ALL_ITEMS;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"public class ListPatientCommand extends Command {","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    public static final String COMMAND_WORD \u003d \"list\" + \" \" + PREFIX_TYPE_PATIENT;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients sorted by id\";","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"        model.setModelBeingShown(ModelItem.PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":22,"yyhangz":2}},{"path":"src/main/java/gomedic/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.ExitCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.FindCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.HelpCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.addcommand.AddActivityCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearActivityCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearDoctorCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearPatientCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.deletecommand.DeleteActivityCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.deletecommand.DeleteDoctorCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.deletecommand.DeletePatientCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.editcommand.EditActivityCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.listcommand.ListActivityCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.listcommand.ListDoctorCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.listcommand.ListPatientCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.addcommandparser.AddActivityCommandParser;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.addcommandparser.AddDoctorCommandParser;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.addcommandparser.AddPatientCommandParser;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.deletecommandparser.DeleteActivityParser;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.deletecommandparser.DeleteDoctorParser;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.deletecommandparser.DeletePatientParser;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.editcommandparser.EditActivityCommandParser;","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.editcommandparser.EditDoctorCommandParser;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    private static final Pattern GENERIC_COMMAND_FORMAT \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    private static final Pattern TYPED_COMMAND_FORMAT \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+\\\\st/\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        final Matcher genericMatcher \u003d GENERIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        final Matcher specificMatcher \u003d TYPED_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        if (!genericMatcher.matches()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        String commandWord;","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        String arguments;","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        if (specificMatcher.matches()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"            commandWord \u003d specificMatcher.group(\"commandWord\");","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"            arguments \u003d specificMatcher.group(\"arguments\");","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"            commandWord \u003d genericMatcher.group(\"commandWord\");","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"            arguments \u003d genericMatcher.group(\"arguments\");","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"        case AddActivityCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"            return new AddActivityCommandParser().parse(arguments);","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"        case AddDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"            return new AddDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"        case AddPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"            return new AddPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        case EditDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"            return new EditDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"        case EditActivityCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"            return new EditActivityCommandParser().parse(arguments);","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        case DeleteActivityCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"            return new DeleteActivityParser().parse(arguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"        case DeleteDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"            return new DeleteDoctorParser().parse(arguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"        case DeletePatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"            return new DeletePatientParser().parse(arguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"        case ClearActivityCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"            return new ClearActivityCommand();","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"        case ClearDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"            return new ClearDoctorCommand();","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"        case ClearPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"            return new ClearPatientCommand();","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        case ListActivityCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"            return new ListActivityCommand();","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"yyhangz"},"content":"        case ListDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"yyhangz"},"content":"            return new ListDoctorCommand();","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"        case ListPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"            return new ListPatientCommand();","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":133,"author":{"gitId":"ngsengleng"},"content":"            throw new ParseException(Messages.getSuggestions(commandWord));","lastModifiedDate":"2021-10-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"radiankrisno":27,"ngsengleng":1,"simonjulianl":47,"yyhangz":18,"-":43}},{"path":"src/main/java/gomedic/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments **/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"simonjulianl":1,"-":59}},{"path":"src/main/java/gomedic/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"        private final int startPosition;","lastModifiedDate":"2021-09-28"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"simonjulianl":2,"-":146}},{"path":"src/main/java/gomedic/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"    /* Prefixes for entry types */","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"    public static final String PREFIX_TYPE_AS_STRING \u003d \"t/\";","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    public static final String PREFIX_TYPE_DOCTOR \u003d PREFIX_TYPE_AS_STRING + \"doctor\";","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"    public static final String PREFIX_TYPE_ACTIVITY \u003d PREFIX_TYPE_AS_STRING + \"activity\";","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"    public static final String PREFIX_TYPE_PATIENT \u003d PREFIX_TYPE_AS_STRING + \"patient\";","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    /* General prefixes */","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"ta/\");","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public static final Prefix PREFIX_ID \u003d new Prefix(\"i/\");","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    /* Prefix definitions for a doctor */","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public static final Prefix PREFIX_DEPARTMENT \u003d new Prefix(\"de/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    /* Prefix definitions for a patient */","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    public static final Prefix PREFIX_BLOODTYPE \u003d new Prefix(\"b/\");","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public static final Prefix PREFIX_MEDICALCONDITIONS \u003d new Prefix(\"m/\");","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    /* Prefix definitions for an activity */","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ti/\");","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"radiankrisno":8,"simonjulianl":7,"yyhangz":10,"-":10}},{"path":"src/main/java/gomedic/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.FindCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.util.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"simonjulianl":7,"yyhangz":1,"-":25}},{"path":"src/main/java/gomedic/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"simonjulianl":4,"-":13}},{"path":"src/main/java/gomedic/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.index.Index;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.StringUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Age;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.BloodType;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Gender;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Height;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.patient.PatientId;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Weight;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"     * Parses a {@code String department} into a {@code Department}.","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"     * @throws ParseException if the given {@code department} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"    public static Department parseDepartment(String department) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(department);","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"        String trimmedDepartment \u003d department.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"        if (!Department.isValidDepartmentName(trimmedDepartment)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"            throw new ParseException(Department.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"        return new Department(trimmedDepartment);","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"     * Parses a {@code String age} into a {@code Age}.","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"     * @throws ParseException if the given {@code age} is invalid.","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"    public static Age parseAge(String age) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(age);","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"        String trimmedAge \u003d age.trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"        if (!Age.isValidAge(trimmedAge)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"            throw new ParseException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"        return new Age(trimmedAge);","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"     * Parses a {@code String bloodType} into a {@code BloodType}.","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"     * @throws ParseException if the given {@code bloodType} is invalid.","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"    public static BloodType parseBloodType(String bloodType) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(bloodType);","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"        String trimmedBloodType \u003d bloodType.trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"        if (!BloodType.isValidBloodType(trimmedBloodType)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"            throw new ParseException(BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"        return new BloodType(trimmedBloodType);","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"     * Parses a {@code String gender} into a {@code Gender}.","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"     * @throws ParseException if the given {@code gender} is invalid.","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"    public static Gender parseGender(String gender) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(gender);","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"        String trimmedGender \u003d gender.trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"        if (!Gender.isValidGender(trimmedGender)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"        return new Gender(trimmedGender);","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"     * Parses a {@code String height} into a {@code Height}.","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"radiankrisno"},"content":"     * @throws ParseException if the given {@code height} is invalid.","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"    public static Height parseHeight(String height) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(height);","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"        String trimmedHeight \u003d height.trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"        if (!Height.isValidHeight(trimmedHeight)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"            throw new ParseException(Height.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"radiankrisno"},"content":"        return new Height(trimmedHeight);","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"radiankrisno"},"content":"     * Parses a {@code String weight} into a {@code Weight}.","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"radiankrisno"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":159,"author":{"gitId":"radiankrisno"},"content":"     * @throws ParseException if the given {@code weight} is invalid.","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":161,"author":{"gitId":"radiankrisno"},"content":"    public static Weight parseWeight(String weight) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(weight);","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"radiankrisno"},"content":"        String trimmedWeight \u003d weight.trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"radiankrisno"},"content":"        if (!Weight.isValidWeight(trimmedWeight)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"radiankrisno"},"content":"            throw new ParseException(Weight.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"radiankrisno"},"content":"        return new Weight(trimmedWeight);","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"radiankrisno"},"content":"     * Parses {@code Collection\u003cString\u003e medicalConditions} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"    public static Set\u003cTag\u003e parseMedicalConditions(Collection\u003cString\u003e medicalConditions) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(medicalConditions);","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"radiankrisno"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"radiankrisno"},"content":"        for (String tagName : medicalConditions) {","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"radiankrisno"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"        return tagSet;","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"     * Parses a {@code String time} into an {@code Time}.","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"simonjulianl"},"content":"     * @throws ParseException if the given {@code time} is invalid.","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"simonjulianl"},"content":"    public static Time parseTime(String time) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(time);","lastModifiedDate":"2021-10-09"},{"lineNumber":190,"author":{"gitId":"simonjulianl"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"simonjulianl"},"content":"        if (!Time.isValidTime(trimmedTime)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":192,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"simonjulianl"},"content":"        return new Time(trimmedTime);","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"simonjulianl"},"content":"     * Parses a {@code String id} into an {@code id}.","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"     * @throws ParseException if the given {@code id} is invalid.","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"    public static Id parseId(String id) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(id);","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"        String trimmedId \u003d id.trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"simonjulianl"},"content":"        if (trimmedId.length() !\u003d 4) {","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(Id.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"        if (ActivityId.isValidActivityId(trimmedId)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"simonjulianl"},"content":"            return new ActivityId(trimmedId);","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"        } else if (DoctorId.isValidDoctorId(trimmedId)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"            return new DoctorId(trimmedId);","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"        } else if (PatientId.isValidPatientId(trimmedId)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"simonjulianl"},"content":"            return new PatientId(trimmedId);","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":218,"author":{"gitId":"simonjulianl"},"content":"        throw new ParseException(Id.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":222,"author":{"gitId":"simonjulianl"},"content":"     * Parses a {@code String title} into an {@code Title}.","lastModifiedDate":"2021-10-09"},{"lineNumber":223,"author":{"gitId":"simonjulianl"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-09"},{"lineNumber":224,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":225,"author":{"gitId":"simonjulianl"},"content":"     * @throws ParseException if the given {@code Title} is invalid.","lastModifiedDate":"2021-10-09"},{"lineNumber":226,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":227,"author":{"gitId":"simonjulianl"},"content":"    public static Title parseTitle(String title) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":228,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(title);","lastModifiedDate":"2021-10-09"},{"lineNumber":229,"author":{"gitId":"simonjulianl"},"content":"        String trimmedTitle \u003d title.trim();","lastModifiedDate":"2021-10-09"},{"lineNumber":230,"author":{"gitId":"simonjulianl"},"content":"        if (!Title.isValidTitle(trimmedTitle)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":231,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":232,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":233,"author":{"gitId":"simonjulianl"},"content":"        return new Title(trimmedTitle);","lastModifiedDate":"2021-10-09"},{"lineNumber":234,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":235,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":236,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":237,"author":{"gitId":"simonjulianl"},"content":"     * Parses a {@code String Description} into an {@code Description}.","lastModifiedDate":"2021-10-09"},{"lineNumber":238,"author":{"gitId":"simonjulianl"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-09"},{"lineNumber":239,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":240,"author":{"gitId":"simonjulianl"},"content":"     * @throws ParseException if the given {@code Description} is invalid.","lastModifiedDate":"2021-10-09"},{"lineNumber":241,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":242,"author":{"gitId":"simonjulianl"},"content":"    public static Description parseDescription(String description) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":243,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-10-09"},{"lineNumber":244,"author":{"gitId":"simonjulianl"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2021-10-09"},{"lineNumber":245,"author":{"gitId":"simonjulianl"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":246,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":247,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":248,"author":{"gitId":"simonjulianl"},"content":"        return new Description(trimmedDescription);","lastModifiedDate":"2021-10-09"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":262,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":263,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":264,"author":{"gitId":"simonjulianl"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2021-10-09"},{"lineNumber":265,"author":{"gitId":"simonjulianl"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-09"},{"lineNumber":266,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":267,"author":{"gitId":"simonjulianl"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2021-10-09"},{"lineNumber":268,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":269,"author":{"gitId":"simonjulianl"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":270,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-10-09"},{"lineNumber":271,"author":{"gitId":"simonjulianl"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2021-10-09"},{"lineNumber":272,"author":{"gitId":"simonjulianl"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":273,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":274,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":275,"author":{"gitId":"simonjulianl"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2021-10-09"},{"lineNumber":276,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"radiankrisno":92,"simonjulianl":92,"yyhangz":16,"-":77}},{"path":"src/main/java/gomedic/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"simonjulianl":1,"-":38}},{"path":"src/main/java/gomedic/logic/parser/addcommandparser/AddActivityCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.addcommand.AddActivityCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.Parser;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.Prefix;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":" * Parses input arguments and creates a new AddActivityCommand object.","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"public class AddActivityCommandParser implements Parser\u003cAddActivityCommand\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"     * Parses the given {@code String} of arguments in the context of the AddActivityCommand","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     * and returns an AddActivityCommand object for execution.","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public AddActivityCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"                ArgumentTokenizer.tokenize(","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"                        args,","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_START_TIME,","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_END_TIME,","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_TITLE,","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_DESCRIPTION);","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        if (!arePrefixesPresent(argMultimap,","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"                CliSyntax.PREFIX_START_TIME,","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"                CliSyntax.PREFIX_END_TIME,","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"                CliSyntax.PREFIX_TITLE)","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                    String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                            Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                            AddActivityCommand.MESSAGE_USAGE","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"                    ));","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        Time startTime \u003d ParserUtil.parseTime(argMultimap.getValue(CliSyntax.PREFIX_START_TIME).get());","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"        Time endTime \u003d ParserUtil.parseTime(argMultimap.getValue(CliSyntax.PREFIX_END_TIME).get());","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(CliSyntax.PREFIX_TITLE).get());","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        Description description \u003d ParserUtil","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"                .parseDescription(","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"                        argMultimap.getValue(CliSyntax.PREFIX_DESCRIPTION)","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"                                .orElse(\"\")","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"                );","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        return new AddActivityCommand(startTime, endTime, title, description);","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"simonjulianl":68}},{"path":"src/main/java/gomedic/logic/parser/addcommandparser/AddDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.Parser;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.Prefix;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":" * Parses input arguments and creates a new AddDoctorCommand object.","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"public class AddDoctorCommandParser implements Parser\u003cAddDoctorCommand\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     * Parses the given {@code String} of arguments in the context of the AddDoctorCommand","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"     * and returns an AddDoctorCommand object for execution.","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    public AddDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"                ArgumentTokenizer.tokenize(","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"                        args,","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"                        CliSyntax.PREFIX_NAME,","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"                        CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"                        CliSyntax.PREFIX_DEPARTMENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        if (!arePrefixesPresent(argMultimap,","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"                CliSyntax.PREFIX_NAME,","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"                CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"                CliSyntax.PREFIX_DEPARTMENT)","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                    String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"                            Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"                            AddDoctorCommand.MESSAGE_USAGE","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"                    ));","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        Department department \u003d ParserUtil.parseDepartment(argMultimap.getValue(CliSyntax.PREFIX_DEPARTMENT).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        return new AddDoctorCommand(name, phone, department);","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"yyhangz":62}},{"path":"src/main/java/gomedic/logic/parser/addcommandparser/AddPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.Parser;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.Prefix;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Age;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.BloodType;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Gender;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Height;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Weight;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":" * Parses input arguments and creates a new AddDoctorCommand object.","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPatientCommand","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"     * and returns an AddPatientCommand object for execution.","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    public AddPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"            ArgumentTokenizer.tokenize(","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"                args,","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"                CliSyntax.PREFIX_NAME,","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"                CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"                CliSyntax.PREFIX_AGE,","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"                CliSyntax.PREFIX_BLOODTYPE,","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"                CliSyntax.PREFIX_GENDER,","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"                CliSyntax.PREFIX_HEIGHT,","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"                CliSyntax.PREFIX_WEIGHT,","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"                CliSyntax.PREFIX_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        if (!arePrefixesPresent(argMultimap,","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"            CliSyntax.PREFIX_NAME,","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"            CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"            CliSyntax.PREFIX_AGE,","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"            CliSyntax.PREFIX_BLOODTYPE,","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"            CliSyntax.PREFIX_GENDER,","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"            CliSyntax.PREFIX_HEIGHT,","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"            CliSyntax.PREFIX_WEIGHT)","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"                String.format(","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"                    Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"                    AddPatientCommand.MESSAGE_USAGE","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"                ));","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get());","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"        Age age \u003d ParserUtil.parseAge(argMultimap.getValue(CliSyntax.PREFIX_AGE).get());","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"        BloodType bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(CliSyntax.PREFIX_BLOODTYPE).get());","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(CliSyntax.PREFIX_GENDER).get());","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        Height height \u003d ParserUtil.parseHeight(argMultimap.getValue(CliSyntax.PREFIX_HEIGHT).get());","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"        Weight weight \u003d ParserUtil.parseWeight(argMultimap.getValue(CliSyntax.PREFIX_WEIGHT).get());","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"        Set\u003cTag\u003e medicalConditions \u003d ParserUtil.parseMedicalConditions(argMultimap","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"            .getAllValues(CliSyntax.PREFIX_MEDICALCONDITIONS));","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"        return new AddPatientCommand(name, phone, age, bloodType, gender, height, weight, medicalConditions);","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":83}},{"path":"src/main/java/gomedic/logic/parser/deletecommandparser/DeleteActivityParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser.deletecommandparser;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.deletecommand.DeleteActivityCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.Parser;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * Parses input arguments and creates a new DeleteActivityCommand object","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"public class DeleteActivityParser implements Parser\u003cDeleteActivityCommand\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteActivityCommand","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"     * and returns a DeleteActivityCommand object for execution.","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    public DeleteActivityCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"        try {","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"            Id id \u003d ParserUtil.parseId(args);","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"            return new DeleteActivityCommand(id);","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteActivityCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"simonjulianl":30,"yyhangz":1}},{"path":"src/main/java/gomedic/logic/parser/deletecommandparser/DeleteDoctorParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.parser.deletecommandparser;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.deletecommand.DeleteDoctorCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.Parser;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * Parses input arguments and creates a new DeleteDoctorCommand object","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"public class DeleteDoctorParser implements Parser\u003cDeleteDoctorCommand\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteDoctorCommand","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"     * and returns a DeleteDoctorCommand object for execution.","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public DeleteDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"            Id id \u003d ParserUtil.parseId(args);","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"            return new DeleteDoctorCommand(id);","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteDoctorCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":29}},{"path":"src/main/java/gomedic/logic/parser/deletecommandparser/DeletePatientParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.parser.deletecommandparser;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.deletecommand.DeletePatientCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.Parser;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"public class DeletePatientParser implements Parser\u003cDeletePatientCommand\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePatientCommand","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"     * and returns a DeletePatientCommand object for execution.","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    public DeletePatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"        try {","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"            Id id \u003d ParserUtil.parseId(args);","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"            return new DeletePatientCommand(id);","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":31}},{"path":"src/main/java/gomedic/logic/parser/editcommandparser/EditActivityCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser.editcommandparser;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.editcommand.EditActivityCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.Parser;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":" * Parses input arguments and creates a new EditActivityCommand object","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"public class EditActivityCommandParser implements Parser\u003cEditActivityCommand\u003e {","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_INPUT \u003d \"\";","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"     * Parses the given {@code String} of arguments in the context of the EditActivityCommand","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     * and returns an EditActivityCommand object for execution.","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"                ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_ID,","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_START_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_END_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_TITLE,","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_DESCRIPTION);","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        Id targetId;","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        try {","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"            targetId \u003d ParserUtil.parseId(argMultimap.getValue(CliSyntax.PREFIX_ID).orElse(INVALID_INPUT));","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditActivityCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor editActivityDescriptor \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityCommand.EditActivityDescriptor();","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_START_TIME).isPresent()) {","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"            editActivityDescriptor.setStartTime(ParserUtil.parseTime(argMultimap.getValue(CliSyntax.PREFIX_START_TIME)","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"                    .get()));","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_END_TIME).isPresent()) {","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"            editActivityDescriptor.setEndTime(ParserUtil.parseTime(argMultimap.getValue(CliSyntax.PREFIX_END_TIME)","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"                    .get()));","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_TITLE).isPresent()) {","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"            editActivityDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(CliSyntax.PREFIX_TITLE).get()));","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"            editActivityDescriptor","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"                    .setDescription(ParserUtil.parseDescription(argMultimap.getValue(CliSyntax.PREFIX_DESCRIPTION)","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"                            .get()));","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        if (!editActivityDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(EditActivityCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        return new EditActivityCommand(targetId, editActivityDescriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"simonjulianl":73}},{"path":"src/main/java/gomedic/logic/parser/editcommandparser/EditDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.parser.editcommandparser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.Parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":" * Parses input arguments and creates a new EditDoctorCommand object","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"public class EditDoctorCommandParser implements Parser\u003cEditDoctorCommand\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private static final String INVALID_INPUT \u003d \"\";","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     * Parses the given {@code String} of arguments in the context of the EditDoctorCommand","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"     * and returns an EditDoctorCommand object for execution.","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"                ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"                        CliSyntax.PREFIX_ID,","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_NAME,","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"                        CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"                        CliSyntax.PREFIX_DEPARTMENT);","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        Id targetId;","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"            targetId \u003d ParserUtil.parseId(argMultimap.getValue(CliSyntax.PREFIX_ID).orElse(INVALID_INPUT));","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"            throw new ParseException(","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditDoctorCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor editDoctorDescriptor \u003d new EditDoctorCommand.EditDoctorDescriptor();","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"            editDoctorDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get()));","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"            editDoctorDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get()));","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_DEPARTMENT).isPresent()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"            editDoctorDescriptor","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"                    .setDepartment(ParserUtil.parseDepartment(argMultimap.getValue(CliSyntax.PREFIX_DEPARTMENT).get()));","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        if (!editDoctorDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"            throw new ParseException(EditDoctorCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        return new EditDoctorCommand(targetId, editDoctorDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"simonjulianl":10,"yyhangz":27,"-":27}},{"path":"src/main/java/gomedic/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser.exceptions;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"simonjulianl":2,"-":15}},{"path":"src/main/java/gomedic/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.UniqueActivityList;","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.UniquePersonList;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    private final UniqueActivityList activities;","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    private final UniquePersonList\u003cDoctor\u003e doctors;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    private final UniquePersonList\u003cPatient\u003e patients;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        activities \u003d new UniqueActivityList();","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        doctors \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        patients \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"     * Creates an AddressBook using the data in {@code toBeCopied}","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    public AddressBook() {","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        setActivities(newData.getActivityListSortedById());","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        setDoctors(newData.getDoctorListSortedById());","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"        setPatients(newData.getPatientListSortedById());","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"     * Replaces the contents of the activity list with {@code activities}.","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"     * {@code activities} must not contain duplicate and conflicting activities.","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    public void setActivities(List\u003cActivity\u003e activities) {","lastModifiedDate":"2021-10-03"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        this.activities.setActivities(activities);","lastModifiedDate":"2021-10-03"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"     * Replaces the contents of the doctor list with {@code doctors}.","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"     * {@code doctors} must not contain duplicate doctors.","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"    public void setDoctors(List\u003cDoctor\u003e doctors) {","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        this.doctors.setPersons(doctors);","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"     * Replaces the contents of the patient list with {@code patients}.","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"        this.patients.setPersons(patients);","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    //// person and activity-level operations","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"     * Returns true if a doctor with the same identity as {@code doctor} exists in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"        return doctors.contains(doctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the address book.","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"        return patients.contains(patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if an activity with the same id as {@code activities} exists in the address book.","lastModifiedDate":"2021-10-03"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"    public boolean hasActivity(Activity activity) {","lastModifiedDate":"2021-10-03"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(activity);","lastModifiedDate":"2021-10-03"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"        return activities.contains(activity);","lastModifiedDate":"2021-10-03"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if there exists another conflicting activity","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"     * in terms of timing in the addressbook.","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"    public boolean hasConflictingActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"        return activities.containsConflicting(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"yyhangz"},"content":"     * Adds a doctor to the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"yyhangz"},"content":"     * The doctor must not already exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"yyhangz"},"content":"    public void addDoctor(Doctor d) {","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"yyhangz"},"content":"        doctors.add(d);","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"     * Adds a patient to the address book.","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"     * The patient must not already exist in the address book.","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"        patients.add(p);","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"     * Adds an activity to the address book.","lastModifiedDate":"2021-10-03"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"     * The activity must not be duplicate and conflicting.","lastModifiedDate":"2021-10-03"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"    public void addActivity(Activity a) {","lastModifiedDate":"2021-10-03"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"        activities.add(a);","lastModifiedDate":"2021-10-03"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"     * Returns a new activity id.","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"    public int getNewActivityId() {","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"        return activities.getNewActivityId();","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"     * Checks if there is an available new doctor id for assignment.","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"    public boolean hasNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"        return doctors.hasNewId();","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"     * Returns a new doctor id.","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"    public int getNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"        return doctors.getNewId();","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"     * Checks if there is an available new patient id for assignment.","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"radiankrisno"},"content":"    public boolean hasNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"        return patients.hasNewId();","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"radiankrisno"},"content":"     * Returns a new patient id.","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"radiankrisno"},"content":"    public int getNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"        return patients.getNewId();","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"     * Replaces the given activity {@code target} in the list with {@code editedActivity}.","lastModifiedDate":"2021-10-15"},{"lineNumber":184,"author":{"gitId":"simonjulianl"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2021-10-15"},{"lineNumber":185,"author":{"gitId":"simonjulianl"},"content":"     * The activity\u0027s id must not be the same as another existing activity in the address book (other than the one","lastModifiedDate":"2021-10-15"},{"lineNumber":186,"author":{"gitId":"simonjulianl"},"content":"     * which is being replaced).","lastModifiedDate":"2021-10-15"},{"lineNumber":187,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":188,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity(Activity target, Activity editedActivity) {","lastModifiedDate":"2021-10-15"},{"lineNumber":189,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":190,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":191,"author":{"gitId":"simonjulianl"},"content":"        activities.setActivity(target, editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":192,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":193,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":194,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"yyhangz"},"content":"     * Replaces the given doctor {@code target} in the list with {@code editedDoctor}.","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"yyhangz"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"yyhangz"},"content":"     * The doctor\u0027s id must not be the same as another existing doctor in the address book (other than the one","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"yyhangz"},"content":"     * which is being replaced).","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":200,"author":{"gitId":"yyhangz"},"content":"    public void setDoctor(Doctor target, Doctor editedPerson) {","lastModifiedDate":"2021-10-09"},{"lineNumber":201,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":203,"author":{"gitId":"yyhangz"},"content":"        doctors.setPerson(target, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":204,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":205,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":206,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"radiankrisno"},"content":"     * Replaces the given patient {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2021-10-10"},{"lineNumber":208,"author":{"gitId":"radiankrisno"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2021-10-10"},{"lineNumber":209,"author":{"gitId":"radiankrisno"},"content":"     * The patient\u0027s id must not be the same as another existing patient in the address book (other than the one","lastModifiedDate":"2021-10-10"},{"lineNumber":210,"author":{"gitId":"radiankrisno"},"content":"     * which is being replaced).","lastModifiedDate":"2021-10-10"},{"lineNumber":211,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":212,"author":{"gitId":"radiankrisno"},"content":"    public void setPatient(Patient target, Patient editedPerson) {","lastModifiedDate":"2021-10-10"},{"lineNumber":213,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2021-10-10"},{"lineNumber":214,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":215,"author":{"gitId":"radiankrisno"},"content":"        patients.setPerson(target, editedPerson);","lastModifiedDate":"2021-10-10"},{"lineNumber":216,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":217,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":219,"author":{"gitId":"yyhangz"},"content":"     * Remove the doctor based on the id.","lastModifiedDate":"2021-10-09"},{"lineNumber":220,"author":{"gitId":"yyhangz"},"content":"     * Therefore, regardless whether the doctor has different fields,","lastModifiedDate":"2021-10-09"},{"lineNumber":221,"author":{"gitId":"yyhangz"},"content":"     * as long as the id is the same, it would be treated as equal.","lastModifiedDate":"2021-10-09"},{"lineNumber":222,"author":{"gitId":"yyhangz"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-10-09"},{"lineNumber":223,"author":{"gitId":"yyhangz"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":224,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":225,"author":{"gitId":"yyhangz"},"content":"    public void removeDoctor(Doctor key) {","lastModifiedDate":"2021-10-09"},{"lineNumber":226,"author":{"gitId":"yyhangz"},"content":"        doctors.remove(key);","lastModifiedDate":"2021-10-09"},{"lineNumber":227,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":228,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":229,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":230,"author":{"gitId":"yyhangz"},"content":"     * Remove the patient based on the id.","lastModifiedDate":"2021-10-14"},{"lineNumber":231,"author":{"gitId":"radiankrisno"},"content":"     * Therefore, regardless whether the patient has different fields,","lastModifiedDate":"2021-10-10"},{"lineNumber":232,"author":{"gitId":"radiankrisno"},"content":"     * as long as the id is the same, it would be treated as equal.","lastModifiedDate":"2021-10-10"},{"lineNumber":233,"author":{"gitId":"radiankrisno"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-10-10"},{"lineNumber":234,"author":{"gitId":"radiankrisno"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2021-10-10"},{"lineNumber":235,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":236,"author":{"gitId":"radiankrisno"},"content":"    public void removePatient(Patient key) {","lastModifiedDate":"2021-10-10"},{"lineNumber":237,"author":{"gitId":"radiankrisno"},"content":"        patients.remove(key);","lastModifiedDate":"2021-10-10"},{"lineNumber":238,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":239,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":240,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":241,"author":{"gitId":"simonjulianl"},"content":"     * Remove the activity based on the id.","lastModifiedDate":"2021-10-03"},{"lineNumber":242,"author":{"gitId":"simonjulianl"},"content":"     * Therefore, regardless whether the activity has different titles/fields,","lastModifiedDate":"2021-10-03"},{"lineNumber":243,"author":{"gitId":"simonjulianl"},"content":"     * as long as the id is the same, it would be treated as equal.","lastModifiedDate":"2021-10-03"},{"lineNumber":244,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":245,"author":{"gitId":"simonjulianl"},"content":"    public void removeActivity(Activity activity) {","lastModifiedDate":"2021-10-03"},{"lineNumber":246,"author":{"gitId":"simonjulianl"},"content":"        activities.remove(activity);","lastModifiedDate":"2021-10-03"},{"lineNumber":247,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":248,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"yyhangz"},"content":"        return activities.asUnmodifiableSortedByIdObservableList().size() + \" activities; \"","lastModifiedDate":"2021-10-14"},{"lineNumber":254,"author":{"gitId":"yyhangz"},"content":"                + doctors.asUnmodifiableSortedByIdObservableList().size() + \" doctors; \"","lastModifiedDate":"2021-10-11"},{"lineNumber":255,"author":{"gitId":"yyhangz"},"content":"                + patients.asUnmodifiableSortedByIdObservableList().size() + \" patients\";","lastModifiedDate":"2021-10-11"},{"lineNumber":256,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":261,"author":{"gitId":"yyhangz"},"content":"    public ObservableList\u003cDoctor\u003e getDoctorListSortedById() {","lastModifiedDate":"2021-10-11"},{"lineNumber":262,"author":{"gitId":"yyhangz"},"content":"        return doctors.asUnmodifiableSortedByIdObservableList();","lastModifiedDate":"2021-10-11"},{"lineNumber":263,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":264,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":265,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":266,"author":{"gitId":"radiankrisno"},"content":"    public ObservableList\u003cPatient\u003e getPatientListSortedById() {","lastModifiedDate":"2021-10-11"},{"lineNumber":267,"author":{"gitId":"yyhangz"},"content":"        return patients.asUnmodifiableSortedByIdObservableList();","lastModifiedDate":"2021-10-11"},{"lineNumber":268,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":269,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":270,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":271,"author":{"gitId":"simonjulianl"},"content":"    public ObservableList\u003cActivity\u003e getActivityListSortedById() {","lastModifiedDate":"2021-10-10"},{"lineNumber":272,"author":{"gitId":"simonjulianl"},"content":"        return activities.asUnmodifiableSortedByIdObservableList();","lastModifiedDate":"2021-10-10"},{"lineNumber":273,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":274,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":275,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":276,"author":{"gitId":"simonjulianl"},"content":"    public ObservableList\u003cActivity\u003e getActivityListSortedStartTime() {","lastModifiedDate":"2021-10-03"},{"lineNumber":277,"author":{"gitId":"simonjulianl"},"content":"        return activities.asUnmodifiableSortedByStartTimeList();","lastModifiedDate":"2021-10-10"},{"lineNumber":278,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":279,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":284,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 getActivityListSortedById().equals(((AddressBook) other).getActivityListSortedById())","lastModifiedDate":"2021-10-11"},{"lineNumber":285,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 getDoctorListSortedById().equals(((AddressBook) other).getDoctorListSortedById())","lastModifiedDate":"2021-10-11"},{"lineNumber":286,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 getPatientListSortedById().equals(((AddressBook) other).getPatientListSortedById()));","lastModifiedDate":"2021-10-11"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":291,"author":{"gitId":"yyhangz"},"content":"        return Objects.hash(activities, doctors, patients);","lastModifiedDate":"2021-10-14"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":293,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"radiankrisno":69,"simonjulianl":94,"yyhangz":74,"-":56}},{"path":"src/main/java/gomedic/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    Predicate\u003cObject\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"     * Returns the user prefs.","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    Path getAddressBookDataRootFilePath();","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    void setAddressBookDataRootFilePath(Path addressBookDataRootFilePath);","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"     * Adds the given doctor.","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"     * {@code doctor} must not already exist in the address book.","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"    void addDoctor(Doctor doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"     * Checks if there is a new doctor id available for assignment.","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"    boolean hasNewDoctorId();","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"     * Get a new available unique doctor id.","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"    int getNewDoctorId();","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"     * Returns true if a doctor with same id exists in the addressbook.","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"    boolean hasDoctor(Doctor doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"     * Deletes the given doctor.","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"     * The doctor must exist in the address book.","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"    void deleteDoctor(Doctor target);","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"     * Sets a doctor in the model with another doctor.","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"     * The doctor must exist in the address book.","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"    void setDoctor(Doctor oldDoctor, Doctor replacementDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"     * Adds the given activity.","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"     * {@code activity} must not already exist and not conflicting","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"     * with any activity in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"    void addActivity(Activity activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"     * Get a new unique activity id which is just last id number + 1;","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"    int getNewActivityId();","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if an activity with same id exists in the addressbook.","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"    boolean hasActivity(Activity activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"     * Deletes the given activity.","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"     * The activity must exist in the address book.","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"    void deleteActivity(Activity target);","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"     * Sets an activity in the model with another activity.","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"     * The activity must exist in the address book.","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"    void setActivity(Activity oldActivity, Activity replacementActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if there is another conflicting activity.","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"    boolean hasConflictingActivity(Activity activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"     * Deletes the given patient.","lastModifiedDate":"2021-10-15"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"     * The patient must exist in the address book.","lastModifiedDate":"2021-10-15"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"    void deletePatient(Patient target);","lastModifiedDate":"2021-10-15"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"     * Adds the given patient.","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"     * {@code patient} must not already exist in the address book.","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"     * Checks if there is a new patient id available for assignment.","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"    boolean hasNewPatientId();","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"     * Get a new available unique patient id.","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"    int getNewPatientId();","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a patient with same id exists in the addressbook.","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"    /** Returns an unmodifiable view of the filtered doctor list */","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"    ObservableList\u003cDoctor\u003e getFilteredDoctorList();","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"radiankrisno"},"content":"    /** Returns an unmodifiable view of the filtered patient list */","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"radiankrisno"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"    /** Returns an unmodifiable view of the filtered activity list */","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"    ObservableList\u003cActivity\u003e getFilteredActivityList();","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"     * Updates the filter of the filtered doctor list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"    void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"     * Updates the filter of the filtered patient list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"radiankrisno"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"    void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"simonjulianl"},"content":"     * Updates the filter of the filtered activities list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"simonjulianl"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"simonjulianl"},"content":"    void updateFilteredActivitiesList(Predicate\u003c? super Activity\u003e predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"     * Returns the integer showing current item being shown.","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"simonjulianl"},"content":"     * 0 -\u003e activity","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"yyhangz"},"content":"     * 1 -\u003e doctor","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"yyhangz"},"content":"     * 2 -\u003e patient","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"simonjulianl"},"content":"    ObservableValue\u003cInteger\u003e getModelBeingShown();","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"simonjulianl"},"content":"     * Sets the model being shown.","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"simonjulianl"},"content":"    void setModelBeingShown(ModelItem modelItem);","lastModifiedDate":"2021-10-10"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"radiankrisno":35,"simonjulianl":72,"yyhangz":46,"-":41}},{"path":"src/main/java/gomedic/model/ModelItem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"public enum ModelItem {","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"    ACTIVITY,","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"    DOCTOR,","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"    PATIENT","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"simonjulianl":5,"yyhangz":2}},{"path":"src/main/java/gomedic/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import javafx.beans.property.ObjectProperty;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import javafx.beans.property.SimpleIntegerProperty;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    private final FilteredList\u003cDoctor\u003e filteredDoctors;","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    private final FilteredList\u003cActivity\u003e filteredActivities;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    // used the ordinal value 0 -\u003e Activity, 1 -\u003e Doctor, 2 -\u003e Patient, for simplicity.","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    private final ObjectProperty\u003cInteger\u003e internalModelItemBeingShown \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"            new SimpleIntegerProperty(ModelItem.ACTIVITY.ordinal()).asObject();","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    private final ObservableValue\u003cInteger\u003e modelItemBeingShown \u003d internalModelItemBeingShown; // immutable","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    public ModelManager() {","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        filteredDoctors \u003d new FilteredList\u003c\u003e(this.addressBook.getDoctorListSortedById());","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.addressBook.getPatientListSortedById());","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        filteredActivities \u003d new FilteredList\u003c\u003e(this.addressBook.getActivityListSortedById());","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        return userPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"    public Path getAddressBookDataRootFilePath() {","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        return userPrefs.getAddressBookRootFilePath();","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"    public void setAddressBookDataRootFilePath(Path addressBookDataRootFilePath) {","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(addressBookDataRootFilePath);","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        userPrefs.setAddressBookDataFileRootPath(addressBookDataRootFilePath);","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-09-28"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"        return addressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"yyhangz"},"content":"    public void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate) {","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"yyhangz"},"content":"        filteredDoctors.setPredicate(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"    public void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate) {","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"    public void updateFilteredActivitiesList(Predicate\u003c? super Activity\u003e predicate) {","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"        filteredActivities.setPredicate(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"    public ObservableValue\u003cInteger\u003e getModelBeingShown() {","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"        return modelItemBeingShown;","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"    public void setModelBeingShown(ModelItem modelItem) {","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(modelItem);","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"        internalModelItemBeingShown.setValue(modelItem.ordinal());","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"    public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"        updateFilteredDoctorList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"    public boolean hasNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"        return addressBook.hasNewDoctorId();","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"    public int getNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"        return addressBook.getNewDoctorId();","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"        return addressBook.hasDoctor(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"    public void deleteDoctor(Doctor target) {","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"        addressBook.removeDoctor(target);","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"    public void setDoctor(Doctor oldDoctor, Doctor replacementDoctor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"yyhangz"},"content":"        addressBook.setDoctor(oldDoctor, replacementDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":170,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":171,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"radiankrisno"},"content":"        updateFilteredPatientList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"    public boolean hasNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"        return addressBook.hasNewPatientId();","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"radiankrisno"},"content":"    public int getNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"radiankrisno"},"content":"        return addressBook.getNewPatientId();","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"radiankrisno"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"radiankrisno"},"content":"        return addressBook.hasPatient(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"simonjulianl"},"content":"    public void addActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"        updateFilteredActivityList(PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-09"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"    private void updateFilteredActivityList(Predicate\u003c? super Activity\u003e predicate) {","lastModifiedDate":"2021-10-09"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"        filteredActivities.setPredicate(predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":206,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"    public int getNewActivityId() {","lastModifiedDate":"2021-10-09"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"        return addressBook.getNewActivityId();","lastModifiedDate":"2021-10-09"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":211,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"    public boolean hasActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":215,"author":{"gitId":"simonjulianl"},"content":"        return addressBook.hasActivity(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":216,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":217,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":218,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"simonjulianl"},"content":"    public void deleteActivity(Activity target) {","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"simonjulianl"},"content":"        addressBook.removeActivity(target);","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":222,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":223,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":224,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity(Activity oldActivity, Activity replacementActivity) {","lastModifiedDate":"2021-10-15"},{"lineNumber":225,"author":{"gitId":"simonjulianl"},"content":"        addressBook.setActivity(oldActivity, replacementActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":226,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":227,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":228,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":229,"author":{"gitId":"radiankrisno"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"radiankrisno"},"content":"        addressBook.removePatient(target);","lastModifiedDate":"2021-10-11"},{"lineNumber":231,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":232,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":233,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":234,"author":{"gitId":"simonjulianl"},"content":"    public boolean hasConflictingActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":235,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":236,"author":{"gitId":"simonjulianl"},"content":"        return addressBook.hasConflictingActivity(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":237,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":238,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":239,"author":{"gitId":"simonjulianl"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":240,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":241,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":242,"author":{"gitId":"yyhangz"},"content":"     * Returns an unmodifiable view of the list of {@code Doctor} backed by the internal list of","lastModifiedDate":"2021-10-10"},{"lineNumber":243,"author":{"gitId":"yyhangz"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-10-10"},{"lineNumber":244,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":245,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":246,"author":{"gitId":"yyhangz"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-10"},{"lineNumber":247,"author":{"gitId":"yyhangz"},"content":"        return filteredDoctors;","lastModifiedDate":"2021-10-10"},{"lineNumber":248,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":249,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":250,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":251,"author":{"gitId":"radiankrisno"},"content":"     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of","lastModifiedDate":"2021-10-11"},{"lineNumber":252,"author":{"gitId":"radiankrisno"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-10-11"},{"lineNumber":253,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":254,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":255,"author":{"gitId":"radiankrisno"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-11"},{"lineNumber":256,"author":{"gitId":"radiankrisno"},"content":"        return filteredPatients;","lastModifiedDate":"2021-10-11"},{"lineNumber":257,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":258,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":259,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":260,"author":{"gitId":"yyhangz"},"content":"     * Returns an unmodifiable view of the list of {@code Activity} backed by the internal list of","lastModifiedDate":"2021-10-10"},{"lineNumber":261,"author":{"gitId":"yyhangz"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-10-10"},{"lineNumber":262,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":263,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":264,"author":{"gitId":"simonjulianl"},"content":"    public ObservableList\u003cActivity\u003e getFilteredActivityList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":265,"author":{"gitId":"simonjulianl"},"content":"        return filteredActivities;","lastModifiedDate":"2021-10-09"},{"lineNumber":266,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":267,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":284,"author":{"gitId":"yyhangz"},"content":"                \u0026\u0026 filteredDoctors.equals(other.filteredDoctors)","lastModifiedDate":"2021-10-10"},{"lineNumber":285,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 filteredPatients.equals(other.filteredPatients)","lastModifiedDate":"2021-10-11"},{"lineNumber":286,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 filteredActivities.equals(other.filteredActivities);","lastModifiedDate":"2021-10-09"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":289,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"radiankrisno":47,"simonjulianl":105,"yyhangz":59,"-":78}},{"path":"src/main/java/gomedic/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"     * Returns an unmodifiable view of the doctors list.","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"     * Guarantee: This list will not contain any duplicate doctors.","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    ObservableList\u003cDoctor\u003e getDoctorListSortedById();","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"     * Returns an unmodifiable view of the patients list.","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"     * Guarantee: This list will not contain any duplicate patients.","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    ObservableList\u003cPatient\u003e getPatientListSortedById();","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     * Returns an unmodifiable view of the activity list.","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"     * Guarantee: This list will not contain any conflicting and duplicate activity.","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    ObservableList\u003cActivity\u003e getActivityListSortedById();","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"     * Returns a sorted list by start time.","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"     * Guarantee: This list will not contain any conflicting and duplicate activity.","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    ObservableList\u003cActivity\u003e getActivityListSortedStartTime();","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"radiankrisno":7,"simonjulianl":13,"yyhangz":7,"-":9}},{"path":"src/main/java/gomedic/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    Path getAddressBookRootFilePath();","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"simonjulianl":3,"-":12}},{"path":"src/main/java/gomedic/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    public static final String ROOT_FOLDER \u003d \"data\";","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    private Path addressBookDataFileRootPath \u003d Paths.get(ROOT_FOLDER, \"addressbook.json\");","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    public UserPrefs() {","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        setAddressBookDataFileRootPath(newUserPrefs.getAddressBookRootFilePath());","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    public void setAddressBookDataFileRootPath(Path addressBookDataFileRootPath) {","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(addressBookDataFileRootPath);","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        this.addressBookDataFileRootPath \u003d addressBookDataFileRootPath;","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"    public Path getAddressBookRootFilePath() {","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        return addressBookDataFileRootPath;","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 addressBookDataFileRootPath.equals(o.addressBookDataFileRootPath);","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"        return Objects.hash(guiSettings, addressBookDataFileRootPath);","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"        return \"Gui Settings : \" + guiSettings","lastModifiedDate":"2021-10-03"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"                + \"\\nLocal data file location : \" + addressBookDataFileRootPath;","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":23,"-":64}},{"path":"src/main/java/gomedic/model/activity/Activity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":" * Represents an Activity in the address book.","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" * Guarantees: immutable; details are present and not null, all fields are validated and immutable.","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":" * Is valid as declared in {@link #isValidActivity(Time, Time)}.","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"public class Activity {","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"            \"Start time must be before end time\";","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    // Identity fields","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    private final ActivityId activityId;","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    // Data fields","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    private final Time startTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    private final Time endTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    private final Title title;","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    private final Description description;","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"     * Constructs a {@code Activity} class","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"     * startTime must be before endTime strictly (not equal).","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    public Activity(ActivityId activityId,","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"                    Time startTime,","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"                    Time endTime,","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"                    Title title,","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"                    Description description) {","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(activityId, startTime, endTime, title, description);","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidActivity(startTime, endTime), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"        this.activityId \u003d activityId;","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    public ActivityId getActivityId() {","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        return activityId;","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    public Time getStartTime() {","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        return startTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    public Time getEndTime() {","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        return endTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"    public Title getTitle() {","lastModifiedDate":"2021-10-03"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        return title;","lastModifiedDate":"2021-10-03"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"    public Description getDescription() {","lastModifiedDate":"2021-10-03"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        return description;","lastModifiedDate":"2021-10-03"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"     * @return hashcode in the order of id, start time, end time, desc, title.","lastModifiedDate":"2021-10-03"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-03"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"        return Objects.hash(activityId, startTime, endTime, description, title);","lastModifiedDate":"2021-10-03"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"     * Equality would depend on the unique id only and not the other fields.","lastModifiedDate":"2021-10-03"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-03"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-03"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"            return true;","lastModifiedDate":"2021-10-03"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        if (!(other instanceof Activity)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"            return false;","lastModifiedDate":"2021-10-03"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"        Activity otherActivity \u003d (Activity) other;","lastModifiedDate":"2021-10-03"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"        return otherActivity.activityId.equals(activityId);","lastModifiedDate":"2021-10-03"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"    public String toString() {","lastModifiedDate":"2021-10-03"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"        return activityId","lastModifiedDate":"2021-10-03"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"                + \"; Title: \" + title","lastModifiedDate":"2021-10-03"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"                + \"; Desc: \" + description","lastModifiedDate":"2021-10-03"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"                + \"; Start Time: \" + startTime","lastModifiedDate":"2021-10-03"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"                + \"; End Time: \" + endTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"     * Checks whether the other activity is conflicting with the current activity.","lastModifiedDate":"2021-10-03"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"     * @param other Activity.","lastModifiedDate":"2021-10-03"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"     * @return true if its conflicting (meaning there is full/partial overlap of the activity timing).","lastModifiedDate":"2021-10-03"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"    public boolean isConflicting(Activity other) {","lastModifiedDate":"2021-10-03"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"        Predicate\u003cTime\u003e isWithinThisActPeriod \u003d time -\u003e time.isAfter(startTime) \u0026\u0026 time.isBefore(endTime);","lastModifiedDate":"2021-10-03"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"        boolean isEndTimeEqual \u003d other.endTime.time.isEqual(endTime.time);","lastModifiedDate":"2021-10-03"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"        boolean isStartTimeEqual \u003d other.startTime.time.isEqual(startTime.time);","lastModifiedDate":"2021-10-03"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"        boolean isOtherEndTimeOverlapping \u003d isWithinThisActPeriod.test(other.endTime) || isEndTimeEqual;","lastModifiedDate":"2021-10-03"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"        boolean isOtherStartTimeOverlapping \u003d isWithinThisActPeriod.test(other.startTime) || isStartTimeEqual;","lastModifiedDate":"2021-10-03"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"        boolean isConflictingOverlap \u003d (other.endTime.isAfter(endTime)","lastModifiedDate":"2021-10-03"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"                || isEndTimeEqual)","lastModifiedDate":"2021-10-03"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 (other.startTime.isBefore(startTime)","lastModifiedDate":"2021-10-03"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"                || isStartTimeEqual);","lastModifiedDate":"2021-10-03"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"        return isOtherStartTimeOverlapping || isOtherEndTimeOverlapping || isConflictingOverlap;","lastModifiedDate":"2021-10-03"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"     * Returns true iff startTime \u003c endTime.","lastModifiedDate":"2021-10-03"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"    private boolean isValidActivity(Time startTime, Time endTime) {","lastModifiedDate":"2021-10-03"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        return startTime.isBefore(endTime);","lastModifiedDate":"2021-10-03"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"simonjulianl":130}},{"path":"src/main/java/gomedic/model/activity/ActivityId.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":" * Represents a general id owned by an activity.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":" * Take note however that another class has the same prefix as ActivityId","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":" * and has the same integer is treated equally with ActivityId.","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidActivityId(Id)})}","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"public class ActivityId extends Id {","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"            \"Id should only contain from 1 to 999, Prefix should be A\";","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    private static final Character ACTIVITY_PREFIX \u003d \u0027A\u0027;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"     * @param id Integer from 1 to 999","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    public ActivityId(Integer id) {","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"        super(id, ACTIVITY_PREFIX);","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidActivityId(this), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"     * @param id a string of format \"PDDD\", where \"P\" is an alphabetic character and \"D\" is a decimal number","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    public ActivityId(String id) {","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        super(Integer.parseInt(id.substring(1)), ACTIVITY_PREFIX);","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidActivityId(this), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if a given stringId is a valid activity valid id.","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"     * Valid if integer is 3 digit, from 1 to 999, prefix is A.","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"     * @param id Id.","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    public static boolean isValidActivityId(Id id) {","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        return isValidActivityId(id.toString());","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if a given stringId is a valid activity valid id.","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"     * Valid if integer is 3 digit, from 1 to 999, prefix is A.","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"     * @param aid String.","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"    public static boolean isValidActivityId(String aid) {","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        if (!isValidIdFormat(aid)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"            return false;","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        int number \u003d Integer.parseInt(aid.substring(1));","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        Character prefix \u003d aid.charAt(0);","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        boolean isValidPrefix \u003d prefix.equals(ACTIVITY_PREFIX);","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        return isValidId(number, prefix) \u0026\u0026 isValidPrefix;","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"simonjulianl":66}},{"path":"src/main/java/gomedic/model/activity/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":" * Represents an Activity description in the address book.","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"public class Description {","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    public static final int MAX_CHAR \u003d 500; // max char in description","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"            \"Description is at most \" + MAX_CHAR + \" chars including whitespaces\";","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    private final String value;","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"     * Constructs an {@code Description}.","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"     * @param text Description text.","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    public Description(String text) {","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(text);","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidDescription(text), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"        value \u003d text;","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"     * @return true for text that has less than max_char","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    public static boolean isValidDescription(String text) {","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        return text.length() \u003c\u003d MAX_CHAR;","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        return value.hashCode();","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"                || (other instanceof Description // instanceof handles nulls","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 value.equals(((Description) other).value)); // state check","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    public String toString() {","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        return value;","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"     * Check whether the description contains one of the terms (case-insensitive).","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"     * @param terms varargs String.","lastModifiedDate":"2021-10-03"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"     * @return true if text contains term.","lastModifiedDate":"2021-10-03"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    public boolean contains(String... terms) {","lastModifiedDate":"2021-10-03"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        return Arrays","lastModifiedDate":"2021-10-03"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"                .stream(terms)","lastModifiedDate":"2021-10-03"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"                .anyMatch(it -\u003e value.toLowerCase().contains(it.toLowerCase()));","lastModifiedDate":"2021-10-03"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":66}},{"path":"src/main/java/gomedic/model/activity/Title.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":" * Title represents a description of the activity.","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":" * Guarantees : immutable; is valid as declared in {@link #isValidTitle(String)}","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"public class Title extends Description {","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    public static final int MAX_CHAR \u003d 60; // max char in title","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"            \"Description is at most \" + MAX_CHAR + \" chars including whitespaces\";","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"     * Constructs an {@code Title}.","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"     * @param text Description text.","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    public Title(String text) {","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"        super(text);","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidTitle(text), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"     * @return true for text that has less than max_char","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    public static boolean isValidTitle(String text) {","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"        return text.length() \u003c\u003d MAX_CHAR;","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":30}},{"path":"src/main/java/gomedic/model/activity/UniqueActivityList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import java.util.List;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.ActivityNotFoundException;","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.ConflictingActivityException;","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.DuplicateActivityFoundException;","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.exceptions.MaxAddressBookCapacityReached;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":" * A list of activities that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":" * An activity is considered unique by comparing its activity id solely which is compared using {@code Id#equal(other)}.","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":" * Not only that, the activity list would enforce its elements to be not conflicting with each other as defined","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":" * in {@code Activity#isConflicting(Activity)}. Therefore, the elements are not overlapping","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":" * and uniquely identified by its id.","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":" * Supports  a minimal set of list operations.","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"public class UniqueActivityList implements Iterable\u003cActivity\u003e {","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    public static final int MAX_CAPACITY \u003d 999;","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    private final ObservableList\u003cActivity\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    private final ObservableList\u003cActivity\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"     * Returns the new activity id available in this list.","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"     * If it\u0027s an empty list, return id 1.","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    public int getNewActivityId() {","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        if (internalList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"            return 1;","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"        // Find first id that does not exist in the list starting from D001","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        for (Iterator\u003cInteger\u003e it \u003d internalList","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                .stream()","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                .map(entry -\u003e entry.getActivityId().getIdNumber())","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                .sorted()","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"                .iterator(); it.hasNext(); counter++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"            int id \u003d it.next();","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"            if (id !\u003d counter) {","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"                return counter;","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        // all the id are in sequences, make a new one","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        if (counter \u003c\u003d MAX_CAPACITY) {","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"            return counter;","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        throw new MaxAddressBookCapacityReached();","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"     * Replaces the activity {@code target} in the list with {@code editedActivity}.","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the list.","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity(Activity target, Activity editedActivity) {","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(target, editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"            throw new ActivityNotFoundException();","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"        if (!target.equals(editedActivity) \u0026\u0026 contains(editedActivity)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"            throw new DuplicateActivityFoundException();","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"        if (containsConflicting(editedActivity)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"            throw new ConflictingActivityException();","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"        internalList.set(index, editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"     * Adds an activity to the list.","lastModifiedDate":"2021-10-03"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"     * The activity must not already exist in the list.","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"    public void add(Activity toAdd) {","lastModifiedDate":"2021-10-03"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-03"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"            throw new DuplicateActivityFoundException();","lastModifiedDate":"2021-10-03"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"        if (containsConflicting(toAdd)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"            throw new ConflictingActivityException();","lastModifiedDate":"2021-10-03"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-03"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if the list contains an equivalent activity as the given argument.","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"    public boolean contains(Activity toCheck) {","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if the list contains conflicting activity.","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"    public boolean containsConflicting(Activity toCheck) {","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"        if (contains(toCheck)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"            return internalList.stream().filter(toCheck::isConflicting).count() \u003e 1;","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        } else {","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"            return internalList.stream().anyMatch(toCheck::isConflicting);","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"     * Removes the equivalent activity from the list.","lastModifiedDate":"2021-10-03"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"     * The activity must exist in the list.","lastModifiedDate":"2021-10-03"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"    public void remove(Activity toRemove) {","lastModifiedDate":"2021-10-03"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-03"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"            throw new ActivityNotFoundException();","lastModifiedDate":"2021-10-03"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"    public void setActivities(UniqueActivityList replacement) {","lastModifiedDate":"2021-10-03"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-03"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-03"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"     * Replaces the contents of this list with {@code activities}.","lastModifiedDate":"2021-10-03"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"     * {@code activities} must not contain duplicate and conflicting activities.","lastModifiedDate":"2021-10-03"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"    public void setActivities(List\u003cActivity\u003e activities) {","lastModifiedDate":"2021-10-03"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(activities);","lastModifiedDate":"2021-10-03"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"        if (!checkActivitiesAreUnique(activities)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"            throw new DuplicateActivityFoundException();","lastModifiedDate":"2021-10-03"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"        if (!checkActivitiesAreConflicting(activities)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"            throw new ConflictingActivityException();","lastModifiedDate":"2021-10-03"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"        internalList.setAll(activities);","lastModifiedDate":"2021-10-03"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":154,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":155,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if {@code activities} contains only unique activities.","lastModifiedDate":"2021-10-03"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"    private boolean checkActivitiesAreUnique(List\u003cActivity\u003e activities) {","lastModifiedDate":"2021-10-03"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {","lastModifiedDate":"2021-10-03"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"            for (int j \u003d i + 1; j \u003c activities.size(); j++) {","lastModifiedDate":"2021-10-03"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"                Activity first \u003d activities.get(i);","lastModifiedDate":"2021-10-03"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"                Activity second \u003d activities.get(j);","lastModifiedDate":"2021-10-03"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"                if (first.equals(second)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":165,"author":{"gitId":"simonjulianl"},"content":"                    return false;","lastModifiedDate":"2021-10-03"},{"lineNumber":166,"author":{"gitId":"simonjulianl"},"content":"                }","lastModifiedDate":"2021-10-03"},{"lineNumber":167,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-03"},{"lineNumber":168,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":169,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":170,"author":{"gitId":"simonjulianl"},"content":"        return true;","lastModifiedDate":"2021-10-03"},{"lineNumber":171,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":173,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":174,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if {@code activities} contains only not conflicting activities.","lastModifiedDate":"2021-10-03"},{"lineNumber":175,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":176,"author":{"gitId":"simonjulianl"},"content":"    private boolean checkActivitiesAreConflicting(List\u003cActivity\u003e activities) {","lastModifiedDate":"2021-10-03"},{"lineNumber":177,"author":{"gitId":"simonjulianl"},"content":"        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {","lastModifiedDate":"2021-10-03"},{"lineNumber":178,"author":{"gitId":"simonjulianl"},"content":"            for (int j \u003d i + 1; j \u003c activities.size(); j++) {","lastModifiedDate":"2021-10-03"},{"lineNumber":179,"author":{"gitId":"simonjulianl"},"content":"                Activity first \u003d activities.get(i);","lastModifiedDate":"2021-10-03"},{"lineNumber":180,"author":{"gitId":"simonjulianl"},"content":"                Activity second \u003d activities.get(j);","lastModifiedDate":"2021-10-03"},{"lineNumber":181,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":182,"author":{"gitId":"simonjulianl"},"content":"                if (first.isConflicting(second)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"                    return false;","lastModifiedDate":"2021-10-03"},{"lineNumber":184,"author":{"gitId":"simonjulianl"},"content":"                }","lastModifiedDate":"2021-10-03"},{"lineNumber":185,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-03"},{"lineNumber":186,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":187,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":188,"author":{"gitId":"simonjulianl"},"content":"        return true;","lastModifiedDate":"2021-10-03"},{"lineNumber":189,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":190,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":192,"author":{"gitId":"simonjulianl"},"content":"    public Iterator\u003cActivity\u003e iterator() {","lastModifiedDate":"2021-10-09"},{"lineNumber":193,"author":{"gitId":"simonjulianl"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-09"},{"lineNumber":194,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"simonjulianl"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"                || (other instanceof UniqueActivityList // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));","lastModifiedDate":"2021-10-09"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-09"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":206,"author":{"gitId":"simonjulianl"},"content":"    public ObservableList\u003cActivity\u003e asUnmodifiableSortedByIdObservableList() {","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"        return internalUnmodifiableList","lastModifiedDate":"2021-10-10"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"                .sorted((activity, otherAct) -\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"                        activity.getActivityId() \u003d\u003d otherAct.getActivityId()","lastModifiedDate":"2021-10-10"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"                                ? 0","lastModifiedDate":"2021-10-10"},{"lineNumber":211,"author":{"gitId":"simonjulianl"},"content":"                                : activity.getActivityId().getIdNumber()","lastModifiedDate":"2021-10-10"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"                                \u003c otherAct.getActivityId().getIdNumber() ? -1 : 1);","lastModifiedDate":"2021-10-10"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":215,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":216,"author":{"gitId":"simonjulianl"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-09"},{"lineNumber":217,"author":{"gitId":"simonjulianl"},"content":"     * Returned list is sorted by starting the start time.","lastModifiedDate":"2021-10-09"},{"lineNumber":218,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":219,"author":{"gitId":"simonjulianl"},"content":"    public ObservableList\u003cActivity\u003e asUnmodifiableSortedByStartTimeList() {","lastModifiedDate":"2021-10-10"},{"lineNumber":220,"author":{"gitId":"simonjulianl"},"content":"        return internalUnmodifiableList","lastModifiedDate":"2021-10-09"},{"lineNumber":221,"author":{"gitId":"simonjulianl"},"content":"                .sorted((activity, otherAct) -\u003e","lastModifiedDate":"2021-10-09"},{"lineNumber":222,"author":{"gitId":"simonjulianl"},"content":"                        activity.getStartTime() \u003d\u003d otherAct.getStartTime()","lastModifiedDate":"2021-10-09"},{"lineNumber":223,"author":{"gitId":"simonjulianl"},"content":"                                ? 0","lastModifiedDate":"2021-10-09"},{"lineNumber":224,"author":{"gitId":"simonjulianl"},"content":"                                : activity","lastModifiedDate":"2021-10-09"},{"lineNumber":225,"author":{"gitId":"simonjulianl"},"content":"                                .getStartTime()","lastModifiedDate":"2021-10-09"},{"lineNumber":226,"author":{"gitId":"simonjulianl"},"content":"                                .isBefore(otherAct.getStartTime()) ? -1 : 1);","lastModifiedDate":"2021-10-09"},{"lineNumber":227,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":228,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":227,"yyhangz":1}},{"path":"src/main/java/gomedic/model/activity/exceptions/ActivityNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity.exceptions;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":" * Signals that the operation is unable to find the specified activity.","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"public class ActivityNotFoundException extends RuntimeException {","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"    public ActivityNotFoundException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"        super(\"Activity not found.\");","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":11}},{"path":"src/main/java/gomedic/model/activity/exceptions/ConflictingActivityException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity.exceptions;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":" * Signals that the operation results in conflicting activity.","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"public class ConflictingActivityException extends RuntimeException {","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"    public ConflictingActivityException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"        super(\"There is partial/full overlap in the activity timing\");","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":10}},{"path":"src/main/java/gomedic/model/activity/exceptions/DuplicateActivityFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity.exceptions;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":" * Signals that the operation will result in duplicate Activity (They have the same id).","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"public class DuplicateActivityFoundException extends RuntimeException {","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"    public DuplicateActivityFoundException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"        super(\"Operation would result in duplicate activity as the existing activity exists already.\");","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":10}},{"path":"src/main/java/gomedic/model/commonfield/Id.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":" * Represents a general id owned by a model.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidId(Integer, Character)}","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"public abstract class Id {","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"            \"Id should only contain from 1 to 999, Prefix should be A-Z (capitalized)\";","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    public static final int MAXIMUM_ASSIGNABLE_IDS \u003d 999;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    private final String value;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"     * Constructs a {@code Id}.","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"     * @param id Integer from 0-999.","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"     * @param prefix Char from A-Z only.","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    public Id(Integer id, Character prefix) {","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(id, prefix);","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidId(id, prefix), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"        int digit \u003d 3;","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"        value \u003d String.format(prefix + \"%0\" + digit + \"d\", id);","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"     * Returns true if a given stringId is a valid id.","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"     * Valid if integer is 3 digit, from 1 to 999, prefix is A - Z.","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"     * @param id Integer number.","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"     * @param prefix Character prefix.","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    public static boolean isValidId(Integer id, Character prefix) {","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        boolean isValidNumber \u003d id \u003e 0 \u0026\u0026 id \u003c\u003d MAXIMUM_ASSIGNABLE_IDS;","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        boolean isValidPrefix \u003d prefix \u003e\u003d \u0027A\u0027 \u0026\u0026 prefix \u003c\u003d \u0027Z\u0027;","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        return isValidNumber \u0026\u0026 isValidPrefix;","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"     * Returns true id is made of 1 upper case alphabet followed by 3 digits.","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"     * @param id String","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    public static boolean isValidIdFormat(String id) {","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        boolean isValidNumber \u003d isNumeric(id.substring(1)) \u0026\u0026 id.substring(1).length() \u003d\u003d 3;","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        char prefix \u003d id.charAt(0);","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        boolean isValidPrefix \u003d \u0027A\u0027 \u003c\u003d prefix \u0026\u0026 prefix \u003c\u003d \u0027Z\u0027;","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        return isValidNumber \u0026\u0026 isValidPrefix;","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    private static boolean isNumeric(String string) {","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"            Integer.parseInt(string);","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"            return true;","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"            return false;","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    public int getIdNumber() {","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        String numberPart \u003d value.substring(1);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        return Integer.parseInt(numberPart);","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        return value.hashCode();","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"        return other \u003d\u003d this // short circuit","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"                || (other instanceof Id // instanceof handles nulls and wrong types","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 value.equals(((Id) other).value)); // state check","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"    public String toString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        return value;","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"simonjulianl":86,"yyhangz":3}},{"path":"src/main/java/gomedic/model/commonfield/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":" * Represents a name in the address book.","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":5,"-":54}},{"path":"src/main/java/gomedic/model/commonfield/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":4,"-":48}},{"path":"src/main/java/gomedic/model/commonfield/Time.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-02"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-02"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-02"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-02"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":" * Represents a time in the address book.","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" * Guarantees: immutable; value is not null; is valid as declared in {@link #isValidTime(String)}","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-02"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"public class Time {","lastModifiedDate":"2021-10-02"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should follow one of the following format: \\n\"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"            + \"1. dd/MM/yyyy HH:mm (e.g. 15/09/2022 13:00) \\n\"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"            + \"2. dd-MM-yyyy HH:mm (e.g. 15-09-2022 13:00) \\n\"","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"            + \"3. yyyy-MM-dd-HH-mm (e.g. 2022-09-15 13:00) \\n\";","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    public final LocalDateTime time;","lastModifiedDate":"2021-10-02"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     * Constructs a {@code Time}.","lastModifiedDate":"2021-10-02"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-02"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     * @param time LocalDateTime object.","lastModifiedDate":"2021-10-02"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public Time(LocalDateTime time) {","lastModifiedDate":"2021-10-02"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(time);","lastModifiedDate":"2021-10-02"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-10-02"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":33,"author":{"gitId":"ramaven"},"content":"    //@@author ramaven","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"ramaven"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":35,"author":{"gitId":"ramaven"},"content":"     * Constructs a {@code Time}.","lastModifiedDate":"2021-10-02"},{"lineNumber":36,"author":{"gitId":"ramaven"},"content":"     *","lastModifiedDate":"2021-10-02"},{"lineNumber":37,"author":{"gitId":"ramaven"},"content":"     * @param time String.","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"ramaven"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"ramaven"},"content":"    public Time(String time) {","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"ramaven"},"content":"        requireNonNull(time);","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"ramaven"},"content":"        AppUtil.checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"ramaven"},"content":"        DateTimeFormatter format;","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"ramaven"},"content":"        if (time.charAt(2) \u003d\u003d \u0027/\u0027) {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"ramaven"},"content":"            format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"ramaven"},"content":"        } else if (time.charAt(2) \u003d\u003d \u0027-\u0027) {","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"ramaven"},"content":"            format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"ramaven"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"ramaven"},"content":"            format \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"ramaven"},"content":"        this.time \u003d LocalDateTime.parse(time, format);","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"ramaven"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"ramaven"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"ramaven"},"content":"     * Returns true if the time follows","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"ramaven"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":58,"author":{"gitId":"ramaven"},"content":"    public static boolean isValidTime(String time) {","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"ramaven"},"content":"        String[] dateTimeArr \u003d time.split(\" \");","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"ramaven"},"content":"        if (dateTimeArr.length !\u003d 2) {","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"ramaven"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"ramaven"},"content":"        String datePart \u003d dateTimeArr[0];","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"ramaven"},"content":"        String timePart \u003d dateTimeArr[1];","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"ramaven"},"content":"        return isValidTimeStringPart(timePart) \u0026\u0026 isValidDateStringPart(datePart);","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"ramaven"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"ramaven"},"content":"    private static boolean isValidTimeStringPart(String timePart) {","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"ramaven"},"content":"        String[] timeArr;","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"ramaven"},"content":"        if (timePart.length() !\u003d 5) {","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"ramaven"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"ramaven"},"content":"        if (timePart.charAt(2) \u003d\u003d \u0027:\u0027) {","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"ramaven"},"content":"            timeArr \u003d timePart.split(\":\");","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"ramaven"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"ramaven"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"ramaven"},"content":"        int hour;","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"ramaven"},"content":"        int minute;","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"ramaven"},"content":"        if (timeArr.length !\u003d 2) {","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"ramaven"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"ramaven"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"ramaven"},"content":"            hour \u003d Integer.parseInt(timeArr[0]);","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"ramaven"},"content":"            minute \u003d Integer.parseInt(timeArr[1]);","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"ramaven"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"ramaven"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"ramaven"},"content":"        boolean isValidHour \u003d hour \u003e\u003d 0 \u0026\u0026 hour \u003c 24;","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"ramaven"},"content":"        boolean isValidMinute \u003d minute \u003e\u003d 0 \u0026\u0026 minute \u003c 60;","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"ramaven"},"content":"        return isValidHour \u0026\u0026 isValidMinute;","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"ramaven"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"ramaven"},"content":"    private static Boolean isValidDateStringPart(String datePart) {","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"ramaven"},"content":"        String[] dateArr;","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"ramaven"},"content":"        if (datePart.length() !\u003d 10) {","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"ramaven"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"ramaven"},"content":"        if (datePart.charAt(2) \u003d\u003d \u0027/\u0027) {","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"ramaven"},"content":"            dateArr \u003d datePart.split(\"/\");","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"ramaven"},"content":"        } else if (datePart.charAt(2) \u003d\u003d \u0027-\u0027 || datePart.charAt(4) \u003d\u003d \u0027-\u0027) {","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"ramaven"},"content":"            dateArr \u003d datePart.split(\"-\");","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"ramaven"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"ramaven"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"ramaven"},"content":"        int day;","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"ramaven"},"content":"        int month;","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"ramaven"},"content":"        int year;","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"ramaven"},"content":"        if (dateArr.length !\u003d 3) {","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"ramaven"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"ramaven"},"content":"        if (dateArr[0].length() \u003d\u003d 2) {","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"ramaven"},"content":"            try {","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"ramaven"},"content":"                day \u003d Integer.parseInt(dateArr[0]);","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"ramaven"},"content":"                month \u003d Integer.parseInt(dateArr[1]);","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"ramaven"},"content":"                year \u003d Integer.parseInt(dateArr[2]);","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"ramaven"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"ramaven"},"content":"                return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"ramaven"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"ramaven"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"ramaven"},"content":"            try {","lastModifiedDate":"2021-10-08"},{"lineNumber":133,"author":{"gitId":"ramaven"},"content":"                day \u003d Integer.parseInt(dateArr[2]);","lastModifiedDate":"2021-10-08"},{"lineNumber":134,"author":{"gitId":"ramaven"},"content":"                month \u003d Integer.parseInt(dateArr[1]);","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"ramaven"},"content":"                year \u003d Integer.parseInt(dateArr[0]);","lastModifiedDate":"2021-10-08"},{"lineNumber":136,"author":{"gitId":"ramaven"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":137,"author":{"gitId":"ramaven"},"content":"                return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"ramaven"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":139,"author":{"gitId":"ramaven"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":140,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":141,"author":{"gitId":"ramaven"},"content":"        boolean isValidDay \u003d day \u003e 0 \u0026\u0026 day \u003c\u003d 31;","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"ramaven"},"content":"        boolean isValidMonth \u003d month \u003e 0 \u0026\u0026 month \u003c\u003d 12;","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"ramaven"},"content":"        boolean isValidYear \u003d year \u003e 1900 \u0026\u0026 year \u003c 2100;","lastModifiedDate":"2021-10-08"},{"lineNumber":144,"author":{"gitId":"ramaven"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":145,"author":{"gitId":"ramaven"},"content":"        return isValidDay \u0026\u0026 isValidMonth \u0026\u0026 isValidYear;","lastModifiedDate":"2021-10-08"},{"lineNumber":146,"author":{"gitId":"ramaven"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":147,"author":{"gitId":"ramaven"},"content":"    //@@author","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"     * @return String representation of full date time.","lastModifiedDate":"2021-10-02"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-02"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"    public String toString() {","lastModifiedDate":"2021-10-02"},{"lineNumber":154,"author":{"gitId":"simonjulianl"},"content":"        return toDateString() + \" \" + toTimeString();","lastModifiedDate":"2021-10-08"},{"lineNumber":155,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"     * @return String representation of just the date field.","lastModifiedDate":"2021-10-02"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"    public String toDateString() {","lastModifiedDate":"2021-10-02"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"        return DateTimeFormatter.ofPattern(\"dd-MM-yyyy\").format(time.toLocalDate());","lastModifiedDate":"2021-10-08"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":165,"author":{"gitId":"simonjulianl"},"content":"     * @return String representation of just the time field.","lastModifiedDate":"2021-10-02"},{"lineNumber":166,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":167,"author":{"gitId":"simonjulianl"},"content":"    public String toTimeString() {","lastModifiedDate":"2021-10-02"},{"lineNumber":168,"author":{"gitId":"simonjulianl"},"content":"        return DateTimeFormatter.ofPattern(\"HH:mm\").format(time.toLocalTime());","lastModifiedDate":"2021-10-02"},{"lineNumber":169,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":170,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":171,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-02"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-02"},{"lineNumber":173,"author":{"gitId":"simonjulianl"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-02"},{"lineNumber":174,"author":{"gitId":"simonjulianl"},"content":"                || (other instanceof Time // instanceof handles nulls","lastModifiedDate":"2021-10-02"},{"lineNumber":175,"author":{"gitId":"simonjulianl"},"content":"                \u0026\u0026 time.isEqual(((Time) other).time)); // state check","lastModifiedDate":"2021-10-02"},{"lineNumber":176,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":177,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":178,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":179,"author":{"gitId":"simonjulianl"},"content":"     * @return hash over the entire date and time field.","lastModifiedDate":"2021-10-02"},{"lineNumber":180,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":181,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-02"},{"lineNumber":182,"author":{"gitId":"simonjulianl"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-02"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"        return time.hashCode();","lastModifiedDate":"2021-10-02"},{"lineNumber":184,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":185,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":186,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":187,"author":{"gitId":"simonjulianl"},"content":"     * @return true if the date of other time is the same as this.","lastModifiedDate":"2021-10-02"},{"lineNumber":188,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":189,"author":{"gitId":"simonjulianl"},"content":"    public boolean equalsDateTime(Time other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":190,"author":{"gitId":"simonjulianl"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-02"},{"lineNumber":191,"author":{"gitId":"simonjulianl"},"content":"            return true;","lastModifiedDate":"2021-10-02"},{"lineNumber":192,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":193,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":194,"author":{"gitId":"simonjulianl"},"content":"        if (other \u003d\u003d null) {","lastModifiedDate":"2021-10-02"},{"lineNumber":195,"author":{"gitId":"simonjulianl"},"content":"            return false;","lastModifiedDate":"2021-10-02"},{"lineNumber":196,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":197,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":198,"author":{"gitId":"simonjulianl"},"content":"        return other.time.toLocalDate().isEqual(time.toLocalDate());","lastModifiedDate":"2021-10-02"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"     * @param other Time.","lastModifiedDate":"2021-10-02"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"     * @return true is this Time is after others.","lastModifiedDate":"2021-10-02"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"    public boolean isAfter(Time other) {","lastModifiedDate":"2021-10-02"},{"lineNumber":206,"author":{"gitId":"simonjulianl"},"content":"        return time.isAfter(other.time);","lastModifiedDate":"2021-10-02"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"     * @param other Time.","lastModifiedDate":"2021-10-02"},{"lineNumber":211,"author":{"gitId":"simonjulianl"},"content":"     * @return true is this Time is before others.","lastModifiedDate":"2021-10-02"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"    public boolean isBefore(Time other) {","lastModifiedDate":"2021-10-02"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"        return time.isBefore(other.time);","lastModifiedDate":"2021-10-02"},{"lineNumber":215,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":216,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"ramaven":115,"simonjulianl":101}},{"path":"src/main/java/gomedic/model/commonfield/exceptions/MaxAddressBookCapacityReached.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield.exceptions;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":" * Signals that the operation is unable to support more items.","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"public class MaxAddressBookCapacityReached extends RuntimeException {","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"    public MaxAddressBookCapacityReached() {","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"        super(\"The addressbook can only contains max of 999 items of each type at one point of time.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"simonjulianl":10}},{"path":"src/main/java/gomedic/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.person;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * Represents a AbstractPerson in the address book.","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"public abstract class Person {","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    private final Id id;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    public Person(Name name, Phone phone, Id id) {","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        CollectionUtil.requireAllNonNull(name, phone, id);","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    public Id getId() {","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        return id;","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"     * Returns true if both persons have the same id.","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        return otherPerson.getId().equals(id);","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        return Objects.hash(name, phone, id);","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"        builder.append(\"Id: \")","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"                .append(getId())","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"                .append(\"; Name: \")","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"                .append(getName())","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"                .append(getPhone());","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":4,"yyhangz":17,"-":57}},{"path":"src/main/java/gomedic/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.person;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.exceptions.MaxAddressBookCapacityReached;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":" * A person is considered unique by comparing using {@code AbstractPerson#equals(AbstractPerson)}. As such,","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":" * adding and updating of persons uses AbstractPerson#equals(AbstractPerson) for equality so as to ensure that","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":" * the person being added or updated is unique in terms of identity in the UniqueAbstractPersonList. Removal of a","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":" * person uses AbstractPerson#equals(Object) so as to ensure that the person with exactly the same","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":" * fields will be removed.","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":" * @see Person#equals(Object)","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"public class UniquePersonList\u003cT extends Person\u003e implements Iterable\u003cT\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"     * Checks if there is an available id that can be assigned to a new entry to the list.","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"     * @return true if there is an available id to be assigned.","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    public boolean hasNewId() {","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        return internalList.size() \u003c Id.MAXIMUM_ASSIGNABLE_IDS;","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"     * Returns a new available id.","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"     * If it\u0027s an empty list, return id 1.","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    public int getNewId() {","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        if (!hasNewId()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"            // Ideally this exception should never be triggered; Always use this::hasNewId before calling this method","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"            throw new MaxAddressBookCapacityReached();","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        if (internalList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"            return 1;","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        // Find first id that does not exist in the list starting from D001","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        for (Iterator\u003cInteger\u003e it \u003d internalList","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"                .stream()","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"                .map(entry -\u003e entry.getId().getIdNumber())","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"                .sorted()","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"                .iterator(); it.hasNext(); counter++) {","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"            int id \u003d it.next();","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"            if (id !\u003d counter) {","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"                return counter;","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        // If all are in order, return the next possible id","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        return counter;","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"    public boolean contains(T toCheck) {","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"    public void add(T toAdd) {","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"    public void setPerson(T target, T editedPerson) {","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(target, editedPerson);","lastModifiedDate":"2021-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"yyhangz"},"content":"    public void remove(T toRemove) {","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"yyhangz"},"content":"    public void setPersons(UniquePersonList\u003c? extends T\u003e replacement) {","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":135,"author":{"gitId":"yyhangz"},"content":"    public void setPersons(List\u003c? extends T\u003e persons) {","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(persons);","lastModifiedDate":"2021-09-28"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"    public ObservableList\u003cT\u003e asUnmodifiableSortedByIdObservableList() {","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"        return internalUnmodifiableList","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"            .sorted((abstractPerson, otherAbstractPerson) -\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"                abstractPerson.getId() \u003d\u003d otherAbstractPerson.getId()","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"                    ? 0","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"                    : abstractPerson.getId().getIdNumber()","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"                    \u003c otherAbstractPerson.getId().getIdNumber() ? -1 : 1);","lastModifiedDate":"2021-10-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"    public Iterator\u003cT\u003e iterator() {","lastModifiedDate":"2021-10-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"        if (other instanceof UniquePersonList) {","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"            @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"yyhangz"},"content":"            UniquePersonList\u003cT\u003e otherList \u003d (UniquePersonList\u003cT\u003e) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":170,"author":{"gitId":"yyhangz"},"content":"            return internalList.equals(otherList.internalList);","lastModifiedDate":"2021-10-14"},{"lineNumber":171,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":172,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":173,"author":{"gitId":"yyhangz"},"content":"        return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":184,"author":{"gitId":"yyhangz"},"content":"    private boolean personsAreUnique(List\u003c? extends T\u003e persons) {","lastModifiedDate":"2021-10-14"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":187,"author":{"gitId":"yyhangz"},"content":"                if (persons.get(i).equals(persons.get(j))) {","lastModifiedDate":"2021-10-14"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"simonjulianl":9,"yyhangz":81,"-":104}},{"path":"src/main/java/gomedic/model/person/doctor/Department.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.model.person.doctor;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":" * Represents the department of a Doctor.","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDepartmentName(String)}","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"public class Department {","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"            \"Departments should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    /*","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"     * The first character of the department must not be a whitespace,","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    public final String departmentName;","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"     * Constructs a {@code Department}.","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     * @param departmentName A valid department name.","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    public Department(String departmentName) {","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        requireNonNull(departmentName);","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        AppUtil.checkArgument(isValidDepartmentName(departmentName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        this.departmentName \u003d departmentName;","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    public static boolean isValidDepartmentName(String test) {","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        return departmentName;","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"                || (other instanceof Department // instanceof handles nulls","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"                \u0026\u0026 departmentName.equals(((Department) other).departmentName)); // state check","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        return departmentName.hashCode();","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"yyhangz":58}},{"path":"src/main/java/gomedic/model/person/doctor/Doctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.model.person.doctor;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * Represents a Doctor in the address book.","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"public class Doctor extends Person {","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    // data fields","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    private final Department department;","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    public Doctor(Name name, Phone phone, DoctorId id, Department department) {","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"        super(name, phone, id);","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        CollectionUtil.requireAllNonNull(name, phone, id, department);","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        this.department \u003d department;","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    public Department getDepartment() {","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        return department;","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    public DoctorId getId() {","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        return (DoctorId) super.getId();","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"     * Returns true if both doctors have the same id.","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"            return true;","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        if (!(other instanceof Doctor)) {","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"            return false;","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        Doctor otherDoctor \u003d (Doctor) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        return super.equals(otherDoctor);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-03"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        return Objects.hash(getName(), getPhone(), getId(), department);","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"     * Returns a String representation of a {@code Doctor}, using identity fields of its super class, as well as","lastModifiedDate":"2021-10-03"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"     * the doctor\u0027s Department field.","lastModifiedDate":"2021-10-03"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"     * @return a String representation of a {@code Doctor}.","lastModifiedDate":"2021-10-03"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-10-03"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-03"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        builder.append(super.toString())","lastModifiedDate":"2021-10-03"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"                .append(\"; Department: \")","lastModifiedDate":"2021-10-03"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"                .append(getDepartment());","lastModifiedDate":"2021-10-03"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-03"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"yyhangz":76}},{"path":"src/main/java/gomedic/model/person/doctor/DoctorId.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.model.person.doctor;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":" * Represents a general id owned by a doctor.","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDoctorId(Id)})}","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"public class DoctorId extends Id {","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"            \"Id should only contain from 1 to 999, Prefix should be D\";","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    private static final Character DOCTOR_PREFIX \u003d \u0027D\u0027;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"     * @param id Integer from 1 to 999","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public DoctorId(Integer id) {","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        super(id, DOCTOR_PREFIX);","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"        AppUtil.checkArgument(isValidDoctorId(this), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"     * @param id a string of format \"PDDD\", where \"P\" is an alphabetic character and \"D\" is a decimal number","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    public DoctorId(String id) {","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        super(Integer.parseInt(id.substring(1)), DOCTOR_PREFIX);","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"        AppUtil.checkArgument(isValidDoctorId(this), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"     * Returns true if a given stringId is a valid doctor id.","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"     * Valid if integer is 3 digit, from 1 to 999, prefix is D.","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"     * @param id Id.","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"     * @return true if valid.","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    public static boolean isValidDoctorId(Id id) {","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        int number \u003d Integer.parseInt(id.toString().substring(1));","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        Character prefix \u003d id.toString().charAt(0);","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        boolean isValidPrefix \u003d prefix.equals(DOCTOR_PREFIX);","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        return isValidId(number, prefix) \u0026\u0026 isValidPrefix;","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"     * Returns true if a given stringId is a valid activity valid id.","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"     * Valid if integer is 3 digit, from 1 to 999, prefix is D.","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"     * @param did String.","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"    public static boolean isValidDoctorId(String did) {","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        if (!isValidIdFormat(did)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"            return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        int number \u003d Integer.parseInt(did.substring(1));","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        Character prefix \u003d did.charAt(0);","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        boolean isValidPrefix \u003d prefix.equals(DOCTOR_PREFIX);","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        return isValidId(number, prefix) \u0026\u0026 isValidPrefix;","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"yyhangz":68}},{"path":"src/main/java/gomedic/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.person.exceptions;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"simonjulianl":1,"-":10}},{"path":"src/main/java/gomedic/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.person.exceptions;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"public class PersonNotFoundException extends RuntimeException {","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"simonjulianl":3,"-":4}},{"path":"src/main/java/gomedic/model/person/patient/Age.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":" * Represents the age of a Patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class Age {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"        \"Ages should only contain from 0 to 150\";","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"     * Age must only contain numeric characters.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALIDATION_REGEX \u003d \"[0-9]+\";","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    public final String age;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"     * Constructs a {@code Age}.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"     * @param age Integer in String from 0-150.","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    public Age(String age) {","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(age);","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        AppUtil.checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a given age is a valid age from 0 to 150.","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"     * @param test String number.","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    public static boolean isValidAge(String test) {","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 (Integer.parseInt(test) \u003e\u003d 0 \u0026\u0026 Integer.parseInt(test) \u003c\u003d 150);","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    public String toString() {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        return age;","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"                || (other instanceof Age// instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 age.equals(((Age) other).age)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        return age.hashCode();","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":59}},{"path":"src/main/java/gomedic/model/person/patient/BloodType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":" * Represents the blood type of a Patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBloodType(String)}","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class BloodType {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"            \"BloodType should only contain A, B, AB, or O, and it should not be blank\";","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    public final String bloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"     * Constructs a {@code BloodType}.","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"     * @param bloodType String A/B/AB/O.","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    public BloodType(String bloodType) {","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(bloodType);","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        AppUtil.checkArgument(isValidBloodType(bloodType), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a given blood type is a valid blood type either A, B, AB, or O.","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"     * @param test String of the blood type.","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"     * @return true if valid, else false","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    public static boolean isValidBloodType(String test) {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"        return test.equals(\"A\") || test.equals(\"B\") || test.equals(\"AB\") || test.equals(\"O\");","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    public String toString() {","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"        return bloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"                || (other instanceof BloodType // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 bloodType.equals(((BloodType) other).bloodType)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"        return bloodType.hashCode();","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":54}},{"path":"src/main/java/gomedic/model/person/patient/Gender.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":" * Represents the gender of a Patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class Gender {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"            \"Gender should only contain M for Male, F for Female, or O for Others, and it should not be blank\";","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"     * Gender must only be either M, F, or O.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALIDATION_REGEX \u003d \"[MFO]\";","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    public final String gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"     * Constructs a {@code Gender}.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"     * @param gender Character M/F/O.","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    public Gender(String gender) {","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(gender);","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        AppUtil.checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a given gender is a valid gender either M, F, or O.","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"     * @param test String of the gender.","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"     * @return true if valid, else false","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    public static boolean isValidGender(String test) {","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    public String toString() {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        return gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"                || (other instanceof Gender // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 gender.equals(((Gender) other).gender)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        return gender.hashCode();","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":59}},{"path":"src/main/java/gomedic/model/person/patient/Height.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":" * Represents the height of a Patient in centimetre (cm).","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class Height {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"            \"Height should only contain from 0 to 300\";","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"     * Height must only contain numeric characters.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALIDATION_REGEX \u003d \"[0-9]+\";","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    public final String height;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"     * Constructs a {@code Height}.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"     * @param height Integer in String from 0-300.","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    public Height(String height) {","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(height);","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        AppUtil.checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a given height is a valid height from 0 to 300.","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"     * @param test String number.","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    public static boolean isValidHeight(String test) {","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 (Integer.parseInt(test) \u003e\u003d 0 \u0026\u0026 Integer.parseInt(test) \u003c\u003d 300);","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    public String toString() {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        return height;","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"                || (other instanceof Height// instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 height.equals(((Height) other).height)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        return height.hashCode();","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":59}},{"path":"src/main/java/gomedic/model/person/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":" * Represents a Patient in the address book.","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"public class Patient extends Person {","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    //data fields","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    private final Age age;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    private final BloodType bloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    private final Gender gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    private final Height height;","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    private final Weight weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    private final Set\u003cTag\u003e medicalConditions \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"     * @param name Name of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"     * @param phone Phone number of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"     * @param id Id of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"     * @param age Age of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"     * @param bloodType BloodType of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"     * @param gender Gender of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"     * @param height Height of the patient in cm.","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"     * @param weight Weight of the patient in kg.","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"     * @param medicalConditions Set of medical conditions of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    public Patient(Name name, Phone phone, PatientId id, Age age, BloodType bloodType, Gender gender,","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"                   Height height, Weight weight, Set\u003cTag\u003e medicalConditions) {","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"        super(name, phone, id);","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"        CollectionUtil.requireAllNonNull(name, phone, id, age, bloodType, gender, height, weight);","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"        this.medicalConditions.addAll(medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"     * Returns Age of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"     * @return Age of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    public Age getAge() {","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"        return age;","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"     * Returns BloodType of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"     * @return BloodType of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"    public BloodType getBloodType() {","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        return bloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"     * Returns Gender of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"     * @return Gender of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"    public Gender getGender() {","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"        return gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"     * Returns Height of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"     * @return Height of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"    public Height getHeight() {","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"        return height;","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"     * Returns Weight of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"     * @return Weight of the patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"    public Weight getWeight() {","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"        return weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"     * if modification is attempted.","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"    public Set\u003cTag\u003e getMedicalConditions() {","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"        return Collections.unmodifiableSet(medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if both patients have the same id.","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"            return true;","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"        return super.equals(otherPatient);","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"        return Objects.hash(getName(), getPhone(), getId(), age, bloodType, gender, height, weight, medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"     * Returns a String representation of a {@code Patient}, using identity fields of its super class, as well as","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"     * the patient\u0027s Age, BloodType, Gender, Height, Weight, and Medical conditions field.","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"     * @return a String representation of a {@code Patient}.","lastModifiedDate":"2021-10-08"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"    public String toString() {","lastModifiedDate":"2021-10-08"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"        builder.append(super.toString())","lastModifiedDate":"2021-10-08"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"                .append(\"; Age: \")","lastModifiedDate":"2021-10-08"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"                .append(getAge())","lastModifiedDate":"2021-10-08"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"                .append(\"; Blood type: \")","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"                .append(getBloodType())","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"                .append(\"; Gender: \")","lastModifiedDate":"2021-10-08"},{"lineNumber":144,"author":{"gitId":"radiankrisno"},"content":"                .append(getGender())","lastModifiedDate":"2021-10-08"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"                .append(\"; Height: \")","lastModifiedDate":"2021-10-08"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"                .append(getHeight())","lastModifiedDate":"2021-10-08"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"                .append(\"; Weight: \")","lastModifiedDate":"2021-10-08"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"                .append(getWeight());","lastModifiedDate":"2021-10-08"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"        Set\u003cTag\u003e medicalConditions \u003d getMedicalConditions();","lastModifiedDate":"2021-10-08"},{"lineNumber":151,"author":{"gitId":"radiankrisno"},"content":"        if (!medicalConditions.isEmpty()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":152,"author":{"gitId":"radiankrisno"},"content":"            builder.append(\"; Medical conditions: \");","lastModifiedDate":"2021-10-08"},{"lineNumber":153,"author":{"gitId":"radiankrisno"},"content":"            medicalConditions.forEach(builder::append);","lastModifiedDate":"2021-10-08"},{"lineNumber":154,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":155,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":156,"author":{"gitId":"radiankrisno"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-08"},{"lineNumber":157,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":158,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":156,"yyhangz":2}},{"path":"src/main/java/gomedic/model/person/patient/PatientId.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":" * Represents a general id owned by a patient.","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPatientId(Id)})}","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"public class PatientId extends Id {","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"            \"Id should only contain from 1 to 999, Prefix should be P\";","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"    private static final Character PATIENT_PREFIX \u003d \u0027P\u0027;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"     * @param id Integer from 1 to 999.","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    public PatientId(Integer id) {","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"        super(id, PATIENT_PREFIX);","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"        AppUtil.checkArgument(isValidPatientId(this), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"     * @param id a string of format \"PDDD\", where \"P\" is an alphabetic character and \"D\" is a decimal number.","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    public PatientId(String id) {","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"        super(Integer.parseInt(id.substring(1)), PATIENT_PREFIX);","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        AppUtil.checkArgument(isValidPatientId(this), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a given stringId is a valid patient id.","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"     * Valid if integer is 3 digit, from 1 to 999, prefix is P.","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"     * @param id Id.","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"     * @return true if valid.","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"    public static boolean isValidPatientId(Id id) {","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"        int number \u003d Integer.parseInt(id.toString().substring(1));","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"        Character prefix \u003d id.toString().charAt(0);","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        boolean isValidPrefix \u003d prefix.equals(PATIENT_PREFIX);","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        return isValidId(number, prefix) \u0026\u0026 isValidPrefix;","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a given stringId is a valid activity valid id.","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"     * Valid if integer is 3 digit, from 1 to 999, prefix is P.","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"     * @param id String.","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"    public static boolean isValidPatientId(String id) {","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"        if (!isValidIdFormat(id)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"            return false;","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"        int number \u003d Integer.parseInt(id.substring(1));","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"        Character prefix \u003d id.charAt(0);","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"        boolean isValidPrefix \u003d prefix.equals(PATIENT_PREFIX);","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"        return isValidId(number, prefix) \u0026\u0026 isValidPrefix;","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":68}},{"path":"src/main/java/gomedic/model/person/patient/Weight.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":" * Represents the weight of a Patient in kilogram (kg).","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class Weight {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"            \"Weight should only contain from 0 to 700\";","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"     * Weight must only contain numeric characters.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALIDATION_REGEX \u003d \"[0-9]+\";","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    public final String weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"     * Constructs a {@code Weight}.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"     * @param weight Integer from 0-700.","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    public Weight(String weight) {","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        requireNonNull(weight);","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        AppUtil.checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"     * Returns true if a given weight is a valid weight from 0 to 700.","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"     * @param test Integer in String number.","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"     * @return true if valid, else false.","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    public static boolean isValidWeight(String test) {","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 (Integer.parseInt(test) \u003e\u003d 0 \u0026\u0026 Integer.parseInt(test) \u003c\u003d 700);","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    public String toString() {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        return weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"                || (other instanceof Weight// instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"                \u0026\u0026 weight.equals(((Weight) other).weight)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        return weight.hashCode();","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":59}},{"path":"src/main/java/gomedic/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.tag;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.AppUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric or space\";","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"radiankrisno":2,"simonjulianl":4,"-":49}},{"path":"src/main/java/gomedic/model/util/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.util;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.StringUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"public class NameContainsKeywordsPredicate\u003cT extends Person\u003e implements Predicate\u003cT\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    // TODO: THE ORIGINAL AB3 IMPLEMENTATION CAN ONLY MATCH FULL STRINGS (E.G. \"FIND JO\" CANNOT FIND \"JOHN SNOW\" BUT","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    //      \"FIND JOHN\" CAN. CHANGE IMPLEMENTATION SO THAT SUBSTRINGS CAN BE MATCHED AS WELL","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    public boolean test(T person) {","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        if (other instanceof NameContainsKeywordsPredicate) {","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"            @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"            NameContainsKeywordsPredicate\u003cT\u003e otherKeywords \u003d (NameContainsKeywordsPredicate\u003cT\u003e) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"            return keywords.equals(otherKeywords.keywords);","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"simonjulianl":2,"yyhangz":19,"-":22}},{"path":"src/main/java/gomedic/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public static Doctor[] getSampleDoctors() {","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        int idx \u003d 1;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"        return new Doctor[]{","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"                new Doctor(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new DoctorId(idx++),","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"                        new Department(\"ENT\")),","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"                new Doctor(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new DoctorId(idx++),","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"                        new Department(\"XRAY\")),","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"                new Doctor(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new DoctorId(idx++),","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"                        new Department(\"Surgical\")),","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"                new Doctor(new Name(\"David Li\"), new Phone(\"91031282\"), new DoctorId(idx++),","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"                        new Department(\"Pediatrics\")),","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"                new Doctor(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new DoctorId(idx++),","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"                        new Department(\"Neurology\")),","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"                new Doctor(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new DoctorId(idx),","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"                        new Department(\"Cardiology\"))","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        for (Doctor sampleDoctor : getSampleDoctors()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"            if (!sampleAb.hasDoctor(sampleDoctor)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                sampleAb.addDoctor(sampleDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"simonjulianl":6,"yyhangz":23,"-":28}},{"path":"src/main/java/gomedic/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" * Represents a storage for {@link AddressBook}.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    Path getAddressBookDataFilePath();","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"     * @see #getAddressBookDataFilePath()","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"simonjulianl":9,"-":39}},{"path":"src/main/java/gomedic/storage/JsonAdaptedActivity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"public class JsonAdaptedActivity {","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Activity\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    private final String id;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    private final String title;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    private final String description;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    private final String startTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    private final String endTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     * Constructs a {@code JsonAdaptedActivity} with the given activity details.","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    public JsonAdaptedActivity(@JsonProperty(\"id\") String id,","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"                               @JsonProperty(\"title\") String title,","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"                               @JsonProperty(\"description\") String description,","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"                               @JsonProperty(\"startTime\") String startTime,","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"                               @JsonProperty(\"endTime\") String endTime) {","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"     * Converts a given {@code Activity} into this class for Jackson use.","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    public JsonAdaptedActivity(Activity source) {","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        id \u003d source.getActivityId().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        title \u003d source.getTitle().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"        description \u003d source.getDescription().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        startTime \u003d source.getStartTime().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        endTime \u003d source.getEndTime().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Activity} object.","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted activity.","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    public Activity toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, ActivityId.class.getSimpleName()));","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        if (!ActivityId.isValidActivityId(id)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(ActivityId.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        final ActivityId modelId \u003d new ActivityId(id);","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        if (title \u003d\u003d null) {","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        if (!Title.isValidTitle(title)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        final Title modelTitle \u003d new Title(title);","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"        if (!Description.isValidDescription(description)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"        final Description modelDescription \u003d new Description(description);","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"        if (startTime \u003d\u003d null) {","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        if (!Time.isValidTime(startTime)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        final Time modelStartTime \u003d new Time(startTime);","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"        if (endTime \u003d\u003d null) {","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"        if (!Time.isValidTime(endTime)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"        final Time modelEndTime \u003d new Time(endTime);","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"        return new Activity(modelId, modelStartTime, modelEndTime, modelTitle, modelDescription);","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"simonjulianl":109,"yyhangz":3}},{"path":"src/main/java/gomedic/storage/JsonAdaptedDoctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.storage;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":" * Jackson-friendly version of {@link Doctor}.","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"public class JsonAdaptedDoctor {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Doctor\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    private final String name;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private final String phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    private final String id;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    private final String department;","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     * Constructs a {@code JsonAdaptedDoctor} with the given details.","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    public JsonAdaptedDoctor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"                             @JsonProperty(\"id\") String id, @JsonProperty(\"department\") String department) {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        this.department \u003d department;","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"     * Converts a given source to a JsonAdaptedDoctor.","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    public JsonAdaptedDoctor(Doctor source) {","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"        id \u003d source.getId().toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        department \u003d source.getDepartment().departmentName;","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"     * Converts this Jackson-friendly adapted doctor object into the model\u0027s {@code Doctor} object.","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted doctor.","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"    public Doctor toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"                    MISSING_FIELD_MESSAGE_FORMAT, DoctorId.class.getSimpleName()));","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        if (!DoctorId.isValidDoctorId(id)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"            throw new IllegalValueException(DoctorId.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        final DoctorId modelId \u003d new DoctorId(id);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        if (department \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"                    Department.class.getSimpleName()));","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        if (!Department.isValidDepartmentName(department)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"            throw new IllegalValueException(Department.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"        final Department modelDepartment \u003d new Department(department);","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        return new Doctor(modelName, modelPhone, modelId, modelDepartment);","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"yyhangz":89}},{"path":"src/main/java/gomedic/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.storage;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import java.util.List;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Age;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.BloodType;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Gender;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Height;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.PatientId;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Weight;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":" * Jackson-friendly version of {@link Patient}.","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"public class JsonAdaptedPatient {","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    private final String name;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    private final String phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"    private final String id;","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    private final String age;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    private final String bloodtype;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    private final String gender;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"    private final String height;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    private final String weight;","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    private final List\u003cJsonAdaptedTag\u003e medicalConditions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"     * Constructs a {@code JsonAdaptedPatient} with the given details.","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"                             @JsonProperty(\"id\") String id, @JsonProperty(\"age\") String age,","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"                             @JsonProperty(\"blood type\") String bloodtype, @JsonProperty(\"gender\") String gender,","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"                             @JsonProperty(\"height\") String height, @JsonProperty(\"weight\") String weight,","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"                             @JsonProperty(\"medical conditions\") List\u003cJsonAdaptedTag\u003e medicalConditions) {","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"        this.bloodtype \u003d bloodtype;","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        if (medicalConditions !\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"            this.medicalConditions.addAll(medicalConditions);","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"     * Converts a given source to a JsonAdaptedPatient.","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        id \u003d source.getId().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"        age \u003d source.getAge().age;","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"        bloodtype \u003d source.getBloodType().bloodType;","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"        gender \u003d source.getGender().gender;","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"        height \u003d source.getHeight().height;","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"        weight \u003d source.getWeight().weight;","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"        medicalConditions.addAll(source.getMedicalConditions().stream()","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"            .collect(Collectors.toList()));","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object.","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient.","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"        final List\u003cTag\u003e patientMedicalConditions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"        for (JsonAdaptedTag tag : medicalConditions) {","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"            patientMedicalConditions.add(tag.toModelType());","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"                MISSING_FIELD_MESSAGE_FORMAT, PatientId.class.getSimpleName()));","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"        if (!PatientId.isValidPatientId(id)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(PatientId.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"        final PatientId modelId \u003d new PatientId(id);","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"        if (age \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"                Age.class.getSimpleName()));","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"        if (!Age.isValidAge(age)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"        final Age modelAge \u003d new Age(age);","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"        if (bloodtype \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"                BloodType.class.getSimpleName()));","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"        if (!BloodType.isValidBloodType(bloodtype)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"        final BloodType modelBloodType \u003d new BloodType(bloodtype);","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"        if (gender \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"                Gender.class.getSimpleName()));","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"        if (!Gender.isValidGender(gender)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"        final Gender modelGender \u003d new Gender(gender);","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"        if (height \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"                Height.class.getSimpleName()));","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"        if (!Height.isValidHeight(height)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"radiankrisno"},"content":"        final Height modelHeight \u003d new Height(height);","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"radiankrisno"},"content":"        if (weight \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"radiankrisno"},"content":"                Weight.class.getSimpleName()));","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"radiankrisno"},"content":"        if (!Weight.isValidWeight(weight)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"radiankrisno"},"content":"            throw new IllegalValueException(Weight.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"radiankrisno"},"content":"        final Weight modelWeight \u003d new Weight(weight);","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"radiankrisno"},"content":"        final Set\u003cTag\u003e modelMedicalConditions \u003d new HashSet\u003c\u003e(patientMedicalConditions);","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"radiankrisno"},"content":"        return new Patient(modelName, modelPhone, modelId, modelAge, modelBloodType, modelGender, modelHeight,","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"            modelWeight, modelMedicalConditions);","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"radiankrisno":170}},{"path":"src/main/java/gomedic/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"simonjulianl":3,"-":45}},{"path":"src/main/java/gomedic/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.FileUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.JsonUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    private final Path dataRootFilePath;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    public JsonAddressBookStorage(Path dataRootFilePath) {","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"        this.dataRootFilePath \u003d dataRootFilePath;","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    public Path getAddressBookDataFilePath() {","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        return dataRootFilePath;","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        return readAddressBook(dataRootFilePath);","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"        if (jsonAddressBook.isEmpty()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        saveAddressBook(addressBook, dataRootFilePath);","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"simonjulianl":15,"-":64}},{"path":"src/main/java/gomedic/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"Activities list contains duplicate activities(s).\";","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"Doctors list contains duplicate doctors(s).\";","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patients(s).\";","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    private final List\u003cJsonAdaptedActivity\u003e activities \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    private final List\u003cJsonAdaptedDoctor\u003e doctors \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given activities, doctors and patients","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"activities\") List\u003cJsonAdaptedActivity\u003e activities,","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"                                       @JsonProperty(\"doctors\") List\u003cJsonAdaptedDoctor\u003e doctors,","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"                                       @JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        this.activities.addAll(activities);","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        this.doctors.addAll(doctors);","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"        this.patients.addAll(patients);","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"        activities.addAll(source","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"                .getActivityListSortedById()","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"                .stream()","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"                .map(JsonAdaptedActivity::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        doctors.addAll(source","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"                .getDoctorListSortedById()","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"                .stream()","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"                .map(JsonAdaptedDoctor::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"        patients.addAll(source","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"                .getPatientListSortedById()","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"                .stream()","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"                .map(JsonAdaptedPatient::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        for (JsonAdaptedDoctor jsonAdaptedDoctor: doctors) {","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"            Doctor doctor \u003d jsonAdaptedDoctor.toModelType();","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"            if (addressBook.hasDoctor(doctor)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"            addressBook.addDoctor(doctor);","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient: patients) {","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"            if (addressBook.hasPatient(patient)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"            addressBook.addPatient(patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"        for (JsonAdaptedActivity jsonAdaptedActivity : activities) {","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"            Activity activity \u003d jsonAdaptedActivity.toModelType();","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"            if (addressBook.hasActivity(activity)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ACTIVITY);","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"            addressBook.addActivity(activity);","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        return addressBook;","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"radiankrisno":18,"simonjulianl":22,"yyhangz":19,"-":40}},{"path":"src/main/java/gomedic/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.JsonUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    private final Path filePath;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"simonjulianl":7,"-":41}},{"path":"src/main/java/gomedic/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    Path getAddressBookDataFilePath();","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"simonjulianl":6,"-":26}},{"path":"src/main/java/gomedic/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    private final AddressBookStorage addressBookStorage;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    private final UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    public Path getAddressBookDataFilePath() {","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        return addressBookStorage.getAddressBookDataFilePath();","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        return readAddressBook(addressBookStorage.getAddressBookDataFilePath());","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookDataFilePath());","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":12,"-":67}},{"path":"src/main/java/gomedic/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" * Represents a storage for {@link UserPrefs}.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"     * Saves the given {@link ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"simonjulianl":8,"-":30}},{"path":"src/main/java/gomedic/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.Logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"         * @see Logic#execute(String)","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"simonjulianl":6,"-":80}},{"path":"src/main/java/gomedic/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"ngsengleng"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"ngsengleng"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103t-t15-1.github.io/tp/UserGuide.html#quick-start\";","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"ngsengleng"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"ngsengleng"},"content":"    private Label helpMessage1;","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":39,"author":{"gitId":"ngsengleng"},"content":"        helpMessage.setText(Messages.MESSAGE_HELP_COMMANDS);","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"ngsengleng"},"content":"        helpMessage1.setText(String.format(\"For more information, refer to %s        \", USERGUIDE_URL));","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"     * @throws IllegalStateException \u003cul\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"ngsengleng":7,"simonjulianl":4,"-":94}},{"path":"src/main/java/gomedic/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.Logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.ui.panel.ActivityListPanel;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.ui.panel.DoctorListPanel;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.ui.panel.PatientListPanel;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    private final Stage primaryStage;","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    private final Logic logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    private final HelpWindow helpWindow;","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    private ActivityListPanel activityListPanel;","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    private DoctorListPanel doctorListPanel;","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    private PatientListPanel patientListPanel;","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    // Important Region where we can swap the root to change the UI.","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    private StackPane modelListPanelPlaceholder;","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"        // Value to indicate what model is currently being shown.","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"        // 0 -\u003e Activity, 1 -\u003e Doctor, 2 -\u003e Patient","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"        ObservableValue\u003cInteger\u003e modelItemBeingShown \u003d logic.getModelBeingShown();","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"        modelItemBeingShown.addListener((obs, oldVal, newVal) -\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"            modelListPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"            switch (newVal) {","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"            case 0:","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"                modelListPanelPlaceholder.getChildren().add(activityListPanel.getRoot());","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"                break;","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"            case 1:","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"                modelListPanelPlaceholder.getChildren().add(doctorListPanel.getRoot());","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"            case 2:","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"                modelListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"                break;","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"            default:","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"                // do nothing","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"                break;","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        });","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"        activityListPanel \u003d new ActivityListPanel(logic.getFilteredActivityList());","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"        doctorListPanel \u003d new DoctorListPanel(logic.getFilteredDoctorList());","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"        // by default, show the activity first","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"        modelListPanelPlaceholder.getChildren().add(activityListPanel.getRoot());","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookRootFilePath());","lastModifiedDate":"2021-10-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":185,"author":{"gitId":"simonjulianl"},"content":"        //  set full-screen if wanted","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"simonjulianl"},"content":"        //  primaryStage.setMaximized(true);","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"    public ActivityListPanel getActivityListPanel() {","lastModifiedDate":"2021-10-10"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"        return activityListPanel;","lastModifiedDate":"2021-10-10"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"yyhangz"},"content":"    public DoctorListPanel getDoctorListPanel() {","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"yyhangz"},"content":"        return doctorListPanel;","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"radiankrisno"},"content":"    public PatientListPanel getPatientListPanel() {","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"radiankrisno"},"content":"        return patientListPanel;","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"simonjulianl"},"content":"     * @see Logic#execute(String)","lastModifiedDate":"2021-09-28"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"ngsengleng"},"content":"            logger.info(\"Invalid command: \" + e.getMessage());","lastModifiedDate":"2021-10-05"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"radiankrisno":8,"ngsengleng":1,"simonjulianl":44,"yyhangz":10,"-":177}},{"path":"src/main/java/gomedic/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"simonjulianl":1,"-":27}},{"path":"src/main/java/gomedic/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":1,"-":27}},{"path":"src/main/java/gomedic/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App). */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"simonjulianl":1,"-":12}},{"path":"src/main/java/gomedic/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.MainApp;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.StringUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.Logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    private final Logic logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"                                               String contentText) {","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"ramaven"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/LightTheme.css\");","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        alert.setTitle(title);","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        alert.showAndWait();","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"ramaven":1,"simonjulianl":25,"-":62}},{"path":"src/main/java/gomedic/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.MainApp;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"    public T getRoot() {","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"simonjulianl":25,"-":66}},{"path":"src/main/java/gomedic/ui/card/ActivityCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui.card;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.ui.UiPart;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":" * An UI component that displays information of a {@code Activity}.","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"public class ActivityCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    private static final String FXML \u003d \"ActivityListCard.fxml\";","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    public final Activity activity;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    private Label id;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    private Label title;","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    private Label description;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    private Label endTime;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    private Label startTime;","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"     * Creates a {@code ActivityCode} with the given {@code Activity} and index to display.","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    public ActivityCard(Activity activity) {","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"        super(FXML);","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        this.activity \u003d activity;","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        id.setText(activity.getActivityId().toString() + \".\");","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        title.setText(activity.getTitle().toString());","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        description.setText(activity.getDescription().toString());","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        startTime.setText(activity.getStartTime().toString());","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"        endTime.setText(activity.getEndTime().toString());","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"            return true;","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        if (!(other instanceof ActivityCard)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"            return false;","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        // state check","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        ActivityCard card \u003d (ActivityCard) other;","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        return activity.equals(card.activity);","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"simonjulianl":69}},{"path":"src/main/java/gomedic/ui/card/DoctorCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.ui.card;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import gomedic.ui.UiPart;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * An UI component that displays information of a {@code Doctor}.","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"public class DoctorCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    private static final String FXML \u003d \"DoctorListCard.fxml\";","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    public final Doctor doctor;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    private Label id;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    private Label name;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    private Label phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    private Label department;","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"     * Creates a {@code DoctorCode} with the given {@code Doctor} and index to display.","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    public DoctorCard(Doctor doctor) {","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        super(FXML);","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"        this.doctor \u003d doctor;","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        id.setText(doctor.getId().toString() + \".\");","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        name.setText(doctor.getName().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        phone.setText(doctor.getPhone().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        department.setText(doctor.getDepartment().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        if (!(other instanceof DoctorCard)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"            return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        DoctorCard card \u003d (DoctorCard) other;","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        return doctor.equals(card.doctor);","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":65}},{"path":"src/main/java/gomedic/ui/card/PatientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.ui.card;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.ui.UiPart;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":" * An UI component that displays information of a {@code Patient}.","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"public class PatientCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    private static final String FXML \u003d \"PatientListCard.fxml\";","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    public final Patient patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"    private Label id;","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    private Label name;","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"    private Label phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    private Label age;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    private Label bloodType;","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"    private Label gender;","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    private Label height;","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    private Label weight;","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    private FlowPane medicalConditions;","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"     * Creates a {@code PatientCode} with the given {@code Patient} and index to display.","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    public PatientCard(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"        super(FXML);","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"        id.setText(patient.getId().toString() + \".\");","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        name.setText(patient.getName().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"        phone.setText(patient.getPhone().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"        age.setText(patient.getAge().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"        bloodType.setText(patient.getBloodType().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"        gender.setText(patient.getGender().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"        height.setText(patient.getHeight().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"        weight.setText(patient.getWeight().toString());","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"        patient.getMedicalConditions().stream()","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"            .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"            .forEach(tag -\u003e medicalConditions.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"        if (!(other instanceof DoctorCard)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"            return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"        // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"        PatientCard card \u003d (PatientCard) other;","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"        return patient.equals(card.patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":85}},{"path":"src/main/java/gomedic/ui/panel/ActivityListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui.panel;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.ui.UiPart;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.ui.card.ActivityCard;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":" * Panel containing the list of activities.","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"public class ActivityListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    private static final String FXML \u003d \"ActivityListPanel.fxml\";","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ActivityListPanel.class);","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    @FXML","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    private ListView\u003cActivity\u003e activityListView;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public ActivityListPanel(ObservableList\u003cActivity\u003e activityList) {","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        super(FXML);","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        activityListView.setItems(activityList);","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Activity} using a {@code ActivityCard}.","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    static class ActivityListViewCell extends ListCell\u003cActivity\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        protected void updateItem(Activity activity, boolean empty) {","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"            super.updateItem(activity, empty);","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"            if (empty || activity \u003d\u003d null) {","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                setText(null);","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"            } else {","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"                setGraphic(new ActivityCard(activity).getRoot());","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"simonjulianl":49,"yyhangz":1}},{"path":"src/main/java/gomedic/ui/panel/DoctorListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.ui.panel;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.ui.UiPart;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.ui.card.DoctorCard;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":" * Panel containing the list of doctors.","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"public class DoctorListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    private static final String FXML \u003d \"DoctorListPanel.fxml\";","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(DoctorListPanel.class);","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    private ListView\u003cDoctor\u003e doctorListView;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     * Creates a {@code DoctorListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    public DoctorListPanel(ObservableList\u003cDoctor\u003e doctorList) {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        super(FXML);","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        doctorListView.setItems(doctorList);","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        doctorListView.setCellFactory(listView -\u003e new DoctorListPanel.DoctorListViewCell());","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Doctor} using a {@code DoctorCard}.","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    static class DoctorListViewCell extends ListCell\u003cDoctor\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        protected void updateItem(Doctor doctor, boolean empty) {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"            super.updateItem(doctor, empty);","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"            if (empty || doctor \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"                setText(null);","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"            } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"                setGraphic(new DoctorCard(doctor).getRoot());","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":50}},{"path":"src/main/java/gomedic/ui/panel/PatientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.ui.panel;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.core.LogsCenter;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.ui.UiPart;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.ui.card.PatientCard;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":" * Panel containing the list of patients.","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"public class PatientListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"    private static final String FXML \u003d \"PatientListPanel.fxml\";","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    @FXML","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    private ListView\u003cPatient\u003e patientListView;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"     * Creates a {@code PatientListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        super(FXML);","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        patientListView.setItems(patientList);","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"        patientListView.setCellFactory(listView -\u003e new PatientListPanel.PatientListViewCell());","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}.","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    static class PatientListViewCell extends ListCell\u003cPatient\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"        protected void updateItem(Patient patient, boolean empty) {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"            super.updateItem(patient, empty);","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"            if (empty || patient \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"                setText(null);","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"            } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"                setGraphic(new PatientCard(patient).getRoot());","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":50}},{"path":"src/main/resources/view/ActivityListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Time: \"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"                \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"To\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"                \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"simonjulianl":37,"yyhangz":1}},{"path":"src/main/resources/view/ActivityListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"    \u003cListView fx:id\u003d\"activityListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"simonjulianl":7}},{"path":"src/main/resources/view/DoctorListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Contact: \"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"                \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Department: \"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"                \u003cLabel fx:id\u003d\"department\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$department\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":39}},{"path":"src/main/resources/view/DoctorListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"    \u003cListView fx:id\u003d\"doctorListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":8}},{"path":"src/main/resources/view/HelpWindow.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#copyButton, #helpMessage {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans\";","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ngsengleng"},"content":"    -fx-font-size: 12px;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"ngsengleng"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"ngsengleng"},"content":"    -fx-text-fill: #333333;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"ngsengleng"},"content":"    -fx-effect: dropshadow( gaussian , rgba(255,255,255,0.5) , 0,0,0,1 );","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"ngsengleng"},"content":"}","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"ngsengleng"},"content":"#helpMessage1 {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"ngsengleng"},"content":"    -fx-font-family: \"Open Sans\";","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"ngsengleng"},"content":"    -fx-font-size: 10px;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"ngsengleng"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"ngsengleng"},"content":"    -fx-text-fill: #333333;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"ngsengleng"},"content":"    -fx-effect: dropshadow( gaussian , rgba(255,255,255,0.5) , 0,0,0,1 );","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ngsengleng":12,"-":3}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"ngsengleng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@HelpWindow.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ngsengleng"},"content":"         \u003cVBox\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"ngsengleng"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"ngsengleng"},"content":"          \u003cLabel fx:id\u003d\"helpMessage\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Label\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"ngsengleng"},"content":"               \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"16.0\" prefWidth\u003d\"183.0\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                  \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"ngsengleng"},"content":"                     \u003cLabel fx:id\u003d\"helpMessage1\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Label\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"ngsengleng"},"content":"                \u003cButton fx:id\u003d\"copyButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" prefWidth\u003d\"101.0\" text\u003d\"Copy URL\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                  \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"               \u003c/HBox\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":31,"author":{"gitId":"ngsengleng"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"ngsengleng"},"content":"         \u003c/VBox\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"ngsengleng":9,"-":26}},{"path":"src/main/resources/view/LightTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"    -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"ramaven"},"content":"    -fx-base: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    -fx-control-inner-background: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 20%);","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 20%);","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 20%);","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: #e6f6fa;","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: #fafcfc;","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: #60b9d1;","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"ramaven"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":135,"author":{"gitId":"ramaven"},"content":"     -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":139,"author":{"gitId":"ramaven"},"content":"     -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#0b7887, 30%);","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"ramaven"},"content":"    -fx-border-color: derive(#e6f6fa, 25%);","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"ramaven"},"content":"    -fx-border-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":183,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"ramaven"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#0b7887, 30%);","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":201,"author":{"gitId":"ramaven"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: #e6f6fa;","lastModifiedDate":"2021-10-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"ramaven"},"content":"    -fx-text-fill: #0388a8;","lastModifiedDate":"2021-10-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"ramaven"},"content":"  -fx-text-fill: #e6f6fa;","lastModifiedDate":"2021-10-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 35%);","lastModifiedDate":"2021-10-09"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"ramaven"},"content":"    -fx-text-fill: #0388a8;","lastModifiedDate":"2021-10-09"},{"lineNumber":252,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 25%);","lastModifiedDate":"2021-10-09"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 25%);","lastModifiedDate":"2021-10-09"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"ramaven"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-09"},{"lineNumber":270,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e6f6fa, 25%);","lastModifiedDate":"2021-10-09"},{"lineNumber":274,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"ramaven"},"content":"    -fx-fill: black;","lastModifiedDate":"2021-10-09"},{"lineNumber":280,"author":{"gitId":"ramaven"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-09"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":284,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#e3e6e6, 20%);","lastModifiedDate":"2021-10-09"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":287,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":288,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: derive(#0388a8, 50%);","lastModifiedDate":"2021-10-09"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":303,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":309,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"simonjulianl"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":312,"author":{"gitId":"simonjulianl"},"content":"    -fx-border-color: black;","lastModifiedDate":"2021-10-11"},{"lineNumber":313,"author":{"gitId":"simonjulianl"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-10-11"},{"lineNumber":314,"author":{"gitId":"simonjulianl"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2021-10-11"},{"lineNumber":315,"author":{"gitId":"simonjulianl"},"content":"    -fx-border-radius: 4;","lastModifiedDate":"2021-10-11"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":323,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":324,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: transparent #FFFFFF transparent #FFFFFF;","lastModifiedDate":"2021-10-09"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"ramaven"},"content":"    -fx-border-color: #26a1bf #26a1bf #ffffff #26a1bf;","lastModifiedDate":"2021-10-09"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"radiankrisno"},"content":"    -fx-text-fill: #26a1bf;","lastModifiedDate":"2021-10-11"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":334,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":336,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":338,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"ramaven"},"content":"    -fx-background-color: transparent, #98acb5, transparent, #98acb5;","lastModifiedDate":"2021-10-09"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":343,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":348,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":355,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":356,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":357,"author":{"gitId":"radiankrisno"},"content":"#medicalConditions {","lastModifiedDate":"2021-10-11"},{"lineNumber":358,"author":{"gitId":"radiankrisno"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2021-10-11"},{"lineNumber":359,"author":{"gitId":"radiankrisno"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2021-10-11"},{"lineNumber":360,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":361,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":362,"author":{"gitId":"radiankrisno"},"content":"#medicalConditions .label {","lastModifiedDate":"2021-10-11"},{"lineNumber":363,"author":{"gitId":"radiankrisno"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-10-11"},{"lineNumber":364,"author":{"gitId":"radiankrisno"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2021-10-11"},{"lineNumber":365,"author":{"gitId":"radiankrisno"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2021-10-11"},{"lineNumber":366,"author":{"gitId":"radiankrisno"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2021-10-11"},{"lineNumber":367,"author":{"gitId":"radiankrisno"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2021-10-11"},{"lineNumber":368,"author":{"gitId":"radiankrisno"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2021-10-11"},{"lineNumber":369,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"},{"lineNumber":370,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":371,"author":{"gitId":"simonjulianl"},"content":".list-cell:empty {","lastModifiedDate":"2021-10-11"},{"lineNumber":372,"author":{"gitId":"simonjulianl"},"content":"    -fx-opacity: 0;","lastModifiedDate":"2021-10-11"},{"lineNumber":373,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":17,"ramaven":37,"simonjulianl":9,"-":310}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"         xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ramaven"},"content":"                \u003cURL value\u003d\"@LightTheme.css\"/\u003e","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Extensions.css\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"                \u003cVBox fx:id\u003d\"modelList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"                      VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"                    \u003cStackPane fx:id\u003d\"modelListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"ramaven":1,"simonjulianl":13,"-":47}},{"path":"src/main/resources/view/PatientListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"            \u003cFlowPane fx:id\u003d\"medicalConditions\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Contact: \"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Age: \"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Blood type: \"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodType\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Gender: \"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Height: \"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel fx:id\u003d\"height\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$height\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Weight: \"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"                \u003cLabel fx:id\u003d\"weight\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$weight\" /\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":57}},{"path":"src/main/resources/view/PatientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"    \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":8}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidDoctorAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"{","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"  \"activities\": [],","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"  \"doctors\": [","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"There\u0027s a star in my name * LOL\",","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"99999999\",","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D001\",","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Cardiology\"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    },","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"a valid name\",","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"99999999\",","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D002\",","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Cardiology\"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"  ],","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": []","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"radiankrisno":2,"yyhangz":16}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPatientAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"{","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"  \"activities\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Valid Person\",","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"9482424\",","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P123\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"35\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"AB\",","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"175\",","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"76\"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Person with invalid phone name field\",","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"9482abc424\",","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P123\",","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"35\",","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"AB\",","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"175\",","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"76\"","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"  ]","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"radiankrisno":26}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidDoctorAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"{","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"  \"activities\": [],","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"  \"doctors\": [","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"There\u0027s a star in my name * LOL\",","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"99999999\",","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D001\",","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Cardiology\"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"  ],","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": []","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"radiankrisno":2,"yyhangz":10}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPatientAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"{","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"  \"activities\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Person with invalid phone name field\",","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"9482abc424\",","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P123\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"35\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"AB\",","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"175\",","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"76\"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"  ]","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"radiankrisno":16}},{"path":"src/test/data/JsonSerializableAddressBookTest/conflictingActivitiesAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"{","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"  \"activities\": [","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"A001\",","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"testing activity\",","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"meeting someone at Jurong east\",","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"15/09/2022 14:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"15/09/2022 15:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    },","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"A002\",","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"another activity\",","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"meeting someone at Jurong east\",","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"15/09/2022 13:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"15/09/2022 15:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"  ],","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": []","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"radiankrisno":2,"simonjulianl":17,"yyhangz":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicateActivitiesAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"{","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"  \"activities\": [","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"A001\",","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"testing activity\",","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"meeting someone at Jurong east\",","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"15/09/2022 13:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"15/09/2022 14:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    },","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"A001\",","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"another activity\",","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"meeting someone at Jurong east\",","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"15/09/2022 15:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"15/09/2022 18:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"  ],","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": []","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"radiankrisno":2,"simonjulianl":17,"yyhangz":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicateDoctorAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"{","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"  \"activities\": [],","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"  \"doctors\": [","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"John doe\",","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"99999999\",","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D001\",","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Cardiology\"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    },","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"John roe\",","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"9998888\",","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D001\",","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Pediatrics\"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"  ],","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": []","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"radiankrisno":2,"yyhangz":16}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePatientAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"{","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"  \"activities\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Tom Joe\",","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"9482424\",","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P001\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"35\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"AB\",","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"175\",","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"76\"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Johny Star\",","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"12345678\",","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P001\",","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"A\",","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"178\",","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"77\"","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"  ]","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"radiankrisno":26}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidActivityAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"{","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"  \"activities\": [","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"A001\",","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"Very very long title that would exceed 60 character for sure, again Very very long title that would exceed 60 character for sure\",","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"meeting someone at Jurong east\",","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"15/09/2022 13:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"15/09/2022 15:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    },","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"B002\",","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"Invalid id, supposed to start with A\",","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"meeting someone at Jurong east\",","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"15/09/2023 13:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"15/09/2024 13:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"  ],","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": []","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"radiankrisno":2,"simonjulianl":17,"yyhangz":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidDoctorAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"{","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"  \"activities\": [],","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"  \"doctors\": [","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"There\u0027s a star in my name * LOL\",","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"99999999\",","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D001\",","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Cardiology\"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    },","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"Second best child\",","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"my phone number is not numeric\",","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D002\",","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Pediatrics\"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    },","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"my id is invalid\",","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"9911\",","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"P003\",","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Xray centre 2\"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    },","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"son of john doe\",","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"912345\",","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D004\",","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Ca*rdiology is not spelt with a star\"","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"  ],","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": []","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"radiankrisno":2,"yyhangz":28}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPatientAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"{","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"  \"activities\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"  \"doctors\": [],","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"There\u0027s a star in my name * LOL\",","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"9482424\",","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P001\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"35\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"AB\",","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"175\",","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"76\"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Johny Star\",","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"phone number is not numeric\",","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P002\",","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"A\",","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"178\",","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"77\"","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Johny Star\",","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"12345678\",","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"A002\",","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"A\",","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"178\",","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"77\"","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Johny Star\",","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"12345678\",","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P003\",","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"10000\",","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"A\",","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"178\",","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"77\"","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Johny Star\",","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"12345678\",","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P004\",","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"ABC\",","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"178\",","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"77\"","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Johny Star\",","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"12345678\",","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P005\",","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"A\",","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"K\",","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"178\",","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"77\"","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Johny Star\",","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"12345678\",","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P006\",","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"A\",","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"1000\",","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"77\"","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Johny Star\",","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"12345678\",","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P007\",","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"25\",","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"A\",","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"178\",","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"1000\"","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"  ]","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"radiankrisno":86}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"  \"_comment\": \"AddressBook save file which contains the same values as in TypicalPersons and TypicalActivities\",","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"  \"activities\": [","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"A001\",","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"Meeting me\",","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"today at somewhere\",","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"15/12/2021 13:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"15/12/2021 14:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    },","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"A003\",","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"Paper Review\",","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"someone is attending this\",","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"16/12/2021 13:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"16/12/2021 14:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    },","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    {","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"      \"id\": \"A004\",","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"      \"title\": \"New Year Party\",","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"      \"description\": \"at someone house\",","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"      \"startTime\": \"01/01/2022 13:00\",","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"      \"endTime\": \"01/01/2022 20:00\"","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"  ],","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"  \"doctors\": [","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"John doe\",","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"85355255\",","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D001\",","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Pediatrics\"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    },","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"Smith John\",","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"77777777\",","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D002\",","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"ENT\"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"    },","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"      \"name\": \"Joe Smith\",","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"      \"phone\": \"55555555\",","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"      \"id\": \"D003\",","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"      \"department\": \"Xray\"","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"  ],","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"  \"patients\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Dohn Joe\",","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"12345678\",","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P001\",","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"40\",","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"      \"blood type\": \"AB\",","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"176\",","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"86\",","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"      \"medical conditions\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        \"heart failure\"","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"      ]","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Smith John\",","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"77777777\",","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P002\",","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"40\",","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"AB\",","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"176\",","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"86\",","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"      \"medical conditions\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"        \"heart failure\"","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"      ]","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"    },","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"    {","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"      \"name\": \"Joe Smith\",","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"      \"phone\": \"55555555\",","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"      \"id\": \"P003\",","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"      \"age\": \"35\",","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"      \"bloodtype\": \"AB\",","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"      \"gender\": \"M\",","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"      \"height\": \"176\",","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"      \"weight\": \"86\",","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"      \"medical conditions\": [","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"        \"heart failure\"","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"      ]","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"  ]","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"radiankrisno":41,"simonjulianl":23,"yyhangz":21,"-":2}},{"path":"src/test/java/gomedic/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"simonjulianl":2,"-":56}},{"path":"src/test/java/gomedic/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(defaultConfig, defaultConfig);","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"simonjulianl":2,"-":24}},{"path":"src/test/java/gomedic/commons/core/MessagesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ngsengleng"},"content":"package gomedic.commons.core;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"ngsengleng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"ngsengleng"},"content":"import java.util.List;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"ngsengleng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"ngsengleng"},"content":"public class MessagesTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"ngsengleng"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"ngsengleng"},"content":"    public void getSuggestions_misspelledCommand_correctSuggestionsReturned() {","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"ngsengleng"},"content":"        String wrongCommand \u003d \"clara\";","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"ngsengleng"},"content":"        List\u003cString\u003e closestWords \u003d List.of(\"clear\\n\");","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"ngsengleng"},"content":"        String reply \u003d String.format(\"Sorry, %s is an invalid command. \"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"ngsengleng"},"content":"                + \"You can choose from these commands instead: \\n\", wrongCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"ngsengleng"},"content":"        for (String s : closestWords) {","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"ngsengleng"},"content":"            reply +\u003d s;","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"ngsengleng"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"ngsengleng"},"content":"        assertEquals(reply, Messages.getSuggestions(wrongCommand));","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"ngsengleng"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"ngsengleng"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"ngsengleng"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"ngsengleng"},"content":"    public void getSuggestions_garbageCommand_noSuggestionsReturned() {","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"ngsengleng"},"content":"        String wrongCommand \u003d \"ajadsjfksdkj\";","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"ngsengleng"},"content":"        String reply \u003d String.format(\"Sorry, %s is an invalid command.\", wrongCommand);","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"ngsengleng"},"content":"        assertEquals(reply, Messages.getSuggestions(wrongCommand));","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"ngsengleng"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"ngsengleng"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"ngsengleng":29}},{"path":"src/test/java/gomedic/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                                              int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":2,"-":133}},{"path":"src/test/java/gomedic/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.core.index;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"        final Index fifthEntryIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        assertEquals(fifthEntryIndex, Index.fromOneBased(5));","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        assertEquals(fifthEntryIndex, Index.fromZeroBased(4));","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        assertEquals(fifthEntryIndex, fifthEntryIndex);","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(null, fifthEntryIndex);","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        assertFalse(fifthEntryIndex.equals(5.0f));","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(fifthEntryIndex, Index.fromOneBased(1));","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"simonjulianl":3,"yyhangz":7,"-":50}},{"path":"src/test/java/gomedic/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"simonjulianl":2,"-":34}},{"path":"src/test/java/gomedic/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(objects);","lastModifiedDate":"2021-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"        CollectionUtil.requireAllNonNull(collection);","lastModifiedDate":"2021-09-28"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"simonjulianl":6,"-":101}},{"path":"src/test/java/gomedic/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Config;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"simonjulianl":4,"-":112}},{"path":"src/test/java/gomedic/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":2,"-":21}},{"path":"src/test/java/gomedic/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.SerializableTestClass;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TestUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":3,"-":42}},{"path":"src/test/java/gomedic/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.commons.util;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"                IllegalArgumentException.class,","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"                \"Word parameter cannot be empty\", () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"                IllegalArgumentException.class,","lastModifiedDate":"2021-09-28"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"                \"Word parameter should be a single word\", () -\u003e StringUtil","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"                        .containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"simonjulianl":9,"-":137}},{"path":"src/test/java/gomedic/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.addcommand.AddActivityCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.listcommand.ListActivityCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.listcommand.ListDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"import gomedic.storage.StorageManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.modelbuilder.ActivityBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"import gomedic.testutil.modelbuilder.PatientBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"    private final Model model \u003d new ModelManager();","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"ngsengleng"},"content":"        assertParseException(invalidCommand, Messages.getSuggestions(invalidCommand));","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"                                      String expectedMessage) {","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"                                      String expectedMessage, Model expectedModel) {","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"    public void executeDeleteActivity_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"        String deleteActivity \u003d \"delete t/activity A001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"        assertCommandException(deleteActivity, Messages.MESSAGE_INVALID_ACTIVITY_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"yyhangz"},"content":"    public void executeDeleteDoctor_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"        String deleteDoctor \u003d \"delete t/doctor D001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"yyhangz"},"content":"        assertCommandException(deleteDoctor, Messages.MESSAGE_INVALID_DOCTOR_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"    public void executeDeletePatient_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"        String deletePatient \u003d \"delete t/patient P001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"        assertCommandException(deletePatient, Messages.MESSAGE_INVALID_PATIENT_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"yyhangz"},"content":"        String listCommand \u003d ListActivityCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"yyhangz"},"content":"        assertCommandSuccess(listCommand, ListActivityCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2021-10-08"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"                                      Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2021-10-08"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2021-10-08"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2021-10-08"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"yyhangz"},"content":"    public void executeAddDoctor_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"        // Execute add doctor command","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"        String addDoctorCommand \u003d AddDoctorCommand.COMMAND_WORD","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"        Doctor expectedDoctor \u003d new DoctorBuilder(TypicalPersons.MAIN_DOCTOR).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"        expectedModel.addDoctor(expectedDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"        assertCommandFailure(addDoctorCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"    public void executeAddPatient_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"radiankrisno"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"radiankrisno"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"radiankrisno"},"content":"        // Execute add patient command","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"radiankrisno"},"content":"        String addPatientCommand \u003d AddPatientCommand.COMMAND_WORD","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"radiankrisno"},"content":"        Patient expectedPatient \u003d new PatientBuilder(TypicalPersons.MAIN_PATIENT).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"radiankrisno"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"radiankrisno"},"content":"        expectedModel.addPatient(expectedPatient);","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"radiankrisno"},"content":"        assertCommandFailure(addPatientCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"simonjulianl"},"content":"    public void executeAddActivity_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"simonjulianl"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"simonjulianl"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"simonjulianl"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2021-10-09"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"        // Execute add command","lastModifiedDate":"2021-10-09"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"        String addActivityCommand \u003d AddActivityCommand.COMMAND_WORD","lastModifiedDate":"2021-10-09"},{"lineNumber":206,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION;","lastModifiedDate":"2021-10-09"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"        Activity expectedActivity \u003d new ActivityBuilder().build();","lastModifiedDate":"2021-10-09"},{"lineNumber":211,"author":{"gitId":"simonjulianl"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"        expectedModel.addActivity(expectedActivity);","lastModifiedDate":"2021-10-09"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2021-10-09"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"        assertCommandFailure(addActivityCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"yyhangz"},"content":"    public void getFilteredDoctorList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":219,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredDoctorList().remove(0));","lastModifiedDate":"2021-10-10"},{"lineNumber":220,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":221,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":222,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":223,"author":{"gitId":"radiankrisno"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":224,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));","lastModifiedDate":"2021-10-11"},{"lineNumber":225,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":226,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":227,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":228,"author":{"gitId":"simonjulianl"},"content":"    public void getFilteredActivityList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":229,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredActivityList().remove(0));","lastModifiedDate":"2021-10-09"},{"lineNumber":230,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":231,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":232,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":233,"author":{"gitId":"simonjulianl"},"content":"    void getModelBeingShown_defaultValue_testPassed() {","lastModifiedDate":"2021-10-10"},{"lineNumber":234,"author":{"gitId":"yyhangz"},"content":"        assertEquals(ModelItem.ACTIVITY.ordinal(), logic.getModelBeingShown().getValue());","lastModifiedDate":"2021-10-11"},{"lineNumber":235,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":236,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":237,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":238,"author":{"gitId":"simonjulianl"},"content":"    void getModelBeingShown_executeOtherCommand_testPassed() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":239,"author":{"gitId":"yyhangz"},"content":"        String listCommand \u003d ListDoctorCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-14"},{"lineNumber":240,"author":{"gitId":"yyhangz"},"content":"        assertCommandSuccess(listCommand, ListDoctorCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2021-10-14"},{"lineNumber":241,"author":{"gitId":"yyhangz"},"content":"        assertEquals(ModelItem.DOCTOR.ordinal(), logic.getModelBeingShown().getValue());","lastModifiedDate":"2021-10-14"},{"lineNumber":242,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":243,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"radiankrisno":40,"ngsengleng":1,"simonjulianl":117,"yyhangz":46,"-":53}},{"path":"src/test/java/gomedic/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"simonjulianl":1,"-":53}},{"path":"src/test/java/gomedic/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.PAPER_REVIEW;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.index.Index;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.editcommand.EditActivityCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelItem;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.PatientId;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.editdescriptorbuilder.EditActivityDescriptorBuilder;","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.editdescriptorbuilder.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    /* invalid constants declarations for common fields */","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + CliSyntax.PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + CliSyntax.PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    // empty string not allowed for addresses","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + CliSyntax.PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"    /* valid constants declarations for doctor related fields */","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    public static final String VALID_DESC_NAME_MAIN_DOCTOR \u003d \" \" + CliSyntax.PREFIX_NAME + \"John Doe\";","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"    public static final String VALID_DESC_NAME_OTHER_DOCTOR \u003d \" \" + CliSyntax.PREFIX_NAME + \"Smith John\";","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    public static final String VALID_DESC_PHONE_MAIN_DOCTOR \u003d \" \" + CliSyntax.PREFIX_PHONE + \"85355255\";","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"    public static final String VALID_DESC_PHONE_OTHER_DOCTOR \u003d \" \" + CliSyntax.PREFIX_PHONE + \"77777777\";","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"    public static final String VALID_DESC_DEPARTMENT_MAIN_DOCTOR \u003d \" \" + CliSyntax.PREFIX_DEPARTMENT + \"Pediatrics\";","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"    public static final String VALID_DESC_DEPARTMENT_OTHER_DOCTOR \u003d \" \" + CliSyntax.PREFIX_DEPARTMENT + \"ENT\";","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    /* invalid constants declarations for doctor related fields */","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"    public static final String INVALID_DESC_NAME_MAIN_DOCTOR \u003d \" \" + CliSyntax.PREFIX_NAME + \"John** Doe\";","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"    public static final String INVALID_DESC_PHONE_MAIN_DOCTOR \u003d \" \" + CliSyntax.PREFIX_PHONE + \"not a number\";","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    public static final String INVALID_DESC_DEPARTMENT_MAIN_DOCTOR \u003d \" \" + CliSyntax.PREFIX_DEPARTMENT + \"Cardi**ology\";","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"    /* valid constants declarations for patient related fields */","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_NAME_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_NAME + \"Dohn Joe\";","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_NAME_OTHER_PATIENT \u003d \" \" + CliSyntax.PREFIX_NAME + \"Smith John\";","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_PHONE_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_PHONE + \"12345678\";","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_PHONE_OTHER_PATIENT \u003d \" \" + CliSyntax.PREFIX_PHONE + \"77777777\";","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_AGE_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_AGE + \"40\";","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_AGE_OTHER_PATIENT \u003d \" \" + CliSyntax.PREFIX_AGE + \"37\";","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_BLOODTYPE_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_BLOODTYPE + \"AB\";","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_BLOODTYPE_OTHER_PATIENT \u003d \" \" + CliSyntax.PREFIX_BLOODTYPE + \"B\";","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_GENDER_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_GENDER + \"M\";","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_GENDER_OTHER_PATIENT \u003d \" \" + CliSyntax.PREFIX_GENDER + \"M\";","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_HEIGHT_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_HEIGHT + \"176\";","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_HEIGHT_OTHER_PATIENT \u003d \" \" + CliSyntax.PREFIX_HEIGHT + \"186\";","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_WEIGHT_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_WEIGHT + \"86\";","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_WEIGHT_OTHER_PATIENT \u003d \" \" + CliSyntax.PREFIX_WEIGHT + \"77\";","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_MEDICALCONDITIONS","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"            + \"heart failure\";","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_DESC_MEDICALCONDITIONS_OTHER_PATIENT \u003d \" \" + CliSyntax.PREFIX_MEDICALCONDITIONS","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"            + \"diabetes\";","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"    /* invalid constants declarations for patient related fields */","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_DESC_NAME_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_NAME + \"John** Doe\";","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_DESC_PHONE_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_PHONE + \"not a number\";","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_DESC_AGE_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_AGE + \"not a number\";","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_DESC_BLOODTYPE_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_BLOODTYPE + \"invalid\";","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_DESC_GENDER_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_GENDER + \"invalid\";","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_DESC_HEIGHT_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_HEIGHT + \"invalid\";","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_DESC_WEIGHT_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_WEIGHT + \"invalid\";","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT \u003d \" \" + CliSyntax.PREFIX_MEDICALCONDITIONS","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"            + \"invalid**\";","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"    /* valid constants declarations for activity related fields */","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_DESC_TITLE_MEETING \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_TITLE + \"Meeting me\";","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_DESC_TITLE_PAPER_REVIEW \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_TITLE + \"Paper Review\";","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_DESC_START_TIME_MEETING \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_START_TIME + \"15-09-2022 13:00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_DESC_END_TIME_MEETING \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_END_TIME + \"15-09-2022 15:00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_DESC_START_TIME_PAPER_REVIEW \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_START_TIME + \"16/07/2000 15:00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_DESC_END_TIME_PAPER_REVIEW \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_END_TIME + \"16/07/2000 16:00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_DESC_MEETING_DESCRIPTION \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_DESCRIPTION + \"today at somewhere\";","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_DESC_PAPER_REVIEW_DESCRIPTION \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_DESCRIPTION + \"someone is attending this\";","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"yyhangz"},"content":"    /* invalid constants declarations for activity related fields */","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_DESC_START_TIME_MEETING \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_START_TIME + \"15-13-2022 13:00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_DESC_END_TIME_MEETING \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_END_TIME + \"15/09/2022 15-00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_DESC_TITLE_MEETING \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_TITLE + \"MEETING\".repeat(100);","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_DESC_TITLE_PAPER_REVIEW \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_TITLE + \"PAPER REVIEW\".repeat(100);","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_DESC_DESCRIPTION \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"            \" \" + CliSyntax.PREFIX_DESCRIPTION + \"SOME LONG DESCRIPTION\".repeat(1000);","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"yyhangz"},"content":"    public static final EditDoctorCommand.EditDoctorDescriptor DESC_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"yyhangz"},"content":"    public static final EditDoctorCommand.EditDoctorDescriptor DESC_OTHER_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"    public static final EditActivityCommand.EditActivityDescriptor DESC_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"    public static final EditActivityCommand.EditActivityDescriptor DESC_PAPER_REVIEW;","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":138,"author":{"gitId":"yyhangz"},"content":"        DESC_MAIN_DOCTOR \u003d new EditDoctorDescriptorBuilder().withName(TypicalPersons.MAIN_DOCTOR.getName().fullName)","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"                .withPhone(TypicalPersons.MAIN_DOCTOR.getPhone().value)","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"                .withDepartment(TypicalPersons.MAIN_DOCTOR.getDepartment().departmentName).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"        DESC_OTHER_DOCTOR \u003d new EditDoctorDescriptorBuilder().withName(TypicalPersons.OTHER_DOCTOR.getName().fullName)","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"                .withPhone(TypicalPersons.OTHER_DOCTOR.getPhone().value)","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"                .withDepartment(TypicalPersons.OTHER_DOCTOR.getDepartment().departmentName).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"        DESC_MEETING \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"                .withEndTime(MEETING.getEndTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(MEETING.getTitle().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"                .withDescription(MEETING.getDescription().toString()).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"        DESC_PAPER_REVIEW \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(PAPER_REVIEW.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"                .withEndTime(PAPER_REVIEW.getEndTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(PAPER_REVIEW.getTitle().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"                .withDescription(PAPER_REVIEW.getDescription().toString()).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":186,"author":{"gitId":"yyhangz"},"content":"     * - the address book, filtered activity list and selected activity in {@code actualModel} remain unchanged","lastModifiedDate":"2021-10-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":192,"author":{"gitId":"yyhangz"},"content":"        List\u003cActivity\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredActivityList());","lastModifiedDate":"2021-10-14"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":196,"author":{"gitId":"yyhangz"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredActivityList());","lastModifiedDate":"2021-10-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"yyhangz"},"content":"     * Updates {@code model}\u0027s filtered list to show only the doctors at the given {@code targetIndex} in the","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"yyhangz"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"yyhangz"},"content":"    public static void showDoctorAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"yyhangz"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDoctorList().size());","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"yyhangz"},"content":"        Doctor doctor \u003d model.getFilteredDoctorList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"yyhangz"},"content":"        final DoctorId did \u003d new DoctorId(doctor.getId().getIdNumber());","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"yyhangz"},"content":"        model.updateFilteredDoctorList(doctor1 -\u003e doctor1.getId().equals(did));","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"yyhangz"},"content":"        assertEquals(1, model.getFilteredDoctorList().size());","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"radiankrisno"},"content":"     * Updates {@code model}\u0027s filtered list to show only the patients at the given {@code targetIndex} in the","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"radiankrisno"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"radiankrisno"},"content":"    public static void showPatientAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-10-11"},{"lineNumber":218,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"radiankrisno"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"radiankrisno"},"content":"        final PatientId pid \u003d new PatientId(patient.getId().getIdNumber());","lastModifiedDate":"2021-10-11"},{"lineNumber":222,"author":{"gitId":"radiankrisno"},"content":"        model.updateFilteredPatientList(patient1 -\u003e patient1.getId().equals(pid));","lastModifiedDate":"2021-10-11"},{"lineNumber":223,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":224,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(1, model.getFilteredPatientList().size());","lastModifiedDate":"2021-10-11"},{"lineNumber":225,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":226,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":227,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":228,"author":{"gitId":"simonjulianl"},"content":"     * Updates {@code model}\u0027s filtered list to show only the activity at the given {@code targetIndex} in the","lastModifiedDate":"2021-10-10"},{"lineNumber":229,"author":{"gitId":"simonjulianl"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-10-10"},{"lineNumber":230,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":231,"author":{"gitId":"simonjulianl"},"content":"    public static void showActivityAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-10-10"},{"lineNumber":232,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredActivityList().size());","lastModifiedDate":"2021-10-10"},{"lineNumber":233,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":234,"author":{"gitId":"simonjulianl"},"content":"        Activity activity \u003d model.getFilteredActivityList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":235,"author":{"gitId":"simonjulianl"},"content":"        final ActivityId aid \u003d activity.getActivityId();","lastModifiedDate":"2021-10-10"},{"lineNumber":236,"author":{"gitId":"simonjulianl"},"content":"        model.updateFilteredActivitiesList(activity1 -\u003e activity1.getActivityId().equals(aid));","lastModifiedDate":"2021-10-10"},{"lineNumber":237,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":238,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(1, model.getFilteredActivityList().size());","lastModifiedDate":"2021-10-10"},{"lineNumber":239,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":240,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":241,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":242,"author":{"gitId":"yyhangz"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2021-10-10"},{"lineNumber":243,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":244,"author":{"gitId":"yyhangz"},"content":"    public static class ModelStub implements Model {","lastModifiedDate":"2021-10-10"},{"lineNumber":245,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":246,"author":{"gitId":"yyhangz"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-10-10"},{"lineNumber":247,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":248,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":249,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":250,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":251,"author":{"gitId":"yyhangz"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-10"},{"lineNumber":252,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":253,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":254,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":255,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":256,"author":{"gitId":"yyhangz"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-10-10"},{"lineNumber":257,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":258,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":259,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":260,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":261,"author":{"gitId":"yyhangz"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-10-10"},{"lineNumber":262,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":263,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":264,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":265,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":266,"author":{"gitId":"yyhangz"},"content":"        public Path getAddressBookDataRootFilePath() {","lastModifiedDate":"2021-10-10"},{"lineNumber":267,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":268,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":269,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":270,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":271,"author":{"gitId":"yyhangz"},"content":"        public void setAddressBookDataRootFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-10-10"},{"lineNumber":272,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":273,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":274,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":275,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":276,"author":{"gitId":"yyhangz"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":277,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":278,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":279,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":280,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":281,"author":{"gitId":"radiankrisno"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":282,"author":{"gitId":"radiankrisno"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":283,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":284,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":285,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":286,"author":{"gitId":"yyhangz"},"content":"        public void addActivity(Activity activity) {","lastModifiedDate":"2021-10-10"},{"lineNumber":287,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":288,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":289,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":290,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":291,"author":{"gitId":"yyhangz"},"content":"        public int getNewActivityId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":292,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":293,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":294,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":295,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":296,"author":{"gitId":"yyhangz"},"content":"        public boolean hasNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":297,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":298,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":299,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":300,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":301,"author":{"gitId":"yyhangz"},"content":"        public int getNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":302,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":303,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":304,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":305,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":306,"author":{"gitId":"yyhangz"},"content":"        public void setDoctor(Doctor oldDoctor, Doctor replacement) {","lastModifiedDate":"2021-10-14"},{"lineNumber":307,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-14"},{"lineNumber":308,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":309,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":310,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":311,"author":{"gitId":"radiankrisno"},"content":"        public boolean hasNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":312,"author":{"gitId":"radiankrisno"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":313,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":314,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":315,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":316,"author":{"gitId":"radiankrisno"},"content":"        public int getNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":317,"author":{"gitId":"radiankrisno"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":318,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":319,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":320,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":321,"author":{"gitId":"yyhangz"},"content":"        public boolean hasActivity(Activity activity) {","lastModifiedDate":"2021-10-10"},{"lineNumber":322,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":323,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":324,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":325,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":326,"author":{"gitId":"simonjulianl"},"content":"        public void deleteActivity(Activity target) {","lastModifiedDate":"2021-10-11"},{"lineNumber":327,"author":{"gitId":"simonjulianl"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":328,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":329,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":330,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":331,"author":{"gitId":"simonjulianl"},"content":"        public void setActivity(Activity oldActivity, Activity replacementActivity) {","lastModifiedDate":"2021-10-15"},{"lineNumber":332,"author":{"gitId":"simonjulianl"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":333,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":334,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":335,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":336,"author":{"gitId":"radiankrisno"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2021-10-11"},{"lineNumber":337,"author":{"gitId":"radiankrisno"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":338,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":339,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":340,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":341,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":342,"author":{"gitId":"yyhangz"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":343,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":344,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":345,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":346,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":347,"author":{"gitId":"yyhangz"},"content":"        public void deleteDoctor(Doctor target) {","lastModifiedDate":"2021-10-11"},{"lineNumber":348,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":349,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":350,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":351,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":352,"author":{"gitId":"radiankrisno"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":353,"author":{"gitId":"radiankrisno"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":354,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":355,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":356,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":357,"author":{"gitId":"yyhangz"},"content":"        public boolean hasConflictingActivity(Activity activity) {","lastModifiedDate":"2021-10-10"},{"lineNumber":358,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":359,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":360,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":361,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":362,"author":{"gitId":"yyhangz"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-10"},{"lineNumber":363,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":364,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":365,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":366,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":367,"author":{"gitId":"yyhangz"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-10-10"},{"lineNumber":368,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":369,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":370,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":371,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":372,"author":{"gitId":"yyhangz"},"content":"        public ObservableList\u003cActivity\u003e getFilteredActivityList() {","lastModifiedDate":"2021-10-10"},{"lineNumber":373,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":374,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":375,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":376,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":377,"author":{"gitId":"yyhangz"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-10-10"},{"lineNumber":378,"author":{"gitId":"yyhangz"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":379,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":380,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":381,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":382,"author":{"gitId":"radiankrisno"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-11"},{"lineNumber":383,"author":{"gitId":"radiankrisno"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":384,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":385,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":386,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":387,"author":{"gitId":"yyhangz"},"content":"        public void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate) {","lastModifiedDate":"2021-10-11"},{"lineNumber":388,"author":{"gitId":"simonjulianl"},"content":"            // noop","lastModifiedDate":"2021-10-12"},{"lineNumber":389,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":390,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":391,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":392,"author":{"gitId":"radiankrisno"},"content":"        public void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate) {","lastModifiedDate":"2021-10-11"},{"lineNumber":393,"author":{"gitId":"simonjulianl"},"content":"            // noop","lastModifiedDate":"2021-10-12"},{"lineNumber":394,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":395,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":396,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":397,"author":{"gitId":"simonjulianl"},"content":"        public void updateFilteredActivitiesList(Predicate\u003c? super Activity\u003e predicate) {","lastModifiedDate":"2021-10-10"},{"lineNumber":398,"author":{"gitId":"simonjulianl"},"content":"            // noop","lastModifiedDate":"2021-10-12"},{"lineNumber":399,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":400,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":401,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":402,"author":{"gitId":"simonjulianl"},"content":"        public ObservableValue\u003cInteger\u003e getModelBeingShown() {","lastModifiedDate":"2021-10-10"},{"lineNumber":403,"author":{"gitId":"simonjulianl"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-10"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-05"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":406,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":407,"author":{"gitId":"simonjulianl"},"content":"        public void setModelBeingShown(ModelItem modelItem) {","lastModifiedDate":"2021-10-10"},{"lineNumber":408,"author":{"gitId":"simonjulianl"},"content":"            // noop","lastModifiedDate":"2021-10-12"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-05"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":411,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"radiankrisno":82,"simonjulianl":113,"yyhangz":160,"-":56}},{"path":"src/test/java/gomedic/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"    private final Model model \u003d new ModelManager();","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"    private final Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"simonjulianl":7,"-":12}},{"path":"src/test/java/gomedic/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.OTHER_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.THIRD_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.util.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e firstPredicate \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e secondPredicate \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        assertEquals(findFirstCommand, findFirstCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        assertEquals(findFirstCommandCopy, findFirstCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(findFirstCommand, 1);","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(findFirstCommand, null);","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(findSecondCommand, findFirstCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"    public void execute_zeroKeywords_noDoctorFound() {","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_ITEMS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e predicate \u003d preparePredicate(\"THISKEYWORDCANTMATCHANYTHING\");","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        expectedModel.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredDoctorList());","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"    public void execute_multipleKeywords_multipleDoctorsFound() {","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_ITEMS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        //  predicate keywords based on the typical doctors list","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e predicate \u003d preparePredicate(\"John Smith\");","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        expectedModel.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        assertEquals(Arrays.asList(MAIN_DOCTOR, OTHER_DOCTOR, THIRD_DOCTOR), model.getFilteredDoctorList());","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"    private NameContainsKeywordsPredicate\u003cDoctor\u003e preparePredicate(String userInput) {","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        return new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"simonjulianl":11,"yyhangz":27,"-":46}},{"path":"src/test/java/gomedic/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"    private final Model model \u003d new ModelManager();","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"    private final Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"simonjulianl":7,"-":12}},{"path":"src/test/java/gomedic/logic/commands/addcommand/AddActivityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.CONFLICTING_MEETING;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.MEETING;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.modelbuilder.ActivityBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"class AddActivityCommandTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    public void constructor_nullActivity_throwsNullPointerException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"                new AddActivityCommand(null, null, null, null));","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    public void execute_activityAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        ModelStubAcceptingActivityAdded modelStub \u003d new ModelStubAcceptingActivityAdded();","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        Activity validActivity \u003d new ActivityBuilder().build();","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        CommandResult commandResult \u003d new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"                validActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"                validActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"                validActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"                validActivity.getDescription()","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"        ).execute(modelStub);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                        AddActivityCommand.MESSAGE_SUCCESS, validActivity),","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(List.of(validActivity), modelStub.activitiesAdded);","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    public void execute_duplicateActivity_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"        Activity validActivity \u003d new ActivityBuilder().build();","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.ModelStub modelStub \u003d new ModelStubWithActivity(validActivity);","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        AddActivityCommand addActivityCommand \u003d new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"                validActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"                validActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"                validActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"                validActivity.getDescription()","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        );","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"                AddActivityCommand.MESSAGE_DUPLICATE_ACTIVITY, () -\u003e addActivityCommand.execute(modelStub));","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    public void execute_conflictingActivity_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        Activity validActivity \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"                .withId(10)","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.ModelStub modelStub \u003d new ModelStubWithActivity(validActivity);","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"        AddActivityCommand addActivityCommand \u003d new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"                CONFLICTING_MEETING.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"                CONFLICTING_MEETING.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"                CONFLICTING_MEETING.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"                CONFLICTING_MEETING.getDescription()","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        );","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"                AddActivityCommand.MESSAGE_CONFLICTING_ACTIVITY, () -\u003e addActivityCommand.execute(modelStub));","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"    public void equals() {","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        AddActivityCommand addMeetingCommand \u003d new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"                MEETING.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"                MEETING.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"                MEETING.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"                MEETING.getDescription());","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"        AddActivityCommand anotherAddMeetingCommand \u003d new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"                CONFLICTING_MEETING.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"                CONFLICTING_MEETING.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"                CONFLICTING_MEETING.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"                CONFLICTING_MEETING.getDescription());","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(addMeetingCommand, addMeetingCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(1, addMeetingCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(null, addMeetingCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        // different activities -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(addMeetingCommand, anotherAddMeetingCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"     * A Model stub that contains a single activity.","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"yyhangz"},"content":"    private static class ModelStubWithActivity extends CommandTestUtil.ModelStub {","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"        private final Activity activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"        private int counter \u003d 1;","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        ModelStubWithActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"            requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"            this.activity \u003d activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"        public boolean hasActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"            requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"            return this.activity.equals(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"        public boolean hasConflictingActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"            requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"            return this.activity.isConflicting(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"        public int getNewActivityId() {","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"            return counter++;","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"     * A Model stub that always accept the activity being added.","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"    private static class ModelStubAcceptingActivityAdded extends CommandTestUtil.ModelStub {","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"        final ArrayList\u003cActivity\u003e activitiesAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"        private int counter \u003d 1;","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"        public boolean hasActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"            requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"            return activitiesAdded.stream().anyMatch(activity::equals);","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"simonjulianl"},"content":"        public void addActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"simonjulianl"},"content":"            requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"            activitiesAdded.add(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"        public boolean hasConflictingActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"            requireNonNull(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"            return activitiesAdded.stream().anyMatch(activity::isConflicting);","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"simonjulianl"},"content":"        public int getNewActivityId() {","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"simonjulianl"},"content":"            return counter++;","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":170,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":171,"author":{"gitId":"simonjulianl"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"            return new AddressBook();","lastModifiedDate":"2021-10-09"},{"lineNumber":173,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":174,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"simonjulianl":169,"yyhangz":6}},{"path":"src/test/java/gomedic/logic/commands/addcommand/AddActivityIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.modelbuilder.ActivityBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"public class AddActivityIntegrationTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    private Model model;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public void execute_newActivity_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        Activity validActivity \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"                .withId(model.getNewActivityId())","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(\"15/07/2000 15:00\")","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"                .withEndTime(\"15/07/2000 16:00\")","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(\"testing\")","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        expectedModel.addActivity(validActivity);","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        CommandTestUtil.assertCommandSuccess(","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"                new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"                        validActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"                        validActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                        validActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                        validActivity.getDescription()),","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                model,","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"                String.format(AddActivityCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"                        validActivity),","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"                expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    public void execute_conflictingActivity_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        Activity activityInList \u003d model.getAddressBook().getActivityListSortedById().get(0);","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        CommandTestUtil.assertCommandFailure(","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"                new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"                        activityInList.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"                        activityInList.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"                        activityInList.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"                        activityInList.getDescription()","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"                ),","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"                model,","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"                AddActivityCommand.MESSAGE_CONFLICTING_ACTIVITY);","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"simonjulianl":64}},{"path":"src/test/java/gomedic/logic/commands/addcommand/AddDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.OTHER_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import java.util.List;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"public class AddDoctorCommandTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public void constructor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"                new AddDoctorCommand(null, null, null));","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    public void execute_doctorAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        AddDoctorCommandTest.ModelStubAcceptingDoctorAdded modelStub \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"                new AddDoctorCommandTest.ModelStubAcceptingDoctorAdded();","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        CommandResult commandResult \u003d new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getDepartment()","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"        ).execute(modelStub);","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        assertEquals(String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"                AddDoctorCommand.MESSAGE_SUCCESS, validDoctor),","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        assertEquals(List.of(validDoctor), modelStub.doctorsAdded);","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"    public void execute_duplicateDoctor_throwsCommandException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.ModelStub modelStub \u003d new AddDoctorCommandTest.ModelStubWithDoctor(validDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        AddDoctorCommand addDoctorCommand \u003d new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getDepartment()","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        );","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"                AddDoctorCommand.MESSAGE_DUPLICATE_DOCTOR, () -\u003e addDoctorCommand.execute(modelStub));","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"    public void execute_addNewDoctorIntoFullList_throwsCommandException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.ModelStub modelStub \u003d new AddDoctorCommandTest.ModelStubWithFullList();","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        AddDoctorCommand addDoctorCommand \u003d new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"                validDoctor.getDepartment()","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        );","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"                AddDoctorCommand.MESSAGE_MAXIMUM_CAPACITY_EXCEEDED, () -\u003e addDoctorCommand.execute(modelStub));","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"    public void equals() {","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        AddDoctorCommand addDoctorCommand \u003d new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"                MAIN_DOCTOR.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"                MAIN_DOCTOR.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"                MAIN_DOCTOR.getDepartment());","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        AddDoctorCommand anotherAddDoctorCommand \u003d new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"                OTHER_DOCTOR.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"                OTHER_DOCTOR.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"                OTHER_DOCTOR.getDepartment());","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"        assertEquals(addDoctorCommand, addDoctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(1, addDoctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(null, addDoctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"        // different doctors -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(addDoctorCommand, anotherAddDoctorCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"yyhangz"},"content":"     * A Model stub that contains a single doctor.","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"yyhangz"},"content":"    private static class ModelStubWithDoctor extends CommandTestUtil.ModelStub {","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"yyhangz"},"content":"        private final Doctor doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"yyhangz"},"content":"        private int counter \u003d 1;","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"yyhangz"},"content":"        ModelStubWithDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"yyhangz"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"yyhangz"},"content":"            this.doctor \u003d doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"yyhangz"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"yyhangz"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"yyhangz"},"content":"            return this.doctor.equals(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"yyhangz"},"content":"        public boolean hasNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"yyhangz"},"content":"            return true;","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"yyhangz"},"content":"        public int getNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"yyhangz"},"content":"            return counter++;","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"yyhangz"},"content":"     * A Model stub that always accept the doctor being added.","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"yyhangz"},"content":"    private static class ModelStubAcceptingDoctorAdded extends CommandTestUtil.ModelStub {","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"        final ArrayList\u003cDoctor\u003e doctorsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"        private int counter \u003d 1;","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"yyhangz"},"content":"            return doctorsAdded.stream().anyMatch(doctor::equals);","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"            doctorsAdded.add(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"        public boolean hasNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"            return doctorsAdded.size() \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS;","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"        public int getNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"            return counter++;","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"            return new AddressBook();","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"yyhangz"},"content":"     * A Model stub that always accept the doctor being added.","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"yyhangz"},"content":"    private static class ModelStubWithFullList extends CommandTestUtil.ModelStub {","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"yyhangz"},"content":"        // Returns false to simulate the fact that list is already filled to max","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"yyhangz"},"content":"        public boolean hasNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"yyhangz"},"content":"            return false;","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"yyhangz"},"content":"        public int getNewDoctorId() {","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"yyhangz"},"content":"            return 2;","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"yyhangz"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"yyhangz"},"content":"            return new AddressBook();","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"yyhangz":191}},{"path":"src/test/java/gomedic/logic/commands/addcommand/AddDoctorIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"public class AddDoctorIntegrationTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private Model model;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    public void execute_newDoctor_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        Doctor validDoctor \u003d new DoctorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"                .withId(model.getNewDoctorId())","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"                .withName(\"a new name here\")","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"                .withPhone(\"123098\")","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"                .withDepartment(\"testing\")","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"                .build();","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        expectedModel.addDoctor(validDoctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.assertCommandSuccess(","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"                new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"                        validDoctor.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                        validDoctor.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"                        validDoctor.getDepartment()),","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"                model,","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"                String.format(AddDoctorCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"                        validDoctor),","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"                expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"yyhangz":49}},{"path":"src/test/java/gomedic/logic/commands/addcommand/AddPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.OTHER_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandResult;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"import gomedic.testutil.modelbuilder.PatientBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"public class AddPatientCommandTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"            new AddPatientCommand(null, null, null, null, null, null,","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"                null, null));","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"        AddPatientCommandTest.ModelStubAcceptingPatientAdded modelStub \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"            new AddPatientCommandTest.ModelStubAcceptingPatientAdded();","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"        CommandResult commandResult \u003d new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getMedicalConditions()","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        ).execute(modelStub);","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(String.format(","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"            AddPatientCommand.MESSAGE_SUCCESS, validPatient),","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"            commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(List.of(validPatient), modelStub.patientsAdded);","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"        CommandTestUtil.ModelStub modelStub \u003d new AddPatientCommandTest.ModelStubWithPatient(validPatient);","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getMedicalConditions()","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"        );","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"            AddPatientCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addPatientCommand.execute(modelStub));","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"    public void execute_addNewPatientIntoFullList_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"        CommandTestUtil.ModelStub modelStub \u003d new AddPatientCommandTest.ModelStubWithFullList();","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"            validPatient.getMedicalConditions()","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"        );","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"            AddPatientCommand.MESSAGE_MAXIMUM_CAPACITY_EXCEEDED, () -\u003e addPatientCommand.execute(modelStub));","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"    public void equals() {","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"            MAIN_PATIENT.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"            MAIN_PATIENT.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"            MAIN_PATIENT.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"            MAIN_PATIENT.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"            MAIN_PATIENT.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"            MAIN_PATIENT.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"            MAIN_PATIENT.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"            MAIN_PATIENT.getMedicalConditions());","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"        AddPatientCommand anotherAddPatientCommand \u003d new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"            OTHER_PATIENT.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"            OTHER_PATIENT.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"            OTHER_PATIENT.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"            OTHER_PATIENT.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"            OTHER_PATIENT.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"            OTHER_PATIENT.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"            OTHER_PATIENT.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"            OTHER_PATIENT.getMedicalConditions());","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(addPatientCommand, addPatientCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"        assertNotEquals(1, addPatientCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"        assertNotEquals(null, addPatientCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"        // different patients -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"        assertNotEquals(addPatientCommand, anotherAddPatientCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"     * A Model stub that contains a single patient.","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"    private static class ModelStubWithPatient extends CommandTestUtil.ModelStub {","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"        private final Patient patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"        private int counter \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"        ModelStubWithPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"            return this.patient.equals(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"radiankrisno"},"content":"        public boolean hasNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"radiankrisno"},"content":"            return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"radiankrisno"},"content":"        public int getNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"radiankrisno"},"content":"            return counter++;","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":159,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":161,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"radiankrisno"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"radiankrisno"},"content":"    private static class ModelStubAcceptingPatientAdded extends CommandTestUtil.ModelStub {","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"radiankrisno"},"content":"        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"radiankrisno"},"content":"        private int counter \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"radiankrisno"},"content":"            return patientsAdded.stream().anyMatch(patient::equals);","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"radiankrisno"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"radiankrisno"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"radiankrisno"},"content":"            patientsAdded.add(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"        public boolean hasNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"radiankrisno"},"content":"            return patientsAdded.size() \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS;","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"radiankrisno"},"content":"        public int getNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"radiankrisno"},"content":"            return counter++;","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"radiankrisno"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"radiankrisno"},"content":"            return new AddressBook();","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"radiankrisno"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"radiankrisno"},"content":"    private static class ModelStubWithFullList extends CommandTestUtil.ModelStub {","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"radiankrisno"},"content":"        // Returns false to simulate the fact that list is already filled to max","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"radiankrisno"},"content":"        public boolean hasNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"radiankrisno"},"content":"            return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"radiankrisno"},"content":"        public int getNewPatientId() {","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"radiankrisno"},"content":"            return 2;","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"radiankrisno"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"radiankrisno"},"content":"            return new AddressBook();","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":216,"yyhangz":1}},{"path":"src/test/java/gomedic/logic/commands/addcommand/AddPatientIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.addcommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.testutil.modelbuilder.PatientBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"public class AddPatientIntegrationTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    private Model model;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    public void execute_newPatient_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        Patient validPatient \u003d new PatientBuilder()","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"            .withId(model.getNewPatientId())","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"            .withName(\"a new name here\")","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"            .withPhone(\"123098\")","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"            .withAge(\"40\")","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"            .withGender(\"M\")","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"            .withBloodType(\"B\")","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"            .withHeight(\"175\")","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"            .withWeight(\"65\")","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"            .withMedicalConditions(new HashSet\u003cTag\u003e())","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"            .build();","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        expectedModel.addPatient(validPatient);","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        CommandTestUtil.assertCommandSuccess(","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"            new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"                validPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"                validPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"                validPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"                validPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"                validPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"                validPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"                validPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"                validPatient.getMedicalConditions()),","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"            model,","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"            String.format(AddPatientCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"                validPatient),","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"            expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":62}},{"path":"src/test/java/gomedic/logic/commands/clearcommand/ClearActivityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.clearcommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"public class ClearActivityCommandTest {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"        assertCommandSuccess(new ClearActivityCommand(), model, ClearActivityCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        AddressBook newAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        ReadOnlyAddressBook oldAddressBook \u003d model.getAddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setDoctors(oldAddressBook.getDoctorListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setPatients(oldAddressBook.getPatientListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        expectedModel.setAddressBook(newAddressBook);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"        assertCommandSuccess(new ClearActivityCommand(), model, ClearActivityCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"radiankrisno":37}},{"path":"src/test/java/gomedic/logic/commands/clearcommand/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.clearcommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"radiankrisno":1,"simonjulianl":6,"-":25}},{"path":"src/test/java/gomedic/logic/commands/clearcommand/ClearDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.clearcommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"public class ClearDoctorCommandTest {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"        assertCommandSuccess(new ClearDoctorCommand(), model, ClearDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        AddressBook newAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        ReadOnlyAddressBook oldAddressBook \u003d model.getAddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setActivities(oldAddressBook.getActivityListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setPatients(oldAddressBook.getPatientListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        expectedModel.setAddressBook(newAddressBook);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"        assertCommandSuccess(new ClearDoctorCommand(), model, ClearDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"radiankrisno":37}},{"path":"src/test/java/gomedic/logic/commands/clearcommand/ClearPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.clearcommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"public class ClearPatientCommandTest {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"        assertCommandSuccess(new ClearPatientCommand(), model, ClearPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        AddressBook newAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        ReadOnlyAddressBook oldAddressBook \u003d model.getAddressBook();","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setDoctors(oldAddressBook.getDoctorListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"        newAddressBook.setActivities(oldAddressBook.getActivityListSortedById());","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        expectedModel.setAddressBook(newAddressBook);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"        assertCommandSuccess(new ClearPatientCommand(), model, ClearPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"radiankrisno":37}},{"path":"src/test/java/gomedic/logic/commands/deletecommand/DeleteActivityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.deletecommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":" * {@code DeleteActivityCommand}.","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"public class DeleteActivityCommandTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(activityToDelete.getActivityId());","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        expectedModel.deleteActivity(activityToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        CommandTestUtil.assertCommandSuccess(deleteActivityCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(new ActivityId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"        CommandTestUtil.assertCommandFailure(deleteActivityCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        CommandTestUtil.showActivityAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(activityToDelete.getActivityId());","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        expectedModel.deleteActivity(activityToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        showNoActivity(expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        CommandTestUtil.assertCommandSuccess(deleteActivityCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"    public void equals() {","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        DeleteActivityCommand deleteFirstCommand \u003d new DeleteActivityCommand(new ActivityId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        // same id -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        DeleteActivityCommand deleteFirstCommandCopy \u003d new DeleteActivityCommand(new ActivityId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(1, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(null, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"    private void showNoActivity(Model model) {","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        model.updateFilteredActivitiesList(p -\u003e false);","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(model.getFilteredActivityList().isEmpty());","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"simonjulianl":88,"yyhangz":1}},{"path":"src/test/java/gomedic/logic/commands/deletecommand/DeleteDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.deletecommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":" * {@code DeleteDoctorCommand}.","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"public class DeleteDoctorCommandTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorToDelete \u003d model.getFilteredDoctorList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(doctorToDelete.getId());","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(DeleteDoctorCommand.MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        expectedModel.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.assertCommandSuccess(deleteDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(new DoctorId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.assertCommandFailure(deleteDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.showDoctorAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorToDelete \u003d model.getFilteredDoctorList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(doctorToDelete.getId());","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(DeleteDoctorCommand.MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        expectedModel.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        showNoDoctor(expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        CommandTestUtil.assertCommandSuccess(deleteDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    public void equals() {","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        DeleteDoctorCommand deleteFirstCommand \u003d new DeleteDoctorCommand(new DoctorId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"        // same id -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        DeleteDoctorCommand deleteFirstCommandCopy \u003d new DeleteDoctorCommand(new DoctorId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(1, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(null, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"    private void showNoDoctor(Model model) {","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"        model.updateFilteredDoctorList(p -\u003e false);","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"        assertTrue(model.getFilteredDoctorList().isEmpty());","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":88}},{"path":"src/test/java/gomedic/logic/commands/deletecommand/DeletePatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.deletecommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.PatientId;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"public class DeletePatientCommandTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(patientToDelete.getId());","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"        CommandTestUtil.assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(new PatientId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"        CommandTestUtil.assertCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"        CommandTestUtil.showPatientAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(patientToDelete.getId());","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"        showNoPatient(expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"        CommandTestUtil.assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"    public void equals() {","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"        DeletePatientCommand deleteFirstCommand \u003d new DeletePatientCommand(new PatientId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"        // same id -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"        DeletePatientCommand deleteFirstCommandCopy \u003d new DeletePatientCommand(new PatientId(999));","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"        assertNotEquals(1, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"        assertNotEquals(null, deleteFirstCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"    private void showNoPatient(Model model) {","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"        model.updateFilteredPatientList(p -\u003e false);","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(model.getFilteredPatientList().isEmpty());","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":89}},{"path":"src/test/java/gomedic/logic/commands/editcommand/EditActivityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.editcommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.DESC_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.DESC_PAPER_REVIEW;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.showActivityAtIndex;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.PAPER_REVIEW;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.index.Index;","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.clearcommand.ClearCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.editdescriptorbuilder.EditActivityDescriptorBuilder;","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.modelbuilder.ActivityBuilder;","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"public class EditActivityCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        Activity editedActivity \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"                new ActivityBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"                        .withStartTime(\"15/07/2000 15:00\")","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"                        .withEndTime(\"15/07/2000 16:00\")","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                        .withTitle(\"just a title\")","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                        .withDescription(\"some descriptions\")","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                        .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptor \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityDescriptorBuilder(editedActivity).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(editedActivity.getActivityId(), descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(EditActivityCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        expectedModel.setActivity(model.getFilteredActivityList().get(0), editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    public void execute_someConflictingTiming_throwsConflictingTiming() {","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        Index indexLastActivity \u003d Index.fromOneBased(model.getFilteredActivityList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        Activity lastActivity \u003d model.getFilteredActivityList().get(indexLastActivity.getZeroBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        Id targetId \u003d lastActivity.getActivityId();","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"                .withEndTime(MEETING.getEndTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        assertCommandFailure(editActivityCommand, model, Messages.MESSAGE_CONFLICTING_ACTIVITY);","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        Activity editedActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        Id targetId \u003d editedActivity.getActivityId();","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand editActivityCommand \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityCommand(targetId, new EditActivityCommand.EditActivityDescriptor());","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(EditActivityCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"        showActivityAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"        Activity activityInFilteredList \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        Activity editedActivity \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"                .withId(activityInFilteredList.getActivityId().getIdNumber())","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(activityInFilteredList.getTitle().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(activityInFilteredList.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"                .withEndTime(activityInFilteredList.getEndTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"                .withDescription(PAPER_REVIEW.getDescription().toString()).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(activityInFilteredList.getActivityId(),","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"                        .withDescription(PAPER_REVIEW.getDescription().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"                        .build());","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(EditActivityCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"        expectedModel.setActivity(model.getFilteredActivityList().get(0), editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"    public void execute_invalidDoctorIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"        // Test with doctor id of 999 since it is not in typical address book","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"        Id invalidId \u003d new ActivityId(999);","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(MEETING.getTitle().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(invalidId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"        assertCommandFailure(editActivityCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_ID);","lastModifiedDate":"2021-10-15"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"        // Use the details of first doctor in typical doctors list as the source of comparison","lastModifiedDate":"2021-10-15"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        final EditActivityCommand standardCommand \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityCommand(MEETING.getActivityId(), DESC_MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor copyDescriptor \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityCommand.EditActivityDescriptor(DESC_MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand commandWithSameValues \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityCommand(MEETING.getActivityId(), copyDescriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(commandWithSameValues, standardCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(standardCommand, standardCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(standardCommand, null);","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(new ClearCommand(), standardCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(new EditActivityCommand(PAPER_REVIEW.getActivityId(), DESC_MEETING), standardCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(new EditActivityCommand(MEETING.getActivityId(), DESC_PAPER_REVIEW), standardCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":154,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"simonjulianl":154}},{"path":"src/test/java/gomedic/logic/commands/editcommand/EditActivityDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.editcommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.DESC_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.DESC_PAPER_REVIEW;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.editdescriptorbuilder.EditActivityDescriptorBuilder;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"public class EditActivityDescriptorTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityCommand.EditActivityDescriptor(DESC_MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(descriptorWithSameValues, DESC_MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(DESC_MEETING, DESC_MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(DESC_MEETING, null);","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(DESC_MEETING, 5);","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(DESC_MEETING, DESC_PAPER_REVIEW);","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        // different field -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor editedMainDoctor \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"                new EditActivityDescriptorBuilder(DESC_MEETING)","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"                        .withTitle(\"another title\")","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"                        .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(editedMainDoctor, DESC_MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"simonjulianl":40}},{"path":"src/test/java/gomedic/logic/commands/editcommand/EditDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.editcommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.commands.CommandTestUtil.DESC_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.commands.CommandTestUtil.DESC_OTHER_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.index.Index;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.editdescriptorbuilder.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"public class EditDoctorCommandTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        Doctor editedDoctor \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"                new DoctorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"                        .withName(\"Different Name\")","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"                        .withPhone(\"00000000\")","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                        .withDepartment(\"Different department\")","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"                        .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder(editedDoctor).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(editedDoctor.getId(), descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(EditDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        // Edits some fields of the last doctor (in typicalDoctors)","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        // with the fields of the 2nd doctor (in typicalDoctors)","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        Index indexLastDoctor \u003d Index.fromOneBased(model.getFilteredDoctorList().size());","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        Doctor lastDoctor \u003d model.getFilteredDoctorList().get(indexLastDoctor.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        Id targetId \u003d lastDoctor.getId();","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        DoctorBuilder doctorInList \u003d new DoctorBuilder(lastDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        Doctor editedDoctor \u003d doctorInList.withName(TypicalPersons.OTHER_DOCTOR.getName().fullName)","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"                .withPhone(TypicalPersons.OTHER_DOCTOR.getPhone().value).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"                .withName(TypicalPersons.OTHER_DOCTOR.getName().fullName)","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"                .withPhone(TypicalPersons.OTHER_DOCTOR.getPhone().value).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(EditDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        expectedModel.setDoctor(lastDoctor, editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        Doctor editedDoctor \u003d model.getFilteredDoctorList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"        Id targetId \u003d editedDoctor.getId();","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand editDoctorCommand \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"                new EditDoctorCommand(targetId, new EditDoctorCommand.EditDoctorDescriptor());","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(EditDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"        showDoctorAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorInFilteredList \u003d model.getFilteredDoctorList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(doctorInFilteredList)","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"                .withName(TypicalPersons.OTHER_DOCTOR.getName().fullName).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(TypicalPersons.MAIN_DOCTOR.getId(),","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"                new EditDoctorDescriptorBuilder().withName(TypicalPersons.OTHER_DOCTOR.getName().fullName).build());","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(EditDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"yyhangz"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"yyhangz"},"content":"    public void execute_invalidDoctorIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"yyhangz"},"content":"        // Test with doctor id of 999 since it is not in typical address book","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"yyhangz"},"content":"        Id invalidId \u003d new DoctorId(999);","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"yyhangz"},"content":"                .withName(TypicalPersons.OTHER_DOCTOR.getName().fullName)","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-09-28"},{"lineNumber":121,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(invalidId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"yyhangz"},"content":"        assertCommandFailure(editDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_ID);","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"yyhangz"},"content":"        // Use the details of first doctor in typical doctors list as the source of comparison","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"yyhangz"},"content":"        final EditDoctorCommand standardCommand \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"yyhangz"},"content":"                new EditDoctorCommand(TypicalPersons.MAIN_DOCTOR.getId(), DESC_MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":133,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor copyDescriptor \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"yyhangz"},"content":"                new EditDoctorCommand.EditDoctorDescriptor(DESC_MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand commandWithSameValues \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"yyhangz"},"content":"                new EditDoctorCommand(TypicalPersons.MAIN_DOCTOR.getId(), copyDescriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"yyhangz"},"content":"        assertEquals(commandWithSameValues, standardCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"        assertEquals(standardCommand, standardCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(standardCommand, null);","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(new ClearCommand(), standardCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(new EditDoctorCommand(TypicalPersons.OTHER_DOCTOR.getId(), DESC_OTHER_DOCTOR), standardCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(new EditDoctorCommand(TypicalPersons.MAIN_DOCTOR.getId(), DESC_OTHER_DOCTOR), standardCommand);","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"radiankrisno":1,"simonjulianl":12,"yyhangz":75,"-":67}},{"path":"src/test/java/gomedic/logic/commands/editcommand/EditDoctorDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.editcommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.commands.CommandTestUtil.DESC_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.commands.CommandTestUtil.DESC_OTHER_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.editdescriptorbuilder.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"public class EditDoctorDescriptorTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    public void equals() {","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"                new EditDoctorCommand.EditDoctorDescriptor(DESC_MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"        assertEquals(descriptorWithSameValues, DESC_MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"        assertEquals(DESC_MAIN_DOCTOR, DESC_MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(DESC_MAIN_DOCTOR, null);","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(DESC_MAIN_DOCTOR, 5);","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(DESC_MAIN_DOCTOR, DESC_OTHER_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor editedMainDoctor \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"                new EditDoctorDescriptorBuilder(DESC_MAIN_DOCTOR)","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"                        .withName(TypicalPersons.OTHER_DOCTOR.getName().fullName)","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"                        .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(editedMainDoctor, DESC_MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"        editedMainDoctor \u003d new EditDoctorDescriptorBuilder(DESC_MAIN_DOCTOR)","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"                .withPhone(TypicalPersons.OTHER_DOCTOR.getPhone().value).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(editedMainDoctor, DESC_MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        // different department -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        editedMainDoctor \u003d new EditDoctorDescriptorBuilder(DESC_MAIN_DOCTOR)","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"                .withDepartment(TypicalPersons.OTHER_DOCTOR.getDepartment().departmentName).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(editedMainDoctor, DESC_MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"yyhangz":51}},{"path":"src/test/java/gomedic/logic/commands/listcommand/ListActivityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.commands.listcommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.commands.CommandTestUtil.showActivityAtIndex;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"class ListActivityCommandTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"        assertCommandSuccess(new ListActivityCommand(), model, ListActivityCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        showActivityAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        assertCommandSuccess(new ListActivityCommand(), model, ListActivityCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"simonjulianl":12,"-":23}},{"path":"src/test/java/gomedic/logic/commands/listcommand/ListDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.commands.listcommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"public class ListDoctorCommandTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    private Model model;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        assertCommandSuccess(new ListDoctorCommand(), model, ListDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"        showDoctorAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        assertCommandSuccess(new ListDoctorCommand(), model, ListDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"yyhangz":35}},{"path":"src/test/java/gomedic/logic/commands/listcommand/ListPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.commands.listcommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"public class ListPatientCommandTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"    private Model model;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        showPatientAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":35}},{"path":"src/test/java/gomedic/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.FindCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearActivityCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearDoctorCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.clearcommand.ClearPatientCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.deletecommand.DeleteDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.listcommand.ListActivityCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.listcommand.ListDoctorCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.listcommand.ListPatientCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.util.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.CommandGenerationUtils;","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.editdescriptorbuilder.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    public void parseCommand_addDoctor() throws Exception {","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        Doctor doctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        AddDoctorCommand command \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                (AddDoctorCommand) parser.parseCommand(CommandGenerationUtils.getAddDoctorCommand(doctor));","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        assertEquals(new AddDoctorCommand(doctor.getName(), doctor.getPhone(), doctor.getDepartment()), command);","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    public void parseCommand_clearActivity() throws Exception {","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(parser.parseCommand(ClearActivityCommand.COMMAND_WORD) instanceof ClearActivityCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(parser.parseCommand(ClearActivityCommand.COMMAND_WORD + \" 3\") instanceof ClearActivityCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"    public void parseCommand_clearDoctor() throws Exception {","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(parser.parseCommand(ClearDoctorCommand.COMMAND_WORD) instanceof ClearDoctorCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(parser.parseCommand(ClearDoctorCommand.COMMAND_WORD + \" 3\") instanceof ClearDoctorCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"    public void parseCommand_clearPatient() throws Exception {","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(parser.parseCommand(ClearPatientCommand.COMMAND_WORD) instanceof ClearPatientCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(parser.parseCommand(ClearPatientCommand.COMMAND_WORD + \" 3\") instanceof ClearPatientCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        DoctorId testId \u003d new DoctorId(1);","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        DeleteDoctorCommand command \u003d (DeleteDoctorCommand) parser.parseCommand(","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"                DeleteDoctorCommand.COMMAND_WORD + \" \" + testId.toString());","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        assertEquals(new DeleteDoctorCommand(testId), command);","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"    public void parseCommand_editDoctor() throws Exception {","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"        Doctor doctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder(doctor).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand command \u003d (EditDoctorCommand) parser.parseCommand(EditDoctorCommand.COMMAND_WORD","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"                + \" \" + CliSyntax.PREFIX_ID + doctor.getId()","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"                + \" \" + CommandGenerationUtils.getEditDoctorDescriptorDetails(descriptor));","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"        assertEquals(new EditDoctorCommand(doctor.getId(), descriptor), command);","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"                FindCommand.COMMAND_WORD + \" \" + String.join(\" \", keywords));","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate\u003c\u003e(keywords)), command);","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"yyhangz"},"content":"    public void parseCommand_listDoctor() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"yyhangz"},"content":"        assertTrue(parser.parseCommand(ListDoctorCommand.COMMAND_WORD) instanceof ListDoctorCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"yyhangz"},"content":"        assertTrue(parser.parseCommand(ListDoctorCommand.COMMAND_WORD + \" 3\") instanceof ListDoctorCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"    public void parseCommand_listPatient() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD) instanceof ListPatientCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD + \" 3\") instanceof ListPatientCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"    public void parseCommand_listActivity() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(parser.parseCommand(ListActivityCommand.COMMAND_WORD) instanceof ListActivityCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(parser.parseCommand(ListActivityCommand.COMMAND_WORD + \" 3\") instanceof ListActivityCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class,","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"                String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"                        Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"                        HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"        String command \u003d \"unknownCommand\";","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class,","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"                String.format(Messages.MESSAGE_UNKNOWN_COMMAND, command), () -\u003e parser.parseCommand(command));","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"radiankrisno":29,"simonjulianl":80,"yyhangz":31}},{"path":"src/test/java/gomedic/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"simonjulianl":1,"-":149}},{"path":"src/test/java/gomedic/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.Command;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"simonjulianl":3,"-":35}},{"path":"src/test/java/gomedic/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.FindCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.util.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    private final FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"                new FindCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"simonjulianl":9,"yyhangz":1,"-":25}},{"path":"src/test/java/gomedic/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Age;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.BloodType;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Gender;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Height;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.patient.PatientId;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Weight;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"public class ParserUtilTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_TITLE_MEETING \u003d \"MEETING\";","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_START_TIME_MEETING \u003d \"15/07/2000 15:00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    public static final String VALID_MEETING_DESCRIPTION \u003d \"SOME LONG DESCRIPTION\";","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_START_TIME_MEETING \u003d \"15/07/2000-15:00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_END_TIME_MEETING \u003d \"15/07/2000 16-00\";","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_TITLE_MEETING \u003d \"MEETING\".repeat(100);","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    public static final String INVALID_DESCRIPTION \u003d \"SOME LONG DESCRIPTION\".repeat(1000);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"    public static final String VALID_DEPARTMENT \u003d \"Neurology\";","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"    public static final String INVALID_DEPARTMENT \u003d \"Neuro**logy\";","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_AGE \u003d \"45\";","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_AGE \u003d \"1000\";","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_BLOODTYPE \u003d \"AB\";","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_BLOODTYPE \u003d \"ABC\";","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_GENDER \u003d \"M\";","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_GENDER \u003d \"ABC\";","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_HEIGHT \u003d \"175\";","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_HEIGHT \u003d \"1000\";","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_WEIGHT \u003d \"76\";","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_WEIGHT \u003d \"1000\";","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    public static final String VALID_MEDICALCONDITIONS \u003d \"heart failure\";","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"    public static final String INVALID_MEDICALCONDITIONS \u003d \"heart**\";","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_ACTIVITY_ID \u003d \"A001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_DOCTOR_ID \u003d \"D001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_PATIENT_ID \u003d \"P001\";","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class,","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"                ParserUtil.MESSAGE_INVALID_INDEX, () -\u003e ParserUtil.parseIndex(","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"                        Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"        // No whitespaces","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"    public void parseDepartment_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDepartment(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"    public void parseDepartment_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDepartment(INVALID_DEPARTMENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"    public void parseDepartment_validValueWithoutWhitespace_returnsDepartment() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"        Department expectedDepartment \u003d new Department(VALID_DEPARTMENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"        assertEquals(expectedDepartment, ParserUtil.parseDepartment(VALID_DEPARTMENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"    public void parseDepartment_validValueWithWhitespace_returnsTrimmedDepartment() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"        String departmentWithWhitespace \u003d WHITESPACE + VALID_DEPARTMENT + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"        Department expectedDepartment \u003d new Department(VALID_DEPARTMENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"        assertEquals(expectedDepartment, ParserUtil.parseDepartment(departmentWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"    public void parseAge_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAge(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"    public void parseAge_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAge(INVALID_AGE));","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"    public void parseAge_validValueWithoutWhitespace_returnsAge() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"        Age expectedAge \u003d new Age(VALID_AGE);","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedAge, ParserUtil.parseAge(VALID_AGE));","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"radiankrisno"},"content":"    public void parseAge_validValueWithWhitespace_returnsTrimmedAge() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"radiankrisno"},"content":"        String ageWithWhitespace \u003d WHITESPACE + VALID_AGE + WHITESPACE;","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"radiankrisno"},"content":"        Age expectedAge \u003d new Age(VALID_AGE);","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedAge, ParserUtil.parseAge(ageWithWhitespace));","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"radiankrisno"},"content":"    public void parseBloodType_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBloodType(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"radiankrisno"},"content":"    public void parseBloodType_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBloodType(INVALID_BLOODTYPE));","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"radiankrisno"},"content":"    public void parseBloodType_validValueWithoutWhitespace_returnsBloodType() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"radiankrisno"},"content":"        BloodType expectedBloodType \u003d new BloodType(VALID_BLOODTYPE);","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedBloodType, ParserUtil.parseBloodType(VALID_BLOODTYPE));","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"radiankrisno"},"content":"    public void parseBloodType_validValueWithWhitespace_returnsTrimmedBloodType() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"radiankrisno"},"content":"        String bloodTypeWithWhitespace \u003d WHITESPACE + VALID_BLOODTYPE + WHITESPACE;","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"radiankrisno"},"content":"        BloodType expectedBloodType \u003d new BloodType(VALID_BLOODTYPE);","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedBloodType, ParserUtil.parseBloodType(bloodTypeWithWhitespace));","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"radiankrisno"},"content":"    public void parseGender_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":218,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"radiankrisno"},"content":"    public void parseGender_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));","lastModifiedDate":"2021-10-11"},{"lineNumber":222,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":223,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":224,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":225,"author":{"gitId":"radiankrisno"},"content":"    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":226,"author":{"gitId":"radiankrisno"},"content":"        Gender expectedGender \u003d new Gender(VALID_GENDER);","lastModifiedDate":"2021-10-11"},{"lineNumber":227,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));","lastModifiedDate":"2021-10-11"},{"lineNumber":228,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":229,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":231,"author":{"gitId":"radiankrisno"},"content":"    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":232,"author":{"gitId":"radiankrisno"},"content":"        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;","lastModifiedDate":"2021-10-11"},{"lineNumber":233,"author":{"gitId":"radiankrisno"},"content":"        Gender expectedGender \u003d new Gender(VALID_GENDER);","lastModifiedDate":"2021-10-11"},{"lineNumber":234,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedGender, ParserUtil.parseGender(genderWithWhitespace));","lastModifiedDate":"2021-10-11"},{"lineNumber":235,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":236,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":237,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":238,"author":{"gitId":"radiankrisno"},"content":"    public void parseHeight_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":239,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseHeight(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":240,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":241,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":242,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":243,"author":{"gitId":"radiankrisno"},"content":"    public void parseHeight_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":244,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_HEIGHT));","lastModifiedDate":"2021-10-11"},{"lineNumber":245,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":246,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":247,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":248,"author":{"gitId":"radiankrisno"},"content":"    public void parseHeight_validValueWithoutWhitespace_returnsHeight() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":249,"author":{"gitId":"radiankrisno"},"content":"        Height expectedHeight \u003d new Height(VALID_HEIGHT);","lastModifiedDate":"2021-10-11"},{"lineNumber":250,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedHeight, ParserUtil.parseHeight(VALID_HEIGHT));","lastModifiedDate":"2021-10-11"},{"lineNumber":251,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":252,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":253,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":254,"author":{"gitId":"radiankrisno"},"content":"    public void parseHeight_validValueWithWhitespace_returnsTrimmedHeight() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":255,"author":{"gitId":"radiankrisno"},"content":"        String genderWithWhitespace \u003d WHITESPACE + VALID_HEIGHT + WHITESPACE;","lastModifiedDate":"2021-10-11"},{"lineNumber":256,"author":{"gitId":"radiankrisno"},"content":"        Height expectedHeight \u003d new Height(VALID_HEIGHT);","lastModifiedDate":"2021-10-11"},{"lineNumber":257,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedHeight, ParserUtil.parseHeight(genderWithWhitespace));","lastModifiedDate":"2021-10-11"},{"lineNumber":258,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":259,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":260,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":261,"author":{"gitId":"radiankrisno"},"content":"    public void parseWeight_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":262,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWeight(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":263,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":264,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":265,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":266,"author":{"gitId":"radiankrisno"},"content":"    public void parseWeight_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":267,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_WEIGHT));","lastModifiedDate":"2021-10-11"},{"lineNumber":268,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":269,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":270,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":271,"author":{"gitId":"radiankrisno"},"content":"    public void parseWeight_validValueWithoutWhitespace_returnsWeight() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":272,"author":{"gitId":"radiankrisno"},"content":"        Weight expectedWeight \u003d new Weight(VALID_WEIGHT);","lastModifiedDate":"2021-10-11"},{"lineNumber":273,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedWeight, ParserUtil.parseWeight(VALID_WEIGHT));","lastModifiedDate":"2021-10-11"},{"lineNumber":274,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":275,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":276,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":277,"author":{"gitId":"radiankrisno"},"content":"    public void parseWeight_validValueWithWhitespace_returnsTrimmedWeight() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":278,"author":{"gitId":"radiankrisno"},"content":"        String genderWithWhitespace \u003d WHITESPACE + VALID_WEIGHT + WHITESPACE;","lastModifiedDate":"2021-10-11"},{"lineNumber":279,"author":{"gitId":"radiankrisno"},"content":"        Weight expectedWeight \u003d new Weight(VALID_WEIGHT);","lastModifiedDate":"2021-10-11"},{"lineNumber":280,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedWeight, ParserUtil.parseWeight(genderWithWhitespace));","lastModifiedDate":"2021-10-11"},{"lineNumber":281,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":282,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":283,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":284,"author":{"gitId":"simonjulianl"},"content":"    public void parseTitle_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":285,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":286,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":287,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":288,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":289,"author":{"gitId":"simonjulianl"},"content":"    public void parseTitle_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":290,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE_MEETING));","lastModifiedDate":"2021-10-09"},{"lineNumber":291,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":292,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":293,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":294,"author":{"gitId":"simonjulianl"},"content":"    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":295,"author":{"gitId":"simonjulianl"},"content":"        Title expectedTitle \u003d new Title(VALID_TITLE_MEETING);","lastModifiedDate":"2021-10-09"},{"lineNumber":296,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE_MEETING));","lastModifiedDate":"2021-10-09"},{"lineNumber":297,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":298,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":299,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":300,"author":{"gitId":"simonjulianl"},"content":"    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":301,"author":{"gitId":"simonjulianl"},"content":"        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE_MEETING + WHITESPACE;","lastModifiedDate":"2021-10-09"},{"lineNumber":302,"author":{"gitId":"simonjulianl"},"content":"        Title expectedTitle \u003d new Title(VALID_TITLE_MEETING);","lastModifiedDate":"2021-10-09"},{"lineNumber":303,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));","lastModifiedDate":"2021-10-09"},{"lineNumber":304,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":305,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":306,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":307,"author":{"gitId":"simonjulianl"},"content":"    public void parseDescription_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":308,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":309,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":310,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":311,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":312,"author":{"gitId":"simonjulianl"},"content":"    public void parseDescription_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":313,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));","lastModifiedDate":"2021-10-09"},{"lineNumber":314,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":315,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":316,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":317,"author":{"gitId":"simonjulianl"},"content":"    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":318,"author":{"gitId":"simonjulianl"},"content":"        Description expectedDescription \u003d new Description(VALID_MEETING_DESCRIPTION);","lastModifiedDate":"2021-10-09"},{"lineNumber":319,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_MEETING_DESCRIPTION));","lastModifiedDate":"2021-10-09"},{"lineNumber":320,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":321,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":322,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":323,"author":{"gitId":"simonjulianl"},"content":"    public void parseDescription_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":324,"author":{"gitId":"simonjulianl"},"content":"        String descriptionWithWhitespace \u003d WHITESPACE + VALID_MEETING_DESCRIPTION + WHITESPACE;","lastModifiedDate":"2021-10-09"},{"lineNumber":325,"author":{"gitId":"simonjulianl"},"content":"        Description expectedDescription \u003d new Description(VALID_MEETING_DESCRIPTION);","lastModifiedDate":"2021-10-09"},{"lineNumber":326,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));","lastModifiedDate":"2021-10-09"},{"lineNumber":327,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":328,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":329,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":330,"author":{"gitId":"simonjulianl"},"content":"    public void parseTime_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":331,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":332,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":333,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":334,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":335,"author":{"gitId":"simonjulianl"},"content":"    public void parseTime_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":336,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_START_TIME_MEETING));","lastModifiedDate":"2021-10-09"},{"lineNumber":337,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_END_TIME_MEETING));","lastModifiedDate":"2021-10-09"},{"lineNumber":338,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":339,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":340,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":341,"author":{"gitId":"simonjulianl"},"content":"    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":342,"author":{"gitId":"simonjulianl"},"content":"        Time expectedTime \u003d new Time(VALID_START_TIME_MEETING);","lastModifiedDate":"2021-10-09"},{"lineNumber":343,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedTime, ParserUtil.parseTime(VALID_START_TIME_MEETING));","lastModifiedDate":"2021-10-09"},{"lineNumber":344,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":345,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":346,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":347,"author":{"gitId":"simonjulianl"},"content":"    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":348,"author":{"gitId":"simonjulianl"},"content":"        String timeWithWhitespace \u003d WHITESPACE + VALID_START_TIME_MEETING + WHITESPACE;","lastModifiedDate":"2021-10-09"},{"lineNumber":349,"author":{"gitId":"simonjulianl"},"content":"        Time expectedTime \u003d new Time(VALID_START_TIME_MEETING);","lastModifiedDate":"2021-10-09"},{"lineNumber":350,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));","lastModifiedDate":"2021-10-09"},{"lineNumber":351,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":352,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":353,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":354,"author":{"gitId":"simonjulianl"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":355,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":356,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":357,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":358,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":359,"author":{"gitId":"simonjulianl"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":360,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2021-10-09"},{"lineNumber":361,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":362,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":363,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":364,"author":{"gitId":"simonjulianl"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":365,"author":{"gitId":"simonjulianl"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2021-10-09"},{"lineNumber":366,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2021-10-09"},{"lineNumber":367,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":368,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":369,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":370,"author":{"gitId":"simonjulianl"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":371,"author":{"gitId":"simonjulianl"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2021-10-09"},{"lineNumber":372,"author":{"gitId":"simonjulianl"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2021-10-09"},{"lineNumber":373,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2021-10-09"},{"lineNumber":374,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":375,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":376,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":377,"author":{"gitId":"simonjulianl"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":378,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":379,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":380,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":381,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":382,"author":{"gitId":"simonjulianl"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":383,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2021-10-09"},{"lineNumber":384,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":385,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":386,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":387,"author":{"gitId":"simonjulianl"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":388,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2021-10-09"},{"lineNumber":389,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":390,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":391,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":392,"author":{"gitId":"simonjulianl"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":393,"author":{"gitId":"simonjulianl"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2021-10-09"},{"lineNumber":394,"author":{"gitId":"simonjulianl"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2021-10-09"},{"lineNumber":395,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":396,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2021-10-09"},{"lineNumber":397,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":398,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":399,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":400,"author":{"gitId":"radiankrisno"},"content":"    public void parseMedicalCondition_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":401,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedicalConditions(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":402,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":403,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":404,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":405,"author":{"gitId":"radiankrisno"},"content":"    public void parseMedicalCondition_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":406,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2021-10-11"},{"lineNumber":407,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":408,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":409,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":410,"author":{"gitId":"radiankrisno"},"content":"    public void parseMedicalCondition_validValueWithoutWhitespace_returnsMedicalCondition() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":411,"author":{"gitId":"radiankrisno"},"content":"        Tag expectedMedicalCondition \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2021-10-11"},{"lineNumber":412,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedMedicalCondition, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2021-10-11"},{"lineNumber":413,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":414,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":415,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":416,"author":{"gitId":"radiankrisno"},"content":"    public void parseMedicalCondition_validValueWithWhitespace_returnsTrimmedMedicalCondition() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":417,"author":{"gitId":"radiankrisno"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2021-10-11"},{"lineNumber":418,"author":{"gitId":"radiankrisno"},"content":"        Tag expectedMedicalCondition \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2021-10-11"},{"lineNumber":419,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedMedicalCondition, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2021-10-11"},{"lineNumber":420,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":421,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":422,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":423,"author":{"gitId":"radiankrisno"},"content":"    public void parseMedicalConditions_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":424,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedicalConditions(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":425,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":426,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":427,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":428,"author":{"gitId":"radiankrisno"},"content":"    public void parseMedicalConditions_collectionWithInvalidMedicalConditions_throwsParseException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":429,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedicalConditions(Arrays","lastModifiedDate":"2021-10-11"},{"lineNumber":430,"author":{"gitId":"radiankrisno"},"content":"                .asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2021-10-11"},{"lineNumber":431,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":432,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":433,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":434,"author":{"gitId":"radiankrisno"},"content":"    public void parseMedicalConditions_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":435,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(ParserUtil.parseMedicalConditions(Collections.emptyList()).isEmpty());","lastModifiedDate":"2021-10-11"},{"lineNumber":436,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":437,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":438,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":439,"author":{"gitId":"radiankrisno"},"content":"    public void parseMedicalConditions_collectionWithValidMedicalConditions_returnsMedicalConditionSet()","lastModifiedDate":"2021-10-11"},{"lineNumber":440,"author":{"gitId":"radiankrisno"},"content":"            throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":441,"author":{"gitId":"radiankrisno"},"content":"        Set\u003cTag\u003e actualMedicalConditionSet \u003d ParserUtil.parseMedicalConditions(Arrays","lastModifiedDate":"2021-10-11"},{"lineNumber":442,"author":{"gitId":"radiankrisno"},"content":"                .asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2021-10-11"},{"lineNumber":443,"author":{"gitId":"radiankrisno"},"content":"        Set\u003cTag\u003e expectedMedicalConditionSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2021-10-11"},{"lineNumber":444,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":445,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(expectedMedicalConditionSet, actualMedicalConditionSet);","lastModifiedDate":"2021-10-11"},{"lineNumber":446,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":447,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":448,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":449,"author":{"gitId":"simonjulianl"},"content":"    void parseId_validString_testPassed() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":450,"author":{"gitId":"simonjulianl"},"content":"        Id validActivityId \u003d new ActivityId(VALID_ACTIVITY_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":451,"author":{"gitId":"simonjulianl"},"content":"        Id validDoctorId \u003d new DoctorId(VALID_DOCTOR_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":452,"author":{"gitId":"simonjulianl"},"content":"        Id validPatientId \u003d new PatientId(VALID_PATIENT_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":453,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":454,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(validActivityId, ParserUtil.parseId(VALID_ACTIVITY_ID));","lastModifiedDate":"2021-10-11"},{"lineNumber":455,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(validDoctorId, ParserUtil.parseId(VALID_DOCTOR_ID));","lastModifiedDate":"2021-10-11"},{"lineNumber":456,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(validPatientId, ParserUtil.parseId(VALID_PATIENT_ID));","lastModifiedDate":"2021-10-11"},{"lineNumber":457,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":458,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":459,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":460,"author":{"gitId":"simonjulianl"},"content":"    void parseId_invalidString_throwsParseException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":461,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseId(\"B001\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":462,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseId(\"X001\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":463,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseId(\"Z9999\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":464,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":465,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"radiankrisno":182,"simonjulianl":256,"yyhangz":27}},{"path":"src/test/java/gomedic/logic/parser/addcommandparser/AddActivityParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.MEETING;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.addcommand.AddActivityCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.CommandParserTestUtil;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"public class AddActivityParserTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    private final AddActivityCommandParser parser \u003d new AddActivityCommandParser();","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"        Activity expectedActivity \u003d MEETING;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.PREAMBLE_WHITESPACE","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION, new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getDescription()));","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        // multiple start time - last of the argument will be accepted","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_PAPER_REVIEW","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION, new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getDescription()));","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        // multiple end time","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_PAPER_REVIEW","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION, new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getDescription()));","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        // multiple title, last title accepted","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_PAPER_REVIEW","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION, new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getDescription()));","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        // multiple desc, last desc accepted","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION, new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getDescription()));","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        Activity expectedActivity \u003d MEETING;","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING, new AddActivityCommand(","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getStartTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getEndTime(),","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"                        expectedActivity.getTitle(),","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"                        new Description(\"\")));","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"                Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"                AddActivityCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"        // missing start time","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION,","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"        // missing end time","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION,","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"        // missing title","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION,","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"        // invalid time","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.INVALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION, Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"        // invalid title","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.INVALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION, Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"        // invalid desc","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_END_TIME_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.INVALID_DESC_DESCRIPTION, Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"simonjulianl":150}},{"path":"src/test/java/gomedic/logic/parser/addcommandparser/AddDoctorParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.CommandParserTestUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"public class AddDoctorParserTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    private final AddDoctorCommandParser parser \u003d new AddDoctorCommandParser();","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"        Doctor expectedDoctor \u003d MAIN_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.PREAMBLE_WHITESPACE","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR, new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getDepartment()));","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        // multiple name - last name will be accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_NAME_OTHER_DOCTOR","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR, new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getDepartment()));","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_PHONE_OTHER_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR, new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getDepartment()));","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        // multiple department, last department accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_OTHER_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR, new AddDoctorCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getPhone(),","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"                        expectedDoctor.getDepartment()));","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"                Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"                AddDoctorCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        // missing name","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR,","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        // missing phone","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR,","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"        // missing department","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR,","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"        // invalid name","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.INVALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"        // invalid phone","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.INVALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"yyhangz"},"content":"        // invalid department","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.INVALID_DESC_DEPARTMENT_MAIN_DOCTOR, Department.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"yyhangz":110}},{"path":"src/test/java/gomedic/logic/parser/addcommandparser/AddPatientParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.logic.parser.addcommandparser;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.commands.addcommand.AddPatientCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.logic.parser.CommandParserTestUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Age;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.BloodType;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Gender;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Height;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Weight;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"public class AddPatientParserTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    private final AddPatientCommandParser parser \u003d new AddPatientCommandParser();","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        Patient expectedPatient \u003d MAIN_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.PREAMBLE_WHITESPACE","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getMedicalConditions()));","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        // multiple name - last name will be accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"            CommandTestUtil.VALID_DESC_NAME_OTHER_PATIENT","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getMedicalConditions()));","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_PHONE_OTHER_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getMedicalConditions()));","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"        // multiple age, last age accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_AGE_OTHER_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getMedicalConditions()));","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"        // multiple blood type, last blood type accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_BLOODTYPE_OTHER_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getMedicalConditions()));","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"        // multiple gender, last gender accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_GENDER_OTHER_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getMedicalConditions()));","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"        // multiple height, last height accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_HEIGHT_OTHER_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":159,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":161,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getMedicalConditions()));","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"radiankrisno"},"content":"        // multiple weight, last weight accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_WEIGHT_OTHER_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, new AddPatientCommand(","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getName(),","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getPhone(),","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getAge(),","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getBloodType(),","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getGender(),","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getHeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getWeight(),","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"radiankrisno"},"content":"                expectedPatient.getMedicalConditions()));","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"radiankrisno"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"radiankrisno"},"content":"            Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"radiankrisno"},"content":"            AddPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"radiankrisno"},"content":"        // missing name","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT,","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"radiankrisno"},"content":"            expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"radiankrisno"},"content":"        // missing phone","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT,","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"radiankrisno"},"content":"            expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"radiankrisno"},"content":"        // missing age","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":218,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":222,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":223,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":224,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT,","lastModifiedDate":"2021-10-11"},{"lineNumber":225,"author":{"gitId":"radiankrisno"},"content":"            expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":226,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":227,"author":{"gitId":"radiankrisno"},"content":"        // missing blood type","lastModifiedDate":"2021-10-11"},{"lineNumber":228,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":229,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":231,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":232,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":233,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":234,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":235,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT,","lastModifiedDate":"2021-10-11"},{"lineNumber":236,"author":{"gitId":"radiankrisno"},"content":"            expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":237,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":238,"author":{"gitId":"radiankrisno"},"content":"        // missing gender","lastModifiedDate":"2021-10-11"},{"lineNumber":239,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":240,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":241,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":242,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":243,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":244,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":245,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":246,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT,","lastModifiedDate":"2021-10-11"},{"lineNumber":247,"author":{"gitId":"radiankrisno"},"content":"            expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":248,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":249,"author":{"gitId":"radiankrisno"},"content":"        // missing height","lastModifiedDate":"2021-10-11"},{"lineNumber":250,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":251,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":252,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":253,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":254,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":255,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":256,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":257,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT,","lastModifiedDate":"2021-10-11"},{"lineNumber":258,"author":{"gitId":"radiankrisno"},"content":"            expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":259,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":260,"author":{"gitId":"radiankrisno"},"content":"        // missing weight","lastModifiedDate":"2021-10-11"},{"lineNumber":261,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":262,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":263,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":264,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":265,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":266,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":267,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":268,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT,","lastModifiedDate":"2021-10-11"},{"lineNumber":269,"author":{"gitId":"radiankrisno"},"content":"            expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":270,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":271,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":272,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":273,"author":{"gitId":"radiankrisno"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-11"},{"lineNumber":274,"author":{"gitId":"radiankrisno"},"content":"        // invalid name","lastModifiedDate":"2021-10-11"},{"lineNumber":275,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":276,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.INVALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":277,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":278,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":279,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":280,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":281,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":282,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":283,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":284,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":285,"author":{"gitId":"radiankrisno"},"content":"        // invalid phone","lastModifiedDate":"2021-10-11"},{"lineNumber":286,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":287,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":288,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.INVALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":289,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":290,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":291,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":292,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":293,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":294,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":295,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":296,"author":{"gitId":"radiankrisno"},"content":"        // invalid age","lastModifiedDate":"2021-10-11"},{"lineNumber":297,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":298,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":299,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":300,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.INVALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":301,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":302,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":303,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":304,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":305,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":306,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":307,"author":{"gitId":"radiankrisno"},"content":"        // invalid blood type","lastModifiedDate":"2021-10-11"},{"lineNumber":308,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":309,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":310,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":311,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":312,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.INVALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":313,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":314,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":315,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":316,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":317,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":318,"author":{"gitId":"radiankrisno"},"content":"        // invalid gender","lastModifiedDate":"2021-10-11"},{"lineNumber":319,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":320,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":321,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":322,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":323,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":324,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.INVALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":325,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":326,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":327,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":328,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":329,"author":{"gitId":"radiankrisno"},"content":"        // invalid height","lastModifiedDate":"2021-10-11"},{"lineNumber":330,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":331,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":332,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":333,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":334,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":335,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":336,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.INVALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":337,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":338,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, Height.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":339,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":340,"author":{"gitId":"radiankrisno"},"content":"        // invalid weight","lastModifiedDate":"2021-10-11"},{"lineNumber":341,"author":{"gitId":"radiankrisno"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-11"},{"lineNumber":342,"author":{"gitId":"radiankrisno"},"content":"            CommandTestUtil.VALID_DESC_NAME_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":343,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":344,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_AGE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":345,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_BLOODTYPE_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":346,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_GENDER_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":347,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_HEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":348,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.INVALID_DESC_WEIGHT_MAIN_PATIENT","lastModifiedDate":"2021-10-11"},{"lineNumber":349,"author":{"gitId":"radiankrisno"},"content":"                + CommandTestUtil.VALID_DESC_MEDICALCONDITIONS_MAIN_PATIENT, Weight.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":350,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":351,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"radiankrisno":350,"yyhangz":1}},{"path":"src/test/java/gomedic/logic/parser/editcommandparser/EditActivityCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.logic.parser.editcommandparser;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.editcommand.EditActivityCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.CommandParserTestUtil;","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.editdescriptorbuilder.EditActivityDescriptorBuilder;","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"class EditActivityCommandParserTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditActivityCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    // Use doctor id 1 as the control id for comparison","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    private static final Id targetId \u003d new ActivityId(1);","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    private static final String PREFIXED_TARGET_ID \u003d \" \" + CliSyntax.PREFIX_ID + targetId;","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    private final EditActivityCommandParser parser \u003d new EditActivityCommandParser();","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        // no index specified","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"                CommandTestUtil.VALID_DESC_START_TIME_MEETING, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        // no field specified","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser, PREFIXED_TARGET_ID, EditActivityCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        // no index and no field specified","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"i/HIHI\"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"i/A001 badprefix/string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        // invalid time","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.INVALID_DESC_START_TIME_MEETING, Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        // invalid title","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.INVALID_DESC_TITLE_MEETING, Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        // invalid description","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"\"","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"                + PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.INVALID_DESC_DESCRIPTION, Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        // invalid time followed by valid title","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.INVALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_TITLE_MEETING, Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        // valid time followed by invalid time, where both are start time. In this, the final value is taken.","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.INVALID_DESC_START_TIME_MEETING, Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        // multiple invalid values, but only the final invalid value is captured","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.INVALID_DESC_TITLE_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.INVALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"                        + CommandTestUtil.INVALID_DESC_DESCRIPTION,","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"                Time.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"        String userInput \u003d PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_TITLE_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(MEETING.getTitle().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"        String userInput \u003d PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_TITLE_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(MEETING.getTitle().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"        // Time","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"        String userInput \u003d PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_START_TIME_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"        //Title","lastModifiedDate":"2021-10-15"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"        userInput \u003d PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_TITLE_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"        descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(MEETING.getTitle().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        expectedCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"        // Desc","lastModifiedDate":"2021-10-15"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"        userInput \u003d PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION;","lastModifiedDate":"2021-10-15"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"        descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"                .withDescription(MEETING.getDescription().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"        expectedCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-15"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"        String userInput \u003d PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_START_TIME_PAPER_REVIEW","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_START_TIME_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":154,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":155,"author":{"gitId":"simonjulianl"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"        // no other values specified other than start time","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"        String userInput \u003d PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-15"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.INVALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_START_TIME_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-15"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":166,"author":{"gitId":"simonjulianl"},"content":"        // other valid values specified","lastModifiedDate":"2021-10-15"},{"lineNumber":167,"author":{"gitId":"simonjulianl"},"content":"        userInput \u003d PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-15"},{"lineNumber":168,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_MEETING_DESCRIPTION","lastModifiedDate":"2021-10-15"},{"lineNumber":169,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.INVALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":170,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_START_TIME_MEETING","lastModifiedDate":"2021-10-15"},{"lineNumber":171,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.VALID_DESC_TITLE_MEETING;","lastModifiedDate":"2021-10-15"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"        descriptor \u003d new EditActivityDescriptorBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":173,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":174,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(MEETING.getTitle().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":175,"author":{"gitId":"simonjulianl"},"content":"                .withDescription(MEETING.getDescription().toString()).build();","lastModifiedDate":"2021-10-15"},{"lineNumber":176,"author":{"gitId":"simonjulianl"},"content":"        expectedCommand \u003d new EditActivityCommand(targetId, descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":177,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":178,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"simonjulianl":179}},{"path":"src/test/java/gomedic/logic/parser/editcommandparser/EditDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.logic.parser.editcommandparser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.Messages;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.parser.CommandParserTestUtil;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.editdescriptorbuilder.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"public class EditDoctorCommandParserTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditDoctorCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    // Use doctor id 1 as the control id for comparison","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    private static final Id targetId \u003d new DoctorId(1);","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    private static final String PREFIXED_TARGET_ID \u003d \" \" + CliSyntax.PREFIX_ID + targetId;","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    private final EditDoctorCommandParser parser \u003d new EditDoctorCommandParser();","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        // no index specified","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"                CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        // no field specified","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser, PREFIXED_TARGET_ID, EditDoctorCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        // no index and no field specified","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"i/HEHE\"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"i/D001 badprefix/string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        // invalid name","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        // invalid phone","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        // invalid department","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"\"","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"                + PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.INVALID_DESC_DEPARTMENT_MAIN_DOCTOR, Department.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        // invalid phone followed by valid department","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.INVALID_PHONE_DESC","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-09-28"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-09-28"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"                PREFIXED_TARGET_ID + CommandTestUtil.INVALID_NAME_DESC","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"                        + CommandTestUtil.INVALID_DESC_DEPARTMENT_MAIN_DOCTOR,","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-28"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-09-28"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"        String userInput \u003d PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"                .withName(TypicalPersons.MAIN_DOCTOR.getName().fullName)","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"                .withPhone(TypicalPersons.MAIN_DOCTOR.getPhone().value)","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"                .withDepartment(TypicalPersons.MAIN_DOCTOR.getDepartment().departmentName)","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"                .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-09-28"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"        String userInput \u003d PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_DEPARTMENT_OTHER_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"                .withPhone(TypicalPersons.MAIN_DOCTOR.getPhone().value)","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"yyhangz"},"content":"                .withDepartment(TypicalPersons.OTHER_DOCTOR.getDepartment().departmentName).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-09-28"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"        // name","lastModifiedDate":"2021-09-28"},{"lineNumber":114,"author":{"gitId":"yyhangz"},"content":"        String userInput \u003d PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":115,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"yyhangz"},"content":"                .withName(TypicalPersons.MAIN_DOCTOR.getName().fullName)","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-09-28"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"        // phone","lastModifiedDate":"2021-09-28"},{"lineNumber":122,"author":{"gitId":"yyhangz"},"content":"        userInput \u003d PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"yyhangz"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder().withPhone(TypicalPersons.MAIN_DOCTOR.getPhone().value).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"yyhangz"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":127,"author":{"gitId":"yyhangz"},"content":"        // department","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"yyhangz"},"content":"        userInput \u003d PREFIXED_TARGET_ID + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"yyhangz"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"yyhangz"},"content":"                .withDepartment(TypicalPersons.MAIN_DOCTOR.getDepartment().departmentName).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"yyhangz"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-09-28"},{"lineNumber":137,"author":{"gitId":"yyhangz"},"content":"        String userInput \u003d PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_DEPARTMENT_OTHER_DOCTOR","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"                .withDepartment(TypicalPersons.MAIN_DOCTOR.getDepartment().departmentName).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-09-28"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-09-28"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"        // no other values specified other than phone","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"        String userInput \u003d PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.INVALID_PHONE_DESC","lastModifiedDate":"2021-09-28"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand.EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"                .withPhone(TypicalPersons.MAIN_DOCTOR.getPhone().value)","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-09-28"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"        EditDoctorCommand expectedCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"        // other valid values specified","lastModifiedDate":"2021-09-28"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"        userInput \u003d PREFIXED_TARGET_ID","lastModifiedDate":"2021-10-14"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_NAME_MAIN_DOCTOR","lastModifiedDate":"2021-10-14"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"                + CommandTestUtil.INVALID_PHONE_DESC","lastModifiedDate":"2021-09-28"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_DEPARTMENT_MAIN_DOCTOR","lastModifiedDate":"2021-10-14"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"                + CommandTestUtil.VALID_DESC_PHONE_MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"        descriptor \u003d new EditDoctorDescriptorBuilder().withPhone(TypicalPersons.MAIN_DOCTOR.getPhone().value)","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"                .withDepartment(TypicalPersons.MAIN_DOCTOR.getDepartment().departmentName)","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"                .withName(TypicalPersons.MAIN_DOCTOR.getName().fullName).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"yyhangz"},"content":"        expectedCommand \u003d new EditDoctorCommand(targetId, descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":170,"author":{"gitId":"simonjulianl"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":171,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"simonjulianl":87,"yyhangz":85}},{"path":"src/test/java/gomedic/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.CONFLICTING_MEETING;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.DUPLICATE_ACTIVITY;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.MEETING;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.PAST_ACTIVITY;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.getTypicalActivities;","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_DOCTOR;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_PATIENT;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.NOT_IN_TYPICAL_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.NOT_IN_TYPICAL_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.OTHER_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.OTHER_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.THIRD_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.THIRD_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalDoctors;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.getTypicalPatients;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.ActivityNotFoundException;","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.ConflictingActivityException;","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.DuplicateActivityFoundException;","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.exceptions.MaxAddressBookCapacityReached;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.modelbuilder.ActivityBuilder;","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"import gomedic.testutil.modelbuilder.PatientBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        assertEquals(Collections.emptyList(), addressBook.getDoctorListSortedById());","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPatientListSortedById());","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(Collections.emptyList(), addressBook.getActivityListSortedById());","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(Collections.emptyList(), addressBook.getActivityListSortedStartTime());","lastModifiedDate":"2021-10-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2021-10-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        AddressBook newData \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"    public void addPatient_newPatient_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(addressBook.hasPatient(MAIN_PATIENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"    public void addPatient_duplicatePatient_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.addPatient(MAIN_PATIENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPatient(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"    public void hasPatient_patientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(addressBook.hasPatient(MAIN_PATIENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"    public void hasPatient_patientInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(addressBook.hasPatient(MAIN_PATIENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"    public void hasPatient_patientWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"        Patient editedPatient \u003d new PatientBuilder(MAIN_PATIENT).withAge(\"40\")","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"                .build();","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(addressBook.hasPatient(editedPatient));","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"    public void getPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPatientListSortedById().remove(0));","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"    void removePatient_nonExistentPatient_throwsPersonNotFoundException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e addressBook.removePatient(MAIN_PATIENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"    void removePatient_existingPatient_doesNotThrow() {","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"        assertDoesNotThrow(() -\u003e addressBook.removePatient(MAIN_PATIENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"    public void resetData_withDuplicatePatients_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"        // Two patients with the same id","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(MAIN_PATIENT, MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"yyhangz"},"content":"        AddressBookStub newData \u003d new AddressBookStub(getTypicalActivities(), getTypicalDoctors(),","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"            newPatients);","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"yyhangz"},"content":"    public void addDoctor_newDoctor_returnsTrue() {","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"yyhangz"},"content":"        assertTrue(addressBook.hasDoctor(MAIN_DOCTOR));","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"    public void addDoctor_duplicateDoctor_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.addDoctor(MAIN_DOCTOR));","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"    public void hasDoctor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasDoctor(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"    public void hasDoctor_doctorNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"        assertFalse(addressBook.hasDoctor(MAIN_DOCTOR));","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"    public void hasDoctor_doctorInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"        assertTrue(addressBook.hasDoctor(MAIN_DOCTOR));","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"    public void hasDoctor_doctorWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(MAIN_DOCTOR).withDepartment(MAIN_DOCTOR.getDepartment() + \"s\")","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"            .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"        assertTrue(addressBook.hasDoctor(editedDoctor));","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":170,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":171,"author":{"gitId":"yyhangz"},"content":"    public void getDoctorList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"yyhangz"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getDoctorListSortedById().remove(0));","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":174,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":176,"author":{"gitId":"yyhangz"},"content":"    void removeDoctor_nonExistentDoctor_throwsPersonNotFoundException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"yyhangz"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e addressBook.removeDoctor(MAIN_DOCTOR));","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"yyhangz"},"content":"    void removeDoctor_existingDoctor_doesNotThrow() {","lastModifiedDate":"2021-10-09"},{"lineNumber":182,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"yyhangz"},"content":"        assertDoesNotThrow(() -\u003e addressBook.removeDoctor(MAIN_DOCTOR));","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"yyhangz"},"content":"    public void resetData_withDuplicateDoctors_throwsDuplicatePersonException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"yyhangz"},"content":"        // Two doctors with the same id","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"yyhangz"},"content":"        List\u003cDoctor\u003e newDoctors \u003d Arrays.asList(MAIN_DOCTOR, MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":190,"author":{"gitId":"yyhangz"},"content":"        AddressBookStub newData \u003d new AddressBookStub(getTypicalActivities(), newDoctors,","lastModifiedDate":"2021-10-14"},{"lineNumber":191,"author":{"gitId":"radiankrisno"},"content":"            getTypicalPatients());","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":193,"author":{"gitId":"yyhangz"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2021-10-09"},{"lineNumber":194,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":197,"author":{"gitId":"simonjulianl"},"content":"    public void getActivityList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":198,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getActivityListSortedById().remove(0));","lastModifiedDate":"2021-10-10"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"    public void addActivity_newActivity_returnsTrue() {","lastModifiedDate":"2021-10-03"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(addressBook.hasActivity(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":206,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"    public void addActivity_duplicateActivity_throwsDuplicateActivityException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(DuplicateActivityFoundException.class, () -\u003e addressBook.addActivity(DUPLICATE_ACTIVITY));","lastModifiedDate":"2021-10-03"},{"lineNumber":211,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"    public void addActivity_conflictingActivity_throwsConflictingActivityException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":215,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":216,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ConflictingActivityException.class, () -\u003e addressBook.addActivity(CONFLICTING_MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":217,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":218,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":219,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":220,"author":{"gitId":"simonjulianl"},"content":"    public void hasActivity_duplicateIdNewActivity_returnsTrue() {","lastModifiedDate":"2021-10-03"},{"lineNumber":221,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":222,"author":{"gitId":"simonjulianl"},"content":"        Activity meeting \u003d new ActivityBuilder().withId(1).build();","lastModifiedDate":"2021-10-03"},{"lineNumber":223,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(addressBook.hasActivity(meeting));","lastModifiedDate":"2021-10-03"},{"lineNumber":224,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":225,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":226,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":227,"author":{"gitId":"simonjulianl"},"content":"    public void hasActivity_emptyList_returnsFalse() {","lastModifiedDate":"2021-10-03"},{"lineNumber":228,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(addressBook.hasActivity(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":229,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":230,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":231,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":232,"author":{"gitId":"simonjulianl"},"content":"    public void getActivityListSortedStartTime_call_returnsTrue() {","lastModifiedDate":"2021-10-03"},{"lineNumber":233,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(addressBook::getActivityListSortedStartTime);","lastModifiedDate":"2021-10-03"},{"lineNumber":234,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":235,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":236,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":237,"author":{"gitId":"simonjulianl"},"content":"    public void getActivityListSortedStartTime_sortedCorrectly_returnsTrue() {","lastModifiedDate":"2021-10-03"},{"lineNumber":238,"author":{"gitId":"simonjulianl"},"content":"        // inserted sequentially","lastModifiedDate":"2021-10-03"},{"lineNumber":239,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(PAST_ACTIVITY);","lastModifiedDate":"2021-10-03"},{"lineNumber":240,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":241,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":242,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(List.of(PAST_ACTIVITY, MEETING), addressBook.getActivityListSortedStartTime());","lastModifiedDate":"2021-10-10"},{"lineNumber":243,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":244,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":245,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":246,"author":{"gitId":"simonjulianl"},"content":"    void removeActivity_nonExistentActivity_throwsActivityNotFound() {","lastModifiedDate":"2021-10-03"},{"lineNumber":247,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ActivityNotFoundException.class, () -\u003e addressBook.removeActivity(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":248,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":249,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":250,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":251,"author":{"gitId":"simonjulianl"},"content":"    void removeActivity_existentActivity_doesNotThrow() {","lastModifiedDate":"2021-10-03"},{"lineNumber":252,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":253,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(() -\u003e addressBook.removeActivity(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":254,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":255,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":256,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":257,"author":{"gitId":"simonjulianl"},"content":"    void removeActivity_existentActivitySameId_doesNotThrow() {","lastModifiedDate":"2021-10-03"},{"lineNumber":258,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":259,"author":{"gitId":"simonjulianl"},"content":"        Activity meeting \u003d new ActivityBuilder().withId(1).build();","lastModifiedDate":"2021-10-03"},{"lineNumber":260,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(() -\u003e addressBook.removeActivity(meeting));","lastModifiedDate":"2021-10-03"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":263,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":264,"author":{"gitId":"simonjulianl"},"content":"    void getNewActivityId_emptyList_return1() {","lastModifiedDate":"2021-10-09"},{"lineNumber":265,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(1, addressBook.getNewActivityId());","lastModifiedDate":"2021-10-09"},{"lineNumber":266,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":267,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":268,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":269,"author":{"gitId":"simonjulianl"},"content":"    void getNewActivityId_oneItemList_return2() {","lastModifiedDate":"2021-10-09"},{"lineNumber":270,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(MEETING);","lastModifiedDate":"2021-10-09"},{"lineNumber":271,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(2, addressBook.getNewActivityId());","lastModifiedDate":"2021-10-09"},{"lineNumber":272,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":273,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":274,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":275,"author":{"gitId":"yyhangz"},"content":"    void hasNewDoctorId_emptyList_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":276,"author":{"gitId":"yyhangz"},"content":"        assertTrue(addressBook.hasNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":277,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":278,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":279,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":280,"author":{"gitId":"yyhangz"},"content":"    void hasNewDoctorId_oneItemInList_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":281,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":282,"author":{"gitId":"yyhangz"},"content":"        assertTrue(addressBook.hasNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":283,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":284,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":285,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":286,"author":{"gitId":"yyhangz"},"content":"    void hasNewDoctorId_maxItemInList_returnsFalse() {","lastModifiedDate":"2021-10-10"},{"lineNumber":287,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":288,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":289,"author":{"gitId":"yyhangz"},"content":"            addressBook.addDoctor(toAdd);","lastModifiedDate":"2021-10-10"},{"lineNumber":290,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":291,"author":{"gitId":"yyhangz"},"content":"        assertFalse(addressBook.hasNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":292,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":293,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":294,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":295,"author":{"gitId":"yyhangz"},"content":"    void getNewDoctorId_emptyList_returns1() {","lastModifiedDate":"2021-10-10"},{"lineNumber":296,"author":{"gitId":"yyhangz"},"content":"        assertEquals(1, addressBook.getNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":297,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":298,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":299,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":300,"author":{"gitId":"yyhangz"},"content":"    void getNewDoctorId_twoItemList_returns3() {","lastModifiedDate":"2021-10-10"},{"lineNumber":301,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":302,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(OTHER_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":303,"author":{"gitId":"yyhangz"},"content":"        assertEquals(3, addressBook.getNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":304,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":305,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":306,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":307,"author":{"gitId":"yyhangz"},"content":"    void getNewDoctorId_fourItemListRemoveId2_returns2() {","lastModifiedDate":"2021-10-10"},{"lineNumber":308,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":309,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(OTHER_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":310,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(THIRD_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":311,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(NOT_IN_TYPICAL_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":312,"author":{"gitId":"yyhangz"},"content":"        addressBook.removeDoctor(OTHER_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":313,"author":{"gitId":"yyhangz"},"content":"        assertEquals(2, addressBook.getNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":314,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":315,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":316,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":317,"author":{"gitId":"yyhangz"},"content":"    void getNewDoctorId_maxListSize_throwsMaxListCapacityExceededException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":318,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":319,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":320,"author":{"gitId":"yyhangz"},"content":"            addressBook.addDoctor(toAdd);","lastModifiedDate":"2021-10-10"},{"lineNumber":321,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":322,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(MaxAddressBookCapacityReached.class, addressBook::getNewDoctorId);","lastModifiedDate":"2021-10-10"},{"lineNumber":323,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":324,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":325,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":326,"author":{"gitId":"radiankrisno"},"content":"    void hasNewPatientId_emptyList_returnsTrue() {","lastModifiedDate":"2021-10-11"},{"lineNumber":327,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(addressBook.hasNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":328,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":329,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":330,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":331,"author":{"gitId":"radiankrisno"},"content":"    void hasNewPatientId_oneItemInList_returnsTrue() {","lastModifiedDate":"2021-10-11"},{"lineNumber":332,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":333,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(addressBook.hasNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":334,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":335,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":336,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":337,"author":{"gitId":"radiankrisno"},"content":"    void hasNewPatientId_maxItemInList_returnsFalse() {","lastModifiedDate":"2021-10-11"},{"lineNumber":338,"author":{"gitId":"radiankrisno"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-11"},{"lineNumber":339,"author":{"gitId":"radiankrisno"},"content":"            Patient toAdd \u003d new PatientBuilder().withId(i).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":340,"author":{"gitId":"radiankrisno"},"content":"            addressBook.addPatient(toAdd);","lastModifiedDate":"2021-10-11"},{"lineNumber":341,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":342,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(addressBook.hasNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":343,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":344,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":345,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":346,"author":{"gitId":"radiankrisno"},"content":"    void getNewPatientId_emptyList_returns1() {","lastModifiedDate":"2021-10-11"},{"lineNumber":347,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(1, addressBook.getNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":348,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":349,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":350,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":351,"author":{"gitId":"radiankrisno"},"content":"    void getNewPatientId_twoItemList_returns3() {","lastModifiedDate":"2021-10-11"},{"lineNumber":352,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":353,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(OTHER_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":354,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(3, addressBook.getNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":355,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":356,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":357,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":358,"author":{"gitId":"radiankrisno"},"content":"    void getNewPatientId_fourItemListRemoveId2_returns2() {","lastModifiedDate":"2021-10-11"},{"lineNumber":359,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":360,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(OTHER_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":361,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(THIRD_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":362,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(NOT_IN_TYPICAL_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":363,"author":{"gitId":"radiankrisno"},"content":"        addressBook.removePatient(OTHER_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":364,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(2, addressBook.getNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":365,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":366,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":367,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":368,"author":{"gitId":"radiankrisno"},"content":"    void getNewPatientId_maxListSize_throwsMaxListCapacityExceededException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":369,"author":{"gitId":"radiankrisno"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-11"},{"lineNumber":370,"author":{"gitId":"radiankrisno"},"content":"            Patient toAdd \u003d new PatientBuilder().withId(i).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":371,"author":{"gitId":"radiankrisno"},"content":"            addressBook.addPatient(toAdd);","lastModifiedDate":"2021-10-11"},{"lineNumber":372,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":373,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(MaxAddressBookCapacityReached.class, addressBook::getNewPatientId);","lastModifiedDate":"2021-10-11"},{"lineNumber":374,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":375,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":377,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":380,"author":{"gitId":"simonjulianl"},"content":"        private final ObservableList\u003cActivity\u003e activities \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-03"},{"lineNumber":381,"author":{"gitId":"yyhangz"},"content":"        private final ObservableList\u003cDoctor\u003e doctors \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-09"},{"lineNumber":382,"author":{"gitId":"radiankrisno"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-10"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":384,"author":{"gitId":"yyhangz"},"content":"        AddressBookStub(Collection\u003cActivity\u003e activities,","lastModifiedDate":"2021-10-14"},{"lineNumber":385,"author":{"gitId":"radiankrisno"},"content":"                        Collection\u003cDoctor\u003e doctors, Collection\u003cPatient\u003e patients) {","lastModifiedDate":"2021-10-10"},{"lineNumber":386,"author":{"gitId":"yyhangz"},"content":"            this.activities.setAll(activities);","lastModifiedDate":"2021-10-09"},{"lineNumber":387,"author":{"gitId":"yyhangz"},"content":"            this.doctors.setAll(doctors);","lastModifiedDate":"2021-10-09"},{"lineNumber":388,"author":{"gitId":"radiankrisno"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2021-10-10"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":391,"author":{"gitId":"yyhangz"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":392,"author":{"gitId":"yyhangz"},"content":"        public ObservableList\u003cDoctor\u003e getDoctorListSortedById() {","lastModifiedDate":"2021-10-11"},{"lineNumber":393,"author":{"gitId":"yyhangz"},"content":"            return doctors;","lastModifiedDate":"2021-10-09"},{"lineNumber":394,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":395,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":396,"author":{"gitId":"radiankrisno"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":397,"author":{"gitId":"radiankrisno"},"content":"        public ObservableList\u003cPatient\u003e getPatientListSortedById() {","lastModifiedDate":"2021-10-11"},{"lineNumber":398,"author":{"gitId":"radiankrisno"},"content":"            return patients;","lastModifiedDate":"2021-10-10"},{"lineNumber":399,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":400,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":401,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":402,"author":{"gitId":"simonjulianl"},"content":"        public ObservableList\u003cActivity\u003e getActivityListSortedById() {","lastModifiedDate":"2021-10-10"},{"lineNumber":403,"author":{"gitId":"simonjulianl"},"content":"            return activities;","lastModifiedDate":"2021-10-03"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":406,"author":{"gitId":"simonjulianl"},"content":"        @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":407,"author":{"gitId":"simonjulianl"},"content":"        public ObservableList\u003cActivity\u003e getActivityListSortedStartTime() {","lastModifiedDate":"2021-10-03"},{"lineNumber":408,"author":{"gitId":"simonjulianl"},"content":"            return activities.sorted();","lastModifiedDate":"2021-10-03"},{"lineNumber":409,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":410,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":411,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"radiankrisno":129,"simonjulianl":106,"yyhangz":131,"-":45}},{"path":"src/test/java/gomedic/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.OTHER_DOCTOR;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.OTHER_PATIENT;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.exceptions.MaxAddressBookCapacityReached;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.util.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.AddressBookBuilder;","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TypicalActivities;","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"import gomedic.testutil.modelbuilder.PatientBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        Assertions.assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        userPrefs.setAddressBookDataFileRootPath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        userPrefs.setAddressBookDataFileRootPath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"        Assertions.assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2021-09-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookDataRootFilePath(null));","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"        modelManager.setAddressBookDataRootFilePath(path);","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(path, modelManager.getAddressBookDataRootFilePath());","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"                .withActivity(TypicalActivities.MEETING)","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"                .withActivity(TypicalActivities.PAPER_REVIEW)","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"                .withDoctor(TypicalPersons.MAIN_DOCTOR)","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"                .withDoctor(TypicalPersons.OTHER_DOCTOR)","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"                .withPatient(TypicalPersons.MAIN_PATIENT)","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"                .withPatient(TypicalPersons.OTHER_PATIENT)","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"                .build();","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(modelManager, modelManagerCopy);","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(modelManager, modelManager);","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(null, modelManager);","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(5, modelManager);","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(modelManager, new ModelManager(differentAddressBook, userPrefs));","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"        String[] keywords \u003d \"Invalid input\".split(\"\\\\s+\");","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"yyhangz"},"content":"        modelManager.updateFilteredDoctorList(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(keywords)));","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(modelManager, new ModelManager(addressBook, userPrefs));","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":123,"author":{"gitId":"yyhangz"},"content":"        modelManager.updateFilteredDoctorList(Model.PREDICATE_SHOW_ALL_ITEMS);","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"        differentUserPrefs.setAddressBookDataFileRootPath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(modelManager, new ModelManager(addressBook, differentUserPrefs));","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"yyhangz"},"content":"    public void hasDoctor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.hasDoctor(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"yyhangz"},"content":"    public void hasDoctor_doctorNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"yyhangz"},"content":"        assertFalse(modelManager.hasDoctor(TypicalPersons.MAIN_DOCTOR));","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"    public void hasDoctor_doctorInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"        modelManager.addDoctor(TypicalPersons.MAIN_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"        assertTrue(modelManager.hasDoctor(TypicalPersons.MAIN_DOCTOR));","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"    void hasNewDoctorId_emptyList_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"        assertTrue(modelManager.hasNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"    void hasNewDoctorId_oneItemInList_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"        modelManager.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"        assertTrue(modelManager.hasNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"    void hasNewDoctorId_maxItemInList_returnsFalse() {","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"            modelManager.addDoctor(toAdd);","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"        assertFalse(modelManager.hasNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"    void getNewDoctorId_emptyList_returns1() {","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"yyhangz"},"content":"        assertEquals(1, modelManager.getNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"yyhangz"},"content":"    void getNewDoctorId_twoItemList_returns3() {","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"yyhangz"},"content":"        modelManager.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"yyhangz"},"content":"        modelManager.addDoctor(OTHER_DOCTOR);","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"yyhangz"},"content":"        assertEquals(3, modelManager.getNewDoctorId());","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"simonjulianl"},"content":"    void getNewDoctorId_maxListSize_throwsMaxAddressBookCapacityReached() {","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"yyhangz"},"content":"            modelManager.addDoctor(toAdd);","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(MaxAddressBookCapacityReached.class, modelManager::getNewDoctorId);","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"yyhangz"},"content":"    public void getFilteredDoctorList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDoctorList()","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"yyhangz"},"content":"                .remove(0));","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":194,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"radiankrisno"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"radiankrisno"},"content":"    public void hasPatient_patientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(modelManager.hasPatient(TypicalPersons.MAIN_PATIENT));","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"radiankrisno"},"content":"    public void hasPatient_patientInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"radiankrisno"},"content":"        modelManager.addPatient(TypicalPersons.MAIN_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(modelManager.hasPatient(TypicalPersons.MAIN_PATIENT));","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"radiankrisno"},"content":"    void hasNewPatientId_emptyList_returnsTrue() {","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(modelManager.hasNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"radiankrisno"},"content":"    void hasNewPatientId_oneItemInList_returnsTrue() {","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"radiankrisno"},"content":"        modelManager.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":218,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(modelManager.hasNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":222,"author":{"gitId":"radiankrisno"},"content":"    void hasNewPatientId_maxItemInList_returnsFalse() {","lastModifiedDate":"2021-10-11"},{"lineNumber":223,"author":{"gitId":"radiankrisno"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-11"},{"lineNumber":224,"author":{"gitId":"radiankrisno"},"content":"            Patient toAdd \u003d new PatientBuilder().withId(i).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":225,"author":{"gitId":"radiankrisno"},"content":"            modelManager.addPatient(toAdd);","lastModifiedDate":"2021-10-11"},{"lineNumber":226,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":227,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(modelManager.hasNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":228,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":229,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":231,"author":{"gitId":"radiankrisno"},"content":"    void getNewPatientId_emptyList_returns1() {","lastModifiedDate":"2021-10-11"},{"lineNumber":232,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(1, modelManager.getNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":233,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":234,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":235,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":236,"author":{"gitId":"radiankrisno"},"content":"    void getNewPatientId_twoItemList_returns3() {","lastModifiedDate":"2021-10-11"},{"lineNumber":237,"author":{"gitId":"radiankrisno"},"content":"        modelManager.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":238,"author":{"gitId":"radiankrisno"},"content":"        modelManager.addPatient(OTHER_PATIENT);","lastModifiedDate":"2021-10-11"},{"lineNumber":239,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(3, modelManager.getNewPatientId());","lastModifiedDate":"2021-10-11"},{"lineNumber":240,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":241,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":242,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":243,"author":{"gitId":"radiankrisno"},"content":"    void getNewPatientId_maxListSize_throwsMaxAddressBookCapacityReached() {","lastModifiedDate":"2021-10-11"},{"lineNumber":244,"author":{"gitId":"radiankrisno"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-11"},{"lineNumber":245,"author":{"gitId":"radiankrisno"},"content":"            Patient toAdd \u003d new PatientBuilder().withId(i).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":246,"author":{"gitId":"radiankrisno"},"content":"            modelManager.addPatient(toAdd);","lastModifiedDate":"2021-10-11"},{"lineNumber":247,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":248,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(MaxAddressBookCapacityReached.class, modelManager::getNewPatientId);","lastModifiedDate":"2021-10-11"},{"lineNumber":249,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":250,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":251,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":252,"author":{"gitId":"radiankrisno"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":253,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList()","lastModifiedDate":"2021-10-11"},{"lineNumber":254,"author":{"gitId":"radiankrisno"},"content":"            .remove(0));","lastModifiedDate":"2021-10-11"},{"lineNumber":255,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":256,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":257,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":258,"author":{"gitId":"simonjulianl"},"content":"    public void hasActivity_nullActivity_throwsNullPointerException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":259,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.hasActivity(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":260,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":261,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":262,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":263,"author":{"gitId":"simonjulianl"},"content":"    public void hasActivity_activityNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-10-09"},{"lineNumber":264,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(modelManager.hasActivity(TypicalActivities.MEETING));","lastModifiedDate":"2021-10-09"},{"lineNumber":265,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":266,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":267,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":268,"author":{"gitId":"simonjulianl"},"content":"    public void hasActivity_activityInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-09"},{"lineNumber":269,"author":{"gitId":"simonjulianl"},"content":"        modelManager.addActivity(TypicalActivities.MEETING);","lastModifiedDate":"2021-10-09"},{"lineNumber":270,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(modelManager.hasActivity(TypicalActivities.MEETING));","lastModifiedDate":"2021-10-09"},{"lineNumber":271,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":272,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":273,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":274,"author":{"gitId":"simonjulianl"},"content":"    public void getFilteredActivityList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":275,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredActivityList()","lastModifiedDate":"2021-10-09"},{"lineNumber":276,"author":{"gitId":"simonjulianl"},"content":"                .remove(0));","lastModifiedDate":"2021-10-09"},{"lineNumber":277,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":278,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":279,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":280,"author":{"gitId":"simonjulianl"},"content":"    void getModelBeingShown_validInput_testPassed() {","lastModifiedDate":"2021-10-10"},{"lineNumber":281,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(0, modelManager.getModelBeingShown().getValue());","lastModifiedDate":"2021-10-10"},{"lineNumber":282,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":283,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":284,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":285,"author":{"gitId":"simonjulianl"},"content":"    void setModelBeingShown_validInput_testPassed() {","lastModifiedDate":"2021-10-10"},{"lineNumber":286,"author":{"gitId":"yyhangz"},"content":"        modelManager.setModelBeingShown(ModelItem.PATIENT);","lastModifiedDate":"2021-10-14"},{"lineNumber":287,"author":{"gitId":"yyhangz"},"content":"        assertEquals(ModelItem.PATIENT.ordinal(), modelManager.getModelBeingShown().getValue());","lastModifiedDate":"2021-10-14"},{"lineNumber":288,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":289,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":290,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":291,"author":{"gitId":"simonjulianl"},"content":"    void setModelBeingShown_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":292,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setModelBeingShown(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":293,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"radiankrisno":69,"simonjulianl":70,"yyhangz":73,"-":82}},{"path":"src/test/java/gomedic/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookDataFileRootPath(null));","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"simonjulianl":5,"-":15}},{"path":"src/test/java/gomedic/model/activity/ActivityIdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.IdTest;","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"public class ActivityIdTest {","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ActivityId((Integer) null));","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ActivityId((String) null));","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_invalidNumber_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new ActivityId(1000));","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    public void toString_validActivityId_testPassed() {","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new ActivityId(100).toString(), \"A100\");","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    void isValidId_validInputId_testsPassed() {","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        // null activity id","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ActivityId((Integer) null));","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        // invalid activity id","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(ActivityId.isValidActivityId(new IdTest.TestId(999, \u0027C\u0027))); // wrong prefix","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(ActivityId.isValidActivityId(new IdTest.TestId(10, \u0027D\u0027))); // wrong prefix","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        // valid activity id","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(ActivityId.isValidActivityId(new ActivityId(100))); // activity id","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(ActivityId.isValidActivityId(new IdTest.TestId(50, \u0027A\u0027))); // other id with same prefix","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    @SuppressWarnings(\"AssertBetweenInconvertibleTypes\")","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new ActivityId(100), new ActivityId(100));","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new ActivityId(100), new IdTest.TestId(100, \u0027A\u0027));","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    void isValidActivityId_stringInput_testsPassed() {","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        // invalid activity id","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(ActivityId.isValidActivityId(\"test\")); // no integer","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(ActivityId.isValidActivityId(\"B100\")); // wrong prefix","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        // valid activity id","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(ActivityId.isValidActivityId(new ActivityId(100))); // activity id","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(ActivityId.isValidActivityId(new IdTest.TestId(50, \u0027A\u0027))); // other id with same prefix","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"simonjulianl":60}},{"path":"src/test/java/gomedic/model/activity/ActivityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"class ActivityTest {","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    private static Activity activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    private static ActivityId id;","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    private static Time startTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    private static Time endTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    private static Title title;","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    private static Description desc;","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    @BeforeAll","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    public static void setUp() {","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"        id \u003d new ActivityId(1);","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"        startTime \u003d new Time(LocalDateTime.of(2021, 10, 5, 5, 5));","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        endTime \u003d new Time(startTime.time.plusDays(1));","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        title \u003d new Title(\"Testing title\");","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        desc \u003d new Description(\"Some dummy description\");","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        activity \u003d new Activity(id, startTime, endTime, title, desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    void constructor_anyNull_throwsNullArgumentException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Activity(null, null, null, null, null));","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"    void constructor_flippedTime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Activity(id, endTime, startTime, title, desc));","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    void constructor_sameTime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Activity(id, startTime, startTime, title, desc));","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    void getActivityId() {","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(id, activity.getActivityId());","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    void getStartTime() {","lastModifiedDate":"2021-10-03"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(startTime, activity.getStartTime());","lastModifiedDate":"2021-10-03"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"    void getEndTime() {","lastModifiedDate":"2021-10-03"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(endTime, activity.getEndTime());","lastModifiedDate":"2021-10-03"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"    void getTitle() {","lastModifiedDate":"2021-10-03"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(title, activity.getTitle());","lastModifiedDate":"2021-10-03"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"    void getDescription() {","lastModifiedDate":"2021-10-03"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(desc, activity.getDescription());","lastModifiedDate":"2021-10-03"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"    void testHashCode() {","lastModifiedDate":"2021-10-03"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"        int hash \u003d Objects.hash(id, startTime, endTime, desc, title);","lastModifiedDate":"2021-10-03"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(hash, activity.hashCode());","lastModifiedDate":"2021-10-03"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"    void testEquals() {","lastModifiedDate":"2021-10-03"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"        Activity otherAct \u003d new Activity(new ActivityId(20), startTime, endTime, title, desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        Activity diffFields \u003d new Activity(id, startTime, endTime, new Title(\"another\"), desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        // equal regardless of fields as long as their ids are the same.","lastModifiedDate":"2021-10-03"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(activity, diffFields);","lastModifiedDate":"2021-10-03"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(activity, activity);","lastModifiedDate":"2021-10-03"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"        // not equal based on id.","lastModifiedDate":"2021-10-03"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(activity, otherAct);","lastModifiedDate":"2021-10-03"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"    void testToString() {","lastModifiedDate":"2021-10-03"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"A001; \"","lastModifiedDate":"2021-10-03"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"                + \"Title: Testing title;\"","lastModifiedDate":"2021-10-03"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"                + \" Desc: Some dummy description; \"","lastModifiedDate":"2021-10-03"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"                + \"Start Time: 05-10-2021 05:05\"","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"                + \"; End Time: 06-10-2021 05:05\", activity.toString());","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"    void isConflicting_fullPartialOverlapped_testPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        Activity activityOne \u003d new Activity(id,","lastModifiedDate":"2021-10-03"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"                startTime,","lastModifiedDate":"2021-10-03"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"                new Time(endTime.time.plusHours(1)),","lastModifiedDate":"2021-10-03"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"                title,","lastModifiedDate":"2021-10-03"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"                desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activityOne.isConflicting(activity));","lastModifiedDate":"2021-10-03"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activity.isConflicting(activityOne));","lastModifiedDate":"2021-10-03"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activity.isConflicting(activity));","lastModifiedDate":"2021-10-03"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"        // not conflicting","lastModifiedDate":"2021-10-03"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        Activity activityPast \u003d new Activity(id,","lastModifiedDate":"2021-10-03"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"                new Time(startTime.time.minusDays(2)),","lastModifiedDate":"2021-10-03"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"                new Time(startTime.time.minusDays(1)),","lastModifiedDate":"2021-10-03"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"                title,","lastModifiedDate":"2021-10-03"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"                desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(activityPast.isConflicting(activity));","lastModifiedDate":"2021-10-03"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(activityPast.isConflicting(activityOne));","lastModifiedDate":"2021-10-03"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(activity.isConflicting(activityPast));","lastModifiedDate":"2021-10-03"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"    void isConflicting_edgeCases_testPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"        Activity activityOne \u003d new Activity(new ActivityId(2),","lastModifiedDate":"2021-10-03"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"                startTime,","lastModifiedDate":"2021-10-03"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"                endTime,","lastModifiedDate":"2021-10-03"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"                title,","lastModifiedDate":"2021-10-03"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"                desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activityOne.isConflicting(activity));","lastModifiedDate":"2021-10-03"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activity.isConflicting(activityOne));","lastModifiedDate":"2021-10-03"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"        Activity activityTwo \u003d new Activity(new ActivityId(2),","lastModifiedDate":"2021-10-03"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"                new Time(endTime.time.minusHours(1)),","lastModifiedDate":"2021-10-03"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"                endTime,","lastModifiedDate":"2021-10-03"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"                title,","lastModifiedDate":"2021-10-03"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"                desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activity.isConflicting(activityTwo));","lastModifiedDate":"2021-10-03"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activityTwo.isConflicting(activity));","lastModifiedDate":"2021-10-03"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"        Activity activityThree \u003d new Activity(new ActivityId(2),","lastModifiedDate":"2021-10-03"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"                startTime,","lastModifiedDate":"2021-10-03"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"                new Time(endTime.time.plusHours(1)),","lastModifiedDate":"2021-10-03"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"                title,","lastModifiedDate":"2021-10-03"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"                desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":154,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activity.isConflicting(activityThree));","lastModifiedDate":"2021-10-03"},{"lineNumber":155,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activityThree.isConflicting(activity));","lastModifiedDate":"2021-10-03"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"        // overlapping","lastModifiedDate":"2021-10-03"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"        Activity activityFour \u003d new Activity(new ActivityId(2),","lastModifiedDate":"2021-10-03"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"                new Time(endTime.time.minusHours(1)),","lastModifiedDate":"2021-10-03"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"                new Time(endTime.time.plusHours(1)),","lastModifiedDate":"2021-10-03"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"                title,","lastModifiedDate":"2021-10-03"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"                desc);","lastModifiedDate":"2021-10-03"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activity.isConflicting(activityFour));","lastModifiedDate":"2021-10-03"},{"lineNumber":165,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(activityFour.isConflicting(activity));","lastModifiedDate":"2021-10-03"},{"lineNumber":166,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":167,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":167}},{"path":"src/test/java/gomedic/model/activity/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.model.activity.Description.isValidDescription;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"class DescriptionTest {","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Description(null));","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_tooLongText_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(\"A\".repeat(1000)));","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    public void toString_validString_testPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        String text \u003d \"test\";","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new Description(text).toString(), text);","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    void hashCode_inputs_testsPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        String text \u003d \"test\";","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new Description(text).hashCode(), text.hashCode());","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        String text \u003d \"test\";","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"        Description d \u003d new Description(text.repeat(2));","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(d, d);","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new Description(text), new Description(text));","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(d, new Description(text));","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    void contains_validInput_testsPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        String s \u003d \"some testing strings\";","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        Description d \u003d new Description(s);","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(d.contains(\"weird\", \"lmao\"));","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        // upper case and lower case","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(d.contains(\"TESTING\", \"STRINGS\"));","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(d.contains(\"testing\", \"lmao\"));","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    void isValidDescription_testsPassed() {","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(isValidDescription(\"a\".repeat(100)));","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(isValidDescription(\"a\".repeat(1000)));","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":63}},{"path":"src/test/java/gomedic/model/activity/TitleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.model.activity.Title.isValidTitle;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"class TitleTest {","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Title(null));","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_tooLongText_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Title(\"A\".repeat(61)));","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    public void toString_validString_testPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        String text \u003d \"test\";","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new Title(text).toString(), text);","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    void hashCode_inputs_testsPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        String text \u003d \"test\";","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new Title(text).hashCode(), text.hashCode());","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        String text \u003d \"test\";","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new Title(text), new Title(text));","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    void contains_validInput_testsPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        String s \u003d \"some testing strings\";","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        Title d \u003d new Title(s);","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(d.contains(\"weird\", \"lmao\"));","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        // upper case and lower case","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(d.contains(\"TESTING\", \"STRINGS\"));","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(d.contains(\"testing\", \"lmao\"));","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    void isValidTitle_testsPassed() {","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(isValidTitle(\"a\".repeat(10)));","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(isValidTitle(\"a\".repeat(61)));","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":57}},{"path":"src/test/java/gomedic/model/activity/UniqueActivityListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.CONFLICTING_MEETING;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.DUPLICATE_ACTIVITY;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.MEETING;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.PAPER_REVIEW;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.PAST_ACTIVITY;","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.getTypicalActivities;","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.getTypicalActivitiesConflicting;","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.getTypicalActivitiesDuplicate;","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.ActivityNotFoundException;","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.ConflictingActivityException;","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.exceptions.DuplicateActivityFoundException;","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.exceptions.MaxAddressBookCapacityReached;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.modelbuilder.ActivityBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"class UniqueActivityListTest {","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    private final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    public void contains_nullActivity_throwsNullPointerException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.contains(null));","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.containsConflicting(null));","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    public void contains_activityNotInList_returnsFalse() {","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(uniqueActivityList.contains(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    void add_normal_returnsTrue() {","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(uniqueActivityList.contains(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    void add_maxCapacity_throwsMaxCapacityReached() {","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        String startTime \u003d \"%02d/%02d/%04d 15:00\";","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        String endTime \u003d \"%02d/%02d/%04d 16:00\";","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"        Runnable r \u003d () -\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"            for (int day \u003d 1; day \u003c 28; day++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"                for (int month \u003d 1; month \u003c 12; month++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"                    for (int year \u003d 2000; year \u003c 2100; year++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"                        Activity a \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"                                .withId(uniqueActivityList.getNewActivityId())","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"                                .withTitle(\"test\")","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"                                .withStartTime(String.format(startTime, day, month, year))","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"                                .withEndTime(String.format(endTime, day, month, year))","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"                                .build();","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"                        uniqueActivityList.add(a);","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"                    }","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"                }","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        };","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(MaxAddressBookCapacityReached.class, r::run);","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"    void add_duplicate_throwsDuplicateActivityException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(uniqueActivityList.contains(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(DuplicateActivityFoundException.class, () -\u003e uniqueActivityList.add(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(DuplicateActivityFoundException.class, () -\u003e uniqueActivityList.add(DUPLICATE_ACTIVITY));","lastModifiedDate":"2021-10-03"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"    void containsConflicting_variousMeeting_testPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(uniqueActivityList.containsConflicting(MEETING));","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(uniqueActivityList.contains(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(uniqueActivityList.containsConflicting(CONFLICTING_MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(uniqueActivityList.containsConflicting(PAST_ACTIVITY));","lastModifiedDate":"2021-10-03"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(uniqueActivityList.containsConflicting(PAPER_REVIEW));","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(PAST_ACTIVITY);","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(uniqueActivityList.containsConflicting(PAPER_REVIEW));","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"    public void remove_nullActivity_throwsNullPointerException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.remove(null));","lastModifiedDate":"2021-10-03"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"    public void remove_activityDoesNotExist_throwsActivityNotFoundException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ActivityNotFoundException.class, () -\u003e uniqueActivityList.remove(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"    public void remove_activityInList_doesNotThrow() {","lastModifiedDate":"2021-10-03"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(() -\u003e uniqueActivityList.remove(MEETING));","lastModifiedDate":"2021-10-03"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"    public void setActivities_nullUniqueActivityList_throwsNullPointerException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivities((UniqueActivityList) null));","lastModifiedDate":"2021-10-03"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"    public void setActivities_uniqueActivityList_replacesOwnList() {","lastModifiedDate":"2021-10-03"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(PAPER_REVIEW);","lastModifiedDate":"2021-10-03"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();","lastModifiedDate":"2021-10-03"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"        expectedUniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.setActivities(expectedUniqueActivityList);","lastModifiedDate":"2021-10-03"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedUniqueActivityList, uniqueActivityList);","lastModifiedDate":"2021-10-03"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"    public void setActivities_list_replacesOwnList() {","lastModifiedDate":"2021-10-03"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(PAPER_REVIEW);","lastModifiedDate":"2021-10-03"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();","lastModifiedDate":"2021-10-03"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"        expectedUniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-03"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.setActivities(expectedUniqueActivityList.asUnmodifiableSortedByIdObservableList());","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedUniqueActivityList, uniqueActivityList);","lastModifiedDate":"2021-10-03"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"    public void setActivities_listDuplicate_replacesOwnList() {","lastModifiedDate":"2021-10-03"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(DuplicateActivityFoundException.class, () -\u003e uniqueActivityList.setActivities(","lastModifiedDate":"2021-10-03"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"                getTypicalActivitiesDuplicate()));","lastModifiedDate":"2021-10-03"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"    public void setActivities_listConflicting_replacesOwnList() {","lastModifiedDate":"2021-10-03"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ConflictingActivityException.class, () -\u003e uniqueActivityList.setActivities(","lastModifiedDate":"2021-10-03"},{"lineNumber":141,"author":{"gitId":"simonjulianl"},"content":"                getTypicalActivitiesConflicting()));","lastModifiedDate":"2021-10-03"},{"lineNumber":142,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":143,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":144,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":145,"author":{"gitId":"simonjulianl"},"content":"    public void iterator_ableToBeIterated_testPassed() {","lastModifiedDate":"2021-10-03"},{"lineNumber":146,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(() -\u003e uniqueActivityList.forEach(it -\u003e System.out.println(1)));","lastModifiedDate":"2021-10-03"},{"lineNumber":147,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":148,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":149,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":150,"author":{"gitId":"simonjulianl"},"content":"    public void testEquals_sameBackingList_returnsTrue() {","lastModifiedDate":"2021-10-03"},{"lineNumber":151,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(PAPER_REVIEW);","lastModifiedDate":"2021-10-03"},{"lineNumber":152,"author":{"gitId":"simonjulianl"},"content":"        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();","lastModifiedDate":"2021-10-03"},{"lineNumber":153,"author":{"gitId":"simonjulianl"},"content":"        expectedUniqueActivityList.add(PAPER_REVIEW);","lastModifiedDate":"2021-10-03"},{"lineNumber":154,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":155,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedUniqueActivityList, uniqueActivityList);","lastModifiedDate":"2021-10-03"},{"lineNumber":156,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":157,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":158,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":159,"author":{"gitId":"simonjulianl"},"content":"    public void asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-03"},{"lineNumber":160,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.setActivities(getTypicalActivities());","lastModifiedDate":"2021-10-03"},{"lineNumber":161,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(getTypicalActivities(), uniqueActivityList.asUnmodifiableSortedByIdObservableList());","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":163,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":164,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":165,"author":{"gitId":"simonjulianl"},"content":"    public void asUnmodifiableSortedList_typicalList_sortedByStartingTime() {","lastModifiedDate":"2021-10-03"},{"lineNumber":166,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.setActivities(getTypicalActivities());","lastModifiedDate":"2021-10-03"},{"lineNumber":167,"author":{"gitId":"simonjulianl"},"content":"        Activity prev \u003d null;","lastModifiedDate":"2021-10-03"},{"lineNumber":168,"author":{"gitId":"simonjulianl"},"content":"        for (Activity a : uniqueActivityList.asUnmodifiableSortedByStartTimeList()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"simonjulianl"},"content":"            if (prev \u003d\u003d null) {","lastModifiedDate":"2021-10-03"},{"lineNumber":170,"author":{"gitId":"simonjulianl"},"content":"                prev \u003d a;","lastModifiedDate":"2021-10-03"},{"lineNumber":171,"author":{"gitId":"simonjulianl"},"content":"            } else {","lastModifiedDate":"2021-10-03"},{"lineNumber":172,"author":{"gitId":"simonjulianl"},"content":"                assertTrue(a.getStartTime().isAfter(prev.getEndTime()));","lastModifiedDate":"2021-10-03"},{"lineNumber":173,"author":{"gitId":"simonjulianl"},"content":"            }","lastModifiedDate":"2021-10-03"},{"lineNumber":174,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":175,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":176,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":177,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":178,"author":{"gitId":"simonjulianl"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":179,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(","lastModifiedDate":"2021-10-03"},{"lineNumber":180,"author":{"gitId":"simonjulianl"},"content":"                UnsupportedOperationException.class, () -\u003e uniqueActivityList","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"simonjulianl"},"content":"                        .asUnmodifiableSortedByIdObservableList().remove(0)","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"simonjulianl"},"content":"        );","lastModifiedDate":"2021-10-03"},{"lineNumber":183,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":184,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"simonjulianl"},"content":"    void getLastActivityId_validInput_testsPassed() {","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.setActivities(getTypicalActivities());","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(2, uniqueActivityList.getNewActivityId());","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":190,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":192,"author":{"gitId":"simonjulianl"},"content":"    void getLastActivityId_emptyListInput_testsPassed() {","lastModifiedDate":"2021-10-09"},{"lineNumber":193,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(1, uniqueActivityList.getNewActivityId());","lastModifiedDate":"2021-10-09"},{"lineNumber":194,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":196,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":197,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity_nullTargetActivity_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":198,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivity(null, MEETING));","lastModifiedDate":"2021-10-15"},{"lineNumber":199,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":200,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":201,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":202,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity_nullEditedActivity_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":203,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivity(MEETING, null));","lastModifiedDate":"2021-10-15"},{"lineNumber":204,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":205,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":206,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":207,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity_targetActivityNotInList_throwsActivityNotFoundException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":208,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ActivityNotFoundException.class, () -\u003e uniqueActivityList.setActivity(MEETING, MEETING));","lastModifiedDate":"2021-10-15"},{"lineNumber":209,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":210,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":211,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":212,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity_editedActivityIsSameActivity_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":213,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":214,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.setActivity(MEETING, MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":215,"author":{"gitId":"simonjulianl"},"content":"        UniqueActivityList expectedActivityList \u003d new UniqueActivityList();","lastModifiedDate":"2021-10-15"},{"lineNumber":216,"author":{"gitId":"simonjulianl"},"content":"        expectedActivityList.add(MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":217,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedActivityList, uniqueActivityList);","lastModifiedDate":"2021-10-15"},{"lineNumber":218,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":219,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":220,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":221,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity_editedActivityHasSameIdentity_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":222,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":223,"author":{"gitId":"simonjulianl"},"content":"        Activity editedActivity \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-15"},{"lineNumber":224,"author":{"gitId":"simonjulianl"},"content":"                .withId(MEETING.getActivityId().getIdNumber())","lastModifiedDate":"2021-10-15"},{"lineNumber":225,"author":{"gitId":"simonjulianl"},"content":"                .withStartTime(MEETING.getStartTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":226,"author":{"gitId":"simonjulianl"},"content":"                .withEndTime(MEETING.getEndTime().toString())","lastModifiedDate":"2021-10-15"},{"lineNumber":227,"author":{"gitId":"simonjulianl"},"content":"                .withTitle(\"Maybe a new title\").build();","lastModifiedDate":"2021-10-15"},{"lineNumber":228,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.setActivity(MEETING, editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":229,"author":{"gitId":"simonjulianl"},"content":"        UniqueActivityList expectedActivityList \u003d new UniqueActivityList();","lastModifiedDate":"2021-10-15"},{"lineNumber":230,"author":{"gitId":"simonjulianl"},"content":"        expectedActivityList.add(editedActivity);","lastModifiedDate":"2021-10-15"},{"lineNumber":231,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(uniqueActivityList, expectedActivityList);","lastModifiedDate":"2021-10-15"},{"lineNumber":232,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":233,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":234,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":235,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity_editedActivityHasDifferentIdentity_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":236,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":237,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.setActivity(MEETING, PAPER_REVIEW);","lastModifiedDate":"2021-10-15"},{"lineNumber":238,"author":{"gitId":"simonjulianl"},"content":"        UniqueActivityList expectedActivityList \u003d new UniqueActivityList();","lastModifiedDate":"2021-10-15"},{"lineNumber":239,"author":{"gitId":"simonjulianl"},"content":"        expectedActivityList.add(PAPER_REVIEW);","lastModifiedDate":"2021-10-15"},{"lineNumber":240,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(expectedActivityList, uniqueActivityList);","lastModifiedDate":"2021-10-15"},{"lineNumber":241,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":242,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":243,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":244,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity_editedActivityHasNonUniqueIdentity_throwsDuplicateActivityException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":245,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":246,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(PAPER_REVIEW);","lastModifiedDate":"2021-10-15"},{"lineNumber":247,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(DuplicateActivityFoundException.class, () -\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":248,"author":{"gitId":"simonjulianl"},"content":"                uniqueActivityList.setActivity(MEETING, PAPER_REVIEW));","lastModifiedDate":"2021-10-15"},{"lineNumber":249,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":250,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":251,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":252,"author":{"gitId":"simonjulianl"},"content":"    public void setActivity_editedActivityIsConflicting_throwsConflictingActivityException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":253,"author":{"gitId":"simonjulianl"},"content":"        uniqueActivityList.add(MEETING);","lastModifiedDate":"2021-10-15"},{"lineNumber":254,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(ConflictingActivityException.class, () -\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":255,"author":{"gitId":"simonjulianl"},"content":"                uniqueActivityList.setActivity(MEETING, CONFLICTING_MEETING));","lastModifiedDate":"2021-10-15"},{"lineNumber":256,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":257,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":256,"yyhangz":1}},{"path":"src/test/java/gomedic/model/activity/exceptions/ActivityNotFoundExceptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity.exceptions;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"class ActivityNotFoundExceptionTest {","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    public void constructor() {","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(ActivityNotFoundException::new);","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"Activity not found.\", new ActivityNotFoundException().getMessage());","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":14}},{"path":"src/test/java/gomedic/model/activity/exceptions/ConflictingActivityExceptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity.exceptions;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"class ConflictingActivityExceptionTest {","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    public void constructor() {","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(ConflictingActivityException::new);","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"There is partial/full overlap in the activity timing\",","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"                new ConflictingActivityException().getMessage());","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":15}},{"path":"src/test/java/gomedic/model/activity/exceptions/DuplicateActivityFoundExceptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.activity.exceptions;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"class DuplicateActivityFoundExceptionTest {","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_isRuntimeException() {","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(DuplicateActivityFoundException::new);","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"Operation would result in duplicate activity as the existing activity exists already.\",","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"                new DuplicateActivityFoundException().getMessage());","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":16}},{"path":"src/test/java/gomedic/model/commonfield/IdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"public class IdTest {","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestId(null, null));","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_invalidId_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new TestId(1000, \u0027Z\u0027));","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_invalidPrefix_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new TestId(150, \u0027a\u0027));","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new TestId(150, \u0027!\u0027));","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    public void equals_validInput_testsPassed() {","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        // equals","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new TestId(100, \u0027Z\u0027), new TestId(100, \u0027Z\u0027));","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        // not equals","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(new TestId(100, \u0027Z\u0027), new TestId(10, \u0027Z\u0027));","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(new TestId(100, \u0027A\u0027), new TestId(10, \u0027Z\u0027));","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(null, new TestId(10, \u0027Z\u0027));","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    public void hash_validInput_correctHash() {","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        // equals","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new TestId(100, \u0027Z\u0027).hashCode(), \"Z100\".hashCode());","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"        // not equals","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        for (char c \u003d \u0027A\u0027; c \u003c \u0027Z\u0027; c++) {","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"            assertNotEquals(new TestId(100, \u0027Z\u0027).hashCode(), (c + \"100\").hashCode());","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    public void toString_validInput_correctString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        // equals","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new TestId(100, \u0027Z\u0027).toString(), \"Z100\");","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(new TestId(1, \u0027A\u0027).hashCode(), \"A001\".hashCode());","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        // not equals","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        assertNotEquals(new TestId(1, \u0027A\u0027).hashCode(), \"A010\".hashCode());","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"    void isValidId_validInput_testsPassed() {","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        // null phone number","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e Id.isValidId(null, null));","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        // invalid Id numbers","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(Id.isValidId(0, \u0027Z\u0027)); // id \u003c 1","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(Id.isValidId(1000, \u0027Z\u0027)); // id \u003e 999","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(Id.isValidId(1, \u0027a\u0027)); // char not A-Z but still an alphabet","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(Id.isValidId(1, \u0027!\u0027)); // char not A-Z","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"        // valid Id numbers","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(Id.isValidId(1, \u0027Z\u0027)); // id \u003e\u003d 1, valid prefix","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(Id.isValidId(999, \u0027Z\u0027)); // edge prefix Z and id 999","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(Id.isValidId(50, \u0027A\u0027)); // edge prefix A","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(Id.isValidId(50, \u0027K\u0027)); // common case prefix and id","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"    public void isValidIdFormat() {","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"        // valid Id format","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(Id.isValidIdFormat(\"Z999\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"        // invalid id format","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(Id.isValidIdFormat(\"test\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(Id.isValidIdFormat(\"A1\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(Id.isValidIdFormat(\"a100\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"    public void getIdNumber_validInput_testsPassed() {","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(999, new TestId(999, \u0027A\u0027).getIdNumber());","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(10, new TestId(10, \u0027Z\u0027).getIdNumber());","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(59, new TestId(59, \u0027Z\u0027).getIdNumber());","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"     * Mock id class to be tested.","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"    public static class TestId extends Id {","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"        /**","lastModifiedDate":"2021-10-01"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"         * Constructs a {@code Id}.","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"         *","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"         * @param id Integer from 0-999.","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"         * @param prefix Char from A-Z only.","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"         */","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"        public TestId(Integer id, Character prefix) {","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"            super(id, prefix);","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"simonjulianl":112}},{"path":"src/test/java/gomedic/model/commonfield/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.util.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e firstPredicate \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"                new NameContainsKeywordsPredicate\u003cDoctor\u003e(firstPredicateKeywordList);","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e secondPredicate \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"                new NameContainsKeywordsPredicate\u003cDoctor\u003e(secondPredicateKeywordList);","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        assertEquals(firstPredicate, firstPredicate);","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e firstPredicateCopy \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"                new NameContainsKeywordsPredicate\u003cDoctor\u003e(firstPredicateKeywordList);","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        assertEquals(firstPredicateCopy, firstPredicate);","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(firstPredicate, 1);","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(firstPredicate, null);","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        // different Doctor -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(secondPredicate, firstPredicate);","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e predicate \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"                new NameContainsKeywordsPredicate\u003cDoctor\u003e(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        assertTrue(predicate.test(new DoctorBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        predicate \u003d new NameContainsKeywordsPredicate\u003cDoctor\u003e(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        assertTrue(predicate.test(new DoctorBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        predicate \u003d new NameContainsKeywordsPredicate\u003cDoctor\u003e(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        assertTrue(predicate.test(new DoctorBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        predicate \u003d new NameContainsKeywordsPredicate\u003cDoctor\u003e(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        assertTrue(predicate.test(new DoctorBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        NameContainsKeywordsPredicate\u003cDoctor\u003e predicate \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"                new NameContainsKeywordsPredicate\u003cDoctor\u003e(Collections.emptyList());","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        assertFalse(predicate.test(new DoctorBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        predicate \u003d new NameContainsKeywordsPredicate\u003cDoctor\u003e(Arrays.asList(\"Carol\"));","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        assertFalse(predicate.test(new DoctorBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"simonjulianl":2,"yyhangz":30,"-":47}},{"path":"src/test/java/gomedic/model/commonfield/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"simonjulianl":2,"-":38}},{"path":"src/test/java/gomedic/model/commonfield/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"simonjulianl":2,"-":38}},{"path":"src/test/java/gomedic/model/commonfield/TimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.commonfield;","lastModifiedDate":"2021-10-02"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-02"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-02"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-02"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-02"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-02"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"class TimeTest {","lastModifiedDate":"2021-10-02"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-02"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Time((String) null));","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Time((LocalDateTime) null));","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_invalidFormat_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"30/11/2022\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"time\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"30-11-2022\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_invalidDateDay_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"32/12/2022 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"-1-12-2022 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"00-01-2022 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"ab-12-2015 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_invalidDateMonth_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-02"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15/13/2022 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15-13-2022 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15-1-2022 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"2022-13-15 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_invalidHour_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-02"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15/12/2022 25:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15/12/2022 -1:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_invalidMinute_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-02"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15/12/2022 13:61\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15/12/2022 13:1\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_validInput_testPassed() {","lastModifiedDate":"2021-10-02"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(() -\u003e new Time(\"15/12/2022 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(() -\u003e new Time(\"15-12-2022 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(() -\u003e new Time(\"2022-12-15 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        assertDoesNotThrow(() -\u003e new Time(LocalDateTime.now()));","lastModifiedDate":"2021-10-02"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    public void constructor_incompleteDigit_throwsInvalidArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15/12/2022 13:0\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"15-12-2022 5:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"2022-12-5 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"2022-1-15 13:00\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"    public void toString_manualInput_testPassed() {","lastModifiedDate":"2021-10-02"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        Time time \u003d new Time(\"05/10/2020 05:50\");","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"05-10-2020 05:50\", time.toString());","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"05-10-2020\", time.toDateString());","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"05:50\", time.toTimeString());","lastModifiedDate":"2021-10-02"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"    public void toString_localDateTime_testPassed() {","lastModifiedDate":"2021-10-02"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"        Time time \u003d new Time(LocalDateTime.of(2020, 10, 5, 5, 50));","lastModifiedDate":"2021-10-02"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"05-10-2020 05:50\", time.toString());","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"05-10-2020\", time.toDateString());","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(\"05:50\", time.toTimeString());","lastModifiedDate":"2021-10-02"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"    public void hashCode_validInput_testPassed() {","lastModifiedDate":"2021-10-02"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"        LocalDateTime ldt \u003d LocalDateTime.of(2020, 10, 5, 5, 50);","lastModifiedDate":"2021-10-02"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"        Time time \u003d new Time(ldt);","lastModifiedDate":"2021-10-02"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"        assertEquals(ldt.hashCode(), time.hashCode());","lastModifiedDate":"2021-10-02"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"    public void equalsDate_localDateTime_testPassed() {","lastModifiedDate":"2021-10-02"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"        Time time \u003d new Time(LocalDateTime.of(2020, 10, 5, 5, 50));","lastModifiedDate":"2021-10-02"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(time.equalsDateTime(time));","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(time.isAfter(time));","lastModifiedDate":"2021-10-02"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"        assertFalse(time.isBefore(time));","lastModifiedDate":"2021-10-02"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"    public void isAfterIsBefore_localDateTime_testPassed() {","lastModifiedDate":"2021-10-02"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"        Time timeFirst \u003d new Time(LocalDateTime.of(2020, 10, 5, 5, 50));","lastModifiedDate":"2021-10-02"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"        Time time \u003d new Time(LocalDateTime.of(2021, 10, 5, 5, 50));","lastModifiedDate":"2021-10-02"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(time.isAfter(timeFirst));","lastModifiedDate":"2021-10-02"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"        assertTrue(timeFirst.isBefore(time));","lastModifiedDate":"2021-10-02"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"simonjulianl":111}},{"path":"src/test/java/gomedic/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.person;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.IdTest;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.ArbitraryPerson;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"class PersonTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    private static Person person;","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private static Id id;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    private static Name name;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    private static Phone phone;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    @BeforeAll","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    public static void setUp() {","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        id \u003d new IdTest.TestId(100, \u0027P\u0027);","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        name \u003d new Name(\"John Doe\");","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        phone \u003d new Phone(\"87654321\");","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        // ArbitraryPerson is a testutil class representing the abstract person class","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        person \u003d new ArbitraryPerson(name, phone, id);","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    void constructor_anyNull_throwsNullArgumentException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ArbitraryPerson(null, null, null));","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    void getId() {","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        assertEquals(id, person.getId());","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"    void getName() {","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        assertEquals(name, person.getName());","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    void getPhone() {","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        assertEquals(phone, person.getPhone());","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    void testHashCode() {","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        int hash \u003d Objects.hash(name, phone, id);","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        assertEquals(hash, person.hashCode());","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"    void testEquals() {","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        Id diffId \u003d new IdTest.TestId(420, \u0027L\u0027);","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        Name diffName \u003d new Name(\"Johnny\");","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        Phone diffPhone \u003d new Phone(\"12345678\");","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        Person personDiffId \u003d new ArbitraryPerson(name, phone, diffId);","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        Person personDiffName \u003d new ArbitraryPerson(diffName, phone, id);","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"        Person personDiffPhone \u003d new ArbitraryPerson(name, diffPhone, id);","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"        Person personAllSameFields \u003d new ArbitraryPerson(name, phone, id);","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(person, personDiffId); // Person is not same if id is not same","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        assertEquals(person, personDiffName); // Person with different names are the same if id is the same","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        assertEquals(person, personDiffPhone); // Person with different phone numbers are the same if id is the same","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        // Same if other person is different instance with the same id and data fields","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        assertEquals(person, personAllSameFields);","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"    void testToString() {","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"        assertEquals(\"Id: P100; Name: John Doe;\"","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"                + \" Phone: 87654321\", person.toString());","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"simonjulianl":2,"yyhangz":64,"-":18}},{"path":"src/test/java/gomedic/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.person;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.OTHER_DOCTOR;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.exceptions.MaxAddressBookCapacityReached;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"class UniquePersonListTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    private final UniquePersonList\u003cDoctor\u003e uniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        assertFalse(uniquePersonList.contains(MAIN_DOCTOR));","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        assertTrue(uniquePersonList.contains(MAIN_DOCTOR));","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        // Doctor is same even if name changes","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        Doctor editedMainDoctor \u003d new DoctorBuilder(MAIN_DOCTOR).withName(\"Smith Joe\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        assertTrue(uniquePersonList.contains(editedMainDoctor));","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        // Doctor is same even if department changes","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        editedMainDoctor \u003d new DoctorBuilder(MAIN_DOCTOR).withDepartment(\"Cardiology\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        assertTrue(uniquePersonList.contains(editedMainDoctor));","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        // Doctor is same even if phone number changes","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        editedMainDoctor \u003d new DoctorBuilder(MAIN_DOCTOR).withPhone(\"99999999\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        assertTrue(uniquePersonList.contains(editedMainDoctor));","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(MAIN_DOCTOR));","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, MAIN_DOCTOR));","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(MAIN_DOCTOR, null));","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(MAIN_DOCTOR, MAIN_DOCTOR));","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.setPerson(MAIN_DOCTOR, MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"        UniquePersonList\u003cDoctor\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"        expectedUniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(MAIN_DOCTOR).withDepartment(\"Cardiology\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.setPerson(MAIN_DOCTOR, editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"        UniquePersonList\u003cDoctor\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"        expectedUniquePersonList.add(editedDoctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.setPerson(MAIN_DOCTOR, OTHER_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"yyhangz"},"content":"        UniquePersonList\u003cDoctor\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"        expectedUniquePersonList.add(OTHER_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":115,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(OTHER_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"yyhangz"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(MAIN_DOCTOR,","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"yyhangz"},"content":"                OTHER_DOCTOR));","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"yyhangz"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(MAIN_DOCTOR));","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.remove(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"yyhangz"},"content":"        UniquePersonList\u003cDoctor\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"    public void setPersons_nullUniqueAbstractPersonList_throwsNullPointerException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"        assertThrows(","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"                NullPointerException.class, () -\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"                        uniquePersonList.setPersons((UniquePersonList\u003cDoctor\u003e) null));","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"    public void setPersons_uniqueAbstractPersonList_replacesOwnListWithProvidedUniqueAbstractPersonList() {","lastModifiedDate":"2021-10-14"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"        UniquePersonList\u003cDoctor\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"        expectedUniquePersonList.add(OTHER_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"        assertThrows(","lastModifiedDate":"2021-10-14"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"                NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cDoctor\u003e) null));","lastModifiedDate":"2021-10-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.add(MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"        List\u003cDoctor\u003e personList \u003d Collections.singletonList(OTHER_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"        UniquePersonList\u003cDoctor\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-10-14"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"        expectedUniquePersonList.add(OTHER_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":172,"author":{"gitId":"yyhangz"},"content":"        List\u003cDoctor\u003e listWithDuplicatePersons \u003d Arrays.asList(MAIN_DOCTOR, MAIN_DOCTOR);","lastModifiedDate":"2021-10-14"},{"lineNumber":173,"author":{"gitId":"yyhangz"},"content":"        assertThrows(","lastModifiedDate":"2021-10-14"},{"lineNumber":174,"author":{"gitId":"yyhangz"},"content":"                DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2021-10-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":179,"author":{"gitId":"simonjulianl"},"content":"        assertThrows(","lastModifiedDate":"2021-09-28"},{"lineNumber":180,"author":{"gitId":"yyhangz"},"content":"                UnsupportedOperationException.class, () -\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":181,"author":{"gitId":"yyhangz"},"content":"                        uniquePersonList.asUnmodifiableSortedByIdObservableList().remove(0)","lastModifiedDate":"2021-10-14"},{"lineNumber":182,"author":{"gitId":"simonjulianl"},"content":"        );","lastModifiedDate":"2021-09-28"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":184,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":185,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":186,"author":{"gitId":"yyhangz"},"content":"    void hasNewId_emptyList_returnsTrue() {","lastModifiedDate":"2021-10-14"},{"lineNumber":187,"author":{"gitId":"yyhangz"},"content":"        assertTrue(uniquePersonList.hasNewId());","lastModifiedDate":"2021-10-14"},{"lineNumber":188,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":189,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":190,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":191,"author":{"gitId":"yyhangz"},"content":"    void hasNewId_oneLessThanMaxCapacity_returnsTrue() {","lastModifiedDate":"2021-10-14"},{"lineNumber":192,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-14"},{"lineNumber":193,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":194,"author":{"gitId":"yyhangz"},"content":"            uniquePersonList.add(toAdd);","lastModifiedDate":"2021-10-14"},{"lineNumber":195,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":196,"author":{"gitId":"yyhangz"},"content":"        assertTrue(uniquePersonList.hasNewId());","lastModifiedDate":"2021-10-14"},{"lineNumber":197,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":198,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":199,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":200,"author":{"gitId":"yyhangz"},"content":"    void hasNewId_listAtMaxCapacity_returnsFalse() {","lastModifiedDate":"2021-10-14"},{"lineNumber":201,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-14"},{"lineNumber":202,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":203,"author":{"gitId":"yyhangz"},"content":"            uniquePersonList.add(toAdd);","lastModifiedDate":"2021-10-14"},{"lineNumber":204,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":205,"author":{"gitId":"yyhangz"},"content":"        assertFalse(uniquePersonList.hasNewId());","lastModifiedDate":"2021-10-14"},{"lineNumber":206,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":207,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":208,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":209,"author":{"gitId":"yyhangz"},"content":"    void getNewId_emptyList_returns1() {","lastModifiedDate":"2021-10-14"},{"lineNumber":210,"author":{"gitId":"yyhangz"},"content":"        assertEquals(1, uniquePersonList.getNewId());","lastModifiedDate":"2021-10-14"},{"lineNumber":211,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":212,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":213,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":214,"author":{"gitId":"yyhangz"},"content":"    void getNewId_fourAlreadyInList_returns5() {","lastModifiedDate":"2021-10-14"},{"lineNumber":215,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c\u003d 4; i++) {","lastModifiedDate":"2021-10-14"},{"lineNumber":216,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":217,"author":{"gitId":"yyhangz"},"content":"            uniquePersonList.add(toAdd);","lastModifiedDate":"2021-10-14"},{"lineNumber":218,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":219,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":220,"author":{"gitId":"yyhangz"},"content":"        assertEquals(5, uniquePersonList.getNewId());","lastModifiedDate":"2021-10-14"},{"lineNumber":221,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":222,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":223,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":224,"author":{"gitId":"yyhangz"},"content":"    void getNewId_fourAlreadyInListRemoveId2_returns2() {","lastModifiedDate":"2021-10-14"},{"lineNumber":225,"author":{"gitId":"yyhangz"},"content":"        Doctor toRemove \u003d new DoctorBuilder().withId(2).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":226,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":227,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c\u003d 4; i++) {","lastModifiedDate":"2021-10-14"},{"lineNumber":228,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":229,"author":{"gitId":"yyhangz"},"content":"            uniquePersonList.add(toAdd);","lastModifiedDate":"2021-10-14"},{"lineNumber":230,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":231,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":232,"author":{"gitId":"yyhangz"},"content":"        uniquePersonList.remove(toRemove);","lastModifiedDate":"2021-10-14"},{"lineNumber":233,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":234,"author":{"gitId":"yyhangz"},"content":"        assertEquals(2, uniquePersonList.getNewId());","lastModifiedDate":"2021-10-14"},{"lineNumber":235,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":236,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":237,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":238,"author":{"gitId":"yyhangz"},"content":"    void getNewId_listContainsOneLessThanMax_returnsMax() {","lastModifiedDate":"2021-10-14"},{"lineNumber":239,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-14"},{"lineNumber":240,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":241,"author":{"gitId":"yyhangz"},"content":"            uniquePersonList.add(toAdd);","lastModifiedDate":"2021-10-14"},{"lineNumber":242,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":243,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":244,"author":{"gitId":"yyhangz"},"content":"        assertEquals(Id.MAXIMUM_ASSIGNABLE_IDS, uniquePersonList.getNewId());","lastModifiedDate":"2021-10-14"},{"lineNumber":245,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":246,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":247,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":248,"author":{"gitId":"yyhangz"},"content":"    void getNewId_listContainsMax_throwsMaxAddressBookCapacityReached() {","lastModifiedDate":"2021-10-14"},{"lineNumber":249,"author":{"gitId":"yyhangz"},"content":"        for (int i \u003d 1; i \u003c\u003d Id.MAXIMUM_ASSIGNABLE_IDS; i++) {","lastModifiedDate":"2021-10-14"},{"lineNumber":250,"author":{"gitId":"yyhangz"},"content":"            Doctor toAdd \u003d new DoctorBuilder().withId(i).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":251,"author":{"gitId":"yyhangz"},"content":"            uniquePersonList.add(toAdd);","lastModifiedDate":"2021-10-14"},{"lineNumber":252,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":253,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":254,"author":{"gitId":"yyhangz"},"content":"        assertThrows(MaxAddressBookCapacityReached.class, uniquePersonList::getNewId);","lastModifiedDate":"2021-10-14"},{"lineNumber":255,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"simonjulianl":9,"yyhangz":140,"-":107}},{"path":"src/test/java/gomedic/model/person/doctor/DepartmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.model.person.doctor;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"public class DepartmentTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Department(null));","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public void constructor_invalidDepartment_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Department(invalidName));","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    public void isValidDepartment() {","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        // null name","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e Department.isValidDepartmentName(null));","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        // invalid name","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        assertFalse(Department.isValidDepartmentName(\"\")); // empty string","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        assertFalse(Department.isValidDepartmentName(\" \")); // spaces only","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        assertFalse(Department.isValidDepartmentName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        assertFalse(Department.isValidDepartmentName(\"Xray Centre 1*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        // valid name","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        assertTrue(Department.isValidDepartmentName(\"pediatrics\")); // alphabets only","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        assertTrue(Department.isValidDepartmentName(\"12345\")); // numbers only","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        assertTrue(Department.isValidDepartmentName(\"xray centre 2\")); // alphanumeric characters","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        assertTrue(Department.isValidDepartmentName(\"Xray Centre\")); // with capital letters","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        assertTrue(Department.isValidDepartmentName(\"New Pediatrics School of John Doe the 2nd\")); // long names","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    public void toString_sameDepartmentName_testPassed() {","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        String departmentName \u003d \"xray centre\";","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        Department department \u003d new Department(departmentName);","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        assertEquals(department.toString(), departmentName);","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    public void equals_differentInstanceSameName_isEqual() {","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        String departmentName \u003d \"xray centre\";","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        Department department \u003d new Department(departmentName);","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        Department otherDepartment \u003d new Department(departmentName);","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        assertEquals(otherDepartment, department);","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"yyhangz":55}},{"path":"src/test/java/gomedic/model/person/doctor/DoctorIdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.model.person.doctor;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.IdTest;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"public class DoctorIdTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DoctorId((Integer) null));","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DoctorId((String) null));","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public void constructor_invalidNumber_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DoctorId(1000));","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    public void toString_validDoctorId_testPassed() {","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        assertEquals(new DoctorId(100).toString(), \"D100\");","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    void isValidId_idParams() {","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        // null doctor id","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DoctorId((Integer) null));","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        // invalid doctor id","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        assertFalse(DoctorId.isValidDoctorId(new IdTest.TestId(999, \u0027C\u0027))); // wrong prefix","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        assertFalse(DoctorId.isValidDoctorId(new IdTest.TestId(10, \u0027A\u0027))); // wrong prefix","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        // valid doctor id","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        assertTrue(DoctorId.isValidDoctorId(new DoctorId(100))); // doctor id","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        assertTrue(DoctorId.isValidDoctorId(new IdTest.TestId(50, \u0027D\u0027))); // other id with same prefix","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"    void isValidId_stringParams() {","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        // null doctor id","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DoctorId((String) null));","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        // invalid string literal of Doctor Id","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        assertFalse(DoctorId.isValidDoctorId(\"111\")); // no prefix","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        assertFalse(DoctorId.isValidDoctorId(\"A111\")); // wrong prefix","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        assertFalse(DoctorId.isValidDoctorId(\"D11\")); // wrong format","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        // valid string literal for doctor id","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        assertTrue(DoctorId.isValidDoctorId(\"D765\")); // normal doctor id","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        assertTrue(DoctorId.isValidDoctorId(\"D007\")); // doctor id with 2 leading \u00270\u0027s","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"    @SuppressWarnings(\"AssertBetweenInconvertibleTypes\")","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        assertEquals(new DoctorId(100), new DoctorId(100));","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        assertEquals(new DoctorId(100), new IdTest.TestId(100, \u0027D\u0027));","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"yyhangz":64}},{"path":"src/test/java/gomedic/model/person/doctor/DoctorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.model.person.doctor;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"public class DoctorTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    private static Doctor doctor;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    private static DoctorId id;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    private static Name name;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    private static Phone phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private static Department department;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    @BeforeAll","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    public static void setUp() {","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        id \u003d new DoctorId(1);","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        name \u003d new Name(\"John Doe version 2\");","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        phone \u003d new Phone(\"995\");","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        department \u003d new Department(\"Dermatology\");","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        doctor \u003d new Doctor(name, phone, id, department);","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    void constructor_anyNull_throwsNullArgumentException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Doctor(null, null, null, null));","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"    void getDoctorId() {","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        assertEquals(id, doctor.getId()); // getId is an inherited method","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"    void getName() {","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        assertEquals(name, doctor.getName());","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    void getPhone() {","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        assertEquals(phone, doctor.getPhone());","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    void getDepartment() {","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        assertEquals(department, doctor.getDepartment());","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"    void testHashCode() {","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        int hash \u003d Objects.hash(name, phone, id, department);","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        assertEquals(hash, doctor.hashCode());","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"    void testEquals() {","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        DoctorId diffId \u003d new DoctorId(420);","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        Name diffName \u003d new Name(\"Dohn Joe version 1\");","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        Phone diffPhone \u003d new Phone(\"99999999\");","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"        Department diffDepartment \u003d new Department(\"ENT\");","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorDiffId \u003d new Doctor(name, phone, diffId, department);","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorDiffName \u003d new Doctor(diffName, phone, id, department);","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorDiffPhone \u003d new Doctor(name, diffPhone, id, department);","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorDiffDepartment \u003d new Doctor(name, phone, id, diffDepartment);","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        Doctor doctorAllSameFields \u003d new Doctor(name, phone, id, department);","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        assertNotEquals(doctor, doctorDiffId); // Doctors are different if their ids are different","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        assertEquals(doctor, doctorDiffName); // Doctors with different names are the same as long as id is same","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"        assertEquals(doctor, doctorDiffPhone); // Doctors with different phone numbers are the same if id is same","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"        assertEquals(doctor, doctorDiffDepartment); // Doctors with different departments are the same if id is same","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"        // Same if other doctor is a different instance but all identity and data fields are the same","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        assertEquals(doctor, doctorAllSameFields);","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"    void testToString() {","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        assertEquals(\"Id: D001; Name: John Doe version 2;\"","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"                + \" Phone: 995; \"","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"                + \"Department: Dermatology\", doctor.toString());","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"yyhangz":91}},{"path":"src/test/java/gomedic/model/person/patient/AgeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.model.person.patient.Age.isValidAge;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class AgeTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Age(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_textContainsNonNumericCharacter_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Age(\"12a\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_tooBigNumberInTest_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Age(\"200\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public void toString_validString_testPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Age(text).toString(), text);","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    void hashCode_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Age(text).hashCode(), text.hashCode());","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Age(text), new Age(text));","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    void isValidTitle_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidAge(\"123\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(isValidAge(\"200\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":50}},{"path":"src/test/java/gomedic/model/person/patient/BloodTypeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.model.person.patient.BloodType.isValidBloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class BloodTypeTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new BloodType(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_textNotValid_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new BloodType(\"ABC\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    public void toString_validString_testPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"AB\";","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new BloodType(text).toString(), text);","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"    void hashCode_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"AB\";","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new BloodType(text).hashCode(), text.hashCode());","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"AB\";","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new BloodType(text), new BloodType(text));","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    void isValidTitle_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidBloodType(\"AB\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(isValidBloodType(\"ABC\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":45}},{"path":"src/test/java/gomedic/model/person/patient/GenderTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.model.person.patient.Gender.isValidGender;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class GenderTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Gender(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_textNotValid_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Gender(\"ABC\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    public void toString_validString_testPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"M\";","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Gender(text).toString(), text);","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"    void hashCode_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"M\";","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Gender(text).hashCode(), text.hashCode());","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"M\";","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Gender(text), new Gender(text));","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    void isValidTitle_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidGender(\"M\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(isValidGender(\"ABC\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":45}},{"path":"src/test/java/gomedic/model/person/patient/HeightTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.model.person.patient.Height.isValidHeight;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class HeightTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Height(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_textContainsNonNumericCharacter_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Height(\"12a\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_tooBigNumberInTest_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Height(\"400\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public void toString_validString_testPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Height(text).toString(), text);","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    void hashCode_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Height(text).hashCode(), text.hashCode());","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Height(text), new Height(text));","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    void isValidTitle_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidHeight(\"123\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(isValidHeight(\"ABC\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":50}},{"path":"src/test/java/gomedic/model/person/patient/PatientIdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.model.person.patient.PatientId.isValidPatientId;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.IdTest;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"public class PatientIdTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PatientId((Integer) null));","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PatientId((String) null));","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_invalidNumber_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new PatientId(1000));","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_validInput_testPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new PatientId(100), new PatientId(\"P100\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    public void toString_validPatientId_testPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new PatientId(100).toString(), \"P100\");","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"    void isValidId_validInputId_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"        // null patient id","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PatientId((Integer) null));","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"        // invalid patient id","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(isValidPatientId(new IdTest.TestId(999, \u0027C\u0027))); // wrong prefix","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(isValidPatientId(new IdTest.TestId(10, \u0027D\u0027))); // wrong prefix","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"        // valid patient id","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidPatientId(new PatientId(100))); // patient id","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidPatientId(new IdTest.TestId(50, \u0027P\u0027))); // other id with same prefix","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"    void isValidId_stringParams_testPassed() {","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"        // null patient id","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PatientId((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"        // invalid string literal of Patient Id","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(PatientId.isValidPatientId(\"111\")); // no prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(PatientId.isValidPatientId(\"A111\")); // wrong prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(PatientId.isValidPatientId(\"P11\")); // wrong format","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"        // valid string literal for doctor id","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(PatientId.isValidPatientId(\"P765\")); // normal doctor id","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(PatientId.isValidPatientId(\"P007\")); // doctor id with 2 leading \u00270\u0027s","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"    @SuppressWarnings(\"AssertBetweenInconvertibleTypes\")","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new PatientId(100), new PatientId(100));","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new PatientId(100), new IdTest.TestId(100, \u0027P\u0027));","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"    void isValidPatientId_stringInput_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidPatientId(new PatientId(100))); // activity id","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidPatientId(new IdTest.TestId(50, \u0027P\u0027))); // other id with same prefix","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":76}},{"path":"src/test/java/gomedic/model/person/patient/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"public class PatientTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"    private static Patient patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    private static PatientId id;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    private static Name name;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    private static Phone phone;","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    private static Age age;","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    private static BloodType bloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    private static Gender gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    private static Height height;","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    private static Weight weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    private static Set\u003cTag\u003e medicalConditions;","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    @BeforeAll","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    public static void setUp() {","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"        id \u003d new PatientId(1);","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"        name \u003d new Name(\"John Doe\");","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"        phone \u003d new Phone(\"12345678\");","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"        age \u003d new Age(\"31\");","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"        bloodType \u003d new BloodType(\"A\");","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"        gender \u003d new Gender(\"M\");","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"        height \u003d new Height(\"175\");","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"        weight \u003d new Weight(\"70\");","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"        medicalConditions \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"        medicalConditions.add(new Tag(\"heart failure\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"        patient \u003d new Patient(name, phone, id, age, bloodType, gender, height, weight, medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"    void constructor_anyNull_throwsNullArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Patient(null, null, null, null,","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"            null, null, null, null, null));","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"    void getPatientId() {","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(id, patient.getId()); // getId is an inherited method","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    void getName() {","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(name, patient.getName());","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"    void getPhone() {","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(phone, patient.getPhone());","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"    void getAge() {","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(age, patient.getAge());","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"    void getBloodType() {","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(bloodType, patient.getBloodType());","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"    void getGender() {","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(gender, patient.getGender());","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"    void getHeight() {","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(height, patient.getHeight());","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"    void getWeight() {","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(weight, patient.getWeight());","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"    void getMedicalConditions() {","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(medicalConditions, patient.getMedicalConditions());","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"    void testHashCode() {","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"        int hash \u003d Objects.hash(name, phone, id, age, bloodType, gender, height, weight, medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(hash, patient.hashCode());","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"    void testEquals() {","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"        PatientId diffId \u003d new PatientId(420);","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"        Name diffName \u003d new Name(\"Dohn Joe\");","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"        Phone diffPhone \u003d new Phone(\"99999999\");","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"        Age diffAge \u003d new Age(\"30\");","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"        BloodType diffBloodtype \u003d new BloodType(\"O\");","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"        Gender diffGender \u003d new Gender(\"O\");","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"        Height diffHeight \u003d new Height(\"176\");","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"        Weight diffWeight \u003d new Weight(\"85\");","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"        Set\u003cTag\u003e diffMedicalConditions \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"        diffMedicalConditions.add(new Tag(\"diabetes\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"        Patient patientDiffId \u003d new Patient(name, phone, diffId, age, bloodType, gender, height,","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"            weight, medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"        Patient patientDiffName \u003d new Patient(diffName, phone, id, age, bloodType, gender, height,","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"            weight, medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"        Patient patientDiffPhone \u003d new Patient(name, diffPhone, id, age, bloodType, gender, height,","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"            weight, medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"        Patient patientDiffOthers \u003d new Patient(name, phone, id, age, diffBloodtype, diffGender,","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"            diffHeight, diffWeight, diffMedicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"        Patient patientAllSameFields \u003d new Patient(name, phone, id, age, bloodType, gender, height,","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"            weight, medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"        assertNotEquals(patient, patientDiffId); // Patients are different if their ids are different","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(patient, patientDiffName); // Patients with different names are the same as long as id is same","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(patient, patientDiffPhone); // Patients with different phone numbers are the same if id is same","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(patient, patientDiffOthers); // Patients with different details are the same if id is same","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"        // Same if other patient is a different instance but all identity and data fields are the same","lastModifiedDate":"2021-10-08"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(patient, patientAllSameFields);","lastModifiedDate":"2021-10-08"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"        // Same if other patient is the same instance","lastModifiedDate":"2021-10-08"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(patient, patient);","lastModifiedDate":"2021-10-08"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"        // Different if the other object is not Patient","lastModifiedDate":"2021-10-08"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"        assertNotEquals(patient, \"abc\");","lastModifiedDate":"2021-10-08"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"    void testToString() {","lastModifiedDate":"2021-10-08"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"        assertEquals(\"Id: P001;\" + \" Name: John Doe;\"","lastModifiedDate":"2021-10-14"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"            + \" Phone: 12345678;\"","lastModifiedDate":"2021-10-08"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"            + \" Age: 31;\"","lastModifiedDate":"2021-10-08"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"            + \" Blood type: A;\"","lastModifiedDate":"2021-10-08"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"            + \" Gender: M;\"","lastModifiedDate":"2021-10-08"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"            + \" Height: 175;\"","lastModifiedDate":"2021-10-08"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"            + \" Weight: 70;\"","lastModifiedDate":"2021-10-08"},{"lineNumber":151,"author":{"gitId":"radiankrisno"},"content":"            + \" Medical conditions: [heart failure]\", patient.toString());","lastModifiedDate":"2021-10-08"},{"lineNumber":152,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":153,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":152,"yyhangz":1}},{"path":"src/test/java/gomedic/model/person/patient/WeightTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.model.person.patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.model.person.patient.Weight.isValidWeight;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"public class WeightTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Weight(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_textContainsNonNumericCharacter_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Weight(\"12a\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    public void constructor_tooBigNumberInTest_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Weight(\"800\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public void toString_validString_testPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Weight(text).toString(), text);","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    void hashCode_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Weight(text).hashCode(), text.hashCode());","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    void equals_inputs_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"        String text \u003d \"123\";","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        assertEquals(new Weight(text), new Weight(text));","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    void isValidTitle_testsPassed() {","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        assertTrue(isValidWeight(\"123\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        assertFalse(isValidWeight(\"ABC\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":50}},{"path":"src/test/java/gomedic/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.model.tag;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.Assert.assertThrows;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"simonjulianl":2,"-":24}},{"path":"src/test/java/gomedic/storage/JsonAdaptedActivityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TypicalActivities;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"public class JsonAdaptedActivityTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_TITLE \u003d \"R@chel\".repeat(100);","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_ID \u003d \"C100\";","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_DESC \u003d \"what is this doing\".repeat(1000);","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_START_TIME \u003d \"15/07/2000\";","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"    private static final String INVALID_END_TIME \u003d \"15/13/2000 15:00\";","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_TITLE \u003d TypicalActivities.MEETING.getTitle().toString();","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_START_TIME \u003d TypicalActivities.MEETING.getStartTime().toString();","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_END_TIME \u003d TypicalActivities.MEETING.getEndTime().toString();","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_ID \u003d TypicalActivities.MEETING.getActivityId().toString();","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    private static final String VALID_DESCRIPTION \u003d TypicalActivities.MEETING.getDescription().toString();","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_validActivityDetails_returnsDoctor() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"                VALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"                VALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"                VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"                VALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"                VALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        Assertions.assertEquals(TypicalActivities.MEETING, activity.toModelType());","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_invalidTitle_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activity \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"                new JsonAdaptedActivity(VALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"                        INVALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"                        VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"                        VALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"                        VALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_nullId_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(null,","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"                VALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"                VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"                VALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"                VALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"                JsonAdaptedActivity.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"                ActivityId.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_invalidDescription_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activity \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"                new JsonAdaptedActivity(VALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"                        VALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"                        INVALID_DESC,","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"                        VALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"                        VALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(VALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"                null,","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"                VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"                VALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"                VALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"simonjulianl"},"content":"                JsonAdaptedActivity.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"simonjulianl"},"content":"                Title.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_invalidId_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activity \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"simonjulianl"},"content":"                new JsonAdaptedActivity(INVALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"simonjulianl"},"content":"                        VALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"simonjulianl"},"content":"                        VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"simonjulianl"},"content":"                        VALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"simonjulianl"},"content":"                        VALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d ActivityId.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_invalidTime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activity \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"simonjulianl"},"content":"                new JsonAdaptedActivity(VALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"simonjulianl"},"content":"                        VALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"simonjulianl"},"content":"                        VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"simonjulianl"},"content":"                        INVALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"simonjulianl"},"content":"                        VALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activityTwo \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"simonjulianl"},"content":"                new JsonAdaptedActivity(VALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"simonjulianl"},"content":"                        VALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"simonjulianl"},"content":"                        VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"simonjulianl"},"content":"                        VALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"simonjulianl"},"content":"                        INVALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessageTwo \u003d Time.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessageTwo, activityTwo::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_nullTime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(VALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"simonjulianl"},"content":"                VALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"simonjulianl"},"content":"                VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"simonjulianl"},"content":"                null,","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"                VALID_END_TIME);","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"simonjulianl"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"simonjulianl"},"content":"                JsonAdaptedActivity.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"simonjulianl"},"content":"                Time.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"simonjulianl"},"content":"        JsonAdaptedActivity activityTwo \u003d new JsonAdaptedActivity(VALID_ID,","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"simonjulianl"},"content":"                VALID_TITLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"simonjulianl"},"content":"                VALID_DESCRIPTION,","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"simonjulianl"},"content":"                VALID_START_TIME,","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"simonjulianl"},"content":"                null);","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, activityTwo::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"simonjulianl":140}},{"path":"src/test/java/gomedic/storage/JsonAdaptedDoctorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.storage;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"public class JsonAdaptedDoctorTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    private static final String INVALID_ID \u003d \"D24\";","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    private static final String INVALID_DEPARTMENT \u003d \" \";","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private static final String VALID_NAME \u003d TypicalPersons.MAIN_DOCTOR.getName().toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    private static final String VALID_PHONE \u003d TypicalPersons.MAIN_DOCTOR.getPhone().toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    private static final String VALID_ID \u003d TypicalPersons.MAIN_DOCTOR.getId().toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    private static final String VALID_DEPARTMENT \u003d TypicalPersons.MAIN_DOCTOR.getDepartment().toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_validDoctorDetails_returnsDoctor() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(TypicalPersons.MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        Assertions.assertEquals(TypicalPersons.MAIN_DOCTOR, doctor.toModelType());","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor person \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"                new JsonAdaptedDoctor(INVALID_NAME, VALID_PHONE, VALID_ID, VALID_DEPARTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor person \u003d new JsonAdaptedDoctor(null, VALID_PHONE, VALID_ID, VALID_DEPARTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"                JsonAdaptedDoctor.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"                Name.class.getSimpleName());","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor person \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"                new JsonAdaptedDoctor(VALID_NAME, INVALID_PHONE, VALID_ID, VALID_DEPARTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor person \u003d new JsonAdaptedDoctor(VALID_NAME, null, VALID_ID, VALID_DEPARTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"                JsonAdaptedDoctor.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"                Phone.class.getSimpleName());","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_invalidId_throwsIllegalValueException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor person \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"                new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, INVALID_ID, VALID_DEPARTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d DoctorId.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_nullId_throwsIllegalValueException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor person \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, null, VALID_DEPARTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"                JsonAdaptedDoctor.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"                DoctorId.class.getSimpleName());","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_invalidDepartment_throwsIllegalValueException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor person \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"                new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_ID, INVALID_DEPARTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d Department.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_nullDepartment_throwsIllegalValueException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"        JsonAdaptedDoctor person \u003d new JsonAdaptedDoctor(VALID_NAME, VALID_PHONE, VALID_ID, null);","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"                JsonAdaptedDoctor.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"                Department.class.getSimpleName());","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"yyhangz":98}},{"path":"src/test/java/gomedic/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.storage;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import java.util.List;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Age;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.BloodType;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Gender;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Height;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.PatientId;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Weight;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    private static final String INVALID_ID \u003d \"D24\";","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    private static final String INVALID_AGE \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    private static final String INVALID_BLOODTYPE \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    private static final String INVALID_GENDER \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    private static final String INVALID_HEIGHT \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"    private static final String INVALID_WEIGHT \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"    private static final List\u003cJsonAdaptedTag\u003e INVALID_MEDICALCONDITIONS \u003d null;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"    private static final String VALID_NAME \u003d TypicalPersons.MAIN_PATIENT.getName().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    private static final String VALID_PHONE \u003d TypicalPersons.MAIN_PATIENT.getPhone().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    private static final String VALID_ID \u003d TypicalPersons.MAIN_PATIENT.getId().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    private static final String VALID_AGE \u003d TypicalPersons.MAIN_PATIENT.getAge().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"    private static final String VALID_BLOODTYPE \u003d TypicalPersons.MAIN_PATIENT.getBloodType().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    private static final String VALID_GENDER \u003d TypicalPersons.MAIN_PATIENT.getGender().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    private static final String VALID_HEIGHT \u003d TypicalPersons.MAIN_PATIENT.getHeight().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    private static final String VALID_WEIGHT \u003d TypicalPersons.MAIN_PATIENT.getWeight().toString();","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_MEDICALCONDITIONS \u003d TypicalPersons.MAIN_PATIENT","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"        .getMedicalConditions().stream()","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        .map(JsonAdaptedTag::new)","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"        .collect(Collectors.toList());","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_validPatientDetails_returnsPatient() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(TypicalPersons.MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        Assertions.assertEquals(TypicalPersons.MAIN_PATIENT, patient.toModelType());","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"            VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"            JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"            Name.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"            VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"            JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"            Phone.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidId_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d PatientId.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_nullId_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, null, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"            JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"            PatientId.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidAge_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, INVALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d Age.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_nullAge_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, null, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"            JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"            Age.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidBloodType_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, INVALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d BloodType.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_nullBloodType_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, null,","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"radiankrisno"},"content":"            JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"            BloodType.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidGender_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"radiankrisno"},"content":"                INVALID_GENDER, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_nullGender_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"radiankrisno"},"content":"                null, VALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"radiankrisno"},"content":"            JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"radiankrisno"},"content":"            Gender.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidHeight_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, INVALID_HEIGHT, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d Height.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_nullHeight_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, null, VALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"radiankrisno"},"content":"            JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"radiankrisno"},"content":"            Height.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidWeight_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, INVALID_WEIGHT, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":194,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d Weight.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":195,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":196,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":197,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":198,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":199,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_nullWeight_throwsIllegalValueException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":200,"author":{"gitId":"radiankrisno"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":201,"author":{"gitId":"radiankrisno"},"content":"            new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ID, VALID_AGE, VALID_BLOODTYPE,","lastModifiedDate":"2021-10-10"},{"lineNumber":202,"author":{"gitId":"radiankrisno"},"content":"                VALID_GENDER, VALID_HEIGHT, null, VALID_MEDICALCONDITIONS);","lastModifiedDate":"2021-10-10"},{"lineNumber":203,"author":{"gitId":"radiankrisno"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-10-10"},{"lineNumber":204,"author":{"gitId":"radiankrisno"},"content":"            JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":205,"author":{"gitId":"radiankrisno"},"content":"            Weight.class.getSimpleName());","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":208,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"radiankrisno":208}},{"path":"src/test/java/gomedic/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_DOCTOR;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.MAIN_PATIENT;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import static gomedic.testutil.TypicalPersons.NOT_IN_TYPICAL_DOCTOR;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import static gomedic.testutil.TypicalPersons.NOT_IN_TYPICAL_PATIENT;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    public void readAddressBook_invalidDoctorAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidDoctorAddressBook.json\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"    public void readAddressBook_invalidAndValidDoctorAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"                DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidDoctorAddressBook.json\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"    public void readAddressBook_invalidPatientAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidDoctorAddressBook.json\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"    public void readAddressBook_invalidAndValidPatientAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"            DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidDoctorAddressBook.json\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"    // TODO: add more tests for the activities","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"        AddressBook original \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2021-09-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"        original.addDoctor(NOT_IN_TYPICAL_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"        original.removeDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"        original.addPatient(NOT_IN_TYPICAL_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"        original.removePatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"        original.addDoctor(MAIN_DOCTOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"        original.addPatient(MAIN_PATIENT);","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2021-09-28"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2021-09-28"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"radiankrisno":15,"simonjulianl":12,"yyhangz":13,"-":89}},{"path":"src/test/java/gomedic/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.util.JsonUtil;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    private static final Path TYPICAL_ADDRESS_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAddressBook.json\");","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientAddressBook.json\");","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    private static final Path INVALID_DOCTOR_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDoctorAddressBook.json\");","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    private static final Path INVALID_ACTIVITY_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidActivityAddressBook.json\");","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    private static final Path CONFLICTING_ACTIVITY_FILE \u003d TEST_DATA_FOLDER","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"            .resolve(\"conflictingActivitiesAddressBook.json\");","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    private static final Path DUPLICATE_ACTIVITY_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateActivitiesAddressBook.json\");","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    private static final Path DUPLICATE_DOCTOR_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateDoctorAddressBook.json\");","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientAddressBook.json\");","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_typicalAddressBookFile_success() throws Exception {","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ADDRESS_BOOK_FILE,","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    // TODO : Uncomment this once the data is already correct","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    //    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"    //    public void toModelType_conflictingActivity_throwsConflictingActivityException() throws Exception {","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    //        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(CONFLICTING_ACTIVITY_FILE,","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"    //                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    //","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    //        Assert.assertThrows(ConflictingActivityException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"    //    }","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_duplicateActivity_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ACTIVITY_FILE,","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    public void toModelType_invalidActivity_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ACTIVITY_FILE,","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_invalidDoctorFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DOCTOR_FILE,","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"    public void toModelType_duplicateDoctors_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_DOCTOR_FILE,","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        Assert.assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_DOCTOR,","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"            JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"            JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"        Assert.assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PATIENT,","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"            dataFromFile::toModelType);","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"radiankrisno":17,"simonjulianl":35,"yyhangz":20,"-":21}},{"path":"src/test/java/gomedic/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"        userPrefs.setAddressBookDataFileRootPath(Paths.get(\"data\", \"addressbook.json\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2021-09-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"simonjulianl"},"content":"        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2021-10-03"},{"lineNumber":109,"author":{"gitId":"simonjulianl"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);","lastModifiedDate":"2021-10-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"simonjulianl":12,"-":111}},{"path":"src/test/java/gomedic/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.GuiSettings;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.UserPrefs;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.TypicalPersons;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        AddressBook original \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        assertNotNull(storageManager.getAddressBookDataFilePath());","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":8,"-":60}},{"path":"src/test/java/gomedic/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * {@code AddressBook ab \u003d new AddressBookBuilder().withPatient(patient).build();}","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     * Adds a new {@code Activity} to the {@code AddressBook} that we are building.","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"    public AddressBookBuilder withActivity(Activity activity) {","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        addressBook.addActivity(activity);","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"     * Adds a new {@code Doctor} to the {@code AddressBook} that we are building.","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"    public AddressBookBuilder withDoctor(Doctor doctor) {","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        addressBook.addDoctor(doctor);","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        return this;","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"     * Adds a new {@code Patient} to the {@code AddressBook} that we are building.","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    public AddressBookBuilder withPatient(Patient patient) {","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        addressBook.addPatient(patient);","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"radiankrisno":9,"simonjulianl":12,"yyhangz":10,"-":21}},{"path":"src/test/java/gomedic/testutil/ArbitraryPerson.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import gomedic.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Id;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":" * Represents an arbitrary person class to test the abstract person class in gomedic.","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"public class ArbitraryPerson extends Person {","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public ArbitraryPerson(Name name, Phone phone, Id id) {","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"        super(name, phone, id);","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"        CollectionUtil.requireAllNonNull(name, phone, id);","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"yyhangz":21}},{"path":"src/test/java/gomedic/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"simonjulianl":1,"-":33}},{"path":"src/test/java/gomedic/testutil/CommandGenerationUtils.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.addcommand.AddDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.parser.CliSyntax;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":" * A utility class for generation of commands / details of commands.","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"public class CommandGenerationUtils {","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"     * Returns an add command string for adding the {@code doctor}.","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    public static String getAddDoctorCommand(Doctor doctor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"        return AddDoctorCommand.COMMAND_WORD + \" \" + getDoctorDetails(doctor);","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * Returns the part of command string for the given {@code doctor}\u0027s details.","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    public static String getDoctorDetails(Doctor doctor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        sb.append(CliSyntax.PREFIX_NAME + doctor.getName().fullName + \" \");","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        sb.append(CliSyntax.PREFIX_PHONE + doctor.getPhone().value + \" \");","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        sb.append(CliSyntax.PREFIX_DEPARTMENT + doctor.getDepartment().departmentName);","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"        return sb.toString();","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"     * Returns the part of command string for the given {@code EditDoctorDescriptor}\u0027s details.","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    public static String getEditDoctorDescriptorDetails(EditDoctorCommand.EditDoctorDescriptor descriptor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(CliSyntax.PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(CliSyntax.PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        descriptor.getDepartment()","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"                .ifPresent(department -\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"                        sb.append(CliSyntax.PREFIX_DEPARTMENT).append(department.departmentName).append(\" \"));","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"        return sb.toString();","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"simonjulianl":25,"yyhangz":18}},{"path":"src/test/java/gomedic/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":1,"-":71}},{"path":"src/test/java/gomedic/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"simonjulianl":1,"-":29}},{"path":"src/test/java/gomedic/testutil/TypicalActivities.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import java.util.List;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.modelbuilder.ActivityBuilder;","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"public class TypicalActivities {","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"    public static final Activity MEETING \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"            .withId(1)","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"            .withTitle(\"Meeting me\")","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"            .withDescription(\"today at somewhere\")","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"            .withStartTime(\"15/09/2022 13:00\")","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"            .withEndTime(\"15/09/2022 15:00\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    public static final Activity CONFLICTING_MEETING \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"            .withId(2)","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"            .withTitle(\"Another Meeting\")","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"            .withDescription(\"today at somewhere\")","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"            .withStartTime(\"15/09/2022 13:00\")","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"            .withEndTime(\"15/09/2022 14:00\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"    public static final Activity PAPER_REVIEW \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"            .withId(3)","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"            .withTitle(\"Paper Review with me\")","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"            .withDescription(\"someone is attending this\")","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"            .withStartTime(\"16/09/2022 13:00\")","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"            .withEndTime(\"17/09/2022 13:00\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"    public static final Activity PAST_ACTIVITY \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"            .withId(4)","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"            .withTitle(\"playing games\")","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"            .withDescription(\"at someone house\")","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"            .withStartTime(\"15/09/2020 13:00\")","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"            .withEndTime(\"15/09/2020 14:00\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"    public static final Activity DUPLICATE_ACTIVITY \u003d new ActivityBuilder()","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"            .withId(1)","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"            .withTitle(\"playing games\")","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"            .withDescription(\"at someone house\")","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"            .withStartTime(\"15/09/2023 13:00\")","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"            .withEndTime(\"15/09/2024 13:00\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    private TypicalActivities() {","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"     * @return a list of activity including the conflicting one.","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    public static List\u003cActivity\u003e getTypicalActivitiesConflicting() {","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING, CONFLICTING_MEETING, PAPER_REVIEW, PAST_ACTIVITY));","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"     * @return a list of activity.","lastModifiedDate":"2021-10-03"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"    public static List\u003cActivity\u003e getTypicalActivities() {","lastModifiedDate":"2021-10-03"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING, PAPER_REVIEW, PAST_ACTIVITY));","lastModifiedDate":"2021-10-03"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"     * @return a list of activity including the duplicate one.","lastModifiedDate":"2021-10-03"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    public static List\u003cActivity\u003e getTypicalActivitiesDuplicate() {","lastModifiedDate":"2021-10-03"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING, DUPLICATE_ACTIVITY, PAPER_REVIEW, PAST_ACTIVITY));","lastModifiedDate":"2021-10-03"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":70}},{"path":"src/test/java/gomedic/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.commons.core.index.Index;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":"    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"simonjulianl":5,"-":7}},{"path":"src/test/java/gomedic/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import static gomedic.testutil.TypicalActivities.getTypicalActivities;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.AddressBook;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"import gomedic.testutil.modelbuilder.DoctorBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.testutil.modelbuilder.PatientBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * GoMedic doctors","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    public static final Doctor MAIN_DOCTOR \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    public static final Doctor OTHER_DOCTOR \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"            new DoctorBuilder().withName(\"Smith John\").withPhone(\"77777777\").withDepartment(\"ENT\").withId(2).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    public static final Doctor THIRD_DOCTOR \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"            new DoctorBuilder().withName(\"Joe Smith\").withPhone(\"55555555\").withDepartment(\"Xray\").withId(3).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    public static final Doctor NOT_IN_TYPICAL_DOCTOR \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"            new DoctorBuilder().withName(\"Midnight coding lol\").withPhone(\"11111111\")","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"                    .withDepartment(\"ENT 2\").withId(4).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    public static final Doctor DUPLICATE_DOCTOR \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"            new DoctorBuilder().withName(\"Tom\").withPhone(\"22222\")","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"                    .withDepartment(\"ENT 3\").withId(1).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"     * GoMedic patients","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    public static final Patient MAIN_PATIENT \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    public static final Patient OTHER_PATIENT \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"        new PatientBuilder().withName(\"Smith John\").withPhone(\"77777777\").withAge(\"40\").withId(2).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    public static final Patient THIRD_PATIENT \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"        new PatientBuilder().withName(\"Joe Smith\").withPhone(\"55555555\").withAge(\"35\").withId(3).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"    public static final Patient NOT_IN_TYPICAL_PATIENT \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"        new PatientBuilder().withName(\"Midnight coding lol\").withPhone(\"11111111\").withAge(\"28\").withId(4).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"    private TypicalPersons() {","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"     * Returns an {@code AddressBook} with all the typical persons and activities.","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"     * TODO: Maybe refactor this address book to separate file instead of in typical persons.","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"        for (Activity activity : getTypicalActivities()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"            ab.addActivity(activity);","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        for (Doctor person : getTypicalDoctors()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"            ab.addDoctor(person);","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"        for (Patient person : getTypicalPatients()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"            ab.addPatient(person);","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"    public static List\u003cDoctor\u003e getTypicalDoctors() {","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MAIN_DOCTOR, OTHER_DOCTOR, THIRD_DOCTOR));","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"    public static List\u003cPatient\u003e getTypicalPatients() {","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MAIN_PATIENT, OTHER_PATIENT, THIRD_PATIENT));","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"radiankrisno":21,"simonjulianl":14,"yyhangz":24,"-":20}},{"path":"src/test/java/gomedic/testutil/editdescriptorbuilder/EditActivityDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil.editdescriptorbuilder;","lastModifiedDate":"2021-10-15"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.logic.commands.editcommand.EditActivityCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":" * A utility class to help with building EditDoctorDescriptor objects.","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"public class EditActivityDescriptorBuilder {","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    private final EditActivityCommand.EditActivityDescriptor descriptor;","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityDescriptorBuilder() {","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"        descriptor \u003d new EditActivityCommand.EditActivityDescriptor();","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityDescriptorBuilder(EditActivityCommand.EditActivityDescriptor descriptor) {","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"        this.descriptor \u003d new EditActivityCommand.EditActivityDescriptor(descriptor);","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"     * Returns an {@code EditActivityDescriptor} with fields containing {@code activity}\u0027s details","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityDescriptorBuilder(Activity activity) {","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"        descriptor \u003d new EditActivityCommand.EditActivityDescriptor();","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        descriptor.setStartTime(activity.getStartTime());","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        descriptor.setEndTime(activity.getEndTime());","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        descriptor.setTitle(activity.getTitle());","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        descriptor.setDescription(activity.getDescription());","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code StartTime} of the {@code EditActivityDescriptor} that we are building.","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityDescriptorBuilder withStartTime(String startTime) {","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"        descriptor.setStartTime(new Time(startTime));","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code EndTime} of the {@code EditActivityDescriptor} that we are building.","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityDescriptorBuilder withEndTime(String endTime) {","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"        descriptor.setEndTime(new Time(endTime));","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code Title} of the {@code EditActivityDescriptor} that we are building.","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityDescriptorBuilder withTitle(String title) {","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"        descriptor.setTitle(new Title(title));","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code Description} of the {@code EditActivityDescriptor} that we are building.","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityDescriptorBuilder withDescription(String description) {","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"        descriptor.setDescription(new Description(description));","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    public EditActivityCommand.EditActivityDescriptor build() {","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        return descriptor;","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"simonjulianl":71}},{"path":"src/test/java/gomedic/testutil/editdescriptorbuilder/EditDoctorDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.testutil.editdescriptorbuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import gomedic.logic.commands.editcommand.EditDoctorCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":" * A utility class to help with building EditDoctorDescriptor objects.","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"public class EditDoctorDescriptorBuilder {","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    private final EditDoctorCommand.EditDoctorDescriptor descriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorDescriptorBuilder() {","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"        descriptor \u003d new EditDoctorCommand.EditDoctorDescriptor();","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorDescriptorBuilder(EditDoctorCommand.EditDoctorDescriptor descriptor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        this.descriptor \u003d new EditDoctorCommand.EditDoctorDescriptor(descriptor);","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     * Returns an {@code EditDoctorDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorDescriptorBuilder(Doctor doctor) {","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        descriptor \u003d new EditDoctorCommand.EditDoctorDescriptor();","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        descriptor.setName(doctor.getName());","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        descriptor.setPhone(doctor.getPhone());","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        descriptor.setDepartment(doctor.getDepartment());","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     * Sets the {@code Name} of the {@code EditDoctorDescriptor} that we are building.","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"     * Sets the {@code Phone} of the {@code EditDoctorDescriptor} that we are building.","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"     * Sets the {@code Department} of the {@code EditDoctorDescriptor} that we are building.","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorDescriptorBuilder withDepartment(String department) {","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        descriptor.setDepartment(new Department(department));","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"    public EditDoctorCommand.EditDoctorDescriptor build() {","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        return descriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"yyhangz":61}},{"path":"src/test/java/gomedic/testutil/modelbuilder/ActivityBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.testutil.modelbuilder;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Activity;","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.ActivityId;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Description;","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.activity.Title;","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"simonjulianl"},"content":"import gomedic.model.commonfield.Time;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"simonjulianl"},"content":"/**","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"simonjulianl"},"content":" * A utility class to help with building Activity objects.","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"simonjulianl"},"content":" */","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"public class ActivityBuilder {","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    public static final String DEFAULT_START_TIME \u003d \"15/09/2022 13:00\";","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    public static final String DEFAULT_END_TIME \u003d \"15/09/2022 14:00\";","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"simonjulianl"},"content":"    public static final String DEFAULT_TITLE \u003d \"Meeting\";","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"simonjulianl"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"simonjulianl"},"content":"    public static final int DEFAULT_ID \u003d 1;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"simonjulianl"},"content":"    private ActivityId aid;","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"simonjulianl"},"content":"    private Time startTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"simonjulianl"},"content":"    private Time endTime;","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"simonjulianl"},"content":"    private Title title;","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"simonjulianl"},"content":"    private Description description;","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"simonjulianl"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"    public ActivityBuilder() {","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        aid \u003d new ActivityId(DEFAULT_ID);","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"simonjulianl"},"content":"        startTime \u003d new Time(DEFAULT_START_TIME);","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"simonjulianl"},"content":"        endTime \u003d new Time(DEFAULT_END_TIME);","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"simonjulianl"},"content":"        title \u003d new Title(DEFAULT_TITLE);","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"simonjulianl"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code Title} of the {@code Activity} that we are building.","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"simonjulianl"},"content":"    public ActivityBuilder withTitle(String title) {","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"simonjulianl"},"content":"        this.title \u003d new Title(title);","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code StartTime} of the {@code Activity} that we are building.","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"simonjulianl"},"content":"    public ActivityBuilder withStartTime(String startTime) {","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"simonjulianl"},"content":"        this.startTime \u003d new Time(startTime);","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code withEndTime} of the {@code Activity} that we are building.","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"simonjulianl"},"content":"    public ActivityBuilder withEndTime(String endTime) {","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"simonjulianl"},"content":"        this.endTime \u003d new Time(endTime);","lastModifiedDate":"2021-10-03"},{"lineNumber":59,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-03"},{"lineNumber":60,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":61,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code withEndTime} of the {@code Activity} that we are building.","lastModifiedDate":"2021-10-03"},{"lineNumber":64,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":65,"author":{"gitId":"simonjulianl"},"content":"    public ActivityBuilder withDescription(String description) {","lastModifiedDate":"2021-10-03"},{"lineNumber":66,"author":{"gitId":"simonjulianl"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2021-10-03"},{"lineNumber":67,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-03"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":70,"author":{"gitId":"simonjulianl"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":71,"author":{"gitId":"simonjulianl"},"content":"     * Sets the {@code ActivityId} of the {@code id} that we are building.","lastModifiedDate":"2021-10-03"},{"lineNumber":72,"author":{"gitId":"simonjulianl"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":73,"author":{"gitId":"simonjulianl"},"content":"    public ActivityBuilder withId(int id) {","lastModifiedDate":"2021-10-03"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"        aid \u003d new ActivityId(id);","lastModifiedDate":"2021-10-03"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        return this;","lastModifiedDate":"2021-10-03"},{"lineNumber":76,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":77,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":78,"author":{"gitId":"simonjulianl"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":79,"author":{"gitId":"simonjulianl"},"content":"    public Activity build() {","lastModifiedDate":"2021-10-03"},{"lineNumber":80,"author":{"gitId":"simonjulianl"},"content":"        return new Activity(aid, startTime, endTime, title, description);","lastModifiedDate":"2021-10-03"},{"lineNumber":81,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":82,"author":{"gitId":"simonjulianl"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"simonjulianl":82}},{"path":"src/test/java/gomedic/testutil/modelbuilder/DoctorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package gomedic.testutil.modelbuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Department;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.Doctor;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import gomedic.model.person.doctor.DoctorId;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":" * A utility class to help with building Doctor objects.","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"public class DoctorBuilder {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    public static final String DEFAULT_NAME \u003d \"John Doe\";","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    public static final String DEFAULT_DEPARTMENT \u003d \"Pediatrics\";","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    private static final int DEFAULT_ID \u003d 1;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    private Name name;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    private Phone phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private Department department;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    private DoctorId did;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"     * Creates a {@code DoctorBuilder} with the default details.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    public DoctorBuilder() {","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        department \u003d new Department(DEFAULT_DEPARTMENT);","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        did \u003d new DoctorId(DEFAULT_ID);","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"     * Initializes the DoctorBuilder with the data of {@code doctorToCopy}.","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"    public DoctorBuilder(Doctor doctorToCopy) {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        name \u003d doctorToCopy.getName();","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        phone \u003d doctorToCopy.getPhone();","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        department \u003d doctorToCopy.getDepartment();","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        did \u003d (DoctorId) doctorToCopy.getId();","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"     * Sets the {@code Name} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"    public DoctorBuilder withName(String name) {","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"     * Sets the {@code Phone} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"    public DoctorBuilder withPhone(String phone) {","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"     * Sets the {@code Department} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"    public DoctorBuilder withDepartment(String department) {","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        this.department \u003d new Department(department);","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"     * Sets the {@code DoctorId} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"    public DoctorBuilder withId(int id) {","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        this.did \u003d new DoctorId(id);","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"    public Doctor build() {","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        return new Doctor(name, phone, did, department);","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"yyhangz":80}},{"path":"src/test/java/gomedic/testutil/modelbuilder/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"radiankrisno"},"content":"package gomedic.testutil.modelbuilder;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"radiankrisno"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"radiankrisno"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Name;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.commonfield.Phone;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Age;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.BloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Height;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Patient;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.PatientId;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.person.patient.Weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"radiankrisno"},"content":"import gomedic.model.tag.Tag;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"radiankrisno"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"radiankrisno"},"content":" * A utility class to help with building Patient objects.","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"radiankrisno"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"radiankrisno"},"content":"public class PatientBuilder {","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"radiankrisno"},"content":"    public static final String DEFAULT_NAME \u003d \"Dohn Joe\";","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"radiankrisno"},"content":"    public static final String DEFAULT_PHONE \u003d \"12345678\";","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"radiankrisno"},"content":"    public static final String DEFAULT_AGE \u003d \"40\";","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"radiankrisno"},"content":"    public static final String DEFAULT_BLOODTYPE \u003d \"AB\";","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"radiankrisno"},"content":"    public static final String DEFAULT_GENDER \u003d \"M\";","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"radiankrisno"},"content":"    public static final String DEFAULT_HEIGHT \u003d \"176\";","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"radiankrisno"},"content":"    public static final String DEFAULT_WEIGHT \u003d \"86\";","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"radiankrisno"},"content":"    public static final Set\u003cTag\u003e DEFAULT_MEDICAL_CONDITIONS \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"radiankrisno"},"content":"    private static final int DEFAULT_ID \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"radiankrisno"},"content":"    private Name name;","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"radiankrisno"},"content":"    private Phone phone;","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"radiankrisno"},"content":"    private Age age;","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"radiankrisno"},"content":"    private BloodType bloodType;","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"radiankrisno"},"content":"    private Gender gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"radiankrisno"},"content":"    private Height height;","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"radiankrisno"},"content":"    private Weight weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"radiankrisno"},"content":"    private PatientId pid;","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"radiankrisno"},"content":"    private Set\u003cTag\u003e medicalConditions;","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"radiankrisno"},"content":"     * Creates a {@code PatientBuilder} with the default details.","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder() {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"radiankrisno"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"radiankrisno"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"radiankrisno"},"content":"        age \u003d new Age(DEFAULT_AGE);","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"radiankrisno"},"content":"        bloodType \u003d new BloodType(DEFAULT_BLOODTYPE);","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"radiankrisno"},"content":"        gender \u003d new Gender(DEFAULT_GENDER);","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"radiankrisno"},"content":"        height \u003d new Height(DEFAULT_HEIGHT);","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"radiankrisno"},"content":"        weight \u003d new Weight(DEFAULT_WEIGHT);","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"radiankrisno"},"content":"        pid \u003d new PatientId(DEFAULT_ID);","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"radiankrisno"},"content":"        medicalConditions \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"radiankrisno"},"content":"        medicalConditions.addAll(DEFAULT_MEDICAL_CONDITIONS);","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"radiankrisno"},"content":"        medicalConditions.add(new Tag(\"heart failure\"));","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"radiankrisno"},"content":"     * Initializes the PatientBuilder with the data of {@code patientToCopy}.","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder(Patient patientToCopy) {","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"radiankrisno"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"radiankrisno"},"content":"        phone \u003d patientToCopy.getPhone();","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"radiankrisno"},"content":"        age \u003d patientToCopy.getAge();","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"radiankrisno"},"content":"        bloodType \u003d patientToCopy.getBloodType();","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"radiankrisno"},"content":"        gender \u003d patientToCopy.getGender();","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"radiankrisno"},"content":"        weight \u003d patientToCopy.getWeight();","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"radiankrisno"},"content":"        height \u003d patientToCopy.getHeight();","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"radiankrisno"},"content":"        pid \u003d (PatientId) patientToCopy.getId();","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"radiankrisno"},"content":"        medicalConditions \u003d patientToCopy.getMedicalConditions();","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"radiankrisno"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"radiankrisno"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"radiankrisno"},"content":"     * Sets the {@code Phone} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withPhone(String phone) {","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"radiankrisno"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"radiankrisno"},"content":"     * Sets the {@code Age} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withAge(String age) {","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"radiankrisno"},"content":"        this.age \u003d new Age(age);","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"radiankrisno"},"content":"     * Sets the {@code BloodType} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withBloodType(String bloodType) {","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"radiankrisno"},"content":"        this.bloodType \u003d new BloodType(bloodType);","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"radiankrisno"},"content":"     * Sets the {@code Gender} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withGender(String gender) {","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"radiankrisno"},"content":"        this.gender \u003d new Gender(gender);","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"radiankrisno"},"content":"     * Sets the {@code Height} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withHeight(String height) {","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"radiankrisno"},"content":"        this.height \u003d new Height(height);","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"radiankrisno"},"content":"     * Sets the {@code Weight} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withWeight(String weight) {","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"radiankrisno"},"content":"        this.weight \u003d new Weight(weight);","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"radiankrisno"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":133,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withMedicalConditions(Set\u003cTag\u003e medicalConditions) {","lastModifiedDate":"2021-10-08"},{"lineNumber":134,"author":{"gitId":"radiankrisno"},"content":"        this.medicalConditions \u003d new HashSet\u003c\u003e(medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":136,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":137,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"radiankrisno"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":139,"author":{"gitId":"radiankrisno"},"content":"     * Sets the {@code PatientId} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":140,"author":{"gitId":"radiankrisno"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":141,"author":{"gitId":"radiankrisno"},"content":"    public PatientBuilder withId(int id) {","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"radiankrisno"},"content":"        this.pid \u003d new PatientId(id);","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"radiankrisno"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":144,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":145,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":146,"author":{"gitId":"radiankrisno"},"content":"    public Patient build() {","lastModifiedDate":"2021-10-08"},{"lineNumber":147,"author":{"gitId":"radiankrisno"},"content":"        return new Patient(name, phone, pid, age, bloodType, gender, height, weight, medicalConditions);","lastModifiedDate":"2021-10-08"},{"lineNumber":148,"author":{"gitId":"radiankrisno"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":149,"author":{"gitId":"radiankrisno"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":150,"author":{"gitId":"radiankrisno"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"radiankrisno":150}},{"path":"src/test/java/gomedic/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"simonjulianl"},"content":"    public TestFxmlObject() {","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"simonjulianl"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"simonjulianl":3,"-":33}},{"path":"src/test/java/gomedic/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"simonjulianl"},"content":"package gomedic.ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"simonjulianl"},"content":"import gomedic.MainApp;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"simonjulianl"},"content":"import gomedic.testutil.Assert;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"simonjulianl"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2021-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"simonjulianl":15,"-":99}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"\u003c?import gomedic.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"simonjulianl":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"simonjulianl"},"content":"\u003cfx:root type\u003d\"gomedic.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"simonjulianl":1,"-":5}}]
