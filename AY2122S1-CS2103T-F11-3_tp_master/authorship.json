[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-F11-3/tp/actions)","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-F11-3/tp/branch/master/graph/badge.svg?token\u003dREU06SVNLO)](https://codecov.io/gh/AY2122S1-CS2103T-F11-3/tp)","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* This is **HeRon**, an application.\u003cbr\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* HeRon is a product designed for Human Resource (HR) Managers in companies to increase the convenience of managing employee information.","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  * To assist in managing HR administrative tasks such as:","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    * tracking leaves and offs","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    * calculating overtime pay","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    * updating payroll information like salaries and bank account numbers","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * To allow users to quickly assess the balance of work between employees.","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"* For the detailed documentation of this project, see the **[HeRon Product Website](https://ay2122s1-cs2103t-f11-3.github.io/tp/)**.","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"szelongq":3,"-":14,"1waykiat":1}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"run {","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"run {","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"    // https://mvnrepository.com/artifact/com.opencsv/opencsv","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"    implementation group: \u0027com.opencsv\u0027, name: \u0027opencsv\u0027, version: \u00275.5.2\u0027","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"run {","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":84,"author":{"gitId":"szelongq"},"content":"    archiveName \u003d \u0027HeRon.jar\u0027","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"1waykiat"},"content":"run {","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"1waykiat"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"danielsimre":4,"szelongq":5,"boonhaii":6,"-":71,"1waykiat":6}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"### Lim Boon Hai","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/boonhaii.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"[[github](https://github.com/boonhaii)]","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/boonhaii.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"* Role: Documentation Manager","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"* Responsibilities: Manages the updating of the documentations.","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"### Ng Wee Han","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/beefham.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"[[github](http://github.com/beefham)]","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/beefham.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"* Role: Scheduling/Issue Tracking Manager","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"* Responsibilities: Manages deadlines and tracks the progress of issues assigned to each member.","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"### Sim Rui En, Daniel","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/danielsimre.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"[[github](http://github.com/danielsimre)]","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/danielsimre.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"* Role: Testing Manager","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"* Responsibilities: Manages and advise on testing related issues.","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"### Quek Sze Long","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/szelongq.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"[[github](http://github.com/szelongq)]","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/szelongq.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"* Role: Code Quality Manager","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"* Responsibilities: Manages and advise on code quality related issues.","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"### Wan Wei Kiat","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"\u003cimg src\u003d\"images/1waykiat.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"[[github](http://github.com/1waykiat)]","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"[[portfolio](team/1waykiat.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"* Role: UI/UX Manager","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"1waykiat"},"content":"* Responsibilities: Designs the UI/UX interface and implementation of its components.","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"boonhaii":26,"-":28,"1waykiat":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"### Third-Party Libraries Used","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"* The Import Feature implemented uses [Opencsv](http://opencsv.sourceforge.net/).","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2122S1-CS2103T-F11-3/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2122S1-CS2103T-F11-3/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2122S1-CS2103T-F11-3/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2122S1-CS2103T-F11-3/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2122S1-CS2103T-F11-3/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2122S1-CS2103T-F11-3/tp/blob/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"**API** : [`Logic.java`](https://github.com/AY2122S1-CS2103T-F11-3/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"**API** : [`Model.java`](https://github.com/AY2122S1-CS2103T-F11-3/tp/blob/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. ","lastModifiedDate":"2021-11-07"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"It has a `Tag` and `Leave` list in the `AddressBook`, which `Person` references.","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"This allows `AddressBook` to only require one `Tag` object per unique tag, and one `Leave` object per unique date, ","lastModifiedDate":"2021-11-07"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"instead of each `Person` needing their own `Tag` and `LeavesTaken` objects. More information on how leaves are currently implemented","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"can be found [here](#assigned-leaves). \u003c/div\u003e ","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"**API** : [`Storage.java`](https://github.com/AY2122S1-CS2103T-F11-3/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"beefham"},"content":"### Find Command","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"**Current Implementation**","lastModifiedDate":"2021-11-08"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":161,"author":{"gitId":"beefham"},"content":"The find command allows a user to specify all the different fields which they want to search by.","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"beefham"},"content":"It is implemented by parsing all the different fields that the user is searching with, and creating the relevant predicate for each field.","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"beefham"},"content":"For example:","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"beefham"},"content":"* Searching by name `n/NAME` will create a NameContainsKeywordsPredicate","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"beefham"},"content":"* Searching by role `r/ROLE` will create a RoleContainsKeywordsPredicate","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"beefham"},"content":"* Searching by overtime hours with a \u0027less than\u0027 comparison `o/\u003cOVERTIME` will create a OvertimeLessThanPredicate","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"beefham"},"content":"and so on.","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"beefham"},"content":"Each field the user specifies is located and parsed with the `tokenize` function from ArgumentTokenizer.","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"beefham"},"content":"The ArgumentTokenizer splits the user input into key-value pairs of the field\u0027s prefix and the values to query with, which can then be handled by the FindCommandParser.","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"beefham"},"content":"Each predicate is then generated by passing the value found in the ArgumentMultimap created by ArgumentTokenizer.","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"beefham"},"content":"In general, there are 2 main types of predicates.","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"beefham"},"content":"1. Keyword matching predicates","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"beefham"},"content":"    * These predicates check for a match between the user\u0027s query and the respective field in each `Person` in HeRon","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"beefham"},"content":"    * The keywords are easily found from the ArgumentMultimap and are parsed using the `String#split()` method.","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"beefham"},"content":"    One possible issue is that keywords containing spaces cannot be used. Therefore, a user input such as \"Admin Assistant\" will match \"HR Assistant\" and \"IT Admin\". ","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"beefham"},"content":"    However, the current implementation allows for more flexible searching","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"beefham"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"beefham"},"content":"2. Comparison based predicates","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"beefham"},"content":"    * These predicates compare their given value with the respective field in each `Person` in HeRon.","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"beefham"},"content":"        * For example, a LeaveLessThanPredicate will check if the `Person` has a number of leaves strictly less than the given value.","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"beefham"},"content":"    * First, the respective method found in `FindCommandParser` for creating a comparison predicate is called.","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"beefham"},"content":"        * For example, to get a `SalaryIsLessThanPredicate`, `FindCommandParser#getSalaryComparisonPredicate` is called with the user\u0027s input.","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"boonhaii"},"content":"    * The comparison type is found using the `parseComparator()` method in FindCommandParser, which returns a CompareType, an enum found in FindCommandParser which has 5 values representing the different available comparisons: \"more than\", \"more than or equal\", \"less than\", \"less than or equal\", and \"equal\".","lastModifiedDate":"2021-11-08"},{"lineNumber":188,"author":{"gitId":"beefham"},"content":"    * The value to compare to is then found using the `getComparisonValue()` method in FindCommandParser, which returns a String to be parsed.","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"beefham"},"content":"        * This is done because the different fields take in different number types. For example, the HourlySalary field takes in a `double`, whereas the Leave field takes in an `int`.","lastModifiedDate":"2021-11-07"},{"lineNumber":190,"author":{"gitId":"beefham"},"content":"    * Finally, the predicate is created by checking the CompareType and then passing the parsed value to the constructor.","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"beefham"},"content":"After each predicate is generated, it is added to a list of filters in the parser, and after all predicates are added, they are combined into a single predicate using the `Predicate#reduce()` function, which is used to create the FindCommand.","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"beefham"},"content":"This means that a Person must fulfill ALL predicates to be considered a match.","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"beefham"},"content":"These predicates are combined into a single predicate so that it can be passed into the FindCommand, as it already takes in a single Predicate in its constructor.","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"beefham"},"content":"This also means that the implementation of `FindCommand#execute()` does not need to be modified to account for multiple predicates at all, and it can be treated as a black box.","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"beefham"},"content":"Below is the sequence diagram which shows a quick overview of how the FindCommand is created.","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"beefham"},"content":"![FindCommand](images/FindSequenceDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"beefham"},"content":"![FindCommandGetPredicates](images/FindCommandGetPredicateDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"beefham"},"content":"This allows multiple types of predicates to be chained together so that it is possible to handle a large query with multiple filters.","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"beefham"},"content":"Therefore, it is also easy to extend this implementation to contain other predicates by following the below steps.","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"beefham"},"content":"1. Define a new Predicate class that implements Predicate\u003cPerson\u003e that tests a certain field of a person.","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"beefham"},"content":"2. Add that field\u0027s prefix into `CliSyntax.java` if it does not exist yet.","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"beefham"},"content":"3. Add that field\u0027s prefix into `ArgumentTokenizer#tokenize()` in `FindCommandParser#parse()`.","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"beefham"},"content":"4. Within `FindCommandParser#parse()`, create the respective predicate and add it to the `filters` list in FindCommandParser.","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"boonhaii"},"content":"**Alternatives considered**\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":211,"author":{"gitId":"beefham"},"content":"There are many alternatives for different parts of the FindCommandParser implementation.","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"beefham"},"content":"The first alternative implementation concerns the predicate portion.","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"boonhaii"},"content":"**Predicates**\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":215,"author":{"gitId":"beefham"},"content":"Modifying the code for `FindCommand#execute` to account for multiple predicates is very likely to cause errors. Therefore, it is much easier to find a way to combine predicates into a single one.","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"beefham"},"content":"One alternative for combining predicates is to create a new `CombinedPredicate` class which contains all the possible fields to be compared with.","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"beefham"},"content":"![CombinedPredicateExample](images/CombinedPredicateExample.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":220,"author":{"gitId":"beefham"},"content":"Using the `CombinedPredicate`, one can easily parse the user\u0027s command and create the appropriate `CombinedPredicate` to be passed into `FindCommand`.","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":222,"author":{"gitId":"beefham"},"content":"Pros:","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"beefham"},"content":"* Easier to test for equality by comparing each field. This means it is easier to test if the FindCommandParser has parsed the user input correctly.","lastModifiedDate":"2021-10-26"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":225,"author":{"gitId":"beefham"},"content":"Cons:","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"beefham"},"content":"* Harder to write the implementation for `CombinedPredicate#test()` as it requires checking for null values if the user does not query with that field.","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"beefham"},"content":"* Will require a new field to be added every time a new field is added to `Person`, so that a user can filter by that field. Not as extensible compared to creating a new predicate and adding it to the chain.","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":229,"author":{"gitId":"beefham"},"content":"##### Creating the comparison based predicates","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"beefham"},"content":"Another place for consideration of alternative implementation is the implementation of the comparison based predicates such as `SalaryIsLessThanPredicate`.","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":232,"author":{"gitId":"beefham"},"content":"This alternative involves combining all 5 types of comparison predicates (more than, more than or equal, less than, less than or equal, equal) into a single predicate (e.g. SalaryComparisonPredicate).","lastModifiedDate":"2021-10-26"},{"lineNumber":233,"author":{"gitId":"beefham"},"content":"Then, the predicate will contain information of the type of comparison to make, and the value to compare to.","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":235,"author":{"gitId":"beefham"},"content":"Pros:","lastModifiedDate":"2021-10-26"},{"lineNumber":236,"author":{"gitId":"beefham"},"content":"* Less classes are needed to completely account for all 5 scenarios. (and possibly less repeated code)","lastModifiedDate":"2021-10-26"},{"lineNumber":237,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"beefham"},"content":"Cons:","lastModifiedDate":"2021-10-26"},{"lineNumber":239,"author":{"gitId":"beefham"},"content":"* Testing becomes harder because there are many branches to account for, since the `test()` method will change its behaviour based on the comparison type passed into it.","lastModifiedDate":"2021-10-26"},{"lineNumber":240,"author":{"gitId":"beefham"},"content":"* May become less flexible if more types of comparisons are needed. The current implementation allows each predicate to be responsible for only one type of comparison.","lastModifiedDate":"2021-10-26"},{"lineNumber":241,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":242,"author":{"gitId":"boonhaii"},"content":"### Import Feature","lastModifiedDate":"2021-11-07"},{"lineNumber":243,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":244,"author":{"gitId":"boonhaii"},"content":"**Current Implementation** \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":246,"author":{"gitId":"boonhaii"},"content":"The implemented import feature mechanism is facilitated by `ImportCommandParser`, `ImportCommand` and `PersonInput`. `ImportCommandParser` implements the interface `Parser`.`ImportCommand` extends abstract class `Command`, and implements the following additional operation:","lastModifiedDate":"2021-11-01"},{"lineNumber":247,"author":{"gitId":"boonhaii"},"content":"* `ImportCommand#importData(Model)` Takes the filepath attributed to the ImportCommand and imports its content.","lastModifiedDate":"2021-11-01"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":249,"author":{"gitId":"boonhaii"},"content":"`PersonInput` is a class which stores the field inputs for a data entry as Strings, and implements getter and setter methods for all fields as required by the 3rd-party library opencsv. While parsing the csv file, `PersonInput` objects are created to consolidate all the information present, before being converted into `Person` objects and added into HeRon.","lastModifiedDate":"2021-11-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":251,"author":{"gitId":"boonhaii"},"content":"The fields `name`,`phone`, `address`, `email` and `role` must be present in all entries before the data can be imported successfully. This is to prevent junk data from being imported. These fields were selected as they are highly likely to be present in existing data to be used for import.","lastModifiedDate":"2021-11-01"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":253,"author":{"gitId":"boonhaii"},"content":"HeRon detects fields using column titles (first row of the csv file). Naming convention (case-insensitive) of the fields below must be followed to be detected, as per opencsv library requirements.","lastModifiedDate":"2021-11-08"},{"lineNumber":254,"author":{"gitId":"boonhaii"},"content":"* `name` as Name","lastModifiedDate":"2021-10-27"},{"lineNumber":255,"author":{"gitId":"boonhaii"},"content":"* `phone` as Contact Number","lastModifiedDate":"2021-10-27"},{"lineNumber":256,"author":{"gitId":"boonhaii"},"content":"* `address` as Residential Address","lastModifiedDate":"2021-10-27"},{"lineNumber":257,"author":{"gitId":"boonhaii"},"content":"* `email` as Email","lastModifiedDate":"2021-10-27"},{"lineNumber":258,"author":{"gitId":"boonhaii"},"content":"* `role` as Role","lastModifiedDate":"2021-10-27"},{"lineNumber":259,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-10-20"},{"lineNumber":260,"author":{"gitId":"boonhaii"},"content":"Given below is an example usage scenario and how the import mechanism behaves at each step.","lastModifiedDate":"2021-10-20"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":262,"author":{"gitId":"boonhaii"},"content":"**Step 1.** The user launches the application. HeRon initializes with the initial address book state or loaded with data from the previous session (if any).","lastModifiedDate":"2021-11-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":264,"author":{"gitId":"boonhaii"},"content":"**Step 2.** The user executes `import /toBeImported.csv` command to import the .csv file in the specified directory, which in this case, refers to the file `toBeImported.csv` in the root directory.","lastModifiedDate":"2021-11-07"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":266,"author":{"gitId":"boonhaii"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the specified directory is not valid, the command fails to complete and an error message is returned. There will be no changes made to the current AddressBook.\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":268,"author":{"gitId":"boonhaii"},"content":"**Step 3.** Program processes the .csv file. The first row is identified as the header row, which is used to determine which field of the PersonInput class the column represents. The remaining rows are parsed and PersonInput objects are created and added into a List. Once done, the List of PersonInput objects will be used to create a separate List of Person objects used to update the address book.","lastModifiedDate":"2021-11-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":270,"author":{"gitId":"boonhaii"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If there are entries with missing values in the required fields, the command fails to complete and an error message indicating the location of the error is returned. There will be no changes made to the current AddressBook.\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":271,"author":{"gitId":"boonhaii"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Data present in the imported file must adhere to respective requirements for each field. `Name`, `Email` and `Phone` fields cannot be the same as other entries. If duplicate values exist, the command fails to complete and an error message is returned. There will be no changes made to the current AddressBook.\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":272,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":273,"author":{"gitId":"boonhaii"},"content":"**Step 4.** A new `AddressBook` is created, and updated it with the entries in the file. The current existing AddressBook is replaced with the newly created one. The display panel is updated to show the first entry present in the csv file.","lastModifiedDate":"2021-11-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":275,"author":{"gitId":"boonhaii"},"content":"**Step 5.** The updated AddressBook would be saved as per the process after the execution of a command.","lastModifiedDate":"2021-11-08"},{"lineNumber":276,"author":{"gitId":"boonhaii"},"content":"The following sequence diagram shows how the import feature works:","lastModifiedDate":"2021-10-20"},{"lineNumber":277,"author":{"gitId":"boonhaii"},"content":"![ImportSequenceDiagram](images/ImportSequenceDiagram.png)","lastModifiedDate":"2021-10-20"},{"lineNumber":278,"author":{"gitId":"boonhaii"},"content":"   \u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":279,"author":{"gitId":"boonhaii"},"content":"![ImportProcessData](images/ImportProcessData.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":281,"author":{"gitId":"boonhaii"},"content":"The reference frame for \"Update GUI\" is similar to the sequence diagram given in the section \"Updating Info Panel Display\", which can be found [here](#updating-info-panel-display).","lastModifiedDate":"2021-11-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":283,"author":{"gitId":"boonhaii"},"content":"The following activity diagram summarizes what happens when a user uses the `import` command:","lastModifiedDate":"2021-10-20"},{"lineNumber":284,"author":{"gitId":"boonhaii"},"content":"![ImportActivityDiagram](images/ImportActivityDiagram.png)","lastModifiedDate":"2021-10-20"},{"lineNumber":285,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":286,"author":{"gitId":"boonhaii"},"content":"**Design considerations:**","lastModifiedDate":"2021-11-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":288,"author":{"gitId":"boonhaii"},"content":"**Aspect: How the imported file is processed:**","lastModifiedDate":"2021-10-28"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":290,"author":{"gitId":"boonhaii"},"content":"* **Alternative 1 (current choice): Uses a header row to determine the data used**","lastModifiedDate":"2021-10-20"},{"lineNumber":291,"author":{"gitId":"boonhaii"},"content":"    * Pros: No need to follow specific column ordering.","lastModifiedDate":"2021-10-20"},{"lineNumber":292,"author":{"gitId":"boonhaii"},"content":"    * Cons: The names of the headers for the specific columns must be the exact name used (less case-sensitivity), and a header row must be present.","lastModifiedDate":"2021-10-20"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":294,"author":{"gitId":"boonhaii"},"content":"* **Alternative 2: Uses positioning of columns to import data**","lastModifiedDate":"2021-10-20"},{"lineNumber":295,"author":{"gitId":"boonhaii"},"content":"    * Pros: No need for header rows.","lastModifiedDate":"2021-10-20"},{"lineNumber":296,"author":{"gitId":"boonhaii"},"content":"    * Cons: Unable to ensure that the data is formatted in the correct order.","lastModifiedDate":"2021-10-20"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":298,"author":{"gitId":"boonhaii"},"content":"**Aspect: Making fields compulsory for import:**","lastModifiedDate":"2021-10-20"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":300,"author":{"gitId":"boonhaii"},"content":"* **Alternative 1 (current choice): Only fields `Name`, `Contact Number`, `Residential Address`, `Email` and `Role` are compulsory**","lastModifiedDate":"2021-10-20"},{"lineNumber":301,"author":{"gitId":"boonhaii"},"content":"    * Pros: Ensures that imported data have the minimum fields required before being imported, which most organizations should have.","lastModifiedDate":"2021-10-20"},{"lineNumber":302,"author":{"gitId":"boonhaii"},"content":"    * Cons: Files cannot be imported if any entry has any of the compulsory fields missing.","lastModifiedDate":"2021-10-20"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":304,"author":{"gitId":"boonhaii"},"content":"* **Alternative 2: No compulsory fields**","lastModifiedDate":"2021-10-20"},{"lineNumber":305,"author":{"gitId":"boonhaii"},"content":"    * Pros: Allows for multiple names for the fields in the header row, albeit still fixed. Files can be imported even if there are missing entries.","lastModifiedDate":"2021-10-20"},{"lineNumber":306,"author":{"gitId":"boonhaii"},"content":"    * Cons:  Files can be imported regardless of any formatting issues or missing fields in entries, thus data can be imported even without any cleaning, making it harder to be used in the program.","lastModifiedDate":"2021-10-20"},{"lineNumber":307,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-10-20"},{"lineNumber":308,"author":{"gitId":"boonhaii"},"content":"* **Alternative 3 : All fields are compulsory**","lastModifiedDate":"2021-10-20"},{"lineNumber":309,"author":{"gitId":"boonhaii"},"content":"    * Pros: Ensures data imported have all the required fields to utilise all the functionality of the program.","lastModifiedDate":"2021-10-20"},{"lineNumber":310,"author":{"gitId":"boonhaii"},"content":"    * Cons: Files cannot be imported if any entry has any fields missing.","lastModifiedDate":"2021-10-20"},{"lineNumber":311,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":312,"author":{"gitId":"1waykiat"},"content":"### Updating Info Panel display","lastModifiedDate":"2021-10-22"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":314,"author":{"gitId":"boonhaii"},"content":"**Current Implementation** \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":315,"author":{"gitId":"1waykiat"},"content":"`InfoPanel` class controls the content being displayed on the Info Panel. The information to be displayed is dependent","lastModifiedDate":"2021-11-06"},{"lineNumber":316,"author":{"gitId":"1waykiat"},"content":"on the ObservablePerson object `viewingPerson` in the ModelManager class. `viewingPerson` contains the person to be viewed, as well as","lastModifiedDate":"2021-11-06"},{"lineNumber":317,"author":{"gitId":"1waykiat"},"content":"a `uiObserverList` that contains `UiObserver` that wish to be notified when the person to be viewed has been changed.","lastModifiedDate":"2021-11-06"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":319,"author":{"gitId":"1waykiat"},"content":"When the `viewingPerson` is changed, `InfoPanel`","lastModifiedDate":"2021-11-06"},{"lineNumber":320,"author":{"gitId":"1waykiat"},"content":"should get updated automatically to display the new information.","lastModifiedDate":"2021-11-06"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":322,"author":{"gitId":"1waykiat"},"content":"This automatic updating of information to display on the Info Panel is achieved through the Observer pattern.","lastModifiedDate":"2021-11-06"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":324,"author":{"gitId":"1waykiat"},"content":"![InfoPanelClassDiagram](images/InfoPanelClassDiagram.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":325,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":326,"author":{"gitId":"1waykiat"},"content":"The following operations are implemented for the classes:","lastModifiedDate":"2021-11-06"},{"lineNumber":327,"author":{"gitId":"1waykiat"},"content":"* `InfoPanel::updateInfoPanel(Person p)` - updates the content to be displayed on the Info panel with the new `Person`\u0027s information.","lastModifiedDate":"2021-11-06"},{"lineNumber":328,"author":{"gitId":"1waykiat"},"content":"* `ObservablePerson::addUiObserver(UiObserver observer)` - subscribes the `UiObserver` to the `ObservablePerson` to get updates when `ObservablePerson` changes","lastModifiedDate":"2021-11-06"},{"lineNumber":329,"author":{"gitId":"1waykiat"},"content":"* `ObservablePerson::updateUi()` - updates the observers with the relevant `Person` information.","lastModifiedDate":"2021-11-06"},{"lineNumber":330,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":331,"author":{"gitId":"1waykiat"},"content":"On initialization:","lastModifiedDate":"2021-11-06"},{"lineNumber":332,"author":{"gitId":"1waykiat"},"content":"1. `ObservablePerson` is created, and `InfoPanel` is initialized with the ObservablePerson passed as argument to the constructor","lastModifiedDate":"2021-11-06"},{"lineNumber":333,"author":{"gitId":"1waykiat"},"content":"2. On creation of `InfoPanel`, it adds itself to the `uiObserverList` of the ObservablePerson to be subscribed for updates using `ObservablePerson::addUiObserver(UiObserver observer)`","lastModifiedDate":"2021-11-06"},{"lineNumber":334,"author":{"gitId":"1waykiat"},"content":"   ","lastModifiedDate":"2021-10-22"},{"lineNumber":335,"author":{"gitId":"1waykiat"},"content":"When the `ObservablePerson` changes:","lastModifiedDate":"2021-11-06"},{"lineNumber":336,"author":{"gitId":"1waykiat"},"content":"1. `InfoPanel` in the `uiObserverList` is updated with `ObservablePerson::updateUi()`","lastModifiedDate":"2021-11-06"},{"lineNumber":337,"author":{"gitId":"1waykiat"},"content":"2. `InfoPanel` and other `UiObserver` in the list can then update their own Ui with the updated viewingPerson information passed to it.","lastModifiedDate":"2021-11-06"},{"lineNumber":338,"author":{"gitId":"1waykiat"},"content":"   ","lastModifiedDate":"2021-11-06"},{"lineNumber":339,"author":{"gitId":"1waykiat"},"content":"Below is an example of how `InfoPanel` updates with a view command:","lastModifiedDate":"2021-11-06"},{"lineNumber":340,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":341,"author":{"gitId":"1waykiat"},"content":"![ViewSequenceDiagram](images/ViewSequenceDiagram.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":342,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":343,"author":{"gitId":"1waykiat"},"content":"**Step 1.** User executes `view 2` to view the 2nd employee in the list, and after the command is parsed, `v:ViewCommand` is being created.","lastModifiedDate":"2021-11-07"},{"lineNumber":344,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":345,"author":{"gitId":"1waykiat"},"content":"**Step 2.** On execution of `ViewCommand`, `getPersonToView(index)` is called to get the personToView, and then passed to call `setViewingPerson(personToView)` on `Model`.","lastModifiedDate":"2021-11-07"},{"lineNumber":346,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":347,"author":{"gitId":"1waykiat"},"content":"**Step 3.** Model calls `setPerson(personToView)` on `ObservablePerson`, causing it to update the viewing person. In the process of updating,","lastModifiedDate":"2021-11-07"},{"lineNumber":348,"author":{"gitId":"1waykiat"},"content":"it informs the other `InfoPanel` in the `uiObserverList` to update, passing the new updated personToView to `InfoPanel`.","lastModifiedDate":"2021-11-06"},{"lineNumber":349,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":350,"author":{"gitId":"1waykiat"},"content":"**Step 4.** With the new data passed to `InfoPanel`, it can then update the content to be displayed in however its `update()` method is implemented.  ","lastModifiedDate":"2021-11-07"},{"lineNumber":351,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":352,"author":{"gitId":"1waykiat"},"content":"**Design Considerations:**","lastModifiedDate":"2021-11-07"},{"lineNumber":353,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":354,"author":{"gitId":"1waykiat"},"content":"Use Observer pattern to track when to update InfoPanel (Current Implementation)","lastModifiedDate":"2021-11-07"},{"lineNumber":355,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":356,"author":{"gitId":"1waykiat"},"content":"**Pros:** `InfoPanel` can update by itself without `Model` having a dependency on the UI.","lastModifiedDate":"2021-11-07"},{"lineNumber":357,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":358,"author":{"gitId":"1waykiat"},"content":"**Cons:** Might be harder to figure out what is \"observing\" the observable just by looking at the source code since there is no direct dependency.","lastModifiedDate":"2021-11-07"},{"lineNumber":359,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":360,"author":{"gitId":"1waykiat"},"content":"**Alternative:**","lastModifiedDate":"2021-11-07"},{"lineNumber":361,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":362,"author":{"gitId":"1waykiat"},"content":"Constantly update Info Panel with every command executed.","lastModifiedDate":"2021-11-06"},{"lineNumber":363,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":364,"author":{"gitId":"1waykiat"},"content":"**Pros:** Easy to update, ensures that Ui is constantly updated.","lastModifiedDate":"2021-11-07"},{"lineNumber":365,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":366,"author":{"gitId":"1waykiat"},"content":"**Cons:** Unnecessarily updates even when there is no change to data to be viewed, increases runtime.","lastModifiedDate":"2021-11-07"},{"lineNumber":367,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":368,"author":{"gitId":"danielsimre"},"content":"### Leave Balance","lastModifiedDate":"2021-11-07"},{"lineNumber":369,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":370,"author":{"gitId":"boonhaii"},"content":"**Current Implementation**","lastModifiedDate":"2021-11-08"},{"lineNumber":371,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":372,"author":{"gitId":"danielsimre"},"content":"Currently, leaves are represented by two attributes of `Person`: `LeaveBalance`, which represents the amount of leaves the employee has remaining, ","lastModifiedDate":"2021-11-07"},{"lineNumber":373,"author":{"gitId":"danielsimre"},"content":"and `LeavesTaken`, which represents the leaves that the employee has taken on a given date.","lastModifiedDate":"2021-11-07"},{"lineNumber":374,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":375,"author":{"gitId":"danielsimre"},"content":"`LeaveBalance` is internally represented as an integer value, and must have a value of at least 0 and at most 365.","lastModifiedDate":"2021-11-07"},{"lineNumber":376,"author":{"gitId":"danielsimre"},"content":"The add to/deduct from leave balance features are implemented by the classes ","lastModifiedDate":"2021-11-07"},{"lineNumber":377,"author":{"gitId":"danielsimre"},"content":"`AddLeaveBalanceCommand` and `DeductLeaveBalanceCommand` respectively.","lastModifiedDate":"2021-11-07"},{"lineNumber":378,"author":{"gitId":"danielsimre"},"content":"Both classes extend `Command` with the following added method to get the updated person:","lastModifiedDate":"2021-11-07"},{"lineNumber":379,"author":{"gitId":"danielsimre"},"content":"- `getUpdatedPerson(Person personToEdit)` - Returns a new `Person` object that is a copy of the input `personToEdit` object,","lastModifiedDate":"2021-11-07"},{"lineNumber":380,"author":{"gitId":"danielsimre"},"content":"except with an updated `LeaveBalance` value.","lastModifiedDate":"2021-11-07"},{"lineNumber":381,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":382,"author":{"gitId":"danielsimre"},"content":"Given below is an example of how `AddLeaveBalanceCommand` works.","lastModifiedDate":"2021-11-07"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":384,"author":{"gitId":"boonhaii"},"content":"**Step 1.** The user enters the command \u0027addLeaveBalance 2 l/1\u0027. The `AddLeaveBalanceCommandParser` parses the input, creates a `AddLeaveBalanceCommand` object and executes it.","lastModifiedDate":"2021-11-07"},{"lineNumber":385,"author":{"gitId":"danielsimre"},"content":"The command object contains two attributes: `index`, which corresponds to the input index of 2, and `leaveBalance` which corresponds to the input number of leaves, in this case 1.","lastModifiedDate":"2021-11-07"},{"lineNumber":386,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":387,"author":{"gitId":"boonhaii"},"content":"**Step 2.** Inside `AddLeaveBalanceCommand#execute`, the list of all employees is retrieved by calling `Model#getFilteredPersonList()`.","lastModifiedDate":"2021-11-07"},{"lineNumber":388,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":389,"author":{"gitId":"boonhaii"},"content":"**Step 3.** Using the input `Index` value, the second person from the filtered list is retrieved as the `personToEdit` object.","lastModifiedDate":"2021-11-07"},{"lineNumber":390,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":391,"author":{"gitId":"boonhaii"},"content":"**Step 4.** `AddLeaveBalanceCommand#getUpdatedPerson` is called, with `personToEdit` as an input.","lastModifiedDate":"2021-11-07"},{"lineNumber":392,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":393,"author":{"gitId":"boonhaii"},"content":"**Step 5.** Inside `getUpdatedPerson`, `LeaveBalance#addLeaves` is called with the input `LeaveBalance` value as a parameter.","lastModifiedDate":"2021-11-07"},{"lineNumber":394,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":395,"author":{"gitId":"boonhaii"},"content":"**Step 6.** `getUpdatedPerson` returns a copy of the `personToEdit` object with an updated `LeaveBalance`.","lastModifiedDate":"2021-11-07"},{"lineNumber":396,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":397,"author":{"gitId":"boonhaii"},"content":"**Step 7.** The old `Person` object in the `Model` is then replaced with its updated copy using `Model#setPerson()`.","lastModifiedDate":"2021-11-07"},{"lineNumber":398,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":399,"author":{"gitId":"boonhaii"},"content":"**Step 8.** `AddLeaveBalanceCommand#execute` returns a `CommandResult` to signal a successful execution.","lastModifiedDate":"2021-11-07"},{"lineNumber":400,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":401,"author":{"gitId":"danielsimre"},"content":"The following sequence diagram shows how `AddLeaveBalanceCommand` works:","lastModifiedDate":"2021-11-07"},{"lineNumber":402,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":403,"author":{"gitId":"danielsimre"},"content":"![AddLeaveBalanceSequenceDiagram](images/AddLeaveBalanceSequenceDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":404,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":405,"author":{"gitId":"danielsimre"},"content":"`DeductLeaveBalanceCommand` works similarly, except instead of calling `LeaveBalance#addLeaves` in step 5, `LeaveBalance#removeLeaves` is called.","lastModifiedDate":"2021-11-07"},{"lineNumber":406,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":407,"author":{"gitId":"danielsimre"},"content":"### Assigned Leaves","lastModifiedDate":"2021-11-07"},{"lineNumber":408,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":409,"author":{"gitId":"boonhaii"},"content":"**Current Implementation**","lastModifiedDate":"2021-11-08"},{"lineNumber":410,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":411,"author":{"gitId":"danielsimre"},"content":"`LeavesTaken` is internally represented as a `PriorityQueue` of `LocalDate` values. A `PriorityQueue` was chosen as it would ","lastModifiedDate":"2021-11-07"},{"lineNumber":412,"author":{"gitId":"danielsimre"},"content":"automatically sort the `LocalDate` values from least to most recent after each add/remove date operation. ","lastModifiedDate":"2021-11-07"},{"lineNumber":413,"author":{"gitId":"danielsimre"},"content":"There may be multiple `LocalDate` objects representing the same date. For example, if two employees have a leave on 2021-11-10,","lastModifiedDate":"2021-11-07"},{"lineNumber":414,"author":{"gitId":"danielsimre"},"content":"each of them will have a different `LocalDate` object corresponding to 2021-11-10 inside their `LeavesTaken` attribute object.","lastModifiedDate":"2021-11-07"},{"lineNumber":415,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":416,"author":{"gitId":"danielsimre"},"content":"The assign leave feature is implemented by the class `AssignLeaveCommand`.","lastModifiedDate":"2021-11-07"},{"lineNumber":417,"author":{"gitId":"danielsimre"},"content":"This class extends `Command` with the following added method to get the updated person:","lastModifiedDate":"2021-11-07"},{"lineNumber":418,"author":{"gitId":"danielsimre"},"content":"- `getUpdatedPerson(Person personToEdit)` - Returns a new `Person` object that is a copy of the input `personToEdit` object,","lastModifiedDate":"2021-11-07"},{"lineNumber":419,"author":{"gitId":"danielsimre"},"content":"  except with updated `LeavesTaken` and `LeaveBalance` values.","lastModifiedDate":"2021-11-07"},{"lineNumber":420,"author":{"gitId":"danielsimre"},"content":"  ","lastModifiedDate":"2021-11-07"},{"lineNumber":421,"author":{"gitId":"danielsimre"},"content":"`AssignLeaveCommand` works similarly to `AddLeaveBalanceCommand`, ","lastModifiedDate":"2021-11-07"},{"lineNumber":422,"author":{"gitId":"danielsimre"},"content":"except instead of calling `LeaveBalance#addLeaves` , `LeavesTaken#addDate` is called. In addition,","lastModifiedDate":"2021-11-07"},{"lineNumber":423,"author":{"gitId":"danielsimre"},"content":"`LeaveBalance#removeLeaves` is called with a `LeaveBalance` object containing the value 1. ","lastModifiedDate":"2021-11-07"},{"lineNumber":424,"author":{"gitId":"danielsimre"},"content":"(In other words, assigning a leave deducts 1 leave from the leave balance.)","lastModifiedDate":"2021-11-07"},{"lineNumber":425,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":426,"author":{"gitId":"danielsimre"},"content":"The remove outdated leaves feature is implemented by the class `RemoveLeavesBeforeCommand`.","lastModifiedDate":"2021-11-07"},{"lineNumber":427,"author":{"gitId":"danielsimre"},"content":"This class extends `Command` with the following added method to get the updated person:","lastModifiedDate":"2021-11-07"},{"lineNumber":428,"author":{"gitId":"danielsimre"},"content":"- `getUpdatedPerson(Person personToEdit)` - Returns a new `Person` object that is a copy of the input `personToEdit` object,","lastModifiedDate":"2021-11-07"},{"lineNumber":429,"author":{"gitId":"danielsimre"},"content":"  except with an updated `LeavesTaken` value.","lastModifiedDate":"2021-11-07"},{"lineNumber":430,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":431,"author":{"gitId":"danielsimre"},"content":"`RemoveLeavesBeforeCommand` works similarly to `AddLeaveBalanceCommand`,","lastModifiedDate":"2021-11-07"},{"lineNumber":432,"author":{"gitId":"danielsimre"},"content":"except instead of calling `LeaveBalance#addLeaves` , `LeavesTaken#removeDatesBefore` is called.","lastModifiedDate":"2021-11-07"},{"lineNumber":433,"author":{"gitId":"danielsimre"},"content":"In addition, `LeavesTaken#removeDatesBefore` is called for all `Person` objects in the filtered list.","lastModifiedDate":"2021-11-07"},{"lineNumber":434,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":435,"author":{"gitId":"danielsimre"},"content":"The following sequence diagram shows how `RemoveLeavesBeforeCommand` works:","lastModifiedDate":"2021-11-07"},{"lineNumber":436,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":437,"author":{"gitId":"danielsimre"},"content":"![RemoveLeavesBeforeSequenceDiagram](images/RemoveLeavesBeforeSequenceDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":438,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":439,"author":{"gitId":"boonhaii"},"content":"**Design considerations:**","lastModifiedDate":"2021-11-08"},{"lineNumber":440,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":441,"author":{"gitId":"danielsimre"},"content":"**Aspect: How assigned leaves are represented**","lastModifiedDate":"2021-11-07"},{"lineNumber":442,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":443,"author":{"gitId":"danielsimre"},"content":"* **Alternative 1 (current choice):** Each `Person` object has a `LeavesTaken` object that contains a set of `LocalDate` values that ","lastModifiedDate":"2021-11-07"},{"lineNumber":444,"author":{"gitId":"danielsimre"},"content":"  corresponds to the employee\u0027s assigned leaves.","lastModifiedDate":"2021-11-07"},{"lineNumber":445,"author":{"gitId":"danielsimre"},"content":"    * Pros: Easier to implement, able to delete individual `LocalDate` objects without needing to check other `Person` objects.","lastModifiedDate":"2021-11-07"},{"lineNumber":446,"author":{"gitId":"danielsimre"},"content":"    * Cons: May have issues in regard to memory usage, as each unique date can potentially have many `LocalDate` objects that correspond to it.","lastModifiedDate":"2021-11-07"},{"lineNumber":447,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":448,"author":{"gitId":"danielsimre"},"content":"* **Alternative 2:** Each unique date is represented by a `Leave` object.","lastModifiedDate":"2021-11-07"},{"lineNumber":449,"author":{"gitId":"danielsimre"},"content":"    * Pros: Potentially more object-oriented, reduced memory usage as only one object is required for each date.","lastModifiedDate":"2021-11-07"},{"lineNumber":450,"author":{"gitId":"danielsimre"},"content":"    * Cons: Need to keep track of how many `Person` objects are associated with each `Leave`, which might lead to increased coupling between `Leave` and `Person`.","lastModifiedDate":"2021-11-07"},{"lineNumber":451,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":452,"author":{"gitId":"danielsimre"},"content":"**Aspect: How outdated assigned leaves are removed:**","lastModifiedDate":"2021-11-07"},{"lineNumber":453,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":454,"author":{"gitId":"danielsimre"},"content":"* **Alternative 1 (current choice):** Manually clear outdated leaves via a command (`removeLeavesBefore`).","lastModifiedDate":"2021-11-07"},{"lineNumber":455,"author":{"gitId":"danielsimre"},"content":"    * Pros: Easier to implement and test than an automated solution, gives more control to the user in which leaves they want to clear.","lastModifiedDate":"2021-11-07"},{"lineNumber":456,"author":{"gitId":"danielsimre"},"content":"    * Cons: Less convenience for the user, could lead to accidental deletion of certain leaves if the user makes a typo with the input date.","lastModifiedDate":"2021-11-07"},{"lineNumber":457,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":458,"author":{"gitId":"danielsimre"},"content":"* **Alternative 2:** Assigned leaves will automatically clear themselves once the date has passed.","lastModifiedDate":"2021-11-07"},{"lineNumber":459,"author":{"gitId":"danielsimre"},"content":"    * Pros: More convenient for the user.","lastModifiedDate":"2021-11-07"},{"lineNumber":460,"author":{"gitId":"danielsimre"},"content":"    * Cons: Harder to test, and it could lead to unexpected behaviour. (e.g. What happens if the user changes their timezone, or if the user\u0027s system clock fails)","lastModifiedDate":"2021-11-07"},{"lineNumber":461,"author":{"gitId":"danielsimre"},"content":"      Also, the user might want to keep a full record of all assigned leaves.","lastModifiedDate":"2021-11-07"},{"lineNumber":462,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":463,"author":{"gitId":"szelongq"},"content":"### Start Payroll feature","lastModifiedDate":"2021-10-24"},{"lineNumber":464,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":465,"author":{"gitId":"boonhaii"},"content":"**Current Implementation**","lastModifiedDate":"2021-11-08"},{"lineNumber":466,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":467,"author":{"gitId":"szelongq"},"content":"The start payroll feature is provided through `StartPayrollCommand`.","lastModifiedDate":"2021-10-24"},{"lineNumber":468,"author":{"gitId":"szelongq"},"content":"It extends `Command` with the following added methods to calculate the payroll for every employee:","lastModifiedDate":"2021-10-24"},{"lineNumber":469,"author":{"gitId":"szelongq"},"content":"- `StartPayrollCommand#calculatePay(HourlySalary salary, HoursWorked hoursWorked,","lastModifiedDate":"2021-10-24"},{"lineNumber":470,"author":{"gitId":"szelongq"},"content":"  Overtime overtime, OvertimePayRate overtimePayRate)` - Calculates the payroll based on the given parameters and","lastModifiedDate":"2021-10-24"},{"lineNumber":471,"author":{"gitId":"szelongq"},"content":"  returns a new `CalculatedPay` object.","lastModifiedDate":"2021-10-24"},{"lineNumber":472,"author":{"gitId":"szelongq"},"content":"- `StartPayrollCommand#createPersonWithCalculatedPay(Person personWithCalculatedPay,","lastModifiedDate":"2021-10-24"},{"lineNumber":473,"author":{"gitId":"szelongq"},"content":"  CalculatedPay newCalculatedPay)` - Creates a new `Person` that is a copy of the given `Person` parameter","lastModifiedDate":"2021-10-24"},{"lineNumber":474,"author":{"gitId":"szelongq"},"content":"  except with the updated `CalculatedPay` value.","lastModifiedDate":"2021-10-24"},{"lineNumber":475,"author":{"gitId":"szelongq"},"content":"- `StartPayrollCommand#createPersonWithZeroHoursWorkedAndOvertime(Person person)` - Creates a new `Person` that is a copy of the ","lastModifiedDate":"2021-11-07"},{"lineNumber":476,"author":{"gitId":"szelongq"},"content":"  given `Person` parameter except with the `HoursWorked` and `Overtime` values set to 0.","lastModifiedDate":"2021-11-07"},{"lineNumber":477,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":478,"author":{"gitId":"szelongq"},"content":"Given below is an example of how `StartPayrollCommand` works.","lastModifiedDate":"2021-11-07"},{"lineNumber":479,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":480,"author":{"gitId":"szelongq"},"content":"**Step 1.** The user enters the command word \u0027startPayroll\u0027. The `addressBookParser` parses the input,","lastModifiedDate":"2021-11-07"},{"lineNumber":481,"author":{"gitId":"szelongq"},"content":"creates a `StartPayrollCommand` and executes it.","lastModifiedDate":"2021-11-07"},{"lineNumber":482,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":483,"author":{"gitId":"szelongq"},"content":"The following sequence diagram describes the operations in executing a `StartPayrollCommand`.","lastModifiedDate":"2021-11-07"},{"lineNumber":484,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":485,"author":{"gitId":"szelongq"},"content":"![StartPayrollSequenceDiagram](images/StartPayrollSequenceDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":486,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":487,"author":{"gitId":"szelongq"},"content":"**Step 2.** In the new instance of `StartPayrollCommand`, upon starting execution,","lastModifiedDate":"2021-11-07"},{"lineNumber":488,"author":{"gitId":"szelongq"},"content":"the list of employees to be viewed in `Model` is set to be unfiltered using `Model#updateFilteredPersonList()`.","lastModifiedDate":"2021-10-24"},{"lineNumber":489,"author":{"gitId":"szelongq"},"content":"The list of all employees is then retrieved by calling `Model#getFilteredPersonList()`,","lastModifiedDate":"2021-11-07"},{"lineNumber":490,"author":{"gitId":"szelongq"},"content":"storing a deep copy in `personList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":491,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":492,"author":{"gitId":"szelongq"},"content":"**Step 3.** Each employee in the list of employees are checked if they have any previously calculated payroll that have not","lastModifiedDate":"2021-11-07"},{"lineNumber":493,"author":{"gitId":"szelongq"},"content":"been paid yet by calling `Person#isPaid()` on the employee. If an employee is unpaid,","lastModifiedDate":"2021-10-24"},{"lineNumber":494,"author":{"gitId":"szelongq"},"content":"a `CommandException` will be thrown.","lastModifiedDate":"2021-10-24"},{"lineNumber":495,"author":{"gitId":"szelongq"},"content":"   ","lastModifiedDate":"2021-10-24"},{"lineNumber":496,"author":{"gitId":"szelongq"},"content":"**Step 4.** If there are no employees who are unpaid, calculations of payroll will proceed through the following substeps:","lastModifiedDate":"2021-11-07"},{"lineNumber":497,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":498,"author":{"gitId":"szelongq"},"content":"--Start of Calculating Payroll--","lastModifiedDate":"2021-11-07"},{"lineNumber":499,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":500,"author":{"gitId":"szelongq"},"content":"The following sequence diagram describes how the payroll is calculated.","lastModifiedDate":"2021-11-07"},{"lineNumber":501,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":502,"author":{"gitId":"szelongq"},"content":"![StartPayrollSequenceDiagram](images/PayrollCalculationSequenceDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":503,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":504,"author":{"gitId":"szelongq"},"content":"**Step 4.1.** Retrieve the current `overtimePayRate` in the application from the `Model`","lastModifiedDate":"2021-11-07"},{"lineNumber":505,"author":{"gitId":"szelongq"},"content":"using `Model#getOvertimePayRate()`.","lastModifiedDate":"2021-11-07"},{"lineNumber":506,"author":{"gitId":"szelongq"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":507,"author":{"gitId":"szelongq"},"content":"**Step 4.2.** Retrieve an employee from `personList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":508,"author":{"gitId":"szelongq"},"content":"Retrieve the following attributes from the employee `Person` object:","lastModifiedDate":"2021-11-07"},{"lineNumber":509,"author":{"gitId":"szelongq"},"content":"- `hourlySalary` - The employee\u0027s salary per hour.","lastModifiedDate":"2021-10-24"},{"lineNumber":510,"author":{"gitId":"szelongq"},"content":"- `hoursWorked` - How many hours the employee has worked for (excluding overtime).","lastModifiedDate":"2021-10-24"},{"lineNumber":511,"author":{"gitId":"szelongq"},"content":"- `overtime` - How many hours of overtime the employee has worked for.","lastModifiedDate":"2021-10-24"},{"lineNumber":512,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":513,"author":{"gitId":"szelongq"},"content":"The new `CalculatedPay` object representing the calculated employee\u0027s pay is created by calling","lastModifiedDate":"2021-11-07"},{"lineNumber":514,"author":{"gitId":"szelongq"},"content":"the `StartPayrollCommand#calculatePay()` method, with the earlier retrieved values (`overtimePayRate`, `hourlySalary`,","lastModifiedDate":"2021-10-24"},{"lineNumber":515,"author":{"gitId":"szelongq"},"content":"`hoursWorked`, `overtime`) as parameters.","lastModifiedDate":"2021-10-24"},{"lineNumber":516,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":517,"author":{"gitId":"szelongq"},"content":"**Step 4.3.** An updated copy of the employee `Person` object is created with the new `CalculatePay` attribute using","lastModifiedDate":"2021-11-07"},{"lineNumber":518,"author":{"gitId":"szelongq"},"content":"`StartPayrollCommand#createPersonWithCalculatedPay()`, and their `HoursWorked` and `Overtime` attributes reset to zero","lastModifiedDate":"2021-11-07"},{"lineNumber":519,"author":{"gitId":"szelongq"},"content":"using `StartPayrollCommand#createPersonWithZeroHoursWorkedAndOvertime()`. The updated copy of the employee is then","lastModifiedDate":"2021-11-07"},{"lineNumber":520,"author":{"gitId":"szelongq"},"content":"inserted into `calculatedPersonsList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":521,"author":{"gitId":"szelongq"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":522,"author":{"gitId":"szelongq"},"content":"Steps 4.2 and 4.3 are repeated for all employees in the `personList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":523,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":524,"author":{"gitId":"szelongq"},"content":"**Step 4.4.** For every employee in `personList`, its corresponding `Person` object in the `Model` is then replaced ","lastModifiedDate":"2021-11-07"},{"lineNumber":525,"author":{"gitId":"szelongq"},"content":"with its updated copy in `calculatedPersonsList` using `Model#setPerson()`.","lastModifiedDate":"2021-11-07"},{"lineNumber":526,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":527,"author":{"gitId":"szelongq"},"content":"--End of Calculating Payroll--","lastModifiedDate":"2021-11-07"},{"lineNumber":528,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":529,"author":{"gitId":"szelongq"},"content":"**Step 5.** After every employee in the list has had their payroll calculated, HeRon is set to view the first employee ","lastModifiedDate":"2021-11-07"},{"lineNumber":530,"author":{"gitId":"szelongq"},"content":"in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":531,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":532,"author":{"gitId":"szelongq"},"content":"**Step 6.** Lastly, the `StartPayrollCommand` returns a `CommandResult` to signal successful execution.","lastModifiedDate":"2021-11-07"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"boonhaii"},"content":"**Design considerations:**","lastModifiedDate":"2021-11-08"},{"lineNumber":535,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":536,"author":{"gitId":"szelongq"},"content":"**Aspect: How the feature of calculating payroll is implemented:**","lastModifiedDate":"2021-11-07"},{"lineNumber":537,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":538,"author":{"gitId":"szelongq"},"content":"* **Alternative 1 (current choice):** One command for calculating payroll for all employees.","lastModifiedDate":"2021-11-07"},{"lineNumber":539,"author":{"gitId":"szelongq"},"content":"    * Pros: Easy to implement. Easy to test (little variations in use cases).","lastModifiedDate":"2021-11-07"},{"lineNumber":540,"author":{"gitId":"szelongq"},"content":"    * Cons: Less flexible for users.","lastModifiedDate":"2021-11-07"},{"lineNumber":541,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":542,"author":{"gitId":"szelongq"},"content":"* **Alternative 2:** Command that calculates payroll for a single employee or all employees.","lastModifiedDate":"2021-11-07"},{"lineNumber":543,"author":{"gitId":"szelongq"},"content":"    * Pros: Provides more flexibility for users.","lastModifiedDate":"2021-11-07"},{"lineNumber":544,"author":{"gitId":"szelongq"},"content":"    * Cons: We need to check for which use case the user intends to use. Can be harder/more tedious to test","lastModifiedDate":"2021-11-07"},{"lineNumber":545,"author":{"gitId":"szelongq"},"content":"    as more there are more variations in use cases.","lastModifiedDate":"2021-11-07"},{"lineNumber":546,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":548,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":552,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":553,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":554,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":555,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"szelongq"},"content":"* is a HR manager of a small company (10 - 50 employees)","lastModifiedDate":"2021-09-30"},{"lineNumber":566,"author":{"gitId":"szelongq"},"content":"* is the only one in charge of handling HR","lastModifiedDate":"2021-09-30"},{"lineNumber":567,"author":{"gitId":"szelongq"},"content":"* has a need to manage information on all employees","lastModifiedDate":"2021-09-30"},{"lineNumber":568,"author":{"gitId":"boonhaii"},"content":"* prefers desktop apps over other types","lastModifiedDate":"2021-10-01"},{"lineNumber":569,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":571,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"szelongq"},"content":"**Value proposition**:","lastModifiedDate":"2021-09-30"},{"lineNumber":574,"author":{"gitId":"szelongq"},"content":"* More convenient to manage employees’ information than a typical mouse/GUI driven app.","lastModifiedDate":"2021-09-30"},{"lineNumber":575,"author":{"gitId":"szelongq"},"content":"* Able to quickly assess the balance of work between employees.","lastModifiedDate":"2021-09-30"},{"lineNumber":576,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":578,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                                            | So that I can…​                                                     |","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"boonhaii"},"content":"| -------- | ------------------------------------------ | --------------------------------------------------------------| ---------------------------------------------------------------------- |","lastModifiedDate":"2021-09-26"},{"lineNumber":584,"author":{"gitId":"beefham"},"content":"| `* * *`  | user                                       | add a new employee                                                                                                    |                                                                                                                           |","lastModifiedDate":"2021-09-29"},{"lineNumber":585,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | delete an employee                                                                                                    | remove entries that I no longer need.                                                                                     |","lastModifiedDate":"2021-09-26"},{"lineNumber":586,"author":{"gitId":"boonhaii"},"content":"| `* * * ` | user                                       | edit an employee\u0027s data                                                                                               |                                                                                                                           |","lastModifiedDate":"2021-09-26"},{"lineNumber":587,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user with many employees in the app        | search for an employee\u0027s data easily                                                                                  | locate details of employees without having to go through the entire list.                                                   |","lastModifiedDate":"2021-10-01"},{"lineNumber":588,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | keep track of my employee\u0027s current leaves                                                                            | determine if a given employee\u0027s request for leave is valid.                                                               |","lastModifiedDate":"2021-10-12"},{"lineNumber":589,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | update leaves for certain employees                                                                                   | have a more accurate count of their remaining leaves.                                                                     |","lastModifiedDate":"2021-10-12"},{"lineNumber":590,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | keep track of an employee\u0027s unpaid leaves                                                                             | know how much to deduct from their monthly salary.                                                                        |","lastModifiedDate":"2021-10-12"},{"lineNumber":591,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | get all the offs and leaves that every employee has                                                                   | get those with remaining leaves to clear them before the end of the year.                                                 |","lastModifiedDate":"2021-10-12"},{"lineNumber":592,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | calculate the pay of all employees and view them easily                                                               | make it easier to complete administrative tasks.                                                                          |","lastModifiedDate":"2021-09-26"},{"lineNumber":593,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | have an application to account for factors like unpaid leaves and overtime when calculating salary                     | reduce chances of errors by manual calculations.                                                                          |","lastModifiedDate":"2021-10-12"},{"lineNumber":594,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | keep track of employees which I have not paid yet                                                                     | ensure all employees are paid.                                                                                            |","lastModifiedDate":"2021-09-26"},{"lineNumber":595,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | user                                       | get all the overtime that every employee has done for the month                                                       | keep track of each employee and analyze the amount of overtime being done in the company.                                 |","lastModifiedDate":"2021-09-26"},{"lineNumber":596,"author":{"gitId":"boonhaii"},"content":"| `* * *`  | organized user                             | group up employees into specified groups                                                                              | sort through them easily with color coding and tags.                                                                      |","lastModifiedDate":"2021-09-26"},{"lineNumber":597,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | input a schedule for an employee                                                                                      | keep track of how many hours he/she are intending to work.                                                                  |","lastModifiedDate":"2021-10-01"},{"lineNumber":598,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | schedule employees and their work schedules                                                                           | ensure they hit the minimum work quota and all employees are working equally.                                             |","lastModifiedDate":"2021-09-26"},{"lineNumber":599,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user in a company that does shift work     | see the schedule for the week                                                                                         | have a rough idea of how to assign people to shifts.                                                                      |","lastModifiedDate":"2021-09-26"},{"lineNumber":600,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | generate a work schedule according to certain specified rules                                                         | do not have to make one manually while ensuring it abides by the rules.                                                   |","lastModifiedDate":"2021-09-26"},{"lineNumber":601,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | keep track of any documents relating to my employees.                                                                 |                                                                                                                           |","lastModifiedDate":"2021-09-26"},{"lineNumber":602,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | keep track of any complaints lodged against employees                                                                  | address the employees accordingly.                                                                                        |","lastModifiedDate":"2021-11-08"},{"lineNumber":603,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | have short and readable summaries of day-to-day statuses in the company                                               | access it at anytime for any potential tracking in the future.                                                            |","lastModifiedDate":"2021-09-26"},{"lineNumber":604,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | get a summary of certain information of employees                                                                     | include it easily in monthly reports.                                                                                     |","lastModifiedDate":"2021-09-26"},{"lineNumber":605,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | organized user                             | group up employees into specified groups                                                                              | update information for the specific group without manually updating each member one by one.                               |","lastModifiedDate":"2021-09-26"},{"lineNumber":606,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | organized user                             | be able to easily archive/filter employees that are not relevant                                                      | ensure they do not distract me from doing my work.                                                                        |","lastModifiedDate":"2021-09-26"},{"lineNumber":607,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | compute all the relevant information that I require in a short amount of time regardless of the number of employees   | ensure the workflow will take similar amounts of time regardless of company size.                                         |","lastModifiedDate":"2021-09-26"},{"lineNumber":608,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | expert user                                | have an automation system that handles tasks which have to be done periodically (eg. everyday)                        | do not have to do them manually and make the processing of data more efficient.                                           |","lastModifiedDate":"2021-09-26"},{"lineNumber":609,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | expert user                                | make the least effort to get the employee\u0027s information                                                               | be more efficient.                                                                                                        |","lastModifiedDate":"2021-09-26"},{"lineNumber":610,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | new user                                   | spend the least effort to learn how to use the application                                                            | spend more time focusing on my tasks.                                                                                     |","lastModifiedDate":"2021-09-26"},{"lineNumber":611,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | forgetful user                             | have a convenient way to access help while using the application                                                      | have an overview of how to execute certain commands if I forget.                                                          |","lastModifiedDate":"2021-09-26"},{"lineNumber":612,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | lazy user                                  | have customized shortcuts                                                                                             | reduce effort needed to complete my tasks, especially if they are done often.                                             |","lastModifiedDate":"2021-09-26"},{"lineNumber":613,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | have different settings for different employees                                                                       | quickly do computations on all employees even if they are treated differently, such as having different pay calculations. |","lastModifiedDate":"2021-09-26"},{"lineNumber":614,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | save certain employee settings and apply them to other employees                                                      | add new employees into the database with previously used settings.                                                        |","lastModifiedDate":"2021-09-26"},{"lineNumber":615,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | potential user                             | insert dummy data into the app                                                                                        | see how the interface looks.                                                                                              |","lastModifiedDate":"2021-09-26"},{"lineNumber":616,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | potential user                             | clear out all the dummy data inserted                                                                                 | immediately start using the app after testing it.                                                                         |","lastModifiedDate":"2021-09-26"},{"lineNumber":617,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | can see everything                                                                                                    | feel like I am in charge.                                                                                                 |","lastModifiedDate":"2021-09-26"},{"lineNumber":618,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user dealing with confidential information | have some form of authentication                                                                                      | ensure only authorized personnel are allowed to access the data.                                                          |","lastModifiedDate":"2021-09-26"},{"lineNumber":619,"author":{"gitId":"boonhaii"},"content":"| `* *  `  | user                                       | mark important days such as payday                                                                                    | manage my work more effectively.                                                                                          |","lastModifiedDate":"2021-09-26"},{"lineNumber":620,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":621,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":622,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":624,"author":{"gitId":"szelongq"},"content":"(For all use cases below, the **System** is the `HeRon` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-30"},{"lineNumber":625,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":626,"author":{"gitId":"boonhaii"},"content":"**Use case: Delete an employee**","lastModifiedDate":"2021-09-28"},{"lineNumber":627,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":628,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":629,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":630,"author":{"gitId":"boonhaii"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-10-01"},{"lineNumber":631,"author":{"gitId":"boonhaii"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-10-01"},{"lineNumber":632,"author":{"gitId":"boonhaii"},"content":"3.  User requests to delete a specific employee in the list","lastModifiedDate":"2021-10-01"},{"lineNumber":633,"author":{"gitId":"boonhaii"},"content":"4.  HeRon deletes the employee","lastModifiedDate":"2021-10-01"},{"lineNumber":634,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":635,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":636,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":637,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":638,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":639,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":640,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":641,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":642,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":643,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":645,"author":{"gitId":"danielsimre"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":646,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":647,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":649,"author":{"gitId":"danielsimre"},"content":"**Use case: Add leaves to an employee\u0027s leave balance**","lastModifiedDate":"2021-11-07"},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":651,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":652,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":653,"author":{"gitId":"danielsimre"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-09-29"},{"lineNumber":654,"author":{"gitId":"danielsimre"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-09-29"},{"lineNumber":655,"author":{"gitId":"boonhaii"},"content":"3.  User requests to add a certain number of leaves to a specific employee in the list","lastModifiedDate":"2021-10-12"},{"lineNumber":656,"author":{"gitId":"danielsimre"},"content":"4.  HeRon adds the leaves to the employee\u0027s leave balance","lastModifiedDate":"2021-11-07"},{"lineNumber":657,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":658,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":660,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":662,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":663,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":664,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":665,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":666,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-29"},{"lineNumber":667,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":668,"author":{"gitId":"beefham"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":669,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":670,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":671,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":672,"author":{"gitId":"boonhaii"},"content":"* 3b. The number of leaves to be added is invalid. (If the input is not a positive integer)","lastModifiedDate":"2021-10-12"},{"lineNumber":673,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":674,"author":{"gitId":"beefham"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":675,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":676,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":677,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":678,"author":{"gitId":"danielsimre"},"content":"**Use case: Remove leaves from an employee\u0027s leave balance**","lastModifiedDate":"2021-11-07"},{"lineNumber":679,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":680,"author":{"gitId":"danielsimre"},"content":"Guarantees:","lastModifiedDate":"2021-10-25"},{"lineNumber":681,"author":{"gitId":"danielsimre"},"content":"* The number of leaves of the employee after the operation will never be negative.","lastModifiedDate":"2021-10-25"},{"lineNumber":682,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":683,"author":{"gitId":"szelongq"},"content":"**MSS**","lastModifiedDate":"2021-09-30"},{"lineNumber":684,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":685,"author":{"gitId":"szelongq"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-09-30"},{"lineNumber":686,"author":{"gitId":"danielsimre"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-09-29"},{"lineNumber":687,"author":{"gitId":"boonhaii"},"content":"3.  User requests to remove a certain number of leaves from a specific employee in the list","lastModifiedDate":"2021-10-12"},{"lineNumber":688,"author":{"gitId":"danielsimre"},"content":"4.  HeRon removes the leaves from the employee\u0027s leave balance","lastModifiedDate":"2021-11-07"},{"lineNumber":689,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":690,"author":{"gitId":"szelongq"},"content":"    Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":691,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":692,"author":{"gitId":"szelongq"},"content":"**Extensions**","lastModifiedDate":"2021-09-30"},{"lineNumber":693,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":694,"author":{"gitId":"szelongq"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-30"},{"lineNumber":695,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":696,"author":{"gitId":"szelongq"},"content":"  Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":697,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":698,"author":{"gitId":"szelongq"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-30"},{"lineNumber":699,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":700,"author":{"gitId":"szelongq"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":701,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":702,"author":{"gitId":"szelongq"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":703,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":704,"author":{"gitId":"boonhaii"},"content":"* 3b. The number of leaves to be removed is invalid. (If the input is not a positive integer)","lastModifiedDate":"2021-10-12"},{"lineNumber":705,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":706,"author":{"gitId":"danielsimre"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":707,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":708,"author":{"gitId":"szelongq"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-30"},{"lineNumber":709,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":710,"author":{"gitId":"boonhaii"},"content":"* 3c. The number of leaves to be removed is greater than the amount of leaves the employee actually has.","lastModifiedDate":"2021-10-12"},{"lineNumber":711,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":712,"author":{"gitId":"danielsimre"},"content":"    * 3c1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":713,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":714,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":715,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":716,"author":{"gitId":"danielsimre"},"content":"**Use case: Assign a leave to an employee**","lastModifiedDate":"2021-10-25"},{"lineNumber":717,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":718,"author":{"gitId":"danielsimre"},"content":"Guarantees:","lastModifiedDate":"2021-10-25"},{"lineNumber":719,"author":{"gitId":"danielsimre"},"content":"* The number of leaves of the employee after the operation will never be negative.","lastModifiedDate":"2021-10-25"},{"lineNumber":720,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":721,"author":{"gitId":"danielsimre"},"content":"**MSS**","lastModifiedDate":"2021-10-25"},{"lineNumber":722,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":723,"author":{"gitId":"danielsimre"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-10-25"},{"lineNumber":724,"author":{"gitId":"danielsimre"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-10-25"},{"lineNumber":725,"author":{"gitId":"danielsimre"},"content":"3.  User requests to assign a leave to an employee with a date","lastModifiedDate":"2021-10-25"},{"lineNumber":726,"author":{"gitId":"danielsimre"},"content":"4.  HeRon assigns the leave to the employee and subtracts a leave from the employee\u0027s leave balance","lastModifiedDate":"2021-10-25"},{"lineNumber":727,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":728,"author":{"gitId":"danielsimre"},"content":"    Use case ends.","lastModifiedDate":"2021-10-25"},{"lineNumber":729,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":730,"author":{"gitId":"danielsimre"},"content":"**Extensions**","lastModifiedDate":"2021-10-25"},{"lineNumber":731,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":732,"author":{"gitId":"danielsimre"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-10-25"},{"lineNumber":733,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":734,"author":{"gitId":"danielsimre"},"content":"  Use case ends.","lastModifiedDate":"2021-10-25"},{"lineNumber":735,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":736,"author":{"gitId":"danielsimre"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-10-25"},{"lineNumber":737,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":738,"author":{"gitId":"danielsimre"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-10-25"},{"lineNumber":739,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":740,"author":{"gitId":"danielsimre"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-25"},{"lineNumber":741,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":742,"author":{"gitId":"danielsimre"},"content":"* 3b. The date associated with the leave is invalid.","lastModifiedDate":"2021-10-25"},{"lineNumber":743,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":744,"author":{"gitId":"danielsimre"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-10-25"},{"lineNumber":745,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":746,"author":{"gitId":"danielsimre"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-25"},{"lineNumber":747,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":748,"author":{"gitId":"danielsimre"},"content":"* 3c. The employee has no more leaves remaining in their leave balance.","lastModifiedDate":"2021-10-25"},{"lineNumber":749,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":750,"author":{"gitId":"danielsimre"},"content":"    * 3c1. HeRon shows an error message.","lastModifiedDate":"2021-10-25"},{"lineNumber":751,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":752,"author":{"gitId":"danielsimre"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-25"},{"lineNumber":753,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":754,"author":{"gitId":"danielsimre"},"content":"**Use case: Remove outdated assigned leaves from a list of employees**","lastModifiedDate":"2021-11-07"},{"lineNumber":755,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":756,"author":{"gitId":"danielsimre"},"content":"**MSS**","lastModifiedDate":"2021-11-07"},{"lineNumber":757,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":758,"author":{"gitId":"danielsimre"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-11-07"},{"lineNumber":759,"author":{"gitId":"danielsimre"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-11-07"},{"lineNumber":760,"author":{"gitId":"danielsimre"},"content":"3.  User requests to clear all leaves before a given date from all employees in the list ","lastModifiedDate":"2021-11-07"},{"lineNumber":761,"author":{"gitId":"danielsimre"},"content":"4.  HeRon gets a list of leave dates from an employee","lastModifiedDate":"2021-11-07"},{"lineNumber":762,"author":{"gitId":"danielsimre"},"content":"5.  HeRon removes all leave dates that occur before the given input date, and updates the employee\u0027s list accordingly","lastModifiedDate":"2021-11-07"},{"lineNumber":763,"author":{"gitId":"danielsimre"},"content":"    Steps 4-5 are repeated for all employees in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":764,"author":{"gitId":"danielsimre"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":765,"author":{"gitId":"danielsimre"},"content":"    Use case ends.","lastModifiedDate":"2021-11-07"},{"lineNumber":766,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":767,"author":{"gitId":"danielsimre"},"content":"**Extensions**","lastModifiedDate":"2021-11-07"},{"lineNumber":768,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":769,"author":{"gitId":"danielsimre"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":770,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":771,"author":{"gitId":"danielsimre"},"content":"  Use case ends.","lastModifiedDate":"2021-11-07"},{"lineNumber":772,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":773,"author":{"gitId":"danielsimre"},"content":"**Use case: Add hours worked/overtime to an employee**","lastModifiedDate":"2021-10-25"},{"lineNumber":774,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":775,"author":{"gitId":"danielsimre"},"content":"**MSS**","lastModifiedDate":"2021-10-25"},{"lineNumber":776,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":777,"author":{"gitId":"danielsimre"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-10-25"},{"lineNumber":778,"author":{"gitId":"danielsimre"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-10-25"},{"lineNumber":779,"author":{"gitId":"danielsimre"},"content":"3.  User requests to add a certain number hours worked and/or overtime to a specific employee in the list","lastModifiedDate":"2021-10-25"},{"lineNumber":780,"author":{"gitId":"danielsimre"},"content":"4.  HeRon adds the hours worked/overtime to the employee","lastModifiedDate":"2021-10-25"},{"lineNumber":781,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":782,"author":{"gitId":"danielsimre"},"content":"    Use case ends.","lastModifiedDate":"2021-10-25"},{"lineNumber":783,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":784,"author":{"gitId":"danielsimre"},"content":"**Extensions**","lastModifiedDate":"2021-10-25"},{"lineNumber":785,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":786,"author":{"gitId":"danielsimre"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-10-25"},{"lineNumber":787,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":788,"author":{"gitId":"danielsimre"},"content":"  Use case ends.","lastModifiedDate":"2021-10-25"},{"lineNumber":789,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":790,"author":{"gitId":"danielsimre"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-10-25"},{"lineNumber":791,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":792,"author":{"gitId":"danielsimre"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-10-25"},{"lineNumber":793,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":794,"author":{"gitId":"danielsimre"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-25"},{"lineNumber":795,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":796,"author":{"gitId":"danielsimre"},"content":"* 3b. The number of hours worked/overtime to be added is invalid. (If the input is not a positive integer)","lastModifiedDate":"2021-10-25"},{"lineNumber":797,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":798,"author":{"gitId":"danielsimre"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-10-25"},{"lineNumber":799,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":800,"author":{"gitId":"danielsimre"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-25"},{"lineNumber":801,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":802,"author":{"gitId":"danielsimre"},"content":"**Use case: Remove hours worked/overtime from an employee**","lastModifiedDate":"2021-10-25"},{"lineNumber":803,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":804,"author":{"gitId":"danielsimre"},"content":"Guarantees:","lastModifiedDate":"2021-10-25"},{"lineNumber":805,"author":{"gitId":"danielsimre"},"content":"* The number of hours worked/overtime of the employee after the operation will never be negative.","lastModifiedDate":"2021-10-25"},{"lineNumber":806,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":807,"author":{"gitId":"danielsimre"},"content":"**MSS**","lastModifiedDate":"2021-10-25"},{"lineNumber":808,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":809,"author":{"gitId":"danielsimre"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-10-25"},{"lineNumber":810,"author":{"gitId":"danielsimre"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-10-25"},{"lineNumber":811,"author":{"gitId":"danielsimre"},"content":"3.  User requests to remove a certain number hours worked and/or overtime from a specific employee in the list","lastModifiedDate":"2021-10-25"},{"lineNumber":812,"author":{"gitId":"danielsimre"},"content":"4.  HeRon removes the hours worked/overtime from the employee","lastModifiedDate":"2021-10-25"},{"lineNumber":813,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":814,"author":{"gitId":"danielsimre"},"content":"    Use case ends.","lastModifiedDate":"2021-10-25"},{"lineNumber":815,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":816,"author":{"gitId":"danielsimre"},"content":"**Extensions**","lastModifiedDate":"2021-10-25"},{"lineNumber":817,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":818,"author":{"gitId":"danielsimre"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-10-25"},{"lineNumber":819,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":820,"author":{"gitId":"danielsimre"},"content":"  Use case ends.","lastModifiedDate":"2021-10-25"},{"lineNumber":821,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":822,"author":{"gitId":"danielsimre"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-10-25"},{"lineNumber":823,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":824,"author":{"gitId":"danielsimre"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-10-25"},{"lineNumber":825,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":826,"author":{"gitId":"danielsimre"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-25"},{"lineNumber":827,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":828,"author":{"gitId":"danielsimre"},"content":"* 3b. The hours worked/overtime to be removed is invalid. (If the input is not a positive integer)","lastModifiedDate":"2021-10-25"},{"lineNumber":829,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":830,"author":{"gitId":"danielsimre"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-10-25"},{"lineNumber":831,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":832,"author":{"gitId":"danielsimre"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-25"},{"lineNumber":833,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":834,"author":{"gitId":"danielsimre"},"content":"* 3c. The number of hours worked/overtime to be removed is greater than the number of hours worked/overtime the employee actually has.","lastModifiedDate":"2021-10-25"},{"lineNumber":835,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":836,"author":{"gitId":"danielsimre"},"content":"    * 3c1. HeRon shows an error message.","lastModifiedDate":"2021-10-25"},{"lineNumber":837,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":838,"author":{"gitId":"danielsimre"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-25"},{"lineNumber":839,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":840,"author":{"gitId":"boonhaii"},"content":"**Use Case: Finding an employee**","lastModifiedDate":"2021-10-01"},{"lineNumber":841,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":842,"author":{"gitId":"beefham"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":843,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":844,"author":{"gitId":"boonhaii"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-10-01"},{"lineNumber":845,"author":{"gitId":"boonhaii"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-10-01"},{"lineNumber":846,"author":{"gitId":"boonhaii"},"content":"3.  User requests to find all employees with a given query (name, phone, tags, and other valid queries)","lastModifiedDate":"2021-10-01"},{"lineNumber":847,"author":{"gitId":"boonhaii"},"content":"4.  HeRon shows a list of employees with that given name","lastModifiedDate":"2021-10-01"},{"lineNumber":848,"author":{"gitId":"beefham"},"content":"   ","lastModifiedDate":"2021-09-30"},{"lineNumber":849,"author":{"gitId":"boonhaii"},"content":"   Use case ends.","lastModifiedDate":"2021-11-07"},{"lineNumber":850,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":851,"author":{"gitId":"beefham"},"content":"**Extensions**","lastModifiedDate":"2021-09-30"},{"lineNumber":852,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":853,"author":{"gitId":"beefham"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":854,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":855,"author":{"gitId":"beefham"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":856,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":857,"author":{"gitId":"beefham"},"content":"* 3a. The given query does not match any user in HeRon","lastModifiedDate":"2021-09-29"},{"lineNumber":858,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":859,"author":{"gitId":"beefham"},"content":"    * 3a1. HeRon shows an error message","lastModifiedDate":"2021-09-29"},{"lineNumber":860,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":861,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":862,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":863,"author":{"gitId":"beefham"},"content":"* 3b. The given query is invalid (because it contains a tag that cannot be understood)","lastModifiedDate":"2021-09-30"},{"lineNumber":864,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":865,"author":{"gitId":"beefham"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":866,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":867,"author":{"gitId":"beefham"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":868,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":869,"author":{"gitId":"1waykiat"},"content":"**Use case: Edit an employee**","lastModifiedDate":"2021-09-28"},{"lineNumber":870,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":871,"author":{"gitId":"1waykiat"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":872,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":873,"author":{"gitId":"1waykiat"},"content":"1. User requests to list employees","lastModifiedDate":"2021-09-29"},{"lineNumber":874,"author":{"gitId":"1waykiat"},"content":"2. HeRon shows list of employees","lastModifiedDate":"2021-09-28"},{"lineNumber":875,"author":{"gitId":"1waykiat"},"content":"3. User requests to edit a specific employee on the list","lastModifiedDate":"2021-09-29"},{"lineNumber":876,"author":{"gitId":"1waykiat"},"content":"4. HeRon replaces the data of the employee based on the user\u0027s specified inputs","lastModifiedDate":"2021-09-28"},{"lineNumber":877,"author":{"gitId":"1waykiat"},"content":"5. HeRon displays employee data of the edited employee to user","lastModifiedDate":"2021-09-28"},{"lineNumber":878,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":879,"author":{"gitId":"1waykiat"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":880,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":881,"author":{"gitId":"1waykiat"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":882,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":883,"author":{"gitId":"1waykiat"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":884,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":885,"author":{"gitId":"1waykiat"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":886,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":887,"author":{"gitId":"1waykiat"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":888,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":889,"author":{"gitId":"1waykiat"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":890,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":891,"author":{"gitId":"1waykiat"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":892,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":893,"author":{"gitId":"1waykiat"},"content":"* 3b. No field has been provided","lastModifiedDate":"2021-09-28"},{"lineNumber":894,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":895,"author":{"gitId":"1waykiat"},"content":"    * 3b1. HeRon shows an error message informing user about the lack of a field","lastModifiedDate":"2021-09-28"},{"lineNumber":896,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":897,"author":{"gitId":"1waykiat"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":898,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":899,"author":{"gitId":"1waykiat"},"content":"* 3c. Input into field is invalid","lastModifiedDate":"2021-09-28"},{"lineNumber":900,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":901,"author":{"gitId":"1waykiat"},"content":"    * 3c1. HeRon shows an error message informing user about which field has invalid input and why it is invalid","lastModifiedDate":"2021-09-28"},{"lineNumber":902,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":903,"author":{"gitId":"1waykiat"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":904,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":905,"author":{"gitId":"szelongq"},"content":"**Use case: Calculate payroll for all employees**","lastModifiedDate":"2021-10-24"},{"lineNumber":906,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":907,"author":{"gitId":"1waykiat"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":908,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":909,"author":{"gitId":"1waykiat"},"content":"1.  User requests to list employees","lastModifiedDate":"2021-09-29"},{"lineNumber":910,"author":{"gitId":"szelongq"},"content":"2.  HeRon shows a list of employees","lastModifiedDate":"2021-09-30"},{"lineNumber":911,"author":{"gitId":"szelongq"},"content":"3.  User requests to calculate the payroll for all employees","lastModifiedDate":"2021-10-24"},{"lineNumber":912,"author":{"gitId":"szelongq"},"content":"4.  HeRon shows the list of all employees","lastModifiedDate":"2021-10-24"},{"lineNumber":913,"author":{"gitId":"szelongq"},"content":"5.  HeRon calculates the payroll and updates all employees\u0027 calculated pay information.","lastModifiedDate":"2021-10-24"},{"lineNumber":914,"author":{"gitId":"szelongq"},"content":"6.  HeRon sets the first employee on the list to be viewed in the InfoPanel.","lastModifiedDate":"2021-11-07"},{"lineNumber":915,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":916,"author":{"gitId":"1waykiat"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":917,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":918,"author":{"gitId":"1waykiat"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":919,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":920,"author":{"gitId":"szelongq"},"content":"* 5a. There is an employee who has not yet been paid the previous calculated pay.","lastModifiedDate":"2021-10-24"},{"lineNumber":921,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":922,"author":{"gitId":"szelongq"},"content":"    * 5a1. HeRon shows an error message.","lastModifiedDate":"2021-10-24"},{"lineNumber":923,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":924,"author":{"gitId":"szelongq"},"content":"        Use case resumes at step 4.","lastModifiedDate":"2021-10-24"},{"lineNumber":925,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":926,"author":{"gitId":"boonhaii"},"content":"**Use case: Adding a Tag to an employee**","lastModifiedDate":"2021-09-28"},{"lineNumber":927,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":928,"author":{"gitId":"boonhaii"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":929,"author":{"gitId":"boonhaii"},"content":"1. User searches for a certain employee.","lastModifiedDate":"2021-09-28"},{"lineNumber":930,"author":{"gitId":"beefham"},"content":"2. HeRon returns the results of the search.","lastModifiedDate":"2021-09-30"},{"lineNumber":931,"author":{"gitId":"boonhaii"},"content":"3. User tags the specified employees with a specified tag.","lastModifiedDate":"2021-09-28"},{"lineNumber":932,"author":{"gitId":"boonhaii"},"content":"4. Tag is added to the employee.","lastModifiedDate":"2021-09-28"},{"lineNumber":933,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":934,"author":{"gitId":"boonhaii"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":935,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-09-28"},{"lineNumber":936,"author":{"gitId":"boonhaii"},"content":"**Extensions**","lastModifiedDate":"2021-11-07"},{"lineNumber":937,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":938,"author":{"gitId":"boonhaii"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":939,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":940,"author":{"gitId":"boonhaii"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":941,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":942,"author":{"gitId":"boonhaii"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":943,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":944,"author":{"gitId":"beefham"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":945,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":946,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":947,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":948,"author":{"gitId":"boonhaii"},"content":"* 3b. The given tag is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":949,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":950,"author":{"gitId":"beefham"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":951,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":952,"author":{"gitId":"boonhaii"},"content":"        Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":953,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":954,"author":{"gitId":"boonhaii"},"content":"**Use case: Updating details of group of employees with specified tag.**","lastModifiedDate":"2021-09-28"},{"lineNumber":955,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":956,"author":{"gitId":"boonhaii"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":957,"author":{"gitId":"boonhaii"},"content":"1. User searches for employees with specified tag.","lastModifiedDate":"2021-09-28"},{"lineNumber":958,"author":{"gitId":"beefham"},"content":"2. HeRon returns the results of the search.","lastModifiedDate":"2021-09-30"},{"lineNumber":959,"author":{"gitId":"boonhaii"},"content":"3. User updates the details of the specified employees.","lastModifiedDate":"2021-09-28"},{"lineNumber":960,"author":{"gitId":"boonhaii"},"content":"4. Employees in the group tag have their details updated.","lastModifiedDate":"2021-09-28"},{"lineNumber":961,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":962,"author":{"gitId":"boonhaii"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":963,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":964,"author":{"gitId":"boonhaii"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":965,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":966,"author":{"gitId":"boonhaii"},"content":"* 2a. The result list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":967,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":968,"author":{"gitId":"boonhaii"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":969,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":970,"author":{"gitId":"boonhaii"},"content":"* 3a. The given corresponding tag of the detail(s) to be updated is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":971,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":972,"author":{"gitId":"beefham"},"content":"    * 3a1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":973,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":974,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":975,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":976,"author":{"gitId":"boonhaii"},"content":"* 3b. The given detail(s) to be updated is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":977,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":978,"author":{"gitId":"beefham"},"content":"    * 3b1. HeRon shows an error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":979,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":980,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":981,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":982,"author":{"gitId":"boonhaii"},"content":"**Use case: Importing an external .csv file.**","lastModifiedDate":"2021-10-27"},{"lineNumber":983,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":984,"author":{"gitId":"boonhaii"},"content":"**MSS**","lastModifiedDate":"2021-10-27"},{"lineNumber":985,"author":{"gitId":"boonhaii"},"content":"1. User specifies the filepath of the file to be imported.","lastModifiedDate":"2021-10-27"},{"lineNumber":986,"author":{"gitId":"boonhaii"},"content":"2. File is found and data from the file is imported into HeRon.","lastModifiedDate":"2021-10-27"},{"lineNumber":987,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":988,"author":{"gitId":"boonhaii"},"content":"    Use case ends.","lastModifiedDate":"2021-10-27"},{"lineNumber":989,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":990,"author":{"gitId":"boonhaii"},"content":"**Extensions**","lastModifiedDate":"2021-10-27"},{"lineNumber":991,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":992,"author":{"gitId":"boonhaii"},"content":"* 2a. File specified from the given filepath foes not exist.","lastModifiedDate":"2021-10-27"},{"lineNumber":993,"author":{"gitId":"boonhaii"},"content":"    ","lastModifiedDate":"2021-10-27"},{"lineNumber":994,"author":{"gitId":"boonhaii"},"content":"    * 2a1. HeRon shows an error message. ","lastModifiedDate":"2021-10-27"},{"lineNumber":995,"author":{"gitId":"boonhaii"},"content":"  ","lastModifiedDate":"2021-10-27"},{"lineNumber":996,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2021-10-27"},{"lineNumber":997,"author":{"gitId":"boonhaii"},"content":"  ","lastModifiedDate":"2021-10-27"},{"lineNumber":998,"author":{"gitId":"boonhaii"},"content":"* 2b. File specified exists, but the formatting of data in the given file is invalid.","lastModifiedDate":"2021-10-27"},{"lineNumber":999,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":1000,"author":{"gitId":"boonhaii"},"content":"    * 2b1. HeRon shows an error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1001,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1002,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2021-11-07"},{"lineNumber":1003,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1004,"author":{"gitId":"boonhaii"},"content":"* 2c. File specified exists, but the invalid data is present in the given file.","lastModifiedDate":"2021-11-07"},{"lineNumber":1005,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1006,"author":{"gitId":"boonhaii"},"content":"    * 2c1. HeRon shows an error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1007,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":1008,"author":{"gitId":"boonhaii"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2021-10-27"},{"lineNumber":1009,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1010,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":1011,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1012,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":1013,"author":{"gitId":"-"},"content":"2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":1014,"author":{"gitId":"-"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":1015,"author":{"gitId":"boonhaii"},"content":"4. User interface should be able to comfortably fit the information of at least 50 employees.","lastModifiedDate":"2021-09-26"},{"lineNumber":1016,"author":{"gitId":"boonhaii"},"content":"5. Should be usable offline.","lastModifiedDate":"2021-09-26"},{"lineNumber":1017,"author":{"gitId":"boonhaii"},"content":"6. Should respond within 2 seconds within the users’ command.","lastModifiedDate":"2021-09-26"},{"lineNumber":1018,"author":{"gitId":"boonhaii"},"content":"7. Should only allow authorized personnel to have access to the application’s data.","lastModifiedDate":"2021-09-26"},{"lineNumber":1019,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":1024,"author":{"gitId":"boonhaii"},"content":"* **Salary**: Hourly Salary payout to employees","lastModifiedDate":"2021-11-08"},{"lineNumber":1025,"author":{"gitId":"danielsimre"},"content":"* **Leave**: Refers to a day when an employee has permission to be absent from work","lastModifiedDate":"2021-09-30"},{"lineNumber":1026,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1027,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":1028,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":1032,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1033,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":1034,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":1035,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1036,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1038,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":1039,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1040,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":1041,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1042,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1044,"author":{"gitId":"boonhaii"},"content":"   1. Double-click the jar file \u003cbr\u003e ","lastModifiedDate":"2021-11-08"},{"lineNumber":1045,"author":{"gitId":"boonhaii"},"content":"      Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2021-11-08"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1047,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":1050,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1052,"author":{"gitId":"-"},"content":"      Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":1053,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1054,"author":{"gitId":"beefham"},"content":"### Finding a person","lastModifiedDate":"2021-11-07"},{"lineNumber":1055,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1056,"author":{"gitId":"beefham"},"content":"1. Finding a person with their name","lastModifiedDate":"2021-11-07"},{"lineNumber":1057,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1058,"author":{"gitId":"beefham"},"content":"    1. Prerequisites: Have at least one person in the list. Note down their name. For this example, we assume their name is `Alex Yeoh`. ","lastModifiedDate":"2021-11-07"},{"lineNumber":1059,"author":{"gitId":"beefham"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":1060,"author":{"gitId":"beefham"},"content":"    1. Test case: `find n/Alex`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1061,"author":{"gitId":"beefham"},"content":"       Expected: Alex appears in the list on the left side, while the rest of the people whose names do not contain `Alex` are not shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":1062,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1063,"author":{"gitId":"beefham"},"content":"    1. Test case: `find n/Yeoh`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1064,"author":{"gitId":"beefham"},"content":"       Expected: The same should happen as before, with the rest of the list containing all people with `Yeoh` in their name, if any.","lastModifiedDate":"2021-11-07"},{"lineNumber":1065,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e     ","lastModifiedDate":"2021-11-08"},{"lineNumber":1066,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":1069,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":1074,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1081,"author":{"gitId":"szelongq"},"content":"### Editing an employee","lastModifiedDate":"2021-09-30"},{"lineNumber":1082,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":1083,"author":{"gitId":"danielsimre"},"content":"1. Editing an employee while a list of employees is shown","lastModifiedDate":"2021-11-07"},{"lineNumber":1084,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":1085,"author":{"gitId":"szelongq"},"content":"    1. Prerequisites: List all persons using the `list` command. Multiple employees in the list.","lastModifiedDate":"2021-09-30"},{"lineNumber":1086,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":1087,"author":{"gitId":"szelongq"},"content":"    2. Test case: `edit 1 n/Tsang Wei Ooi`\u003cbr\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":1088,"author":{"gitId":"szelongq"},"content":"        Expected: First employee\u0027s name is updated with `Tsang Wei Ooi`. Details of the edited employee is shown in status message. Timestamp in the status bar is updated.","lastModifiedDate":"2021-09-30"},{"lineNumber":1089,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":1090,"author":{"gitId":"szelongq"},"content":"    3. Test case: `edit`\u003cbr\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":1091,"author":{"gitId":"szelongq"},"content":"        Expected: No data is being edited. Error details shown in status message. Status bar remains the same.","lastModifiedDate":"2021-09-30"},{"lineNumber":1092,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":1093,"author":{"gitId":"boonhaii"},"content":"    4. Test case: `edit 1 p/91234567 s/9.50`\u003cbr\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":1094,"author":{"gitId":"boonhaii"},"content":"        Expected: First employee\u0027s phone number and salary is updated as `91234567` and `9.50` respectively together. Details of edited contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2021-10-12"},{"lineNumber":1095,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":1096,"author":{"gitId":"boonhaii"},"content":"    5. Other incorrect edit commands to try: `edit x` (where x is larger than list size), `edit 1 s/-2.00` (salary should not be negative) etc. \u003cbr\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":1097,"author":{"gitId":"szelongq"},"content":"        Expected: No employee data is being edited. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2021-09-30"},{"lineNumber":1098,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1099,"author":{"gitId":"danielsimre"},"content":"### Adding to/Deducting from an employee\u0027s leave balance","lastModifiedDate":"2021-11-07"},{"lineNumber":1100,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1101,"author":{"gitId":"danielsimre"},"content":"1. Adding to/Deducting from an employee\u0027s leave balance while a list of employees is shown","lastModifiedDate":"2021-11-07"},{"lineNumber":1102,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1103,"author":{"gitId":"danielsimre"},"content":"    1. Prerequisites: List all persons using the `list` command. At least 1 employee in the list. First employee must have a `LeaveBalance` of 0.","lastModifiedDate":"2021-11-07"},{"lineNumber":1104,"author":{"gitId":"danielsimre"},"content":"       (Set with `edit 1 l/0`) All test cases are meant to be tested in order.","lastModifiedDate":"2021-11-07"},{"lineNumber":1105,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1106,"author":{"gitId":"danielsimre"},"content":"    2. Test case: `addLeaveBalance 1 l/1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1107,"author":{"gitId":"danielsimre"},"content":"       Expected: First employee\u0027s leave balance is now 1. Details of the new leave balance are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1108,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1109,"author":{"gitId":"danielsimre"},"content":"    3. Test case: `addLeaveBalance`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1110,"author":{"gitId":"danielsimre"},"content":"       Expected: No leaves are added. Error details shown in the status message indicate that the command format is invalid.","lastModifiedDate":"2021-11-07"},{"lineNumber":1111,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1112,"author":{"gitId":"danielsimre"},"content":"    4. Test case: `addLeaveBalance 1 l/365`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1113,"author":{"gitId":"danielsimre"},"content":"       Expected: No leaves are added. Error details shown in the status message indicate that only 364 leaves can be added.","lastModifiedDate":"2021-11-07"},{"lineNumber":1114,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":1115,"author":{"gitId":"danielsimre"},"content":"    5. Test case: `addLeaveBalance 1 l/364`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1116,"author":{"gitId":"danielsimre"},"content":"       Expected: First employee\u0027s leave balance is now 365. Details of the new leave balance are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1117,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1118,"author":{"gitId":"danielsimre"},"content":"    6. Test case: `deductLeaveBalance 1 l/366`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1119,"author":{"gitId":"danielsimre"},"content":"       Expected: No leaves are deducted. Error details shown in the status message indicate that only integers between 1-365 are valid.","lastModifiedDate":"2021-11-07"},{"lineNumber":1120,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1121,"author":{"gitId":"danielsimre"},"content":"    7. Test case: `deductLeaveBalance 1 l/365`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1122,"author":{"gitId":"danielsimre"},"content":"       Expected: 365 leaves are deducted. Details of the new leave balance are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1123,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1124,"author":{"gitId":"danielsimre"},"content":"    8. Test case: `deductLeaveBalance 1 l/1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1125,"author":{"gitId":"danielsimre"},"content":"       Expected: No leaves are deducted. Error details shown in the status message indicate that the employee has 0 leaves remaining.","lastModifiedDate":"2021-11-07"},{"lineNumber":1126,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1127,"author":{"gitId":"danielsimre"},"content":"### Assigning leaves to/Removing outdated leaves from an employee","lastModifiedDate":"2021-11-07"},{"lineNumber":1128,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1129,"author":{"gitId":"danielsimre"},"content":"1. Assigning leaves/Removing outdated leaves while a list of employees is shown","lastModifiedDate":"2021-11-07"},{"lineNumber":1130,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1131,"author":{"gitId":"danielsimre"},"content":"    1. Prerequisites: List all persons using the `list` command. At least 1 employee in the list. First employee must have a `LeaveBalance` of 0.","lastModifiedDate":"2021-11-07"},{"lineNumber":1132,"author":{"gitId":"danielsimre"},"content":"       (Set with `edit 1 l/0`) All test cases are meant to be tested in order.","lastModifiedDate":"2021-11-07"},{"lineNumber":1133,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1134,"author":{"gitId":"danielsimre"},"content":"    2. Test case: `assignLeave 1 d/2021-08-10`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1135,"author":{"gitId":"danielsimre"},"content":"       Expected: No leave is assigned. Error details shown in the status message indicate that the employee has no more leaves.","lastModifiedDate":"2021-11-07"},{"lineNumber":1136,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1137,"author":{"gitId":"danielsimre"},"content":"    3. Test case: `assignLeave`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1138,"author":{"gitId":"danielsimre"},"content":"       Expected: No leave is assigned. Error details shown in the status message indicate that the command format is invalid.","lastModifiedDate":"2021-11-07"},{"lineNumber":1139,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1140,"author":{"gitId":"danielsimre"},"content":"    4. Test case: `addLeaveBalance 2 l/2`, followed by `assignLeave 1 d/2021-8-10`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1141,"author":{"gitId":"danielsimre"},"content":"       Expected: 2 leaves are added to the leave balance successfully, but no leaves are assigned.","lastModifiedDate":"2021-11-07"},{"lineNumber":1142,"author":{"gitId":"danielsimre"},"content":"       Error details shown in the status message indicate that the date format or value is invalid. (In this case the date format is invalid)","lastModifiedDate":"2021-11-07"},{"lineNumber":1143,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1144,"author":{"gitId":"danielsimre"},"content":"    5. Test case: `assignLeave 1 d/2021-13-10`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1145,"author":{"gitId":"danielsimre"},"content":"       Expected: No leave is assigned. Error details shown in the status message indicate that the date format or value is invalid. (In this case the date value is invalid)","lastModifiedDate":"2021-11-07"},{"lineNumber":1146,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1147,"author":{"gitId":"danielsimre"},"content":"    6. Test case: `assignLeave 1 d/2021-08-10`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1148,"author":{"gitId":"danielsimre"},"content":"       Expected: The leave is assigned. Details of the new assigned leave are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1149,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1150,"author":{"gitId":"danielsimre"},"content":"    7. Test case: `assignLeave 1 d/2021-08-10`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1151,"author":{"gitId":"danielsimre"},"content":"       Expected: No leave is assigned. Error details shown in the status message indicate that a leave with the input date is already assigned to the employee.","lastModifiedDate":"2021-11-08"},{"lineNumber":1152,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1153,"author":{"gitId":"danielsimre"},"content":"    8. Test case: `assignLeave 1 d/2021-08-11`, followed by `removeLeavesBefore 1 d/2021-08-10`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1154,"author":{"gitId":"danielsimre"},"content":"       Expected: The leave with date 2021-08-11 is assigned, and then the leave on 2021-08-10 is removed.","lastModifiedDate":"2021-11-07"},{"lineNumber":1155,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1156,"author":{"gitId":"danielsimre"},"content":"### Adding/Deducting from an employee\u0027s hours worked","lastModifiedDate":"2021-11-07"},{"lineNumber":1157,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1158,"author":{"gitId":"danielsimre"},"content":"1. Adding to/Deducting from an employee\u0027s hours worked while a list of employees is shown","lastModifiedDate":"2021-11-07"},{"lineNumber":1159,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1160,"author":{"gitId":"danielsimre"},"content":"    1. Prerequisites: List all persons using the `list` command. At least 1 employee in the list. First employee must have `HoursWorked` and `Overtime` set to 0.","lastModifiedDate":"2021-11-07"},{"lineNumber":1161,"author":{"gitId":"danielsimre"},"content":"       (Set with `edit 1 hw/0 o/0`) All test cases are meant to be tested in order.","lastModifiedDate":"2021-11-07"},{"lineNumber":1162,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1163,"author":{"gitId":"danielsimre"},"content":"    2. Test case: `addHoursWorked 1 hw/1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1164,"author":{"gitId":"danielsimre"},"content":"       Expected: First employee\u0027s hours worked is now 1. Details of the new hours worked are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1165,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1166,"author":{"gitId":"danielsimre"},"content":"    3. Test case: `addHoursWorked`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1167,"author":{"gitId":"danielsimre"},"content":"       Expected: No hours worked are added. Error details shown in the status message indicate that the command format is invalid.","lastModifiedDate":"2021-11-07"},{"lineNumber":1168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1169,"author":{"gitId":"danielsimre"},"content":"    4. Test case: `addHoursWorked 1 hw/0 o/1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1170,"author":{"gitId":"danielsimre"},"content":"       Expected: No hours worked are added. Error details shown in the status message indicate that the input for hours worked must be a value between 1 and 744.","lastModifiedDate":"2021-11-07"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1172,"author":{"gitId":"danielsimre"},"content":"    5. Test case: `addHoursWorked 1 hw/1 o/745`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1173,"author":{"gitId":"danielsimre"},"content":"       Expected: No hours worked are added. Error details shown in the status message indicate that the input for overtime must be a value between 1 and 744.","lastModifiedDate":"2021-11-07"},{"lineNumber":1174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1175,"author":{"gitId":"danielsimre"},"content":"    6. Test case: `addHoursWorked 1 hw/744`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1176,"author":{"gitId":"danielsimre"},"content":"       Expected: No hours worked are added. Error details shown in the status message indicate that at most 743 hours worked can be added to the employee.","lastModifiedDate":"2021-11-07"},{"lineNumber":1177,"author":{"gitId":"danielsimre"},"content":"      ","lastModifiedDate":"2021-11-07"},{"lineNumber":1178,"author":{"gitId":"danielsimre"},"content":"    7. Test case: `deductHoursWorked 1 o/1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1179,"author":{"gitId":"danielsimre"},"content":"       Expected: No hours worked are deducted. Error details shown in the status message indicate that the employee has 0 overtime hours worked.","lastModifiedDate":"2021-11-07"},{"lineNumber":1180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1181,"author":{"gitId":"danielsimre"},"content":"    8. Test case: `deductHoursWorked 1 hw/1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1182,"author":{"gitId":"danielsimre"},"content":"       Expected: 1 work hour is deducted. Details of the new hours worked are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1183,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1184,"author":{"gitId":"danielsimre"},"content":"### Calculating payroll and paying employees","lastModifiedDate":"2021-11-07"},{"lineNumber":1185,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1186,"author":{"gitId":"danielsimre"},"content":"1. Starting payroll while in a filtered list","lastModifiedDate":"2021-11-07"},{"lineNumber":1187,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1188,"author":{"gitId":"danielsimre"},"content":"    1. Prerequisites: Ensure all employees are already paid using `pay` command. Ensure at least some employees have","lastModifiedDate":"2021-11-07"},{"lineNumber":1189,"author":{"gitId":"danielsimre"},"content":"       non-zero salary and hoursWorked/overtime values.","lastModifiedDate":"2021-11-07"},{"lineNumber":1190,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1191,"author":{"gitId":"danielsimre"},"content":"    2. Test case: `find n/Bernice`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1192,"author":{"gitId":"danielsimre"},"content":"       Expected: Employee list is filtered to only employees with \u0027Bernice\u0027 in their names.","lastModifiedDate":"2021-11-07"},{"lineNumber":1193,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1194,"author":{"gitId":"boonhaii"},"content":"    3. Test case: `startPayroll`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1195,"author":{"gitId":"danielsimre"},"content":"       Expected: Employee list is set back to full list. All employees should have their calculated pay and have a red","lastModifiedDate":"2021-11-07"},{"lineNumber":1196,"author":{"gitId":"danielsimre"},"content":"       \u0027NOT PAID\u0027 label displayed under their data if their pay owed is not 0. The first person in the list is being","lastModifiedDate":"2021-11-07"},{"lineNumber":1197,"author":{"gitId":"danielsimre"},"content":"       viewed in the InfoPanel.","lastModifiedDate":"2021-11-07"},{"lineNumber":1198,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1199,"author":{"gitId":"boonhaii"},"content":"    4. Test case: `startPayroll`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1200,"author":{"gitId":"danielsimre"},"content":"       Expected: An error should be thrown if there are still employees with pay owed.","lastModifiedDate":"2021-11-07"},{"lineNumber":1201,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1202,"author":{"gitId":"boonhaii"},"content":"    5. Test case: `pay 1`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1203,"author":{"gitId":"danielsimre"},"content":"       Expected: The first person in the list should be paid and any red \u0027NOT PAID\u0027 label disappears.","lastModifiedDate":"2021-11-07"},{"lineNumber":1204,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1205,"author":{"gitId":"boonhaii"},"content":"    6. Test case: `find n/Bernice` followed by `pay all` followed by `list`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1206,"author":{"gitId":"danielsimre"},"content":"       Expected: Only employees with \u0027Bernice\u0027 in their names will be paid. Other employees that were not in the","lastModifiedDate":"2021-11-07"},{"lineNumber":1207,"author":{"gitId":"danielsimre"},"content":"       filtered list should still have their red \u0027NOT PAID\u0027 labels if they had them.","lastModifiedDate":"2021-11-07"},{"lineNumber":1208,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1209,"author":{"gitId":"boonhaii"},"content":"    7. Test case: `pay all`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1210,"author":{"gitId":"szelongq"},"content":"       Expected: All employees should be paid. Any employees that were not being owed payment should have their names","lastModifiedDate":"2021-11-07"},{"lineNumber":1211,"author":{"gitId":"szelongq"},"content":"       printed in the bottom section of the command panel as being skipped.","lastModifiedDate":"2021-11-07"},{"lineNumber":1212,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1213,"author":{"gitId":"boonhaii"},"content":"### Importing from an external .csv file","lastModifiedDate":"2021-11-07"},{"lineNumber":1214,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1215,"author":{"gitId":"boonhaii"},"content":"1. Importing data from a csv file.","lastModifiedDate":"2021-11-07"},{"lineNumber":1216,"author":{"gitId":"boonhaii"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":1217,"author":{"gitId":"boonhaii"},"content":"    1. Prerequisites: Ensure that a csv file with the compulsory fields present, and valid data exists. In this section, this file will be referred to as \"toBeImported.csv\"","lastModifiedDate":"2021-11-07"},{"lineNumber":1218,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1219,"author":{"gitId":"boonhaii"},"content":"    2. Test case: `import /fileNotExist.csv`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1220,"author":{"gitId":"boonhaii"},"content":"        Expected: An error message is returned.","lastModifiedDate":"2021-11-07"},{"lineNumber":1221,"author":{"gitId":"boonhaii"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":1222,"author":{"gitId":"boonhaii"},"content":"    3. Test case: `import /toBeImported.csv`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1223,"author":{"gitId":"boonhaii"},"content":"        Expected: A message indicating a successful import is returned.","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"danielsimre":302,"szelongq":126,"boonhaii":290,"beefham":109,"-":295,"1waykiat":101}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"HeRon is a desktop application for HR managers of Small-Medium Enterprises (SMEs) to assist them in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you are a fast typer, HeRon can get your tasks done faster as compared to traditional GUI apps.","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"This User Guide will bring you through the features that HeRon has to offer, as well as the commands to make use of them.","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"1. Ensure you have Java 11 or above installed in your computer. If you do not have Java 11, you can install it [here](https://www.oracle.com/java/technologies/downloads/).","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"2. Download the latest `HeRon.jar` from [here](https://github.com/AY2122S1-CS2103T-F11-3/tp/releases).","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your HeRon.","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"4. Start the app.","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"   1. If you are using Windows, you can double-click on HeRon.jar in the folder you used in Step 3.","lastModifiedDate":"2021-11-01"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"   2. If you are using MacOS or Linux, open up your terminal and navigate to the folder containing HeRon. Use the command ```java -jar HeRon.jar``` to start up the app.","lastModifiedDate":"2021-11-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"5. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"    \u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"6. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"   * `list` : Lists all contacts.","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"   * `import ./toBeImported.csv` : Imports the .csv file named `toBeImported.csv` the same directory as the application into HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/Admin Assistant l/14 s/9.50 hw/40 o/0` : Adds a contact named `John Doe` with the above details to HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"   * `delete 3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"   * `clear` : Deletes all contacts.","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"7. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"## Interface Layout","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"![CommandPanel](images/user-guide/CommandPanel.png) \u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"_Command Panel_ \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"- User commands can be entered in the top section labeled `Enter command here...`","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"- Bottom section displays the result of the command. If command was unsuccessful, displays an error instead.","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"![ListPanel](images/user-guide/ListPanel.png) \u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"_List Panel_ \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"1waykiat"},"content":"- Displays the employee list together with its relevant particulars.","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"![DisplayPanel](images/user-guide/DisplayPanel.png) \u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"_Display Panel_ \u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"- Displays all of a specified employee\u0027s information.","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"- On start-up of the application, it displays the first employee in the list.","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"    If the employee list is empty, no employee information would be shown in this panel.","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"beefham"},"content":"**Please read this information panel for more information on commands before proceeding.**","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"* Items in square brackets `i.e. []` are optional.\u003cbr\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"beefham"},"content":"* If a parameter is expected only once in the command but is specified multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"szelongq"},"content":"### General Admin Features","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"szelongq"},"content":"#### Viewing help : `help`","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"![help message](images/user-guide/helpMessage.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"szelongq"},"content":"#### Adding an employee: `add`","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"beefham"},"content":"Adds an employee to HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"Format: `add  n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS r/ROLE l/NUMBER_OF_LEAVES s/HOURLYSALARY hw/HOURS_WORKED o/OVERTIME [t/TAG]…​`","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"* Follow the requirements for the respective fields listed in the table below:","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"    Field | Requirements | Examples","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"    --------------|---------------|---------","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"    `NAME` | Contain alphanumeric characters and spaces only.| `Alice Pauline`, `Benson Meier`","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"    `PHONE_NUMBER` | Contain numbers only, at least 3 digits long.| `98102832`, `123`","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"    `EMAIL` | Be in the format of *local-part@domain*. *local-part* should contain only alphanumeric characters and/or certain special characters (`+_.-`), and cannot start or end with any special characters. *domain* should start and end with alphanumeric characters, must be at least 2 characters long, and can contain hyphens.| `alice_pauline@example.com`, `benson-miller@gg.com`","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"    `ADDRESS`| Can take any value.| `123 Alice Street`, `College of Alice \u0026 Peter Tan #01-124`","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"    `ROLE`| Start with alphabet, followed by alphanumeric characters or certain special characters (`-\u0026/()[]`). Only 2 sets of brackets are allowed in total. | `Team Lead (UI/UX Design)`, `R\u0026D Manager`","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"    `NUMBER_OF_LEAVES`| Non-negative integers less than or equal to 365. |`12`,`0`","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"    `HOURLYSALARY`| Non-negative numbers with two or less decimal places only.| `12.98`,`0.33`","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"    `HOURS_WORKED`| Positive integers less than or equal to 744.| `12`,`1`","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"    `OVERTIME`| Non-negative integers less than or equal to 744. | `12`,`0`","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"    `TAG`| Contain alphanumeric characters only. | `friend`, `supervisor`","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"boonhaii"},"content":"An employee can have any number of tags (including 0)","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/Admin Assistant l/14 s/9.50 hw/40 o/0`","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"beefham"},"content":"* `add n/Betsy Crowe r/Designer s/25 hw/60  l/21  e/betsycrowe@example.com a/Newgate Prison p/1234567 o/0 t/criminal t/friend`","lastModifiedDate":"2021-11-02"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"![Result of successful add](images/user-guide/addExample.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"beefham"},"content":"  _Result of adding a new employee Betsy successfully to HeRon_ \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"szelongq"},"content":"#### Listing all employees : `list`","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"beefham"},"content":"Shows a list of all employees in HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"szelongq"},"content":"#### Editing an employee : `edit`","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"beefham"},"content":"Edits an existing employee in HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"beefham"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/ROLE] [l/NUMBER_OF_LEAVES] [s/HOURLYSALARY] [hw/HOURS_WORKED] [o/OVERTIME] [t/TAG]…​`","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"* Edits the employee at the specified `INDEX`. The index refers to the index number shown in the displayed employee list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"* When editing tags, the existing tags of the employee will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"* You can remove all the employee’s tags by typing `t/` without","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"beefham"},"content":"* The values you provide to the command must be valid. For information on which values are valid, you may refer to the table under the [`add` command](UserGuide.md#adding-an-employee-add) for more information.","lastModifiedDate":"2021-11-01"},{"lineNumber":159,"author":{"gitId":"1waykiat"},"content":"* **NOTE:** The edit command is unable to directly edit the dates of leaves taken by employees.","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"Refer to the `assignLeave` and `removeLeavesBefore` commands below instead to edit the dates.","lastModifiedDate":"2021-10-28"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com l/15` Edits the phone number, email address and leaves of the 1st employee to be `91234567`, `johndoe@example.com` and `15` respectively.","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd employee to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"szelongq"},"content":"#### Locating specific employees: `find`","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"beefham"},"content":"Find employees using specified fields, checking if their information field contains any of the given keywords / queries.","lastModifiedDate":"2021-10-20"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"Format: `find [STATUS] [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/ROLE] [l/NUMBER_OF_LEAVES] [d/DATE] [s/HOURLYSALARY] [hw/HOURS_WORKED] [o/OVERTIME] [t/TAG]...`","lastModifiedDate":"2021-11-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"beefham"},"content":"* At least one field should be specified.","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"* The order of the fields do not matter except for the `[STATUS]` field, which must come right after `find`.","lastModifiedDate":"2021-11-05"},{"lineNumber":175,"author":{"gitId":"beefham"},"content":"* To search a field with multiple values, separate each value with a space after their respective tag.","lastModifiedDate":"2021-11-01"},{"lineNumber":176,"author":{"gitId":"beefham"},"content":"  * Example: Use `find n/Alice Charlotte` to search for `Alice` or `Charlotte` in the `name` field.","lastModifiedDate":"2021-11-01"},{"lineNumber":177,"author":{"gitId":"danielsimre"},"content":"* The filters work differently for each field and can be generalised to 4 types of queries, described below. A single find command can contain all 4 types of queries at once.","lastModifiedDate":"2021-10-28"},{"lineNumber":178,"author":{"gitId":"beefham"},"content":"  * **Type 1 Query: Keyword Matching**","lastModifiedDate":"2021-10-20"},{"lineNumber":179,"author":{"gitId":"beefham"},"content":"    * Fields: `n/NAME`, `p/PHONE`, `e/EMAIL`, `a/ADDRESS`, `r/ROLE`, `t/TAG`","lastModifiedDate":"2021-10-20"},{"lineNumber":180,"author":{"gitId":"beefham"},"content":"      * These fields will find all people who contain the given keywords in their respective fields. They are not case-sensitive.","lastModifiedDate":"2021-10-20"},{"lineNumber":181,"author":{"gitId":"boonhaii"},"content":"      * The exceptions are:","lastModifiedDate":"2021-11-05"},{"lineNumber":182,"author":{"gitId":"boonhaii"},"content":"         * `p/PHONE` field, which only find exact matches.","lastModifiedDate":"2021-11-05"},{"lineNumber":183,"author":{"gitId":"boonhaii"},"content":"         * `n/NAME` field, which can find matches when a complete part (first/middle/last) of a name is given. (e.g. For name \"Charlotte Oliverio\", both `n/Charlotte` and `n/Oliverio` works, but `n/Char` or `n/Oliver` will not)","lastModifiedDate":"2021-11-05"},{"lineNumber":184,"author":{"gitId":"beefham"},"content":"    * For example, `find p/91234567 e/alice bob r/Admin` will find anyone who satisfies all the following 3 criteria:","lastModifiedDate":"2021-10-23"},{"lineNumber":185,"author":{"gitId":"beefham"},"content":"      1. has the phone number 91234567,","lastModifiedDate":"2021-10-20"},{"lineNumber":186,"author":{"gitId":"beefham"},"content":"      2. whose email contains `alice` or `bob`, and","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"beefham"},"content":"      3. whose role contains `Admin`.","lastModifiedDate":"2021-10-20"},{"lineNumber":188,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":189,"author":{"gitId":"beefham"},"content":"  * **Type 2 Query: Value Based Comparison**","lastModifiedDate":"2021-10-20"},{"lineNumber":190,"author":{"gitId":"beefham"},"content":"    * Fields: `hw/HOURS_WORKED`, `l/NUMBER_OF_LEAVES`, `s/HOURLYSALARY`, `o/OVERTIME`","lastModifiedDate":"2021-11-01"},{"lineNumber":191,"author":{"gitId":"beefham"},"content":"      * These fields must be specified with a comparison and a value to compare the respective field to. Valid comparisons are","lastModifiedDate":"2021-10-20"},{"lineNumber":192,"author":{"gitId":"beefham"},"content":"        * `\u003e`: more than","lastModifiedDate":"2021-10-20"},{"lineNumber":193,"author":{"gitId":"beefham"},"content":"        * `\u003e\u003d`: more than or equal to","lastModifiedDate":"2021-10-20"},{"lineNumber":194,"author":{"gitId":"beefham"},"content":"        * `\u003d`: equal to","lastModifiedDate":"2021-10-20"},{"lineNumber":195,"author":{"gitId":"beefham"},"content":"        * `\u003c`: less than","lastModifiedDate":"2021-10-20"},{"lineNumber":196,"author":{"gitId":"beefham"},"content":"        * `\u003c\u003d`: less than or equal to","lastModifiedDate":"2021-10-20"},{"lineNumber":197,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":198,"author":{"gitId":"beefham"},"content":"    * For example, `find hw/\u003e\u003d10 l/\u003c7` will find anyone who satisfies the both of the following 2 criteria:","lastModifiedDate":"2021-10-23"},{"lineNumber":199,"author":{"gitId":"beefham"},"content":"      1. has worked more than or exactly 10 hours, and","lastModifiedDate":"2021-10-20"},{"lineNumber":200,"author":{"gitId":"beefham"},"content":"      2. has less than 7 days of leave left (e.g. 6 and below)","lastModifiedDate":"2021-10-20"},{"lineNumber":201,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":202,"author":{"gitId":"beefham"},"content":"    * You cannot enter more than 1 comparison or value to compare to. For example, `find hw/\u003c10 \u003e5` is not valid.","lastModifiedDate":"2021-10-20"},{"lineNumber":203,"author":{"gitId":"szelongq"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":204,"author":{"gitId":"szelongq"},"content":"    \u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":205,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":206,"author":{"gitId":"boonhaii"},"content":"  * **Type 3 Query: Status Based Filter**","lastModifiedDate":"2021-11-05"},{"lineNumber":207,"author":{"gitId":"beefham"},"content":"    * There are no fields attached to this query. Instead, specific keywords are available for use.","lastModifiedDate":"2021-10-20"},{"lineNumber":208,"author":{"gitId":"boonhaii"},"content":"      * These status keywords must be used right after `find` and cannot be used after a field is specified (for example `n/`).","lastModifiedDate":"2021-11-05"},{"lineNumber":209,"author":{"gitId":"beefham"},"content":"      * Keywords available include:","lastModifiedDate":"2021-10-20"},{"lineNumber":210,"author":{"gitId":"beefham"},"content":"        * `unpaid`","lastModifiedDate":"2021-10-20"},{"lineNumber":211,"author":{"gitId":"beefham"},"content":"        * More to be added.","lastModifiedDate":"2021-10-20"},{"lineNumber":212,"author":{"gitId":"boonhaii"},"content":"    * For example, `find unpaid` will find all employees who are considered unpaid.","lastModifiedDate":"2021-11-05"},{"lineNumber":213,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":214,"author":{"gitId":"danielsimre"},"content":"  * **Type 4 Query: Date Based Comparison**","lastModifiedDate":"2021-10-28"},{"lineNumber":215,"author":{"gitId":"danielsimre"},"content":"    * Fields: `d/DATE`","lastModifiedDate":"2021-10-28"},{"lineNumber":216,"author":{"gitId":"danielsimre"},"content":"      * This field will find all people who have taken a leave on a given date or within a range of dates. (start and end dates inclusive)","lastModifiedDate":"2021-10-28"},{"lineNumber":217,"author":{"gitId":"danielsimre"},"content":"      * There are two ways to search using dates: individual dates or date ranges.","lastModifiedDate":"2021-10-28"},{"lineNumber":218,"author":{"gitId":"danielsimre"},"content":"        * For individual dates, simply type in a date of the form YYYY-MM-DD.","lastModifiedDate":"2021-10-28"},{"lineNumber":219,"author":{"gitId":"danielsimre"},"content":"        * For date ranges, simply type in two dates in the form YYYY-MM-DD:YYYY-MM-DD.","lastModifiedDate":"2021-10-28"},{"lineNumber":220,"author":{"gitId":"danielsimre"},"content":"      * Both individual dates and date ranges can be combined into one query.","lastModifiedDate":"2021-10-28"},{"lineNumber":221,"author":{"gitId":"danielsimre"},"content":"    * For example, `find d/2021-10-10 2021-11-01:2021-11-05` will find anyone who satisfies **either** of the following 2 criteria:","lastModifiedDate":"2021-10-28"},{"lineNumber":222,"author":{"gitId":"danielsimre"},"content":"      1. has taken a leave on October 10th 2021, or","lastModifiedDate":"2021-10-28"},{"lineNumber":223,"author":{"gitId":"danielsimre"},"content":"      2. has taken a leave between the dates November 1st 2021 and November 5th 2021, start and end dates inclusive.","lastModifiedDate":"2021-10-28"},{"lineNumber":224,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":225,"author":{"gitId":"beefham"},"content":"* For each field, you can search using multiple keywords by separating each keyword with a space, in the same field.","lastModifiedDate":"2021-10-20"},{"lineNumber":226,"author":{"gitId":"beefham"},"content":"  * For example, `find n/John Mike` will return all employees whose name contains either John or Mike.","lastModifiedDate":"2021-10-20"},{"lineNumber":227,"author":{"gitId":"szelongq"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":228,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":230,"author":{"gitId":"beefham"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":231,"author":{"gitId":"beefham"},"content":"* `find unpaid n/John Mike r/admin l/\u003c\u003d5 o/\u003e3` finds all employees who satisfy all the following criteria:","lastModifiedDate":"2021-10-22"},{"lineNumber":232,"author":{"gitId":"beefham"},"content":"  1. is considered unpaid in the system,","lastModifiedDate":"2021-10-22"},{"lineNumber":233,"author":{"gitId":"beefham"},"content":"  2. whose name is either John or Mike,","lastModifiedDate":"2021-10-22"},{"lineNumber":234,"author":{"gitId":"beefham"},"content":"  3. whose role contains the word `admin`,","lastModifiedDate":"2021-10-22"},{"lineNumber":235,"author":{"gitId":"beefham"},"content":"  4. has 5 or less than 5 leaves, and","lastModifiedDate":"2021-10-22"},{"lineNumber":236,"author":{"gitId":"beefham"},"content":"  5. has strictly more than 3 days of overtime","lastModifiedDate":"2021-10-22"},{"lineNumber":237,"author":{"gitId":"beefham"},"content":"* `find unpaid n/carl Elle l/\u003c3` returns `Carl Kurz`, `Elle Meyer` as long as they have less than 3 leaves left and are still unpaid.\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":238,"author":{"gitId":"szelongq"},"content":"  ![result for \u0027find alex david\u0027](images/user-guide/findCarlElleResult.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":240,"author":{"gitId":"szelongq"},"content":"#### Deleting an employee : `delete`","lastModifiedDate":"2021-10-26"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"boonhaii"},"content":"Deletes the specified employee from the application.","lastModifiedDate":"2021-09-28"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"boonhaii"},"content":"* Deletes the employee at the specified `INDEX`.","lastModifiedDate":"2021-09-28"},{"lineNumber":247,"author":{"gitId":"boonhaii"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-09-28"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"boonhaii"},"content":"* The index cannot exceed the length of the employee list.","lastModifiedDate":"2021-09-28"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"beefham"},"content":"* `list` followed by `delete 2` deletes the 2nd employee in HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":253,"author":{"gitId":"szelongq"},"content":"* `find n/Betsy` followed by `delete 1` deletes the 1st employee in the results of the `find` command.","lastModifiedDate":"2021-10-26"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"beefham"},"content":"#### Viewing employee data: `view`","lastModifiedDate":"2021-11-01"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":257,"author":{"gitId":"beefham"},"content":"View the data of the specified employee at the InfoPanel.","lastModifiedDate":"2021-11-01"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":259,"author":{"gitId":"beefham"},"content":"Format: `view INDEX`","lastModifiedDate":"2021-11-01"},{"lineNumber":260,"author":{"gitId":"beefham"},"content":"* Displays the data of the employee at the specified `INDEX`.","lastModifiedDate":"2021-11-01"},{"lineNumber":261,"author":{"gitId":"beefham"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-11-01"},{"lineNumber":262,"author":{"gitId":"beefham"},"content":"* The index **must be a positive integer** 1, 2, 3, ...​","lastModifiedDate":"2021-11-01"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":264,"author":{"gitId":"beefham"},"content":"Example:","lastModifiedDate":"2021-11-01"},{"lineNumber":265,"author":{"gitId":"beefham"},"content":"* `list` followed by `view 3` displays the information of the 3rd employee in the employee list.","lastModifiedDate":"2021-11-01"},{"lineNumber":266,"author":{"gitId":"beefham"},"content":"* `find r/Financial Manager` followed by `view 1` displays the information of the 1st employee in the list of employees that have the Financial Manager role.","lastModifiedDate":"2021-11-01"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":268,"author":{"gitId":"1waykiat"},"content":"#### Clearing all employees : `clear`","lastModifiedDate":"2021-11-07"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":270,"author":{"gitId":"1waykiat"},"content":"Clears all employees from the employee list. Upon clearing, it should display the screen shown below.","lastModifiedDate":"2021-11-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":272,"author":{"gitId":"1waykiat"},"content":"![ClearScreen](images/user-guide/clear.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":274,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2021-10-26"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":276,"author":{"gitId":"szelongq"},"content":"#### Exiting the program : `exit`","lastModifiedDate":"2021-10-26"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":278,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2021-10-26"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":280,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":282,"author":{"gitId":"szelongq"},"content":"### Leave-related Features","lastModifiedDate":"2021-10-26"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":284,"author":{"gitId":"szelongq"},"content":"#### Add number of leaves for an employee : `addLeaveBalance`","lastModifiedDate":"2021-10-26"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":286,"author":{"gitId":"danielsimre"},"content":"Adds the specified number of leaves to the current leave balance (number of days of leave left) of a chosen employee.","lastModifiedDate":"2021-10-25"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":288,"author":{"gitId":"beefham"},"content":"Format: `addLeaveBalance INDEX l/NUMBER_OF_LEAVES`","lastModifiedDate":"2021-11-01"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":290,"author":{"gitId":"boonhaii"},"content":"* Adds the specified number to the number of leaves of the employee at the specified `INDEX`.","lastModifiedDate":"2021-10-12"},{"lineNumber":291,"author":{"gitId":"boonhaii"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-10-01"},{"lineNumber":292,"author":{"gitId":"danielsimre"},"content":"* The index **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-09-29"},{"lineNumber":293,"author":{"gitId":"danielsimre"},"content":"* The number of leaves **must be a positive integer between 1 and 365** 1, 2, 3, …, 365","lastModifiedDate":"2021-11-07"},{"lineNumber":294,"author":{"gitId":"danielsimre"},"content":"* The number of leaves to be added **cannot cause the employee\u0027s total leave balance to exceed 365 leaves.**","lastModifiedDate":"2021-11-07"},{"lineNumber":295,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":296,"author":{"gitId":"danielsimre"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":297,"author":{"gitId":"beefham"},"content":"* `list` followed by `addLeaveBalance 3 l/4` adds 4 days of leave to the 3rd employee in HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":298,"author":{"gitId":"szelongq"},"content":"* `find n/Sam` followed by `addLeaveBalance 1 l/1` adds 1 day of leave to the 1st employee in the results of the `find` command.","lastModifiedDate":"2021-10-26"},{"lineNumber":299,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":300,"author":{"gitId":"danielsimre"},"content":"#### Deduct number of leaves from an employee : `deductLeaveBalance`","lastModifiedDate":"2021-10-28"},{"lineNumber":301,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":302,"author":{"gitId":"danielsimre"},"content":"Deducts the specified number of leaves from the current leave balance (number of days of leave left) of a chosen employee.","lastModifiedDate":"2021-10-28"},{"lineNumber":303,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":304,"author":{"gitId":"beefham"},"content":"Format: `deductLeaveBalance INDEX l/NUMBER_OF_LEAVES`","lastModifiedDate":"2021-11-01"},{"lineNumber":305,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":306,"author":{"gitId":"danielsimre"},"content":"* Deducts the specified number from the number of leaves of the employee at the specified `INDEX`.","lastModifiedDate":"2021-10-28"},{"lineNumber":307,"author":{"gitId":"boonhaii"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-10-01"},{"lineNumber":308,"author":{"gitId":"danielsimre"},"content":"* The index **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-09-29"},{"lineNumber":309,"author":{"gitId":"danielsimre"},"content":"* The number of leaves **must be a positive integer between 1 and 365** 1, 2, 3, …, 365","lastModifiedDate":"2021-11-07"},{"lineNumber":310,"author":{"gitId":"danielsimre"},"content":"* The number of leaves to be deducted **cannot be greater than the amount of leaves in the employee\u0027s leave balance.**","lastModifiedDate":"2021-10-28"},{"lineNumber":311,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":312,"author":{"gitId":"danielsimre"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":313,"author":{"gitId":"beefham"},"content":"* `list` followed by `deductLeaveBalance 2 l/1` removes 1 day of leave from the 2nd employee in HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":314,"author":{"gitId":"danielsimre"},"content":"* `find n/Anthony` followed by `deductLeaveBalance 4 l/2` removes 2 days of leave from the 4th employee in the results of the `find` command.","lastModifiedDate":"2021-10-28"},{"lineNumber":315,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":316,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":317,"author":{"gitId":"szelongq"},"content":"#### Assign a leave with a date to an employee : `assignLeave`","lastModifiedDate":"2021-10-26"},{"lineNumber":318,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":319,"author":{"gitId":"danielsimre"},"content":"Assigns a leave that is associated with a date to a chosen employee.","lastModifiedDate":"2021-10-25"},{"lineNumber":320,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":321,"author":{"gitId":"danielsimre"},"content":"Format: `assignLeave INDEX d/DATE`","lastModifiedDate":"2021-10-25"},{"lineNumber":322,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":323,"author":{"gitId":"danielsimre"},"content":"* Assigns a leave to the employee at the specified `INDEX`, while deducting 1 leave from the employee\u0027s leave balance.","lastModifiedDate":"2021-10-28"},{"lineNumber":324,"author":{"gitId":"danielsimre"},"content":"* The employee must have **at least 1 leave** in their leave balance.","lastModifiedDate":"2021-10-25"},{"lineNumber":325,"author":{"gitId":"danielsimre"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-10-25"},{"lineNumber":326,"author":{"gitId":"danielsimre"},"content":"* The index **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-10-25"},{"lineNumber":327,"author":{"gitId":"danielsimre"},"content":"* The date **must be valid** and of the form **YYYY-MM-DD**.","lastModifiedDate":"2021-10-25"},{"lineNumber":328,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":329,"author":{"gitId":"danielsimre"},"content":"Examples:","lastModifiedDate":"2021-10-25"},{"lineNumber":330,"author":{"gitId":"beefham"},"content":"* `list` followed by `assignLeave 2 d/2021-11-10` assigns a leave with the date 10th November 2021 to the 2nd employee in HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":331,"author":{"gitId":"szelongq"},"content":"* `find n/Anthony` followed by `assignLeave 1 d/2021-01-08` assigns a leave with the date 8th January 2021 to the 1st employee in the results of the `find` command.","lastModifiedDate":"2021-10-26"},{"lineNumber":332,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":333,"author":{"gitId":"danielsimre"},"content":"#### Remove all leaves occurring before a given date from employees : `removeLeavesBefore`","lastModifiedDate":"2021-10-28"},{"lineNumber":334,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":335,"author":{"gitId":"danielsimre"},"content":"Removes all leaves from all employees in the list occurring before a given input date (inclusive).","lastModifiedDate":"2021-10-28"},{"lineNumber":336,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":337,"author":{"gitId":"danielsimre"},"content":"Format: `removeLeavesBefore d/DATE`","lastModifiedDate":"2021-10-28"},{"lineNumber":338,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":339,"author":{"gitId":"danielsimre"},"content":"* Removes all leaves from all employees in the list occurring before a given input date (inclusive).","lastModifiedDate":"2021-10-28"},{"lineNumber":340,"author":{"gitId":"danielsimre"},"content":"* The date **must be valid** and of the form **YYYY-MM-DD**.","lastModifiedDate":"2021-10-28"},{"lineNumber":341,"author":{"gitId":"danielsimre"},"content":"* This operation will only act on employees in the current filtered list.","lastModifiedDate":"2021-10-28"},{"lineNumber":342,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":343,"author":{"gitId":"danielsimre"},"content":"Examples:","lastModifiedDate":"2021-10-28"},{"lineNumber":344,"author":{"gitId":"danielsimre"},"content":"* `list` followed by `removeLeavesBefore d/2021-11-10` removes all leaves occurring on and before 2021-11-10 for all employees.","lastModifiedDate":"2021-10-28"},{"lineNumber":345,"author":{"gitId":"danielsimre"},"content":"* `find n/Anthony` followed by `removeLeavesBefore 1 d/2021-01-08` removes all leaves occurring on and before 2021-01-08","lastModifiedDate":"2021-10-28"},{"lineNumber":346,"author":{"gitId":"danielsimre"},"content":"   for all employees that have \u0027Anthony\u0027 in their names.","lastModifiedDate":"2021-10-28"},{"lineNumber":347,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":348,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":349,"author":{"gitId":"szelongq"},"content":"### Payroll-related Features","lastModifiedDate":"2021-10-26"},{"lineNumber":350,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":351,"author":{"gitId":"szelongq"},"content":"#### Add number of hours worked/overtime to an employee : `addHoursWorked`","lastModifiedDate":"2021-10-26"},{"lineNumber":352,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":353,"author":{"gitId":"danielsimre"},"content":"Adds the specified number of hours worked or overtime to a chosen employee.","lastModifiedDate":"2021-10-25"},{"lineNumber":354,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":355,"author":{"gitId":"danielsimre"},"content":"Format: `addHoursWorked INDEX [hw/HOURS_WORKED] [o/OVERTIME]`","lastModifiedDate":"2021-10-25"},{"lineNumber":356,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":357,"author":{"gitId":"danielsimre"},"content":"* At least one field (HOURS_WORKED or OVERTIME) should be specified.","lastModifiedDate":"2021-10-25"},{"lineNumber":358,"author":{"gitId":"danielsimre"},"content":"* Adds the specified number of hours worked/overtime to the employee at the specified `INDEX`.","lastModifiedDate":"2021-10-25"},{"lineNumber":359,"author":{"gitId":"danielsimre"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-10-25"},{"lineNumber":360,"author":{"gitId":"danielsimre"},"content":"* The index **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-10-25"},{"lineNumber":361,"author":{"gitId":"danielsimre"},"content":"* The number of hours worked/overtime **must be a positive integer between 1 and 744** 1, 2, 3, …, 744","lastModifiedDate":"2021-11-07"},{"lineNumber":362,"author":{"gitId":"danielsimre"},"content":"* The number of hours worked/overtime to be added **cannot cause the employee\u0027s total hours worked/overtime to exceed 744.** ","lastModifiedDate":"2021-11-07"},{"lineNumber":363,"author":{"gitId":"danielsimre"},"content":"  \u003cbr\u003e (Note: Limit of 744 is applied separately to hours worked and overtime, e.g hours worked and overtime can both be set to 744)","lastModifiedDate":"2021-11-07"},{"lineNumber":364,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":365,"author":{"gitId":"danielsimre"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":366,"author":{"gitId":"beefham"},"content":"* `list` followed by `addHoursWorked 5 hw/5 o/5` adds 5 hours worked and 5 hours of overtime to the 5th employee in HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":367,"author":{"gitId":"szelongq"},"content":"* `find n/Sam` followed by `addHoursWorked 2 o/5` adds 5 hours of overtime to the 2nd employee in the results of the `find` command.","lastModifiedDate":"2021-10-26"},{"lineNumber":368,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":369,"author":{"gitId":"danielsimre"},"content":"#### Deduct number of hours worked/overtime from an employee : `deductHoursWorked`","lastModifiedDate":"2021-10-28"},{"lineNumber":370,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":371,"author":{"gitId":"boonhaii"},"content":"Deducts the specified number of hours worked or overtime from a chosen employee.","lastModifiedDate":"2021-11-08"},{"lineNumber":372,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":373,"author":{"gitId":"danielsimre"},"content":"Format: `deductHoursWorked INDEX [hw/HOURS_WORKED] [o/OVERTIME]`","lastModifiedDate":"2021-10-28"},{"lineNumber":374,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":375,"author":{"gitId":"danielsimre"},"content":"* At least one field (HOURS_WORKED or OVERTIME) should be specified.","lastModifiedDate":"2021-10-25"},{"lineNumber":376,"author":{"gitId":"danielsimre"},"content":"* Deducts the specified number of hours worked/overtime from the employee at the specified `INDEX`.","lastModifiedDate":"2021-10-28"},{"lineNumber":377,"author":{"gitId":"boonhaii"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-10-01"},{"lineNumber":378,"author":{"gitId":"danielsimre"},"content":"* The index **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-09-29"},{"lineNumber":379,"author":{"gitId":"danielsimre"},"content":"* The number of hours worked/overtime **must be a positive integer between 1 and 744** 1, 2, 3, …, 744","lastModifiedDate":"2021-11-07"},{"lineNumber":380,"author":{"gitId":"danielsimre"},"content":"* The number of hours worked/overtime to be removed **cannot be greater than the employee\u0027s current number of hours worked/overtime.**","lastModifiedDate":"2021-10-25"},{"lineNumber":381,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":382,"author":{"gitId":"danielsimre"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":383,"author":{"gitId":"beefham"},"content":"* `list` followed by `deductHoursWorked 2 hw/5 o/3` removes 5 hours worked and 3 hours of overtime from the 2nd employee in HeRon.","lastModifiedDate":"2021-11-01"},{"lineNumber":384,"author":{"gitId":"danielsimre"},"content":"* `find n/Sam` followed by `deductHoursWorked 1 o/2` removes 2 hours of overtime from the 1st employee in the results of the `find` command.","lastModifiedDate":"2021-10-28"},{"lineNumber":385,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":386,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":387,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":388,"author":{"gitId":"szelongq"},"content":"#### Start Payroll : `startPayroll`","lastModifiedDate":"2021-10-26"},{"lineNumber":389,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":390,"author":{"gitId":"szelongq"},"content":"Calculates the payroll of all employees and mark them as awaiting the payment.","lastModifiedDate":"2021-10-26"},{"lineNumber":391,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":392,"author":{"gitId":"boonhaii"},"content":"The payroll formula is: `HOURS_WORKED * HOURLYSALARY + OVERTIME * HOURLYSALARY * OVERTIMEPAYRATE`,\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":393,"author":{"gitId":"szelongq"},"content":"where `OVERTIMEPAYRATE` is the added pay rate for overtime as compared to normal work hours.\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":394,"author":{"gitId":"szelongq"},"content":"It can be viewed through the `viewOvertimePayRate` command or changed through the `setOvertimePayRate` command.","lastModifiedDate":"2021-10-26"},{"lineNumber":395,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":396,"author":{"gitId":"szelongq"},"content":"Format: `startPayroll`","lastModifiedDate":"2021-10-24"},{"lineNumber":397,"author":{"gitId":"szelongq"},"content":"* Calculates the payroll of **all employees regardless of current viewing list** based on the formula above.","lastModifiedDate":"2021-10-26"},{"lineNumber":398,"author":{"gitId":"szelongq"},"content":"* After that, marks all employees as awaiting payment of the calculated amount.","lastModifiedDate":"2021-10-26"},{"lineNumber":399,"author":{"gitId":"szelongq"},"content":"\u003cbr\u003eThis will produce red labels under each employee data stating \u0027NOT PAID\u0027 and the amount they are owed.","lastModifiedDate":"2021-11-02"},{"lineNumber":400,"author":{"gitId":"szelongq"},"content":"* The number of hours worked and overtime hours worked for the employee will be reset to 0 as well","lastModifiedDate":"2021-11-02"},{"lineNumber":401,"author":{"gitId":"szelongq"},"content":"  so that hours counting towards the next payroll can continue to be added.","lastModifiedDate":"2021-11-02"},{"lineNumber":402,"author":{"gitId":"szelongq"},"content":"* Finally, display the list of all employees.","lastModifiedDate":"2021-10-26"},{"lineNumber":403,"author":{"gitId":"szelongq"},"content":"* This command is typically followed up by `pay` commands to mark employees as paid,","lastModifiedDate":"2021-10-26"},{"lineNumber":404,"author":{"gitId":"szelongq"},"content":"  after their salaries are given in real life.","lastModifiedDate":"2021-10-26"},{"lineNumber":405,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":406,"author":{"gitId":"szelongq"},"content":"Example:","lastModifiedDate":"2021-09-30"},{"lineNumber":407,"author":{"gitId":"szelongq"},"content":"* Before `startPayroll` command, currently viewing a filtered list.","lastModifiedDate":"2021-10-26"},{"lineNumber":408,"author":{"gitId":"boonhaii"},"content":"  ![before starting payroll](images/user-guide/startPayroll_before.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":409,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":410,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":411,"author":{"gitId":"szelongq"},"content":"* After `startPayroll` command, payroll have been calculated and currently viewing the full list of employees.","lastModifiedDate":"2021-10-26"},{"lineNumber":412,"author":{"gitId":"boonhaii"},"content":"  ![after starting payroll](images/user-guide/startPayroll_after.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":413,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":414,"author":{"gitId":"szelongq"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":415,"author":{"gitId":"szelongq"},"content":"**:information_source: Notes:**","lastModifiedDate":"2021-11-07"},{"lineNumber":416,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":417,"author":{"gitId":"szelongq"},"content":"* All employees must not have any pay pending from the previous payroll (i.e. no red \u0027NOT PAID\u0027 label). Otherwise, an error will be thrown","lastModifiedDate":"2021-11-07"},{"lineNumber":418,"author":{"gitId":"szelongq"},"content":"  and no action will be taken.","lastModifiedDate":"2021-11-07"},{"lineNumber":419,"author":{"gitId":"szelongq"},"content":"* To start a new payroll, first make sure to pay all employees using the `pay` command.","lastModifiedDate":"2021-10-26"},{"lineNumber":420,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":422,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":423,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":424,"author":{"gitId":"szelongq"},"content":"#### Paying employee(s) : `pay`","lastModifiedDate":"2021-10-28"},{"lineNumber":425,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":426,"author":{"gitId":"szelongq"},"content":"Marks the specified employee, or all employees in the current list, as paid.","lastModifiedDate":"2021-10-28"},{"lineNumber":427,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":428,"author":{"gitId":"szelongq"},"content":"Format 1: `pay INDEX` - for paying a specific employee","lastModifiedDate":"2021-10-28"},{"lineNumber":429,"author":{"gitId":"1waykiat"},"content":"* Simulates the paying of an employee by clearing the salary owed to the employee by setting it back to 0. This clears the red","lastModifiedDate":"2021-10-26"},{"lineNumber":430,"author":{"gitId":"1waykiat"},"content":"  `NOT PAID` label under the employee\u0027s data.","lastModifiedDate":"2021-10-26"},{"lineNumber":431,"author":{"gitId":"szelongq"},"content":"* This command is typically used after the `startPayroll` command, which sets the pay owed to the respective employees.","lastModifiedDate":"2021-10-28"},{"lineNumber":432,"author":{"gitId":"1waykiat"},"content":"  The pay command can then be followed after to clear the pay owed.","lastModifiedDate":"2021-10-26"},{"lineNumber":433,"author":{"gitId":"1waykiat"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-10-26"},{"lineNumber":434,"author":{"gitId":"szelongq"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-26"},{"lineNumber":435,"author":{"gitId":"szelongq"},"content":"* The employee must have payment pending from a `startPayroll` command.","lastModifiedDate":"2021-10-28"},{"lineNumber":436,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":437,"author":{"gitId":"1waykiat"},"content":"Example:","lastModifiedDate":"2021-10-26"},{"lineNumber":438,"author":{"gitId":"szelongq"},"content":"* `pay 1` marks the 1st employee in the Employee list as paid, clearing the pay owed to the employee and removing","lastModifiedDate":"2021-11-07"},{"lineNumber":439,"author":{"gitId":"szelongq"},"content":"  the red \u0027NOT PAID\u0027 label.","lastModifiedDate":"2021-11-07"},{"lineNumber":440,"author":{"gitId":"szelongq"},"content":"  ![before paying the employee](images/user-guide/pay_beforePaying.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":441,"author":{"gitId":"szelongq"},"content":"  _Alex is marked as unpaid in HeRon_ \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":442,"author":{"gitId":"beefham"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":443,"author":{"gitId":"boonhaii"},"content":"  ![after paying the employee](images/user-guide/pay_afterPaying.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":444,"author":{"gitId":"szelongq"},"content":"  _After executing `pay 1`, Alex (being the 1st person in this list) is marked as paid_ \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":446,"author":{"gitId":"szelongq"},"content":"Format 2: `pay all` - for paying all employees in the current list","lastModifiedDate":"2021-10-28"},{"lineNumber":447,"author":{"gitId":"boonhaii"},"content":"* Simulates paying of employees in the same way as above, but for all employees in the current list instead.","lastModifiedDate":"2021-11-08"},{"lineNumber":448,"author":{"gitId":"szelongq"},"content":"* If there are employees already paid in the list, they will be skipped and will not be paid again.","lastModifiedDate":"2021-10-28"},{"lineNumber":449,"author":{"gitId":"szelongq"},"content":"* There must be at least 1 employee in the list that has not been paid.","lastModifiedDate":"2021-10-28"},{"lineNumber":450,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":451,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":452,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":453,"author":{"gitId":"szelongq"},"content":"#### View the Overtime Pay Rate : `viewOvertimePayRate`","lastModifiedDate":"2021-10-26"},{"lineNumber":454,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":455,"author":{"gitId":"szelongq"},"content":"Displays the current overtime pay rate set in the application.","lastModifiedDate":"2021-10-26"},{"lineNumber":456,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":457,"author":{"gitId":"szelongq"},"content":"Format: `viewOvertimePayRate`","lastModifiedDate":"2021-10-26"},{"lineNumber":458,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":459,"author":{"gitId":"szelongq"},"content":"* Displays the current overtime pay rate in the feedback panel.","lastModifiedDate":"2021-10-26"},{"lineNumber":460,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":461,"author":{"gitId":"szelongq"},"content":"#### Set a new Overtime Pay Rate : `setOvertimePayRate`","lastModifiedDate":"2021-10-26"},{"lineNumber":462,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":463,"author":{"gitId":"szelongq"},"content":"Sets a new overtime pay rate to be used in payroll calculations.","lastModifiedDate":"2021-10-26"},{"lineNumber":464,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":465,"author":{"gitId":"szelongq"},"content":"Format: `setOvertimePayRate OVERTIMEPAYRATE`","lastModifiedDate":"2021-10-26"},{"lineNumber":466,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":467,"author":{"gitId":"szelongq"},"content":"* Sets the overtime pay rate in the application to `OVERTIMEPAYRATE`.","lastModifiedDate":"2021-10-26"},{"lineNumber":468,"author":{"gitId":"szelongq"},"content":"* `OVERTIMEPAYRATE` should have a value between 1 to 10, and have at most 5 decimal places.","lastModifiedDate":"2021-11-07"},{"lineNumber":469,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":470,"author":{"gitId":"szelongq"},"content":"Examples:","lastModifiedDate":"2021-10-26"},{"lineNumber":471,"author":{"gitId":"szelongq"},"content":"* `setOvertimePayRate 2.0` sets the new overtime pay rate to be 2x.","lastModifiedDate":"2021-10-26"},{"lineNumber":472,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":473,"author":{"gitId":"szelongq"},"content":"* `setOvertimePayRate 0.5` would be invalid as `OVERTIMEPAYRATE` must be at least 1. An error message would be shown.","lastModifiedDate":"2021-10-26"},{"lineNumber":474,"author":{"gitId":"szelongq"},"content":"* `setOvertimePayRate 1.000000` would also be invalid as there are more than 5 decimal places. An error message would be shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":475,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":476,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":477,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":478,"author":{"gitId":"szelongq"},"content":"### Data-related Features","lastModifiedDate":"2021-10-26"},{"lineNumber":479,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":480,"author":{"gitId":"szelongq"},"content":"#### Import Data from CSV files: `import`","lastModifiedDate":"2021-10-26"},{"lineNumber":481,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":482,"author":{"gitId":"boonhaii"},"content":"Imports the data from a specified `.csv` file.","lastModifiedDate":"2021-10-25"},{"lineNumber":483,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":484,"author":{"gitId":"boonhaii"},"content":"Format: `import FILEPATH`","lastModifiedDate":"2021-10-25"},{"lineNumber":485,"author":{"gitId":"boonhaii"},"content":"* Imports data from the specified filepath, which can be absolute or relative (to the `.jar` application).","lastModifiedDate":"2021-10-28"},{"lineNumber":486,"author":{"gitId":"boonhaii"},"content":"* Only one `FILEPATH` should be specified.","lastModifiedDate":"2021-10-25"},{"lineNumber":487,"author":{"gitId":"boonhaii"},"content":"* Filepaths should be written following the current Operating System being used. (e.g. `\\My Folder\\myData.csv` for Windows; `/My Folder/myData.csv` for MacOS/Linux).","lastModifiedDate":"2021-11-05"},{"lineNumber":488,"author":{"gitId":"boonhaii"},"content":"* Filepaths with spaces present in directory can be written as per usual (e.g. `./My Folder/toBeImported.csv`).","lastModifiedDate":"2021-11-05"},{"lineNumber":489,"author":{"gitId":"boonhaii"},"content":"* A header row is required to indicate the purpose of the various fields, and it must be the first row in the `.csv` file.","lastModifiedDate":"2021-10-25"},{"lineNumber":490,"author":{"gitId":"boonhaii"},"content":"* No specific ordering of the columns is required.","lastModifiedDate":"2021-10-25"},{"lineNumber":491,"author":{"gitId":"boonhaii"},"content":"* Ensure that the header rows of the respective fields in the `.csv` file are labelled according to the naming convention in the table below, and are present in the data if compulsory.","lastModifiedDate":"2021-10-28"},{"lineNumber":492,"author":{"gitId":"boonhaii"},"content":"* If multiple compulsory fields are missing, the app only alerts the user of the first instance of a missing field which is compulsory.","lastModifiedDate":"2021-11-05"},{"lineNumber":493,"author":{"gitId":"boonhaii"},"content":"* If there are duplicate `Person` entries, `Email` or `Contact Number`, the import will not be allowed.","lastModifiedDate":"2021-11-05"},{"lineNumber":494,"author":{"gitId":"boonhaii"},"content":"* Ensure that each field follows the specifications required, which can be found in the section for [`add` command](UserGuide.md#adding-an-employee-add).","lastModifiedDate":"2021-11-07"},{"lineNumber":495,"author":{"gitId":"boonhaii"},"content":"* Ensure that the number of fields in each entry matches the number of headers.","lastModifiedDate":"2021-10-28"},{"lineNumber":496,"author":{"gitId":"szelongq"},"content":"* If multiple tags are present for an entry, they should be separated by `/`.","lastModifiedDate":"2021-11-07"},{"lineNumber":497,"author":{"gitId":"boonhaii"},"content":"* For non-compulsory fields, if no value is provided, the field for the entry in HeRon would be set to the default value.","lastModifiedDate":"2021-10-28"},{"lineNumber":498,"author":{"gitId":"boonhaii"},"content":"* If a value for a field is provided for at least one entry, then all other entries must also have their respective values for the field provided.","lastModifiedDate":"2021-11-05"},{"lineNumber":499,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":500,"author":{"gitId":"boonhaii"},"content":"**Field Naming Requirements and Default Values**","lastModifiedDate":"2021-11-08"},{"lineNumber":501,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":502,"author":{"gitId":"beefham"},"content":"Field | Rename to ... (Case-Insensitive) | Compulsory for Import? | Default Value","lastModifiedDate":"2021-11-01"},{"lineNumber":503,"author":{"gitId":"boonhaii"},"content":"--------------|---------------|------------------------ | --------","lastModifiedDate":"2021-10-28"},{"lineNumber":504,"author":{"gitId":"boonhaii"},"content":"`NAME`|Name|**Yes**| N.A.","lastModifiedDate":"2021-11-01"},{"lineNumber":505,"author":{"gitId":"boonhaii"},"content":"`PHONE_NUMBER` |Contact Number|**Yes**| N.A.","lastModifiedDate":"2021-11-01"},{"lineNumber":506,"author":{"gitId":"boonhaii"},"content":"`ADDRESS` |Residential Address|**Yes**| N.A.","lastModifiedDate":"2021-11-01"},{"lineNumber":507,"author":{"gitId":"boonhaii"},"content":"`EMAIL` |Email|**Yes**| N.A.","lastModifiedDate":"2021-11-01"},{"lineNumber":508,"author":{"gitId":"boonhaii"},"content":"`ROLE` |Role|**Yes**| N.A.","lastModifiedDate":"2021-11-01"},{"lineNumber":509,"author":{"gitId":"boonhaii"},"content":"`NUMBER_OF_LEAVES` |Leave Balance|No | 0","lastModifiedDate":"2021-11-07"},{"lineNumber":510,"author":{"gitId":"boonhaii"},"content":"`HOURLYSALARY` |Salary|No | 0.00","lastModifiedDate":"2021-10-28"},{"lineNumber":511,"author":{"gitId":"boonhaii"},"content":"`HOURS_WORKED` |Hours Worked|No | 0","lastModifiedDate":"2021-11-08"},{"lineNumber":512,"author":{"gitId":"beefham"},"content":"`OVERTIME` |Overtime|No | 0","lastModifiedDate":"2021-11-01"},{"lineNumber":513,"author":{"gitId":"boonhaii"},"content":"`TAGS`|Tags|No| Empty Set of Tags","lastModifiedDate":"2021-10-28"},{"lineNumber":514,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":515,"author":{"gitId":"boonhaii"},"content":"Example:`import ./toBeImported` should have the following behaviours under the following situations.","lastModifiedDate":"2021-10-25"},{"lineNumber":516,"author":{"gitId":"boonhaii"},"content":"* Successful Import","lastModifiedDate":"2021-10-25"},{"lineNumber":517,"author":{"gitId":"boonhaii"},"content":"  ![Result for successful import](images/user-guide/multipleTagImport.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":518,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":519,"author":{"gitId":"szelongq"},"content":"    \u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":520,"author":{"gitId":"szelongq"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":521,"author":{"gitId":"boonhaii"},"content":"* Multiple entries missing compulsory fields.","lastModifiedDate":"2021-10-25"},{"lineNumber":522,"author":{"gitId":"boonhaii"},"content":"  ![Picture of CSV file missing compulsory field](images/user-guide/missingFieldCsv.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":523,"author":{"gitId":"boonhaii"},"content":"  ![Result for missing field import](images/user-guide/missingFieldImport.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":524,"author":{"gitId":"szelongq"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":525,"author":{"gitId":"szelongq"},"content":"    \u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":526,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":527,"author":{"gitId":"boonhaii"},"content":"* Multiple Tags present in entry.","lastModifiedDate":"2021-10-25"},{"lineNumber":528,"author":{"gitId":"boonhaii"},"content":"  ![Picture of CSV file with multiple tags](images/user-guide/multipleTagsCsv.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":529,"author":{"gitId":"boonhaii"},"content":"  ![Result for multiple tag import](images/user-guide/multipleTagImport.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":530,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":531,"author":{"gitId":"szelongq"},"content":"#### Saving the data","lastModifiedDate":"2021-10-26"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"boonhaii"},"content":"HeRon data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-09-29"},{"lineNumber":534,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"szelongq"},"content":"#### Editing the data file","lastModifiedDate":"2021-10-26"},{"lineNumber":536,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":537,"author":{"gitId":"boonhaii"},"content":"HeRon data are saved as a JSON file `[JAR file location]/data/HeRon.json`. Advanced users are welcome to update data directly by editing the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":538,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":539,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":540,"author":{"gitId":"szelongq"},"content":"If your changes to the data file makes its format invalid, HeRon will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-09-30"},{"lineNumber":541,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":542,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":543,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":547,"author":{"gitId":"szelongq"},"content":"## FAQ - Frequently Asked Questions","lastModifiedDate":"2021-10-26"},{"lineNumber":548,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"beefham"},"content":"**Q**: How do I transfer my data to another computer?\u003cbr\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":550,"author":{"gitId":"szelongq"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HeRon home folder.","lastModifiedDate":"2021-09-30"},{"lineNumber":551,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"szelongq"},"content":"List of available commands with their respective format and example usages for quick references.","lastModifiedDate":"2021-10-26"},{"lineNumber":557,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":558,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2021-10-26"},{"lineNumber":561,"author":{"gitId":"boonhaii"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS r/ROLE l/NUMBER_OF_LEAVES s/HOURLYSALARY hw/HOURS_WORKED o/OVERTIME [t/TAG]…​` \u003cbr\u003e e.g., `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/Admin Assistant l/14 s/9.50 hw/40 o/0 t/friend t/colleague`","lastModifiedDate":"2021-11-08"},{"lineNumber":562,"author":{"gitId":"szelongq"},"content":"**List** | `list`","lastModifiedDate":"2021-10-26"},{"lineNumber":563,"author":{"gitId":"szelongq"},"content":"**View** | `view INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":564,"author":{"gitId":"beefham"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/ROLE] [l/NUMBER_OF_LEAVES] [s/HOURLYSALARY] [hw/HOURS_WORKED] [o/OVERTIME] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com l/15`","lastModifiedDate":"2021-11-01"},{"lineNumber":565,"author":{"gitId":"boonhaii"},"content":"**Find** | `find [STATUS]... [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/ROLE] [l/NUMBER_OF_LEAVES] [d/DATE] [s/HOURLYSALARY] [hw/HOURS_WORKED] [o/OVERTIME] [t/TAG]...`\u003cbr\u003e e.g., `find n/Alex r/Admin Assistant`","lastModifiedDate":"2021-11-08"},{"lineNumber":566,"author":{"gitId":"szelongq"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2021-10-26"},{"lineNumber":567,"author":{"gitId":"szelongq"},"content":"**Clear** | `clear`","lastModifiedDate":"2021-10-26"},{"lineNumber":568,"author":{"gitId":"szelongq"},"content":"**Exit** | `exit`","lastModifiedDate":"2021-10-26"},{"lineNumber":569,"author":{"gitId":"boonhaii"},"content":"**Add to Leave Balance** | `addLeaveBalance INDEX l/NUMBER_OF_LEAVES` \u003cbr\u003e e.g., `addLeaveBalance 1 l/2`","lastModifiedDate":"2021-11-08"},{"lineNumber":570,"author":{"gitId":"beefham"},"content":"**Deduct from Leave Balance** | `deductLeaveBalance INDEX l/NUMBER_OF_LEAVES` \u003cbr\u003e e.g., `deductLeaveBalance 4 l/1`","lastModifiedDate":"2021-11-01"},{"lineNumber":571,"author":{"gitId":"beefham"},"content":"**Assign Leave** |  `assignLeave INDEX d/DATE` \u003cbr\u003e e.g., `assignLeave 1 d/2021-10-30`","lastModifiedDate":"2021-11-01"},{"lineNumber":572,"author":{"gitId":"danielsimre"},"content":"**Filter and Remove Leaves before a Date** |  `removeLeavesBefore d/DATE` \u003cbr\u003e e.g., `removeLeavesBefore d/2021-10-30`","lastModifiedDate":"2021-10-28"},{"lineNumber":573,"author":{"gitId":"danielsimre"},"content":"**Add Hours Worked/Overtime** | `addHoursWorked INDEX [hw/HOURS_WORKED] [o/OVERTIME]` \u003cbr\u003e e.g., `addHoursWorked 1 hw/2 o/3`","lastModifiedDate":"2021-10-25"},{"lineNumber":574,"author":{"gitId":"danielsimre"},"content":"**Deduct Hours Worked/Overtime** | `deductHoursWorked INDEX [hw/HOURS_WORKED] [o/OVERTIME]` \u003cbr\u003e e.g., `deductHoursWorked 4 hw/1 o/2`","lastModifiedDate":"2021-10-28"},{"lineNumber":575,"author":{"gitId":"szelongq"},"content":"**Start Payroll** | `startPayroll`","lastModifiedDate":"2021-10-24"},{"lineNumber":576,"author":{"gitId":"szelongq"},"content":"**Pay Employee(s)** | `pay INDEX` \u003cbr\u003e e.g., `pay 3` \u003cbr\u003e OR \u003cbr\u003e`pay all`","lastModifiedDate":"2021-10-28"},{"lineNumber":577,"author":{"gitId":"szelongq"},"content":"**View Overtime Pay Rate** | `viewOvertimePayRate`","lastModifiedDate":"2021-10-26"},{"lineNumber":578,"author":{"gitId":"szelongq"},"content":"**Set a new Overtime Pay Rate** | `setOvertimePayRate OVERTIMEPAYRATE`\u003cbr\u003e e.g., `setOvertimePayRate 2.0`","lastModifiedDate":"2021-10-26"},{"lineNumber":579,"author":{"gitId":"boonhaii"},"content":"**Import** | `import FILEPATH` e.g., `import ./myData.csv`","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"danielsimre":92,"szelongq":143,"boonhaii":107,"beefham":84,"-":133,"1waykiat":20}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"boonhaii"},"content":"    content: \"HeRon\";","lastModifiedDate":"2021-11-07"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"boonhaii":1,"-":294}},{"path":"docs/diagrams/AddLeaveBalanceSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"participant \"alb:AddLeaveBalanceCommand\" as AddLeaveBalanceCommand LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"participant \"result:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"end box","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"participant \"old:LeaveBalance\" as OldLeaveBalance MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"participant \"new:LeaveBalance\" as NewLeaveBalance MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"end box","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"[-\u003e AddLeaveBalanceCommand : execute()","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"activate AddLeaveBalanceCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand \u003c-- Model","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand -\u003e AddLeaveBalanceCommand : getUpdatedPerson(personToEdit)","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"activate AddLeaveBalanceCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand -\u003e OldLeaveBalance : addLeaves(leaveBalance)","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"activate OldLeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"create NewLeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"OldLeaveBalance -\u003e NewLeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"activate NewLeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"OldLeaveBalance \u003c-- NewLeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"deactivate NewLeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand \u003c-- OldLeaveBalance : new","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"deactivate OldLeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand --\u003e AddLeaveBalanceCommand : editedPerson","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"deactivate AddLeaveBalanceCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand -\u003e Model : setPerson(personToEdit, editedPerson)","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand \u003c-- Model","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"create CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"AddLeaveBalanceCommand -\u003e CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"activate CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"CommandResult --\u003e AddLeaveBalanceCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"deactivate CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"[\u003c-- AddLeaveBalanceCommand : result","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"deactivate AddLeaveBalanceCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"danielsimre":58}},{"path":"docs/diagrams/BetterModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"AddressBook *-right-\u003e \"1    \" UniquePersonList","lastModifiedDate":"2019-07-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook *-right-\u003e \"1\" UniqueTagList","lastModifiedDate":"2019-07-30"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"AddressBook *-right-\u003e \"1   \" UniqueLeaveList","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"UniqueTagList -[hidden]down- UniqueLeaveList","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"UniqueLeaveList -[hidden]down- UniquePersonList","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"UniqueTagList *-right-\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"UniqueLeaveList *-right-\u003e \"*\" Leave","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"UniquePersonList -right-\u003e Person","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Person -up-\u003e \"*\" Tag","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"Person -up-\u003e \" * \" Leave","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"danielsimre":5,"-":14}},{"path":"docs/diagrams/CombinedPredicate.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"Predicate \u003c|.. CombinedPredicate","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"interface Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"    test()","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"class CombinedPredicate {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    nameToTest: Optional\u003cName\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    emailToTest: Optional\u003cEmail\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    salaryMoreThan: Optional\u003cInteger\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"    test()","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"note right of CombinedPredicate : Only shows a small portion of attributes for brevity. \\nConsider all other fields to be tested as an attribute inside as well.","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"beefham":20}},{"path":"docs/diagrams/FindCommandGetPredicateDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"!include style.puml","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"participant \":XYZ Predicate\" as Predicate LOGIC_COLOR","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"mainframe sd get predicates","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    activate FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"    create Predicate","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    FindCommandParser -\u003e Predicate","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"    note right","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"        Refers to any predicate with the corresponding prefix found in the ArgumentMultimap","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"        For example, n/ in the command will give a NameContainsKeywordPredicate","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    end note","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"    activate Predicate","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    Predicate --\u003e FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"    deactivate Predicate","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    FindCommandParser -\u003e FindCommandParser : add(XYZ Predicate)","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"    activate FindCommandParser","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    FindCommandParser --\u003e FindCommandParser","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"    deactivate FindCommandParser","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"beefham":25}},{"path":"docs/diagrams/FindSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"!include style.puml","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"participant \"\u003c\u003cclass\u003e\u003e \\n ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"participant \"f:FindCommand\" as FindCommand LOGIC_COLOR","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"end box","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"[-\u003e LogicManager : execute(\"find 1\")","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"activate LogicManager","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"find unpaid n/John s/\u003c10\")","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"activate AddressBookParser","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"create FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"AddressBookParser -\u003e FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"activate FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"FindCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"deactivate FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"AddressBookParser -\u003e FindCommandParser : parse(\"unpaid n/John s/\u003c10\")","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"activate FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"FindCommandParser -\u003e ArgumentTokenizer : tokenize()","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"activate ArgumentTokenizer","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"ArgumentTokenizer --\u003e FindCommandParser : ArgumentMultimap","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"deactivate ArgumentTokenizer","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"ref over FindCommandParser: get predicates","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"create FindCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"FindCommandParser -\u003e FindCommand : new FindCommand(combinePredicates(filters))","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"activate FindCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"FindCommand --\u003e FindCommandParser : f","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"deactivate FindCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"FindCommandParser --\u003e AddressBookParser : f","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"deactivate FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"FindCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"destroy FindCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"AddressBookParser --\u003e LogicManager : f","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"beefham":55}},{"path":"docs/diagrams/ImportActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"@startuml","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"start","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":":User executes `import` command;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"if () then ([filepath given is valid])","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"    :Program checks file formatting","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"    and all data entries;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"if() then ([all required data present,","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"no formatting errors,","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"no invalid data])","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"    :Imports all data in csv file;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    :GUI updates with newly imported data;","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"else ([else])","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    : GUI displays formatting/missing data/invalid data error;","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"endif","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"else ([else])","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"    : GUI displays file not found error;","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"endif","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"stop","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"@enduml","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"boonhaii":23}},{"path":"docs/diagrams/ImportProcessData.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"@startuml","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"!include style.puml","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"mainframe sd Import Data","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"title Import Data","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"participant \":ImportCommand\" as ImportCommand LOGIC_COLOR","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"participant \":AddressBook\" as AddressBook LOGIC_COLOR","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"participant \":Model\" as Model LOGIC_COLOR","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"end box","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"end box","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"activate ImportCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"ImportCommand -\u003e ImportCommand : processCsv(filepath)","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"activate ImportCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"ImportCommand --\u003e ImportCommand : newPersonList","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"deactivate ImportCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"create AddressBook","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"ImportCommand -\u003e AddressBook : AddressBook()","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"activate AddressBook","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"AddressBook --\u003e ImportCommand : newAddressBook","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"deactivate AddressBook","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"ImportCommand -\u003e AddressBook : setPersons(newPersonList)","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"activate AddressBook","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"AddressBook --\u003e ImportCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"deactivate AddressBook","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"ImportCommand -\u003e Model : setAddressBook(newAddressBook)","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"activate Model","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"Model --\u003e ImportCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"deactivate Model","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"ImportCommand -\u003e CommandResult : CommandResult(Message)","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"activate CommandResult","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"CommandResult --\u003e ImportCommand : result","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"CommandResult -[hidden]-\u003e ImportCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"destroy CommandResult","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"@enduml","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"boonhaii":48}},{"path":"docs/diagrams/ImportSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"@startuml","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"!include style.puml","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"title Sequence Diagram of ImportCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"participant \":ImportCommandParser\" as ImportCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"participant \":ImportCommand\" as ImportCommand LOGIC_COLOR","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"end box","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"[-\u003e LogicManager : execute(\"import filepath\")","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"activate LogicManager","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"import filepath\")","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"activate AddressBookParser","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"create ImportCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"AddressBookParser -\u003e ImportCommandParser : ImportCommandParser(\"import filepath\")","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"activate ImportCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"ImportCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"deactivate ImportCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"AddressBookParser -\u003e ImportCommandParser : parse(filepath)","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"activate ImportCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"create ImportCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"ImportCommandParser -\u003e ImportCommand : ImportCommand(filepath)","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"activate ImportCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"ImportCommand --\u003e ImportCommandParser :","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"deactivate ImportCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"ImportCommandParser --\u003e AddressBookParser :","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"deactivate ImportCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"ImportCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"destroy ImportCommandParser","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"AddressBookParser --\u003e LogicManager :","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"AddressBookParser -[hidden]-\u003e LogicManager","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"destroy AddressBookParser","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"LogicManager -\u003e ImportCommand : execute(model)","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"activate ImportCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"ref over ImportCommand: Import Data","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"ref over ImportCommand: Update GUI","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"ImportCommand --\u003e LogicManager","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"deactivate ImportCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"ImportCommand -[hidden]-\u003e LogicManager","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"destroy ImportCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"@enduml","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"boonhaii":59}},{"path":"docs/diagrams/InfoPanelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"!include style.puml","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"scale 512 width","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"scale 384 height","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"package Model {","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"class ModelManager MODEL_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"class ObservablePerson MODEL_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"package Ui {","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"class UiObserver \u003c\u003cInterface\u003e\u003e UI_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"class InfoPanel UI_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"ModelManager -down-\u003e \"1\" ObservablePerson","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"InfoPanel .up[#green].|\u003e UiObserver","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"ObservablePerson -right[#black]-\u003e \"*\" UiObserver","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"szelongq":2,"1waykiat":20}},{"path":"docs/diagrams/PayrollCalculationSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"mainframe sd calculate payroll","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"participant \"d:StartPayrollCommand\" as StartPayrollCommand LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"participant \"personList:List\u003cPerson\u003e\" as personList LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"participant \"calculatedPersons:List\u003cPerson\u003e\" as calculatedPersonsList LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"end box","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"end box","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"activate StartPayrollCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"StartPayrollCommand -\u003e Model : get the OvertimePayRate","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"Model --\u003e StartPayrollCommand : OvertimePayRate","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"loop until all payroll calculated","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand -\u003e personList : retrieve a person","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"    activate personList","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"    personList --\u003e StartPayrollCommand : person","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"    deactivate personList","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"    |||","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand -\u003e StartPayrollCommand : calculate pay for the person","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"    activate StartPayrollCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand --\u003e StartPayrollCommand : calculated pay","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"    deactivate StartPayrollCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"    |||","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand -\u003e StartPayrollCommand : create new person with\\nthe CalculatedPay, with\\nHoursWorked and\\nOvertime reset to zero","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"    activate StartPayrollCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand --\u003e StartPayrollCommand : updated copy of person","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"    deactivate StartPayrollCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand -\u003e calculatedPersonsList : add updated copy of person to the calculatedPersonsList","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"    activate calculatedPersonsList","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"    deactivate","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"loop until all persons updated into model","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand -\u003e personList : retrieve original person","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"    activate personList","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"    personList --\u003e StartPayrollCommand : original person","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"    deactivate personList","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand -\u003e calculatedPersonsList : retrieve updated copy of person","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"    activate calculatedPersonsList","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"    calculatedPersonsList --\u003e StartPayrollCommand : updated copy of person","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"    deactivate calculatedPersonsList","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand -\u003e Model : replace original person in the model with the edited person","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"    activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"    deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"szelongq":61}},{"path":"docs/diagrams/PersonClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"scale 720 width","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"scale 540 height","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"!define PersonClass \"             Person             \"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"skinparam minClassWidth 100","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"Package \"Person attribute classes\" \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"Class PersonClass","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"Class Address","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"Class Email","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"Class Name","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"Class Phone","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"Class Role","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"Class LeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"Class LeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"Class HourlySalary","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"Class HoursWorked","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"Class Overtime","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"Class CalculatedPay","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"Class Tag","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"HiddenOutside ..\u003e PersonClass","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"PersonClass *-left-\u003e Name","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e Phone","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e Email","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e Address","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e Role","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e LeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e LeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e HourlySalary","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e HoursWorked","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e Overtime","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"PersonClass *--\u003e CalculatedPay","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"PersonClass *-right-\u003e \"*\" Tag","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"Name -[hidden]down\u003e Phone","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"Phone -[hidden]right-\u003e Email","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"Email -[hidden]right\u003e Address","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"Address -[hidden]right\u003e Role","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"Role -[hidden]right\u003e LeaveBalance","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"LeaveBalance -[hidden]right-\u003e LeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"LeavesTaken -[hidden]right-\u003e HourlySalary","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"HourlySalary -[hidden]right\u003e HoursWorked","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"HoursWorked -[hidden]right\u003e Overtime","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"Overtime -[hidden]right\u003e CalculatedPay","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"Tag -[hidden]down\u003e CalculatedPay","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"danielsimre":60}},{"path":"docs/diagrams/RemoveLeavesBeforeSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"participant \"rlb:RemoveLeavesBeforeCommand\" as RemoveLeavesBeforeCommand LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"participant \"result:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"end box","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"participant \"old:LeavesTaken\" as OldLeavesTaken MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"participant \"new:LeavesTaken\" as NewLeavesTaken MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"end box","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"[-\u003e RemoveLeavesBeforeCommand : execute()","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"activate RemoveLeavesBeforeCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand \u003c-- Model","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"loop for all Person objects in the list","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"create OldLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand -[hidden]\u003e OldLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand -\u003e RemoveLeavesBeforeCommand : getUpdatedPerson(personToEdit)","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"activate RemoveLeavesBeforeCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand -\u003e OldLeavesTaken : removeDatesBefore(date)","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"activate OldLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"create NewLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"OldLeavesTaken -\u003e NewLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"activate NewLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"OldLeavesTaken \u003c-- NewLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"deactivate NewLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand \u003c-- OldLeavesTaken : new","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"deactivate OldLeavesTaken","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand --\u003e RemoveLeavesBeforeCommand : editedPerson","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"deactivate RemoveLeavesBeforeCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand -\u003e Model : setPerson(personToEdit, editedPerson)","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand \u003c-- Model","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"create CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"RemoveLeavesBeforeCommand -\u003e CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"activate CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"CommandResult --\u003e RemoveLeavesBeforeCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"deactivate CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"[\u003c-- RemoveLeavesBeforeCommand : result","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"deactivate RemoveLeavesBeforeCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"danielsimre":65}},{"path":"docs/diagrams/StartPayrollSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"participant \"d:StartPayrollCommand\" as StartPayrollCommand LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"participant \"personList:List\u003cPerson\u003e\" as personList LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"participant \"calculatedPersons:List\u003cPerson\u003e\" as calculatedPersonsList LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"end box","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"end box","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"[-\u003e StartPayrollCommand : execute()","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"activate StartPayrollCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"StartPayrollCommand -\u003e Model : show all employees in Heron","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"StartPayrollCommand -\u003e Model : get list of all employees","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"Model --\u003e StartPayrollCommand : list of all employees","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"|||","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"create personList","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"StartPayrollCommand -\u003e personList : create deep copy of the employee list","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"activate personList","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"personList --\u003e StartPayrollCommand : personList","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"deactivate personList","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"create calculatedPersonsList","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"StartPayrollCommand -\u003e calculatedPersonsList : create list for storing changed persons","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"activate calculatedPersonsList","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"calculatedPersonsList --\u003e StartPayrollCommand : calculatedPersonsList","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"deactivate calculatedPersonsList","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"loop until all Persons have been checked","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"    StartPayrollCommand -\u003e personList : check if unpaid","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"    activate personList","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"    deactivate personList","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"ref over StartPayrollCommand, personList, calculatedPersonsList, Model","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"    calculate payroll","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"|||","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"StartPayrollCommand -\u003e Model : view first employee in the list","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"activate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"deactivate Model","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"create CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"StartPayrollCommand -\u003e CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"activate CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"CommandResult --\u003e StartPayrollCommand : result","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"deactivate CommandResult","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"[\u003c--StartPayrollCommand : result","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"deactivate StartPayrollCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"szelongq":64}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface Ui \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class PersonListPanel","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"Class InfoPanel","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" PersonListPanel","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"MainWindow *-down-\u003e \"1\" InfoPanel","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"InfoPanel ...\u003e Model","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"ResultDisplay ---|\u003e UiPart","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"CommandBox ---|\u003e UiPart","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"PersonListPanel ---|\u003e UiPart","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"PersonCard -right--|\u003e UiPart","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"InfoPanel ---|\u003e UiPart","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"StatusBarFooter ---|\u003e UiPart","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"HelpWindow ---|\u003e UiPart","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"PersonCard ...\u003e Model","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":53,"1waykiat":11}},{"path":"docs/diagrams/ViewSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"!include style.puml","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"scale 1024 width","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"scale 768 height","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"participant \"v:ViewCommand\" as ViewCommand LOGIC_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"end box","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"participant \":ObservablePerson\" as ObservablePerson MODEL_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"end box","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"[-\u003e LogicManager : execute(\"view 2\")","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"activate LogicManager","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"box UI UI_COLOR_T1","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"participant \"InfoPanel:UiObserver\" as UiObserver UI_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"view 2\")","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"activate AddressBookParser","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"create ViewCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"AddressBookParser -\u003e ViewCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"activate ViewCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"ViewCommand --\u003e AddressBookParser","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"deactivate ViewCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"AddressBookParser --\u003e LogicManager : v","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"LogicManager -\u003e ViewCommand : execute()","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"activate ViewCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"ViewCommand -\u003e Model : getPersonToView(index)","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"activate Model","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"Model --\u003e ViewCommand : personToView","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"deactivate Model","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"ViewCommand -\u003e Model : setViewingPerson(personToView)","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"activate Model","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"Model -\u003e ObservablePerson : setPerson(personToView)","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"activate ObservablePerson","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"ObservablePerson -\u003e ObservablePerson : updateUi()","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"activate ObservablePerson","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"ObservablePerson -\u003e UiObserver : update(personToView)","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"activate UiObserver","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"UiObserver --\u003e ObservablePerson","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"deactivate UiObserver","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"1waykiat"},"content":"ObservablePerson --\u003e Model","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"1waykiat"},"content":"deactivate ObservablePerson","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"1waykiat"},"content":"deactivate ObservablePerson","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"Model --\u003e ViewCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"deactivate Model","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"ViewCommand --\u003e LogicManager : result","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"1waykiat"},"content":"deactivate ViewCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"ViewCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"destroy ViewCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"deactivate LogicManager","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"1waykiat":73}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"title: HeRon","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-F11-3/tp/actions)","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-F11-3/tp/branch/master/graph/badge.svg?token\u003dREU06SVNLO)](https://codecov.io/gh/AY2122S1-CS2103T-F11-3/tp)","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"**HeRon is a desktop Human Resources application for managing employees.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"* If you are interested in using HeRon, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"* If you are interested about developing HeRon, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"beefham":4,"-":13,"1waykiat":2}},{"path":"docs/team/1waykiat.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"layout: page","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"title: Wei Kiat\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"### Project: HeRon ","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information.","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"HeRon is a project adapted from AddressBook - Level 3.","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"* **New Feature**: Added a display panel to display information of employee,","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"together with a view command to select what content to display.","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"    * What it does: Allows user to view more detailed information about a certain employee in a separate panel.","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"    The employee information to be displayed on the panel can be controlled with the View command. ","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"    * Justification: As we have added a lot more fields added to the employee, displaying all this information within the","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"    employee list panel cards\u0027 itself would be very cramped and create clutter on the screen. By only keeping the key information on the card and","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"    separating out more detailed information out to the display panel, it makes the interface cleaner and neater.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"    * Highlights: The implementation of updating the display panel depending on whatever command is called uses the Observer pattern. The Observer and","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"    Observable classes are created by myself.  Many of the existing commands were also updated to display the relevant information to that command itself,","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"    as different commands require the display panel to reflect information differently.","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"    * Credits: The Observer pattern that is in the Software engineering textbook.","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"* **New Feature**: Added a pay command that allows the user to mark employees as being paid","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"    * What it does: After starting the payroll, all employees will be marked with an unpaid label, with the salary amount left unpaid","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"    next to it. User can then pay these employees and marked them as being paid afterwards when they finished paying them.","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"    * Justification: Enables user to take note of which employees have been paid and which have been left unpaid when going through","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"    the payroll to ensure that all employees are paid on time.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003d1waykiat\u0026tabRepo\u003dAY2122S1-CS2103T-F11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"* **Enhancements**:","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"    * Updated edit command to take into account the new attributes being added. (Pull Request [#43](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/43))","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"    * Added calculatedPay attribute (Pull Request [#62](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/62))","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"    * Update GUI color scheme (Pull Request [#185](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/185))","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"    * Changed app icon and title (Pull Request [#116](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/62))","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"    * Fix UI related bugs, and functionality (Pull Requests [#100](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/100),","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"    [#191](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/191) and [#190](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/190))","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"    * User Guide:","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"        * Added documentation for the feature `edit`, `view` and `pay`, as well as the UI layout - [#93](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/93)","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"        * Added documentation for the feature `edit` ","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"        * Updated UML class diagrams of `Model` and `UI` - (Pull Request [#206](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/206))","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"        * Added implementation of InfoPanel, together with its UML class and sequence diagram - (Pull Request [#206](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/206))","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"        * Increase test coverage (Pull Request [#225](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/225))","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"* **Community**:","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"    * Reviewed PRs","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"    * Helped to post up issues for other teammates","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"boonhaii":3,"1waykiat":53}},{"path":"docs/team/beefham.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"layout: page","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"title: Wee Han\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"### Project: HeRon","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information.","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"HeRon is a project adapted from AddressBook - Level 3.","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"* **New Feature**:","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dbeefham\u0026tabRepo\u003dAY2122S1-CS2103T-F11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"* **Project management**:","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    * Updated the `find` command to allow the user to find an employee by their fields such as email, role, hourly salary, number of leaves, whether they are unpaid, and so on.","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"      * [#44](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/44)","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"      * [#61](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/61)","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"      * [#75](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/75)  ","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    * Added tests for the above enhancement as well","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"    * User Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        * Added the documentation for the `find` features.","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"        * Fix typos in user guide. [#188](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/188)","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        * Added use cases for the `find` feature.","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"        * Added implementation details and UML diagrams for the `find` feature. [#95](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/95)","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"* **Reviewing**:","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"    * Reviewed the following PRs:","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"        * [#29](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/29)","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"        * [#31](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/31)","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"        * [#39](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/39)","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"        * [#52](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/52)","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        * [#63](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/63)","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"        * [#71](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/71)","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        * [#82](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/82)","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        * [#97](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/97) ","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"        * [#186](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/186)","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        * [#196](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/196)","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"        ","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"* **Community**:","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"* **Tools**:","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"boonhaii":1,"beefham":48}},{"path":"docs/team/boonhaii.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"title: Boon Hai\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"### Project: HeRon","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information.","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"HeRon is a project adapted from AddressBook - Level 3.","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003dboonhaii\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17)","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"* **New Feature**: Implemented `import` feature. ([#71](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/71), [#82](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/82), [#97](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/97), [#186](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/186))","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    * What it does: Parses through csv files and import the data into HeRon, and indicates the error locations if issues are present in the file (e.g. Wrong formatting, Invalid/Duplicate/Missing Data).","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"    * Justification: To start out using HeRon, users have to individually add in employees. While HeRon is optimised for CLI users, it still takes a significant amount of time to input all the data. In most organizations not using HR applications, personnel information are commonly stored in Excel, which can be exported into a csv file. The produced csv file can be easily imported into HeRon, reducing the effort required to transition into HeRon.","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"    * Highlights: The implementation was challenging as there was a need to learn and understand a new library. In addition, two of the main challenges during implementation were: ","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"      1. To specify the exact places were an error has been found to make importing more user-friendly.","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"      2. To cater for the validity checks brought about by the updated `add` feature, where duplicate names, emails and phone numbers were not allowed.","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"* **Enhancements to existing features**: ","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"  * Update `add` feature. ([#41](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/41), [#52](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/52), [#63](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/63), [#186](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/186))","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"    * `add` now requires new fields, including Role, LeaveBalance, HourlySalary and HoursWorked, as properties of an employee.","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"    * `add` checks for similar names, or duplicate phone numbers and emails. This is to mimic real world context where employees are unlikely to have the same full name, phone numbers or emails.","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    * `add` now processes the names of employees being added, removing additional whitespace typos and making it title case.","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    * Add new test cases adapted to suit the new functionality of `add`.","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"  * Add test cases for `AssignLeaveCommandParser` and `RemoveLeavesBeforeCommandParser`. ([#237](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/237))","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"  * User Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    * Updated documentation for the features `add`. ([#31](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/31))","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    * Added documentation for feature `import`.([#91](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/91))","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    * Update all command example screenshots to fit the latest version of HeRon.([#197](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/197))","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    * Add implementation details for `import` feature. ([#103](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/103))","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    * Explained design considerations for `import` feature.([#103](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/103))","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    * Added UML Diagrams: ImportProcessData and ImportSeqeuenceDiagram. ([#103](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/103))","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"  * Team-Based Tasks","lastModifiedDate":"2021-11-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    * Added User Stories for HeRon ([#29](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/29)).","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    * Update AboutUs.md ([#31](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/31))","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    * Format Developer Guide PDF file ([#231](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/231))","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"  * Review/Mentoring Contributions","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    * Reviewed a total of 14 PRs: [#37](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/37), [#45](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/45), [#54](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/54), [#67](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/67), [#83](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/83), [#92](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/92), [#108](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/108), [#109](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/109), [#192](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/192), [#194](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/194), [#195](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/195), [#209](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/209), [#225](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/225), [#240](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/240)","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"boonhaii":48}},{"path":"docs/team/danielsimre.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"layout: page","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"title: Daniel Sim\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"### Project: HeRon","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"HeRon is a desktop application for HR managers to assist in managing HR administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information.","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"HeRon is a project adapted from AddressBook - Level 3. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003ddanielsimre\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17)","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"* **Enhancements Implemented**:","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"  * **New Features**","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    * Implemented `LeaveBalance` and `Overtime` and updated `HoursWorked` attributes for `Person`, as well as `addLeaveBalance`, `deductLeaveBalance`, ","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"      `addHoursWorked` and `deductHoursWorked` commands.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"      * What it does: The user is able to modify `LeaveBalance`, `Overtime` and `HoursWorked` without needing to use `edit`.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"      * Justification: Without these commands, the user would have to manually look up the details of a given employee,","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"        manually calculate how many hours worked and overtime hours the person should have, then use the `edit` command to change the values accordingly.","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        With these commands, all the user needs to do is input the index of the specified employee, along with how many hours worked/overtime/leaves","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        they wish to add or remove.","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"      * Highlights: The implementation of `addHoursWorked` and `deductHoursWorked` was challenging as","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"        it could take in either `HoursWorked` and/or `Overtime`, so all of these valid cases needed to be handled.","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"        Also, for the case where one of the inputs is valid while the other is invalid, the command throws an error that specifies","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"        which input is causing the error.","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        ","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    * Implemented `LeavesTaken` attribute for `Person`, as well as `assignLeave` and `removeLeavesBefore` commands.","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"      * What it does: `assignLeave` assigns a leave associated with a date to an employee.","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        `removeLeavesBefore` removes all assigned leaves that occur on and before a given input date from all employees in the current list.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"      * Justification: This allows the user to keep track of when an employee is taking a leave, to allow","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        them to better plan work schedules, while serving as a form of record keeping. `removeLeavesBefore`","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        is a command that allows the user to manually clear outdated leave information when they no longer need it","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        in a quick and easy manner, as it is applied to many employees at once.","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    ","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"  * **Enhancements to existing features**","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    * Updated `find` command with the ability to search employees by their assigned leave dates,","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"      either with an individual date, or a date range. ([#83](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/83), [#108](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/108))","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"      * Justification: This allows users to more easily find employees that have taken leaves on certain dates, in case they need to ","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        determine who is not working on a given date or period.","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"      * Highlights: The find command is able to take a combination of date ranges and individual dates.","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        For example, `find d/2021-10-11:2021-10-20 2021-11-11 2021-12-12` gets all employees that have at least 1 assigned leave","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        from 2021-10-11 to 2021-10-20, or on 2021-11-11 or 2021-12-12.","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"* **Documentation Contributions**:","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"  * User Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    * Added documentation for the following commands: ","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        * `addLeaveBalance`","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        * `deductLeaveBalance`","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        * `addHoursWorked`","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        * `deductHoursWorked`","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        * `assignLeave`","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        * `removeLeavesBefore`","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        * `find` (Section on `Type 4 Query: Date Based Comparison`)","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"    * Added implementation details for:","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        * `LeaveBalance`, `addLeaveBalance` and `deductLeaveBalance`","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        * `LeavesTaken`, `assignLeave` and `removeLeavesBefore`","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    * Added use cases and manual test cases for the following commands:","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        * `addLeaveBalance`","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        * `deductLeaveBalance`","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        * `addHoursWorked`","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        * `deductHoursWorked`","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        * `assignLeave`","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        * `removeLeavesBefore`","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"* **Project Management**","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"  * Managed releases `v1.2`, `v1.3.1` and `v1.3.2` on GitHub","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"* **Team Contributions**","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"  * Helped to create and distribute issues for each milestone","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"* **Review Contributions**","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"  * Pull Requests Reviewed (with non-trivial review comments): ","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    [#60](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/60),","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"    [#84](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/84),","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"    [#87](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/87),","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"    [#102](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/102),","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    [#200](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/200)","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"**Contributions to the Developer Guide (Extracts)**","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"  * Sequence diagram for `AddLeaveBalanceCommand`","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"    ![AddLeaveBalanceSequenceDiagram](../images/AddLeaveBalanceSequenceDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"  * Sequence diagram for `RemoveLeavesBeforeCommand`","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"    ![RemoveLeavesBeforeSequenceDiagram](../images/RemoveLeavesBeforeSequenceDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"    ","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"**Contributions to the User Guide (Extracts)**","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"  * **Type 4 Query: Date Based Comparison**","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"    * Fields: `d/DATE`","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"      * This field will find all people who have taken a leave on a given date or within a range of dates. (start and end dates inclusive)","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"      * There are two ways to search using dates: individual dates or date ranges.","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        * For individual dates, simply type in a date of the form YYYY-MM-DD.","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        * For date ranges, simply type in two dates in the form YYYY-MM-DD:YYYY-MM-DD.","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"      * Both individual dates and date ranges can be combined into one query.","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    * For example, `find d/2021-10-10 2021-11-01:2021-11-05` will find anyone who satisfies **either** of the following 2 criteria:","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"      1. has taken a leave on October 10th 2021, or","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"      2. has taken a leave between the dates November 1st 2021 and November 5th 2021, start and end dates inclusive.","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"#### Add number of leaves for an employee : `addLeaveBalance`","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"Adds the specified number of leaves to the current leave balance (number of days of leave left) of a chosen employee.","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"Format: `addLeaveBalance INDEX l/NUMBER_OF_LEAVES`","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"* Adds the specified number to the number of leaves of the employee at the specified `INDEX`.","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"* The index refers to the index number shown in the displayed employee list.","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"* The index **must be a positive integer** 1, 2, 3, …","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"* The number of leaves **must be a positive integer between 1 and 365** 1, 2, 3, …, 365","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"* The number of leaves to be added **cannot cause the employee\u0027s total leave balance to exceed 365 leaves.**","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"Examples:","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"* `list` followed by `addLeaveBalance 3 l/4` adds 4 days of leave to the 3rd employee in HeRon.","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"* `find n/Sam` followed by `addLeaveBalance 1 l/1` adds 1 day of leave to the 1st employee in the results of the `find` command.","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"danielsimre":113,"boonhaii":1}},{"path":"docs/team/szelongq.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"---","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"layout: page","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"title: Quek Sze Long\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"---","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"### Project: HeRon","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"HeRon is a desktop application for HR managers of Small-Medium Enterprises (SMEs) to assist in managing HR ","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"administrative tasks such as tracking leaves and offs, calculating pay and updating payroll information. ","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a ","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"Graphical User Interface (GUI).","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"HeRon is a project adapted from AddressBook - Level 3.","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"* **New Feature**: Added a start payroll command to calculate the pay of all employees.","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"  * Justification: This feature is important for the target users, HR managers, as one of their major tasks is to","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"    compute payroll. This helps users to complete calculations easily.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"    ","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"* **New Feature**: Enhanced the pay command to allow the user to pay all employees in the filtered list at once.","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"  * Justification: In a company, it is likely that the user (HR managers) would pay multiple employees at once, and ","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"    the original pay command only pays one employee at a time. This enhancement greatly improves the convenience of","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"    keeping track of which employees have been paid.","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"  * Highlights: The implementation turned out to be challenging, as possible interactions with other commands such as","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"    startPayroll and addHoursWorked had to be considered. As a result, more integration testing had to be done.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"* **New Feature**: Added an overtime pay rate attribute in the user preferences.","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"  * What it does: The overtime pay rate is used in payroll calculations as an additional salary multiplier ","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"    for overtime work done.","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"  * Justification: Users are unlikely to change the overtime pay rate of their company very often, hence setting it to","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"    be in the user preferences allows users to change the rate and the information will be retained, improving ","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"    convenience.","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"  * Highlights: It was slightly challenging to decide how to store the overtime pay rate attribute. After deciding on","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"    adding it as an attribute to the user preferences, a number of refactoring also had to be done to various child ","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"    classes. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"    ","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003dszelong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-17\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dszelongq\u0026tabRepo\u003dAY2122S1-CS2103T-F11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d\u0026authorshipIsBinaryFileTypeChecked\u003dfalse) \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"* **Contribution to Documentation**:","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"  * **User Guide**:","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"    * Added documentation for the following payroll-related features:","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"      ([\\#104](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/104/commits/1dfceed7fbcd2b01add2a89677b2c12f1cd73ec8))","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"      * `startPayroll`","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"      * `pay`","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"      * `viewOvertimePayRate`","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"      * `setOvertimePayRate`","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"    * Organized documented features into subcategories for easier referencing ","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"      ([\\#104](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/104/commits/57ba9b399df24f384a747f04e17a3a274cb8e0eb)) ","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"      ","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"  * **Developer Guide**:","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"    * Added the following documentation for the `startPayroll` feature:","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"      * Implementation Details ([\\#87](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/87),","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"        [\\#201](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/201),","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"        [\\#205](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/226))","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"      * UML Diagrams ([\\#201](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/201))","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"      * Use cases ([\\#87](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/87))","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"      * Instructions for manual testing ([\\#205](https://github.com/AY2122S1-CS2103T-F11-3/tp/pull/226)) \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"* **Contribution to team-based tasks**:","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"  * Tracked progress on team tasks on the tP dashboard","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"    * Updated team repo documents to remove mention of AB-3 during set-up","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"szelongq"},"content":"    * Submitted product concept to TEAMMATES and updated in the documentation","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"szelongq"},"content":"  * Managed issues tracking from PE-D for v1.4.","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"szelongq"},"content":"    * Made group progress report regarding PE-D bug triaging progress.","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"szelongq"},"content":"  * Formatted the User Guide to be PDF-friendly \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"szelongq"},"content":"* **Review Contributions**:","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"szelongq"},"content":"  * Main reviewer for @onewaykiat\u0027s pull requests.","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"szelongq"},"content":"#### Contributions to the Developer Guide (Extracts):","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"szelongq"},"content":"##### Start Payroll feature","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"szelongq"},"content":"The start payroll feature is provided through `StartPayrollCommand`.","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"It extends `Command` with the following added methods to calculate the payroll for every employee:","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"szelongq"},"content":"- `StartPayrollCommand#calculatePay(HourlySalary salary, HoursWorked hoursWorked,","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"  Overtime overtime, OvertimePayRate overtimePayRate)` - Calculates the payroll based on the given parameters and","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"szelongq"},"content":"  returns a new `CalculatedPay` object.","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"szelongq"},"content":"- `StartPayrollCommand#createPersonWithCalculatedPay(Person personWithCalculatedPay,","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"szelongq"},"content":"  CalculatedPay newCalculatedPay)` - Creates a new `Person` that is a copy of the given `Person` parameter","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"szelongq"},"content":"  except with the updated `CalculatedPay` value.","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"szelongq"},"content":"- `StartPayrollCommand#createPersonWithZeroHoursWorkedAndOvertime(Person person)` - Creates a new `Person` that is a copy of the","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"szelongq"},"content":"  given `Person` parameter except with the `HoursWorked` and `Overtime` values set to 0.","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"szelongq"},"content":"...","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"szelongq"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"szelongq"},"content":"The following sequence diagram describes the operations in executing a `StartPayrollCommand`.","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"szelongq"},"content":"![StartPayrollSequenceDiagram](../images/StartPayrollSequenceDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"szelongq"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"szelongq"},"content":"#### Contributions to the User Guide (Extracts):","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"szelongq"},"content":"##### Start Payroll : `startPayroll`","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"szelongq"},"content":"Calculates the payroll of all employees and mark them as awaiting the payment.","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"szelongq"},"content":"The payroll formula is: `HOURSWORKED * HOURLYSALARY + OVERTIME * HOURLYSALARY * OVERTIMEPAYRATE`,\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"szelongq"},"content":"where `OVERTIMEPAYRATE` is the added pay rate for overtime as compared to normal work hours.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"szelongq"},"content":"It can be viewed through the `viewOvertimePayRate` command or changed through the `setOvertimePayRate` command.","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"szelongq"},"content":"Format: `startPayroll`","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"szelongq"},"content":"* Calculates the payroll of **all employees regardless of current viewing list** based on the formula above.","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"szelongq"},"content":"* After that, marks all employees as awaiting payment of the calculated amount.","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"szelongq"},"content":"  \u003cbr\u003eThis will produce red labels under each employee data stating \u0027NOT PAID\u0027 and the amount they are owed.","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"szelongq"},"content":"* The number of hours worked and overtime hours worked for the employee will be reset to 0 as well","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"szelongq"},"content":"  so that hours counting towards the next payroll can continue to be added.","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"szelongq"},"content":"* Finally, display the list of all employees.","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"szelongq"},"content":"* This command is typically followed up by `pay` commands to mark employees as paid,","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"szelongq"},"content":"  after their salaries are given in real life.","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"szelongq"},"content":"...","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"szelongq"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"szelongq"},"content":"**:information_source: Notes:**","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"szelongq"},"content":"* All employees must not have any pay pending from the previous payroll (i.e. no red \u0027NOT PAID\u0027 label). Otherwise, an error will be thrown","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"szelongq"},"content":"  and no action will be taken.","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"szelongq"},"content":"* To start a new payroll, first make sure to pay all employees using the `pay` command.","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"szelongq"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"szelongq":127}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"szelongq":1,"-":182}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_LEAVES_INPUT \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"            \"Please input a positive integer value between \" + (LeaveBalance.MIN_LEAVES + 1)","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"                    + \" and \" + LeaveBalance.MAX_LEAVES","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"                    + \" (both inclusive) when adding/removing leaves! \\n%1$s\";","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_HOURS_WORKED_INPUT \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"            \"Please input a positive integer value between \" + (HoursWorked.MIN_HOURS_WORKED + 1)","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"                    + \" and \" + HoursWorked.MAX_HOURS_WORKED","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"                    + \" (both inclusive) when adding/removing hours worked! \\n%1$s\";","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_OVERTIME_INPUT \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            \"Please input a positive integer value between \" + (Overtime.MIN_OVERTIME + 1)","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"                    + \" and \" + Overtime.MAX_OVERTIME","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"                    + \" (both inclusive) when adding/removing overtime! \\n%1$s\";","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_REMOVE_INPUT \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"            \"Employee has less than %1$s %2$s! (Currently has %3$s %4$s)\";","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_ADD_INPUT \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"            \"Employee cannot have more than %1$s %2$s! (Can add at most %3$s %4$s)\";","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INSUFFICIENT_LEAVES \u003d \"Employee %1$s does not have any more leaves! \\n\";","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"            \"Invalid date format/value! (Correct format: YYYY-MM-DD, and given date must be valid) \\n%1$s\";","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_INVALID_FINDDATE_FORMAT \u003d","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"            \"Dates should be of the form YYYY-MM-DD or YYYY-MM-DD:YYYY-MM-DD (for ranges)! \\n%1$s\";","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_EMPTY_FILTERED_LIST \u003d \"There are no employees currently listed! \\n\";","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_DATE_ALREADY_ASSIGNED \u003d","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"            \"Employee %1$s already has a leave assigned to the date %2$s! \\n\";","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":28,"-":12}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"            .registerModule(new JavaTimeModule())","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"danielsimre":2,"-":143}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"            // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\") \u0026\u0026 !s.contains(\"-\");","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"     * Returns true if {@code s} represents a non-negative integer","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"     * e.g. empty string, \"-0\", \"-1\", \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"    public static boolean isNonNegativeInteger(String s) {","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"1waykiat"},"content":"        requireNonNull(s);","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"1waykiat"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"1waykiat"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"1waykiat"},"content":"            // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"1waykiat"},"content":"            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\") \u0026\u0026 !s.contains(\"-\");","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":88,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"szelongq"},"content":"     * Returns true if {@code s} represents a non-negative, unsigned double","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"szelongq"},"content":"     * e.g. 1.00, 2, 3.0, 6.69 \u003cbr\u003e","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"szelongq"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"szelongq"},"content":"     * e.g. empty string, \"-0.00\" (has negative sign), \"3 0\" (contains whitespace),","lastModifiedDate":"2021-11-06"},{"lineNumber":94,"author":{"gitId":"szelongq"},"content":"     * \"1 a\" (contains letters)","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"szelongq"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"szelongq"},"content":"    public static boolean isNonNegativeUnsignedDouble(String s) {","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"szelongq"},"content":"        boolean isValidDouble;","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"szelongq"},"content":"        boolean isUnsigned;","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"szelongq"},"content":"            double value \u003d Double.parseDouble(s);","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"szelongq"},"content":"            isValidDouble \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"szelongq"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"szelongq"},"content":"            isValidDouble \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"szelongq"},"content":"        isUnsigned \u003d !s.startsWith(\"+\") \u0026\u0026 !s.startsWith(\"-\");","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":109,"author":{"gitId":"szelongq"},"content":"        return isValidDouble \u0026\u0026 isUnsigned;","lastModifiedDate":"2021-11-06"},{"lineNumber":110,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":113,"author":{"gitId":"szelongq"},"content":"     * Returns true if {@code s} represents a double with less than or","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"szelongq"},"content":"     * equals to {@code maxDecimalPlaces} decimal places (dp)","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"szelongq"},"content":"     * e.g. -1.00, 2, 3.0, 6.69 for {@code maxDecimalPlaces} \u003d 2 \u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"szelongq"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"szelongq"},"content":"     * e.g. empty string, \"3 0\" (contains whitespace), \"1 a\" (contains letters),","lastModifiedDate":"2021-11-06"},{"lineNumber":118,"author":{"gitId":"szelongq"},"content":"     * \"6.699\" for {@code maxDecimalPlaces} \u003d 3","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"szelongq"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":121,"author":{"gitId":"szelongq"},"content":"    public static boolean isDoubleWithDpWithinLimit(String s, int maxDecimalPlaces) {","lastModifiedDate":"2021-11-06"},{"lineNumber":122,"author":{"gitId":"szelongq"},"content":"        requireNonNull(s);","lastModifiedDate":"2021-11-06"},{"lineNumber":123,"author":{"gitId":"szelongq"},"content":"        assert maxDecimalPlaces \u003e\u003d 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":124,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":125,"author":{"gitId":"szelongq"},"content":"        boolean isValidDouble;","lastModifiedDate":"2021-11-06"},{"lineNumber":126,"author":{"gitId":"szelongq"},"content":"        boolean hasDpWithinLimit;","lastModifiedDate":"2021-11-06"},{"lineNumber":127,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":128,"author":{"gitId":"szelongq"},"content":"        // Check if s is a valid double","lastModifiedDate":"2021-11-06"},{"lineNumber":129,"author":{"gitId":"szelongq"},"content":"        try {","lastModifiedDate":"2021-11-06"},{"lineNumber":130,"author":{"gitId":"szelongq"},"content":"            double value \u003d Double.parseDouble(s);","lastModifiedDate":"2021-11-06"},{"lineNumber":131,"author":{"gitId":"szelongq"},"content":"            isValidDouble \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":132,"author":{"gitId":"szelongq"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":133,"author":{"gitId":"szelongq"},"content":"            isValidDouble \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":134,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":135,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"szelongq"},"content":"        // Check if decimal places are within specified limit","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"szelongq"},"content":"        int indexOfLastDigit \u003d s.length() - 1;","lastModifiedDate":"2021-10-13"},{"lineNumber":138,"author":{"gitId":"szelongq"},"content":"        int indexOfDecimalPoint \u003d s.indexOf(\u0027.\u0027);","lastModifiedDate":"2021-10-13"},{"lineNumber":139,"author":{"gitId":"szelongq"},"content":"        int numberOfDecimalPlaces;","lastModifiedDate":"2021-10-13"},{"lineNumber":140,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":141,"author":{"gitId":"szelongq"},"content":"        // Check if there is no \u0027.\u0027 in the number at all","lastModifiedDate":"2021-11-06"},{"lineNumber":142,"author":{"gitId":"szelongq"},"content":"        if (indexOfDecimalPoint \u003d\u003d -1) {","lastModifiedDate":"2021-10-13"},{"lineNumber":143,"author":{"gitId":"szelongq"},"content":"            numberOfDecimalPlaces \u003d 0;","lastModifiedDate":"2021-10-13"},{"lineNumber":144,"author":{"gitId":"szelongq"},"content":"        } else {","lastModifiedDate":"2021-10-13"},{"lineNumber":145,"author":{"gitId":"szelongq"},"content":"            numberOfDecimalPlaces \u003d indexOfLastDigit - indexOfDecimalPoint;","lastModifiedDate":"2021-10-13"},{"lineNumber":146,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":147,"author":{"gitId":"szelongq"},"content":"        hasDpWithinLimit \u003d numberOfDecimalPlaces \u003c\u003d maxDecimalPlaces;","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":149,"author":{"gitId":"szelongq"},"content":"        return isValidDouble \u0026\u0026 hasDpWithinLimit;","lastModifiedDate":"2021-11-06"},{"lineNumber":150,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"szelongq":63,"-":71,"1waykiat":17}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.ObservablePerson;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"    /** Return person that is to be viewed in the InfoPanel */","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"    ObservablePerson getViewingPerson();","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":50,"1waykiat":4}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.ObservablePerson;","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"    public ObservablePerson getViewingPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"        return model.getViewingPerson();","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"-":81,"1waykiat":6}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an employee to HeRon. \"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_ROLE + \"ROLE \"","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_LEAVE + \"LEAVES \"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_HOURLYSALARY + \"SALARY \"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"            + PREFIX_HOURSWORKED + \"HOURS_WORKED \"","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"            + PREFIX_OVERTIME + \"OVERTIME \"","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_ROLE + \"Admin Assistant \"","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_LEAVE + \"14 \"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"            + PREFIX_HOURLYSALARY + \"20 \"","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"            + PREFIX_HOURSWORKED + \"40 \"","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"            + PREFIX_OVERTIME + \"5 \"","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"This person already exists in HeRon\";","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_DUPLICATE_PHONE \u003d \"The given phone number is already used by \"","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"        + \"another employee in HeRon\";","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_DUPLICATE_EMAIL \u003d \"The given email is already used by another employee in HeRon\";","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EMPLOYEE);","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"        if (model.hasDuplicatePhone(toAdd)) {","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PHONE);","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"        if (model.hasDuplicateEmail(toAdd)) {","lastModifiedDate":"2021-11-01"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EMAIL);","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"1waykiat"},"content":"        model.setViewingPerson(toAdd);","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":7,"boonhaii":22,"beefham":1,"-":64,"1waykiat":1}},{"path":"src/main/java/seedu/address/logic/commands/AddHoursWorkedCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.StringUtil.isNonZeroUnsignedInteger;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":" * Adds hours worked and overtime hours worked to an employee in HeRon.","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"public class AddHoursWorkedCommand extends Command {","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    public static final String COMMAND_WORD \u003d \"addHoursWorked\";","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            + \": Adds hours worked OR overtime to the employee identified \"","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            + \"by the index number used in the employee listing. \\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"            + \"[\" + PREFIX_HOURSWORKED + \"NO_OF_HOURS_WORKED] (must be a positive integer) \"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"            + \"[\" + PREFIX_OVERTIME + \"NO_OF_HOURS_WORKED_OVERTIME] (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_HOURSWORKED + \"2\";","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"            \"Successfully added hours worked to employee: %1$s \"","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"                    + \"(Employee now has %2$s hour%3$s worked and \"","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"                    + \"%4$s overtime hour%5$s worked)\";","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"    private final Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    private final HoursWorked hoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    private final Overtime overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"     * Creates an AddHoursWorkedCommand instance.","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"     * @param index of the person in the filtered employee list to add hours worked to","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"     * @param hoursWorked Hours worked that are to be added to the employee","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     * @param overtime Overtime (in hours) that is to be added to the employee","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    public AddHoursWorkedCommand(Index index, HoursWorked hoursWorked, Overtime overtime) {","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(index, hoursWorked, overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        this.hoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        this.overtime \u003d overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        Person editedPerson \u003d getUpdatedPerson(personToEdit);","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"        model.setViewingPerson(editedPerson);","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getHoursWorked().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getHoursWorked().toString().equals(\"1\") ? \"\" : \"s\",","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getOvertime().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getOvertime().toString().equals(\"1\") ? \"\" : \"s\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     * Returns a {@code Person} object that is a copy of the input person, except","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"     * with updated hours worked and overtime hours worked.","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"     * @param personToEdit The person object that is to be edited.","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Person object.","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"     * @throws CommandException if the added amount of hours worked/overtime causes the Person\u0027s","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"     * hours worked/overtime to exceed the maximum allowed amount","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"    private Person getUpdatedPerson(Person personToEdit) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        HoursWorked newHoursWorked \u003d personToEdit.getHoursWorked();","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"            // Check if hours worked input is a positive integer before calling addHoursWorked","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"            if (isNonZeroUnsignedInteger(hoursWorked.toString())) {","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"                newHoursWorked \u003d personToEdit.getHoursWorked().addHoursWorked(hoursWorked);","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"            String hoursWorkedCapacityString \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"                    personToEdit.getHoursWorked().getRemainingHoursWorkedCapacity().toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ADD_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"                    HoursWorked.MAX_HOURS_WORKED,","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"                    \"hours worked\", hoursWorkedCapacityString,","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"                    hoursWorkedCapacityString.equals(\"1\") ? \"hour worked\" : \"hours worked\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"        Overtime newOvertime \u003d personToEdit.getOvertime();","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"            // Check if overtime input is a positive integer before calling addOvertime","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"            if (isNonZeroUnsignedInteger(overtime.toString())) {","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"                newOvertime \u003d personToEdit.getOvertime().addOvertime(overtime);","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"            String overtimeCapacityString \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"                    personToEdit.getOvertime().getRemainingOvertimeCapacity().toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ADD_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"                    Overtime.MAX_OVERTIME,","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"                    \"overtime hours worked\", overtimeCapacityString,","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"                    overtimeCapacityString.equals(\"1\") ? \"overtime hour worked\" : \"overtime hours worked\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getAddress(), personToEdit.getRole(), personToEdit.getLeaveBalance(),","lastModifiedDate":"2021-11-03"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getLeavesTaken(), personToEdit.getSalary(), newHoursWorked, newOvertime,","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getCalculatedPay(), personToEdit.getTags());","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"        // Short circuit if same object","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"        if (!(other instanceof AddHoursWorkedCommand)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"        // State check","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand e \u003d (AddHoursWorkedCommand) other;","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 hoursWorked.equals(e.hoursWorked)","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 overtime.equals(e.overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"danielsimre":139,"1waykiat":1}},{"path":"src/main/java/seedu/address/logic/commands/AddLeaveBalanceCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * Adds some number of leaves to an employee in HeRon.","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class AddLeaveBalanceCommand extends Command {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    public static final String COMMAND_WORD \u003d \"addLeaveBalance\";","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"            + \": Adds leaves to the employee identified \"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"            + \"by the index number used in the last employee listing. \\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            + PREFIX_LEAVE + \"NO_OF_LEAVES (must be a positive integer) \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_LEAVE + \"2\";","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"            \"Leaves successfully added to employee: %1$s (Employee now has %2$s leave%3$s)\";","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    private final Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    private final LeaveBalance leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"     * Creates an AddLeaveBalanceCommand instance.","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     * @param index of the person in the filtered employee list to add leaves to","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * @param leaveBalance that are to be added to the employee","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    public AddLeaveBalanceCommand(Index index, LeaveBalance leaveBalance) {","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(index, leaveBalance);","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        this.leaveBalance \u003d leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        Person editedPerson \u003d getUpdatedPerson(personToEdit);","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        model.setViewingPerson(editedPerson);","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"                editedPerson.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"                editedPerson.getLeaveBalance().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"                editedPerson.getLeaveBalance().toString().equals(\"1\") ? \"\" : \"s\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"     * Returns a {@code Person} object that is a copy of the input person,","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"     * except with an updated leave balance.","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"     * @param personToEdit The person object that is to be edited.","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Person object.","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     * @throws CommandException if the added amount of leaves causes the Person\u0027s","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * leave balance to exceed the maximum allowed amount","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"    private Person getUpdatedPerson(Person personToEdit) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance newLeaveBalance;","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"            newLeaveBalance \u003d personToEdit.getLeaveBalance().addLeaves(leaveBalance);","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"            String leaveCapacityString \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"                    personToEdit.getLeaveBalance().getRemainingLeaveCapacity().toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"                    String.format(Messages.MESSAGE_INVALID_ADD_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"                            LeaveBalance.MAX_LEAVES,","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"                            \"leaves\", leaveCapacityString,","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"                            leaveCapacityString.equals(\"1\") ? \"leave\" : \"leaves\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getAddress(), personToEdit.getRole(), newLeaveBalance,","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getLeavesTaken(), personToEdit.getSalary(), personToEdit.getHoursWorked(),","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getOvertime(), personToEdit.getCalculatedPay(), personToEdit.getTags());","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        // Short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        if (!(other instanceof AddLeaveBalanceCommand)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"        // State check","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand e \u003d (AddLeaveBalanceCommand) other;","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 leaveBalance.equals(e.leaveBalance);","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":111}},{"path":"src/main/java/seedu/address/logic/commands/AssignLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":" * Assigns a leave with a date to an employee in HeRon.","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"public class AssignLeaveCommand extends Command {","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    public static final String COMMAND_WORD \u003d \"assignLeave\";","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"            + \": Allocates a leave with a date to the employee identified \"","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            + \"by the index number used in the last employee listing. \\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"            + PREFIX_DATE + \"DATE (of the format YYYY-MM-DD) \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DATE + \"2021-10-30\";","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"            \"Leave with date %1$s successfully assigned to employee: %2$s\";","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    private final Index index;","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * Creates an AssignLeaveCommand instance.","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * @param index of the person in the filtered employee list to assign a leave to","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     * @param date that corresponds to the leave being allocated to the employee","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    public AssignLeaveCommand(Index index, LocalDate date) {","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(index, date);","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        Person editedPerson \u003d getUpdatedPerson(personToEdit);","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        model.setViewingPerson(editedPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"                date.toString(),","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"                editedPerson.getName().toString()));","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"     * Returns a {@code Person} object that is a copy of the input person, except with an updated leave balance and","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"     * leaves taken list.","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     * @param personToEdit The person object that is to be edited.","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Person object.","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     * @throws CommandException if the employee does not have enough leaves","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * or a leave with the given date is already assigned to the employee","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    private Person getUpdatedPerson(Person personToEdit) throws CommandException {","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance newLeaveBalance;","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        // Check that the employee has at least 1 leave","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"            newLeaveBalance \u003d personToEdit.getLeaveBalance().removeLeaves(new LeaveBalance(\"1\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"                    String.format(Messages.MESSAGE_INSUFFICIENT_LEAVES,","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"                            personToEdit.getName().toString()));","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        // Check that the input date is not a duplicate","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken newLeavesTaken;","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"            newLeavesTaken \u003d personToEdit.getLeavesTaken().addDate(date);","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"                    String.format(Messages.MESSAGE_DATE_ALREADY_ASSIGNED,","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"                            personToEdit.getName().toString(), date));","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        return new Person(","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getAddress(),","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getRole(), newLeaveBalance, newLeavesTaken, personToEdit.getSalary(),","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getHoursWorked(), personToEdit.getOvertime(),","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getCalculatedPay(), personToEdit.getTags());","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        // Short circuit if same object","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"            return true;","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"        if (!(other instanceof AssignLeaveCommand)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        // State check","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        AssignLeaveCommand e \u003d (AssignLeaveCommand) other;","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 date.equals(e.date);","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"danielsimre":120}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" * Clears HeRon.","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"HeRon employee list has been cleared!\";","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"        model.setViewingPerson(null);","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":1,"beefham":1,"-":20,"1waykiat":1}},{"path":"src/main/java/seedu/address/logic/commands/DeductHoursWorkedCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.StringUtil.isNonZeroUnsignedInteger;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":" * Removes hours worked and overtime hours worked from an employee in HeRon.","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"public class DeductHoursWorkedCommand extends Command {","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    public static final String COMMAND_WORD \u003d \"deductHoursWorked\";","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            + \": Deducts hours worked OR overtime from the employee identified \"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            + \"by the index number used in the last employee listing. \\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"            + \"[\" + PREFIX_HOURSWORKED + \"NO_OF_HOURS_WORKED] (must be a positive integer) \"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"            + \"[\" + PREFIX_OVERTIME + \"NO_OF_HOURS_WORKED_OVERTIME] (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_HOURSWORKED + \"2\";","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"            \"Successfully removed hours worked from employee: %1$s \"","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"                    + \"(Employee now has %2$s hour%3$s worked and \"","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"                    + \"%4$s overtime hour%5$s worked)\";","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"    private final Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    private final HoursWorked hoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    private final Overtime overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"     * Creates an DeductHoursWorkedCommand instance.","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"     * @param index of the person in the filtered employee list to remove hours worked from","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"     * @param hoursWorked Hours worked that are to be removed from the employee","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     * @param overtime Overtime (in hours) that is to be removed from the employee","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    public DeductHoursWorkedCommand(Index index, HoursWorked hoursWorked, Overtime overtime) {","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(index, hoursWorked, overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        this.hoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        this.overtime \u003d overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        Person editedPerson \u003d getUpdatedPerson(personToEdit);","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        model.setViewingPerson(editedPerson);","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getHoursWorked().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getHoursWorked().toString().equals(\"1\") ? \"\" : \"s\",","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getOvertime().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"                        editedPerson.getOvertime().toString().equals(\"1\") ? \"\" : \"s\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     * Returns a {@code Person} object that is a copy of the input person,","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"     * except with updated hours worked and overtime hours worked.","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"     * @param personToEdit The person object that is to be edited.","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Person object.","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"     * @throws CommandException if the removed amount of hours worked/overtime causes the Person\u0027s","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"     * hours worked/overtime to exceed the maximum allowed amount","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"    private Person getUpdatedPerson(Person personToEdit) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        HoursWorked newHoursWorked \u003d personToEdit.getHoursWorked();","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"            // Check if hours worked input is a positive integer before calling addHoursWorked","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"            if (isNonZeroUnsignedInteger(hoursWorked.toString())) {","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"                newHoursWorked \u003d personToEdit.getHoursWorked().removeHoursWorked(hoursWorked);","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"            String hoursWorkedString \u003d hoursWorked.toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"            String personHoursWorkedString \u003d personToEdit.getHoursWorked().toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_REMOVE_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"                    hoursWorkedString,","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"                    hoursWorkedString.equals(\"1\") ? \"hour worked\" : \"hours worked\",","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"                    personHoursWorkedString,","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"                    personHoursWorkedString.equals(\"1\") ? \"hour worked\" : \"hours worked\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        Overtime newOvertime \u003d personToEdit.getOvertime();","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"            // Check if overtime input is a positive integer before calling addOvertime","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"            if (isNonZeroUnsignedInteger(overtime.toString())) {","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"                newOvertime \u003d personToEdit.getOvertime().removeOvertime(overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"            String overtimeString \u003d overtime.toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"            String personOvertimeString \u003d personToEdit.getOvertime().toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_REMOVE_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"                    overtimeString,","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"                    overtimeString.equals(\"1\") ? \"overtime hour worked\" : \"overtime hours worked\",","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"                    personOvertimeString,","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"                    personOvertimeString.equals(\"1\") ? \"overtime hour worked\" : \"overtime hours worked\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getAddress(), personToEdit.getRole(), personToEdit.getLeaveBalance(),","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getLeavesTaken(), personToEdit.getSalary(), newHoursWorked, newOvertime,","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getCalculatedPay(), personToEdit.getTags());","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        // Short circuit if same object","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"            return true;","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        if (!(other instanceof DeductHoursWorkedCommand)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"        // State check","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand e \u003d (DeductHoursWorkedCommand) other;","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 hoursWorked.equals(e.hoursWorked)","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 overtime.equals(e.overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"danielsimre":142}},{"path":"src/main/java/seedu/address/logic/commands/DeductLeaveBalanceCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * Removes some number of leaves from an employee in HeRon.","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class DeductLeaveBalanceCommand extends Command {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    public static final String COMMAND_WORD \u003d \"deductLeaveBalance\";","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"            + \": Deducts leaves from the employee identified \"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"            + \"by the index number used in the last employee listing. \"","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"            + \"Number of leaves removed cannot be greater than the amount of leaves \"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            + \"the employee currently has. \\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"            + PREFIX_LEAVE + \"NO_OF_LEAVES (must be a positive integer) \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_LEAVE + \"2\";","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"            \"Leaves successfully removed from employee: %1$s (Employee now has %2$s leave%3$s)\";","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    private final Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    private final LeaveBalance leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * Creates a DeductLeaveBalanceCommand instance.","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * @param index of the person in the filtered employee list to remove leaves from","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * @param leaveBalance that are to be added to the employee","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    public DeductLeaveBalanceCommand(Index index, LeaveBalance leaveBalance) {","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(index, leaveBalance);","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        this.leaveBalance \u003d leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        Person editedPerson \u003d getUpdatedPerson(personToEdit);","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        model.setViewingPerson(editedPerson);","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"                editedPerson.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"                editedPerson.getLeaveBalance().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"                editedPerson.getLeaveBalance().toString().equals(\"1\") ? \"\" : \"s\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"     * Returns a {@code Person} object that is a copy of the input person,","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"     * except with an updated leave balance.","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     * @param personToEdit The person object that is to be edited.","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Person object.","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     * @throws CommandException if the removed amount of leaves causes the Person\u0027s","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * leave balance to become negative","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    private Person getUpdatedPerson(Person personToEdit) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance newLeaveBalance;","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"            newLeaveBalance \u003d personToEdit.getLeaveBalance().removeLeaves(leaveBalance);","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"            String leaveBalanceString \u003d leaveBalance.toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"            String personLeaveBalanceString \u003d personToEdit.getLeaveBalance().toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_REMOVE_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"                            leaveBalanceString,","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"                            leaveBalanceString.equals(\"1\") ? \"leave\" : \"leaves\",","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"                            personLeaveBalanceString,","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"                            personLeaveBalanceString.equals(\"1\") ? \"leave\" : \"leaves\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getAddress(), personToEdit.getRole(), newLeaveBalance,","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getLeavesTaken(), personToEdit.getSalary(), personToEdit.getHoursWorked(),","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getOvertime(), personToEdit.getCalculatedPay(), personToEdit.getTags());","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        // Short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        if (!(other instanceof DeductLeaveBalanceCommand)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"        // State check","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand e \u003d (DeductLeaveBalanceCommand) other;","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 leaveBalance.equals(e.leaveBalance);","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":114}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_DELETE_EMPLOYEE_SUCCESS \u003d \"Deleted Employee: %1$s\";","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"        if (model.isFilteredPersonListEmpty()) {","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"            // View blank","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"            model.setViewingPerson(null);","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"        } else if (personToDelete.isSamePerson(model.getViewingPerson().getPerson())) {","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"            // Employee no longer exists, switch to viewing first employee","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"            Person firstPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"            model.setViewingPerson(firstPerson);","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, personToDelete.getName()));","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":1,"-":51,"1waykiat":11}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the employee identified \"","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"            + \"by the index number used in the displayed employee list. \"","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"            + \"[\" + PREFIX_ROLE + \"ROLE] \"","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"            + \"[\" + PREFIX_LEAVE + \"LEAVES] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"            + \"[\" + PREFIX_HOURLYSALARY + \"SALARY] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"            + \"[\" + PREFIX_HOURSWORKED + \"HOURS_WORKED] \"","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"            + \"[\" + PREFIX_OVERTIME + \"OVERTIME] \"","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Employee: %1$s\";","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in HeRon.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_DUPLICATE_PHONE \u003d \"The given phone number is already used by \"","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"            + \"another employee in HeRon\";","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_DUPLICATE_EMAIL \u003d \"The given email is already used by another employee in HeRon\";","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"        if (!personToEdit.isSamePerson(editedPerson)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"            if (model.hasPerson(editedPerson)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"            if (model.hasDuplicatePhone(editedPerson) \u0026\u0026 !editedPerson.getPhone().equals(personToEdit.getPhone())) {","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PHONE);","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"            if (model.hasDuplicateEmail(editedPerson) \u0026\u0026 !editedPerson.getEmail().equals(personToEdit.getEmail())) {","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_EMAIL);","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"        if (personToEdit.isSamePerson(editedPerson)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"            if (model.hasDuplicatePhone(editedPerson) \u0026\u0026 !editedPerson.getPhone().equals(personToEdit.getPhone())) {","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PHONE);","lastModifiedDate":"2021-11-03"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"            if (model.hasDuplicateEmail(editedPerson) \u0026\u0026 !editedPerson.getEmail().equals(personToEdit.getEmail())) {","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_EMAIL);","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":127,"author":{"gitId":"1waykiat"},"content":"        model.setViewingPerson(editedPerson);","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"1waykiat"},"content":"        Role updatedRole \u003d editPersonDescriptor.getRole().orElse(personToEdit.getRole());","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance updatedLeaveBalance \u003d editPersonDescriptor.getLeaves().orElse(personToEdit.getLeaveBalance());","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"        // Edit command does not allow editing dates in leaves taken","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken updatedLeavesTaken \u003d personToEdit.getLeavesTaken();","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"        HourlySalary updatedHourlySalary \u003d editPersonDescriptor.getSalary().orElse(personToEdit.getSalary());","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"1waykiat"},"content":"        HoursWorked updatedHours \u003d editPersonDescriptor.getHoursWorked().orElse(personToEdit.getHoursWorked());","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"        Overtime updatedOvertime \u003d editPersonDescriptor.getOvertime().orElse(personToEdit.getOvertime());","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"1waykiat"},"content":"        CalculatedPay updatedCalculatedPay \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":150,"author":{"gitId":"1waykiat"},"content":"                editPersonDescriptor.getCalculatedPay().orElse(personToEdit.getCalculatedPay());","lastModifiedDate":"2021-10-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRole,","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"                updatedLeaveBalance, updatedLeavesTaken, updatedHourlySalary, updatedHours, updatedOvertime,","lastModifiedDate":"2021-10-27"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"                updatedCalculatedPay, updatedTags);","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"1waykiat"},"content":"        private Role role;","lastModifiedDate":"2021-10-07"},{"lineNumber":186,"author":{"gitId":"danielsimre"},"content":"        private LeaveBalance leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":187,"author":{"gitId":"boonhaii"},"content":"        private HourlySalary hourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"1waykiat"},"content":"        private HoursWorked hoursWorked;","lastModifiedDate":"2021-10-07"},{"lineNumber":189,"author":{"gitId":"danielsimre"},"content":"        private Overtime overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":190,"author":{"gitId":"1waykiat"},"content":"        private CalculatedPay calculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":191,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":205,"author":{"gitId":"1waykiat"},"content":"            setRole(toCopy.role);","lastModifiedDate":"2021-10-07"},{"lineNumber":206,"author":{"gitId":"danielsimre"},"content":"            setLeaves(toCopy.leaveBalance);","lastModifiedDate":"2021-10-27"},{"lineNumber":207,"author":{"gitId":"boonhaii"},"content":"            setSalary(toCopy.hourlySalary);","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"1waykiat"},"content":"            setHoursWorked(toCopy.hoursWorked);","lastModifiedDate":"2021-10-07"},{"lineNumber":209,"author":{"gitId":"danielsimre"},"content":"            setOvertime(toCopy.overtime);","lastModifiedDate":"2021-10-21"},{"lineNumber":210,"author":{"gitId":"1waykiat"},"content":"            setCalculatedPay(toCopy.calculatedPay);","lastModifiedDate":"2021-10-13"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":218,"author":{"gitId":"danielsimre"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, role, leaveBalance, hourlySalary,","lastModifiedDate":"2021-10-27"},{"lineNumber":219,"author":{"gitId":"danielsimre"},"content":"                    hoursWorked, overtime, calculatedPay, tags);","lastModifiedDate":"2021-10-27"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":254,"author":{"gitId":"1waykiat"},"content":"        public void setRole(Role role) {","lastModifiedDate":"2021-10-07"},{"lineNumber":255,"author":{"gitId":"1waykiat"},"content":"            this.role \u003d role;","lastModifiedDate":"2021-10-07"},{"lineNumber":256,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":257,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":258,"author":{"gitId":"1waykiat"},"content":"        public Optional\u003cRole\u003e getRole() {","lastModifiedDate":"2021-10-07"},{"lineNumber":259,"author":{"gitId":"1waykiat"},"content":"            return Optional.ofNullable(role);","lastModifiedDate":"2021-10-07"},{"lineNumber":260,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":261,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":262,"author":{"gitId":"danielsimre"},"content":"        public void setLeaves(LeaveBalance leaveBalance) {","lastModifiedDate":"2021-10-27"},{"lineNumber":263,"author":{"gitId":"danielsimre"},"content":"            this.leaveBalance \u003d leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":264,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":265,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":266,"author":{"gitId":"danielsimre"},"content":"        public Optional\u003cLeaveBalance\u003e getLeaves() {","lastModifiedDate":"2021-10-27"},{"lineNumber":267,"author":{"gitId":"danielsimre"},"content":"            return Optional.ofNullable(leaveBalance);","lastModifiedDate":"2021-10-27"},{"lineNumber":268,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":269,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":270,"author":{"gitId":"boonhaii"},"content":"        public void setSalary(HourlySalary hourlySalary) {","lastModifiedDate":"2021-10-11"},{"lineNumber":271,"author":{"gitId":"boonhaii"},"content":"            this.hourlySalary \u003d hourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":272,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":273,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":274,"author":{"gitId":"boonhaii"},"content":"        public Optional\u003cHourlySalary\u003e getSalary() {","lastModifiedDate":"2021-10-11"},{"lineNumber":275,"author":{"gitId":"boonhaii"},"content":"            return Optional.ofNullable(hourlySalary);","lastModifiedDate":"2021-10-11"},{"lineNumber":276,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":277,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":278,"author":{"gitId":"1waykiat"},"content":"        public void setHoursWorked(HoursWorked hours) {","lastModifiedDate":"2021-10-07"},{"lineNumber":279,"author":{"gitId":"1waykiat"},"content":"            this.hoursWorked \u003d hours;","lastModifiedDate":"2021-10-07"},{"lineNumber":280,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":281,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":282,"author":{"gitId":"1waykiat"},"content":"        public Optional\u003cHoursWorked\u003e getHoursWorked() {","lastModifiedDate":"2021-10-07"},{"lineNumber":283,"author":{"gitId":"1waykiat"},"content":"            return Optional.ofNullable(hoursWorked);","lastModifiedDate":"2021-10-07"},{"lineNumber":284,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":285,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":286,"author":{"gitId":"danielsimre"},"content":"        public void setOvertime (Overtime overtime) {","lastModifiedDate":"2021-10-14"},{"lineNumber":287,"author":{"gitId":"danielsimre"},"content":"            this.overtime \u003d overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":288,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":289,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":290,"author":{"gitId":"danielsimre"},"content":"        public Optional\u003cOvertime\u003e getOvertime() {","lastModifiedDate":"2021-10-14"},{"lineNumber":291,"author":{"gitId":"danielsimre"},"content":"            return Optional.ofNullable(overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":292,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":293,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":294,"author":{"gitId":"1waykiat"},"content":"        public void setCalculatedPay(CalculatedPay calculatedPay) {","lastModifiedDate":"2021-10-13"},{"lineNumber":295,"author":{"gitId":"1waykiat"},"content":"            this.calculatedPay \u003d calculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":296,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":297,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":298,"author":{"gitId":"1waykiat"},"content":"        public Optional\u003cCalculatedPay\u003e getCalculatedPay() {","lastModifiedDate":"2021-10-13"},{"lineNumber":299,"author":{"gitId":"1waykiat"},"content":"            return Optional.ofNullable(calculatedPay);","lastModifiedDate":"2021-10-13"},{"lineNumber":300,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":301,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":303,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":304,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":305,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":311,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":312,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":313,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":314,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":321,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":322,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":323,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":327,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":331,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":335,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":336,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":337,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":338,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getRole().equals(e.getRole())","lastModifiedDate":"2021-10-07"},{"lineNumber":339,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getLeaves().equals(e.getLeaves())","lastModifiedDate":"2021-10-07"},{"lineNumber":340,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getSalary().equals(e.getSalary())","lastModifiedDate":"2021-10-07"},{"lineNumber":341,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getHoursWorked().equals(e.getHoursWorked())","lastModifiedDate":"2021-10-07"},{"lineNumber":342,"author":{"gitId":"danielsimre"},"content":"                    \u0026\u0026 getOvertime().equals(e.getOvertime())","lastModifiedDate":"2021-10-14"},{"lineNumber":343,"author":{"gitId":"1waykiat"},"content":"                    \u0026\u0026 getCalculatedPay().equals(e.getCalculatedPay())","lastModifiedDate":"2021-10-13"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":347,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"danielsimre":35,"boonhaii":36,"beefham":1,"-":221,"1waykiat":54}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":" * Finds and lists all persons in HeRon that passes the given predicate.","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all employees who meets \"","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"            + \"all the specified conditions and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"            + \"Each condition is tagged with a prefix just like the add command.\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"            + \"For example, to search by name, use n/[name].\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"            + \"All parameters are optional. To search by salary, hours worked, overtime or number of leaves left,\"","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"            + \" use only one of the comparison operators \"","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"            + \"\u0027\u003e\u0027, \u0027\u003c\u0027, \u0027\u003e\u003d\u0027, \u0027\u003c\u003d\u0027 or \u0027\u003d\u0027 together with a number.\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"            + \"To search by date, you can specify a combination of individual dates (YYYY-MM-DD) \"","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"            + \"or date ranges. (YYYY-MM-DD:YYYY-MM-DD)\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_ROLE + \"ROLE] \"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_LEAVE + \"(\u003e/\u003e\u003d/\u003c/\u003c\u003d/\u003d)LEAVES] \"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_HOURLYSALARY + \"(\u003e/\u003e\u003d/\u003c/\u003c\u003d/\u003d)SALARY] \"","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_OVERTIME + \"(\u003e/\u003e\u003d/\u003c/\u003c\u003d/\u003d)OVERTIME] \"","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_HOURSWORKED + \"HOURS WORKED] \"","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/Alex Ben r/CEO d/2021-10-30 s/\u003e\u003d10\";","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"    private final Predicate\u003cPerson\u003e predicate;","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"     * Used for testing purposes to allow comparison of the predicates.","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"     * @return The Predicate belonging to this FindCommand.","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"    public Predicate\u003cPerson\u003e getPredicate() {","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"        return predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        if (model.getFilteredPersonList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"            // clear display","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"            model.setViewingPerson(null);","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        } else {","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"            // Else, display the first person","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"            Person firstPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"            model.setViewingPerson(firstPerson);","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"danielsimre":12,"beefham":40,"-":35,"1waykiat":3}},{"path":"src/main/java/seedu/address/logic/commands/ImportCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"import com.opencsv.bean.CsvToBeanBuilder;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.PersonInput;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.exceptions.DuplicateEmailException;","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.exceptions.DuplicatePhoneException;","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"public class ImportCommand extends Command {","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    public static final String COMMAND_WORD \u003d \"import\";","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": imports a current existing CSV file into HeRon.\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"            + \"Parameters: Absolute/Relative Path leading to desired CSV file.\\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"            + \"Example: \" + COMMAND_WORD + \" /Users/Owner/Desktop/toBeImported.csv\";","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_IMPORT_SUCCESS \u003d \"File was successfully imported.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_IMPORT_FAILURE \u003d \"Error occurred while importing the file.\\n\";","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_IMPORT_MISSING_FILE \u003d MESSAGE_IMPORT_FAILURE","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"            + \"Please check the filepath and try again.\";","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_IMPORT_FORMAT_ERROR \u003d MESSAGE_IMPORT_FAILURE","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"            + \"Please check the formatting of the data.\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"            + \"Check that all required columns are present, and there is at least one entry.\\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"            + \"Ensure that there are no entries with all empty fields in the CSV file \"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"            + \"and the number of header columns match the number of columns in all employee entries.\";","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_FIELD_MISSING_ERROR \u003d MESSAGE_IMPORT_FAILURE","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"            + \"Row %1$d: Missing \u0027%2$s\u0027 field.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_FIELD_INVALID_ERROR \u003d MESSAGE_IMPORT_FAILURE","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"            + \"Invalid Input in Row %1$d: %2$s\";","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"    public static final String INPUT_ANNOTATION_NAME_FIELD \u003d \"Name\";","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"    public static final String INPUT_ANNOTATION_PHONE_FIELD \u003d \"Contact Number\";","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"    public static final String INPUT_ANNOTATION_ADDRESS_FIELD \u003d \"Residential Address\";","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"    public static final String INPUT_ANNOTATION_EMAIL_FIELD \u003d \"Email\";","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"    public static final String INPUT_ANNOTATION_ROLE_FIELD \u003d \"Role\";","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"    private final String filepathString;","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"     * Constructor for the ImportCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"     * @param filepath The string representation of the filepath of the desired file.","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"    public ImportCommand(String filepath) {","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(filepath);","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"        this.filepathString \u003d filepath;","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"     * Executes the specific command.","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"     * @return The feedback of the command to be returned to the user","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"     * @throws CommandException If an error occurs during the import.","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"        CommandResult result \u003d importData(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"            Index firstEntryIndex \u003d ParserUtil.parseIndex(\"1\");","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"            new ViewCommand(firstEntryIndex).execute(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"boonhaii"},"content":"            // Should not happen since \"1\" is a valid index, and imported file must have at least 1 entry.","lastModifiedDate":"2021-11-01"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"            assert(false);","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"            throw new CommandException(e.getMessage());","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"        return result;","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"     * Imports the data from the csv into the existing model. Abstracted out from #execute for testing purposes.","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"     * @return The result of the import command","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"     * @throws CommandException If an error occurs while importing the data","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"    public CommandResult importData(Model model) throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"            List\u003cPerson\u003e newPersonList \u003d processCsv(this.filepathString);","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"            AddressBook newAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"            newAddressBook.setPersons(newPersonList);","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"            model.setAddressBook(newAddressBook);","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"            throw new CommandException(e.getMessage());","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"        } catch (DuplicatePersonException | DuplicateEmailException | DuplicatePhoneException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"            throw new CommandException(MESSAGE_IMPORT_FAILURE + e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"        return new CommandResult(MESSAGE_IMPORT_SUCCESS);","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"     * Parses and creates the new address book from the data in the CSV file.","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"     * @param filepath The string representation of the filepath to the desired csv file.","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"     * @return A list of Person objects to be replaced into the address book.","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"     * @throws CommandException If an error occurs during the processing of the CSV file into Person objects.","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"    public List\u003cPerson\u003e processCsv(String filepath) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"boonhaii"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"            FileReader fileReader \u003d getFileReader(filepath);","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"boonhaii"},"content":"            List\u003cPersonInput\u003e inputDataList \u003d parseCsv(fileReader);","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"boonhaii"},"content":"            List\u003cPerson\u003e personList \u003d createPersonsFromInput(inputDataList);","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"            return personList;","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"boonhaii"},"content":"            throw new CommandException(e.getMessage());","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":137,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"     * Parses the given csv file and creates a list of PersonInput objects.","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"     * @param fileReader The fileReader object of the csv file.","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"     * @return A list of PersonInput objects used to create the Person objects.","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"     * @throws CommandException If there are missing fields or formatting errors in the CSV file.","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"    @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"    // List\u003cPersonInput\u003e is the only return type of the method, or else an exception would be thrown.","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"    public List\u003cPersonInput\u003e parseCsv(FileReader fileReader) throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"        int rowNumber \u003d 1; // The row number of the data entry as shown in Excel.","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"        List\u003cPersonInput\u003e newPersonInputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"        try {","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"            Iterator\u003cPersonInput\u003e inputIterator \u003d new CsvToBeanBuilder(fileReader).withType(PersonInput.class)","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"                    .build().iterator();","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"            while (inputIterator.hasNext()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"                rowNumber++;","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"                PersonInput input \u003d inputIterator.next();","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"                newPersonInputList.add(input);","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"            return newPersonInputList;","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"        } catch (RuntimeException e) {","lastModifiedDate":"2021-10-19"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"            String[] errorDescriptorArr \u003d e.getMessage().split(\":\");","lastModifiedDate":"2021-11-01"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"            String errorMessage;","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"            if (errorDescriptorArr.length \u003d\u003d 1) {","lastModifiedDate":"2021-11-01"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"                errorMessage \u003d MESSAGE_IMPORT_FORMAT_ERROR;","lastModifiedDate":"2021-11-01"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"                throw new CommandException(errorMessage);","lastModifiedDate":"2021-11-01"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"            String[] descriptorArr \u003d errorDescriptorArr[1].split(\"\\\\\u0027\");","lastModifiedDate":"2021-11-01"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"            if (descriptorArr.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"                errorMessage \u003d MESSAGE_IMPORT_FORMAT_ERROR;","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"            } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"                String annotationField \u003d descriptorArr[1].trim();","lastModifiedDate":"2021-11-05"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"                String field \u003d getColumnTitle(annotationField); // Field naming as per header naming convention.","lastModifiedDate":"2021-11-01"},{"lineNumber":172,"author":{"gitId":"boonhaii"},"content":"                errorMessage \u003d String.format(MESSAGE_FIELD_MISSING_ERROR, rowNumber, field);","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"            throw new CommandException(errorMessage);","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"boonhaii"},"content":"     * Creates a FileReader object for a specified csv file.","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"boonhaii"},"content":"     * @param filepath The string representation of the filepath to the desired csv file.","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"boonhaii"},"content":"     * @return The FileReader object for the file in the specified filepath.","lastModifiedDate":"2021-11-05"},{"lineNumber":182,"author":{"gitId":"boonhaii"},"content":"     * @throws CommandException If the specified file with the filepath does not exist.","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"boonhaii"},"content":"    public FileReader getFileReader(String filepath) throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"boonhaii"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"boonhaii"},"content":"            FileReader fileReader \u003d new FileReader(filepath);","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"boonhaii"},"content":"            return fileReader;","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"boonhaii"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"boonhaii"},"content":"            throw new CommandException(MESSAGE_IMPORT_MISSING_FILE);","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"boonhaii"},"content":"     * Creates a List of Person objects to replace the existing employee list.","lastModifiedDate":"2021-11-05"},{"lineNumber":195,"author":{"gitId":"boonhaii"},"content":"     * @param newPersonInputList The list of PersonInput objects to create the corresponding Persons.","lastModifiedDate":"2021-11-05"},{"lineNumber":196,"author":{"gitId":"boonhaii"},"content":"     * @return A list of person objects.","lastModifiedDate":"2021-11-05"},{"lineNumber":197,"author":{"gitId":"boonhaii"},"content":"     * @throws CommandException If the given inputs are invalid, and a Person object cannot be created.","lastModifiedDate":"2021-11-05"},{"lineNumber":198,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"boonhaii"},"content":"    public List\u003cPerson\u003e createPersonsFromInput(List\u003cPersonInput\u003e newPersonInputList) throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"boonhaii"},"content":"        List\u003cPerson\u003e newPersonList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"boonhaii"},"content":"        int rowNumber \u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"boonhaii"},"content":"        for (PersonInput input : newPersonInputList) {","lastModifiedDate":"2021-10-18"},{"lineNumber":203,"author":{"gitId":"boonhaii"},"content":"            try {","lastModifiedDate":"2021-10-18"},{"lineNumber":204,"author":{"gitId":"boonhaii"},"content":"                // Required Fields","lastModifiedDate":"2021-10-19"},{"lineNumber":205,"author":{"gitId":"boonhaii"},"content":"                Name name \u003d ParserUtil.parseName(input.getName());","lastModifiedDate":"2021-10-18"},{"lineNumber":206,"author":{"gitId":"boonhaii"},"content":"                Phone phone \u003d ParserUtil.parsePhone(input.getPhone());","lastModifiedDate":"2021-10-18"},{"lineNumber":207,"author":{"gitId":"boonhaii"},"content":"                Email email \u003d ParserUtil.parseEmail(input.getEmail());","lastModifiedDate":"2021-10-18"},{"lineNumber":208,"author":{"gitId":"boonhaii"},"content":"                Address address \u003d ParserUtil.parseAddress(input.getAddress());","lastModifiedDate":"2021-10-18"},{"lineNumber":209,"author":{"gitId":"boonhaii"},"content":"                Role role \u003d ParserUtil.parseRole(input.getRole());","lastModifiedDate":"2021-10-18"},{"lineNumber":210,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":211,"author":{"gitId":"boonhaii"},"content":"                // Optional Fields, default value of 0/empty set is used if input is not provided.","lastModifiedDate":"2021-11-01"},{"lineNumber":212,"author":{"gitId":"danielsimre"},"content":"                LeaveBalance leaves \u003d buildLeave(input);","lastModifiedDate":"2021-10-27"},{"lineNumber":213,"author":{"gitId":"boonhaii"},"content":"                HourlySalary hourlySalary \u003d buildSalary(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":214,"author":{"gitId":"boonhaii"},"content":"                HoursWorked hoursWorked \u003d buildHoursWorked(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":215,"author":{"gitId":"boonhaii"},"content":"                Overtime overtime \u003d buildOvertime(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":216,"author":{"gitId":"boonhaii"},"content":"                Set\u003cTag\u003e tagList \u003d buildTags(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":217,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":218,"author":{"gitId":"boonhaii"},"content":"                newPersonList.add(new Person(name, phone, email, address, role, leaves, new LeavesTaken(), hourlySalary,","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"boonhaii"},"content":"                        hoursWorked, overtime, new CalculatedPay(\"0\"), tagList));","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"boonhaii"},"content":"                rowNumber++;","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"boonhaii"},"content":"            } catch (ParseException e) {","lastModifiedDate":"2021-10-19"},{"lineNumber":222,"author":{"gitId":"boonhaii"},"content":"                throw new CommandException(String.format(MESSAGE_FIELD_INVALID_ERROR, rowNumber, e.getMessage()));","lastModifiedDate":"2021-11-03"},{"lineNumber":223,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":224,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":225,"author":{"gitId":"boonhaii"},"content":"        return newPersonList;","lastModifiedDate":"2021-10-19"},{"lineNumber":226,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":227,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":228,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":229,"author":{"gitId":"boonhaii"},"content":"     * Creates a LeaveBalance object with the corresponding input, or a default value of 0.","lastModifiedDate":"2021-11-05"},{"lineNumber":230,"author":{"gitId":"boonhaii"},"content":"     * @param input PersonInput object created by the bean.","lastModifiedDate":"2021-11-05"},{"lineNumber":231,"author":{"gitId":"boonhaii"},"content":"     * @return A LeaveBalance object for the Person constructor.","lastModifiedDate":"2021-11-05"},{"lineNumber":232,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException If an error occurs while parsing the String input.","lastModifiedDate":"2021-11-05"},{"lineNumber":233,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":234,"author":{"gitId":"danielsimre"},"content":"    private LeaveBalance buildLeave(PersonInput input) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":235,"author":{"gitId":"boonhaii"},"content":"        return input.getLeaves() \u003d\u003d null","lastModifiedDate":"2021-10-19"},{"lineNumber":236,"author":{"gitId":"danielsimre"},"content":"                ? new LeaveBalance(\"0\")","lastModifiedDate":"2021-10-27"},{"lineNumber":237,"author":{"gitId":"danielsimre"},"content":"                : ParserUtil.parseLeaveBalance(input.getLeaves());","lastModifiedDate":"2021-11-03"},{"lineNumber":238,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":239,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":240,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":241,"author":{"gitId":"boonhaii"},"content":"     * Creates a HourlySalary object with the corresponding input, or a default value of 0.","lastModifiedDate":"2021-11-05"},{"lineNumber":242,"author":{"gitId":"boonhaii"},"content":"     * @param input PersonInput object created by the bean.","lastModifiedDate":"2021-11-05"},{"lineNumber":243,"author":{"gitId":"boonhaii"},"content":"     * @return An HourlySalary object for the Person constructor.","lastModifiedDate":"2021-11-05"},{"lineNumber":244,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException If an error occurs while parsing the String input.","lastModifiedDate":"2021-11-05"},{"lineNumber":245,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":246,"author":{"gitId":"boonhaii"},"content":"    private HourlySalary buildSalary(PersonInput input) throws ParseException {","lastModifiedDate":"2021-10-19"},{"lineNumber":247,"author":{"gitId":"boonhaii"},"content":"        return input.getSalary() \u003d\u003d null","lastModifiedDate":"2021-10-19"},{"lineNumber":248,"author":{"gitId":"boonhaii"},"content":"                ? new HourlySalary(\"0\")","lastModifiedDate":"2021-10-18"},{"lineNumber":249,"author":{"gitId":"boonhaii"},"content":"                : ParserUtil.parseSalary(input.getSalary());","lastModifiedDate":"2021-10-18"},{"lineNumber":250,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":251,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":252,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":253,"author":{"gitId":"boonhaii"},"content":"     * Creates a HoursWorked object with the corresponding input, or a default value of 0.","lastModifiedDate":"2021-11-05"},{"lineNumber":254,"author":{"gitId":"boonhaii"},"content":"     * @param input PersonInput object created by the bean.","lastModifiedDate":"2021-10-19"},{"lineNumber":255,"author":{"gitId":"boonhaii"},"content":"     * @return An HoursWorked object for the Person constructor","lastModifiedDate":"2021-10-19"},{"lineNumber":256,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException If an error occurs while parsing the String input.","lastModifiedDate":"2021-10-19"},{"lineNumber":257,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":258,"author":{"gitId":"boonhaii"},"content":"    private HoursWorked buildHoursWorked(PersonInput input) throws ParseException {","lastModifiedDate":"2021-10-19"},{"lineNumber":259,"author":{"gitId":"boonhaii"},"content":"        return input.getHoursWorked() \u003d\u003d null","lastModifiedDate":"2021-10-19"},{"lineNumber":260,"author":{"gitId":"boonhaii"},"content":"                ? new HoursWorked(\"0\")","lastModifiedDate":"2021-10-18"},{"lineNumber":261,"author":{"gitId":"boonhaii"},"content":"                : ParserUtil.parseHoursWorked(input.getHoursWorked());","lastModifiedDate":"2021-10-18"},{"lineNumber":262,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":263,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":264,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":265,"author":{"gitId":"boonhaii"},"content":"     * Creates an Overtime object with the corresponding input, or a default value of 0.","lastModifiedDate":"2021-11-05"},{"lineNumber":266,"author":{"gitId":"boonhaii"},"content":"     * @param input PersonInput object created by the bean.","lastModifiedDate":"2021-10-19"},{"lineNumber":267,"author":{"gitId":"boonhaii"},"content":"     * @return An Overtime object for the Person constructor","lastModifiedDate":"2021-10-19"},{"lineNumber":268,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException If an error occurs while parsing the String input.","lastModifiedDate":"2021-10-19"},{"lineNumber":269,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":270,"author":{"gitId":"boonhaii"},"content":"    private Overtime buildOvertime(PersonInput input) throws ParseException {","lastModifiedDate":"2021-10-19"},{"lineNumber":271,"author":{"gitId":"boonhaii"},"content":"        return input.getOvertime() \u003d\u003d null","lastModifiedDate":"2021-10-19"},{"lineNumber":272,"author":{"gitId":"boonhaii"},"content":"                ? new Overtime(\"0\")","lastModifiedDate":"2021-10-18"},{"lineNumber":273,"author":{"gitId":"boonhaii"},"content":"                : ParserUtil.parseOvertime(input.getOvertime());","lastModifiedDate":"2021-10-18"},{"lineNumber":274,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":275,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":276,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":277,"author":{"gitId":"boonhaii"},"content":"     * Creates a Set object containing all the corresponding tags for the entry, or a default value of an empty set.","lastModifiedDate":"2021-11-05"},{"lineNumber":278,"author":{"gitId":"boonhaii"},"content":"     * @param input PersonInput object created by the bean.","lastModifiedDate":"2021-10-19"},{"lineNumber":279,"author":{"gitId":"boonhaii"},"content":"     * @return A Set object for the Person constructor.","lastModifiedDate":"2021-11-05"},{"lineNumber":280,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException If an error occurs while parsing the String input.","lastModifiedDate":"2021-10-19"},{"lineNumber":281,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":282,"author":{"gitId":"boonhaii"},"content":"    private Set\u003cTag\u003e buildTags(PersonInput input) throws ParseException {","lastModifiedDate":"2021-10-19"},{"lineNumber":283,"author":{"gitId":"boonhaii"},"content":"        return (input.getTags() \u003d\u003d null || input.getTags().equals(\"\"))","lastModifiedDate":"2021-10-19"},{"lineNumber":284,"author":{"gitId":"boonhaii"},"content":"                ? new HashSet\u003c\u003e()","lastModifiedDate":"2021-10-18"},{"lineNumber":285,"author":{"gitId":"boonhaii"},"content":"                : ParserUtil.parseTags(Arrays.asList(input.getTags().split(\"/\")));","lastModifiedDate":"2021-10-18"},{"lineNumber":286,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":287,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":288,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":289,"author":{"gitId":"boonhaii"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":290,"author":{"gitId":"boonhaii"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":291,"author":{"gitId":"boonhaii"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":292,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 filepathString.equals(((ImportCommand) other).filepathString));","lastModifiedDate":"2021-10-21"},{"lineNumber":293,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":294,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":295,"author":{"gitId":"boonhaii"},"content":"    public String getFilepathString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":296,"author":{"gitId":"boonhaii"},"content":"        return this.filepathString;","lastModifiedDate":"2021-10-21"},{"lineNumber":297,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":298,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":299,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":300,"author":{"gitId":"boonhaii"},"content":"     * Gets the header naming convention of the specified field.","lastModifiedDate":"2021-11-05"},{"lineNumber":301,"author":{"gitId":"boonhaii"},"content":"     * @param field The field of PersonInput object.","lastModifiedDate":"2021-11-05"},{"lineNumber":302,"author":{"gitId":"boonhaii"},"content":"     * @return The naming convention being used in the imported csv file.","lastModifiedDate":"2021-11-05"},{"lineNumber":303,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":304,"author":{"gitId":"boonhaii"},"content":"    public String getColumnTitle(String field) {","lastModifiedDate":"2021-10-25"},{"lineNumber":305,"author":{"gitId":"boonhaii"},"content":"        switch (field) {","lastModifiedDate":"2021-10-25"},{"lineNumber":306,"author":{"gitId":"boonhaii"},"content":"        case \"name\":","lastModifiedDate":"2021-10-25"},{"lineNumber":307,"author":{"gitId":"boonhaii"},"content":"            return INPUT_ANNOTATION_NAME_FIELD;","lastModifiedDate":"2021-10-25"},{"lineNumber":308,"author":{"gitId":"boonhaii"},"content":"        case \"phone\":","lastModifiedDate":"2021-10-25"},{"lineNumber":309,"author":{"gitId":"boonhaii"},"content":"            return INPUT_ANNOTATION_PHONE_FIELD;","lastModifiedDate":"2021-10-25"},{"lineNumber":310,"author":{"gitId":"boonhaii"},"content":"        case \"address\":","lastModifiedDate":"2021-10-25"},{"lineNumber":311,"author":{"gitId":"boonhaii"},"content":"            return INPUT_ANNOTATION_ADDRESS_FIELD;","lastModifiedDate":"2021-10-25"},{"lineNumber":312,"author":{"gitId":"boonhaii"},"content":"        case \"email\":","lastModifiedDate":"2021-10-25"},{"lineNumber":313,"author":{"gitId":"boonhaii"},"content":"            return INPUT_ANNOTATION_EMAIL_FIELD;","lastModifiedDate":"2021-10-25"},{"lineNumber":314,"author":{"gitId":"boonhaii"},"content":"        case \"role\":","lastModifiedDate":"2021-10-25"},{"lineNumber":315,"author":{"gitId":"boonhaii"},"content":"            return INPUT_ANNOTATION_ROLE_FIELD;","lastModifiedDate":"2021-10-25"},{"lineNumber":316,"author":{"gitId":"boonhaii"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":317,"author":{"gitId":"boonhaii"},"content":"            assert(false);","lastModifiedDate":"2021-11-01"},{"lineNumber":318,"author":{"gitId":"boonhaii"},"content":"            return null; // Should not reach here since there are only 5 compulsory fields for import.","lastModifiedDate":"2021-11-01"},{"lineNumber":319,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":320,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":321,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":322,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":323,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":324,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"danielsimre":6,"boonhaii":317,"1waykiat":1}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all employees.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":1,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/PayCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static java.util.Objects.nonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":" * Pays a person identified using their displayed index, or all persons in the current list from the address book.","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"public class PayCommand extends Command {","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"    public static final String COMMAND_WORD \u003d \"pay\";","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"    public static final String PAY_ALL_COMMAND_PHRASE \u003d \"all\";","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"            + \": Pays the employee identified by the index number used \"","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"            + \"OR all employees in the displayed employee list.\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"            + \"Parameters: INDEX (must be a positive integer) OR \\\"all\\\"\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" 1\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"            + \"Example 2: \" + COMMAND_WORD + \" \" + PAY_ALL_COMMAND_PHRASE;","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_PAY_PERSON_SUCCESS \u003d \"Successfully paid $%1$s to employee: %2$s\";","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_PAY_ALL_SUCCESS \u003d \"Successfully paid all in the list.\";","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_ALREADY_PAID \u003d \"The employee: %1$s,\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"            + \"is already paid.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SKIP_ALREADY_PAID \u003d \"These employees have already been paid:\";","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_NO_ONE_TO_BE_PAID \u003d \"All employees in the list have already been paid.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"    // Target index of the person to pay","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"    // If empty, the command pays all persons in the current list","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"    private final Optional\u003cIndex\u003e targetIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"     * Constructs a {@code PayCommand} for paying all persons in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"    public PayCommand() {","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"        this.targetIndex \u003d Optional.empty();","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"szelongq"},"content":"     * Constructs a {@code PayCommand} for paying a specific person in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"szelongq"},"content":"     * @param targetIndex The index of the person to be paid.","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"    public PayCommand(Index targetIndex) {","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"szelongq"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"szelongq"},"content":"        this.targetIndex \u003d Optional.of(targetIndex);","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"1waykiat"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"szelongq"},"content":"        CommandResult finalResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"szelongq"},"content":"        if (targetIndex.isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"            finalResult \u003d executePayAll(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"szelongq"},"content":"        } else {","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"szelongq"},"content":"            finalResult \u003d executePayByIndex(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"szelongq"},"content":"        return finalResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"szelongq"},"content":"    private CommandResult executePayByIndex(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"szelongq"},"content":"        assert nonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"1waykiat"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"szelongq"},"content":"        // Check if the index is valid","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"szelongq"},"content":"        if (targetIndex.get().getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"1waykiat"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"szelongq"},"content":"        Person personToPay \u003d lastShownList.get(targetIndex.get().getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"        // Check if the person has already been paid","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"szelongq"},"content":"        if (personToPay.isPaid()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"szelongq"},"content":"            throw new CommandException(String.format(MESSAGE_ALREADY_PAID, personToPay));","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"szelongq"},"content":"        // Pay the person of the specified index","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"1waykiat"},"content":"        Person paidPerson \u003d createPaidPerson(personToPay);","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"1waykiat"},"content":"        model.setPerson(personToPay, paidPerson);","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"szelongq"},"content":"        // View the person that has been paid","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"1waykiat"},"content":"        model.setViewingPerson(paidPerson);","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_PAY_PERSON_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"                personToPay.getCalculatedPay().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"                paidPerson.getName().toString()));","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"szelongq"},"content":"    private CommandResult executePayAll(Model model) throws CommandException {","lastModifiedDate":"2021-10-28"},{"lineNumber":119,"author":{"gitId":"szelongq"},"content":"        assert nonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"szelongq"},"content":"        // Create a deep copy of the filtered list for viewing","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d new ArrayList\u003c\u003e(model.getFilteredPersonList());","lastModifiedDate":"2021-10-29"},{"lineNumber":122,"author":{"gitId":"szelongq"},"content":"        List\u003cPerson\u003e personsToBePaidList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"szelongq"},"content":"        List\u003cPerson\u003e paidPersonsList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"szelongq"},"content":"        List\u003cPerson\u003e personsSkippedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":126,"author":{"gitId":"szelongq"},"content":"        // If all employees in the list are already paid, throw a CommandException","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"szelongq"},"content":"        for (Person person: lastShownList) {","lastModifiedDate":"2021-11-07"},{"lineNumber":128,"author":{"gitId":"szelongq"},"content":"            if (!person.isPaid()) {","lastModifiedDate":"2021-11-07"},{"lineNumber":129,"author":{"gitId":"szelongq"},"content":"                personsToBePaidList.add(person);","lastModifiedDate":"2021-11-07"},{"lineNumber":130,"author":{"gitId":"szelongq"},"content":"            } else {","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"szelongq"},"content":"                personsSkippedList.add(person);","lastModifiedDate":"2021-11-07"},{"lineNumber":132,"author":{"gitId":"szelongq"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":133,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":134,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"szelongq"},"content":"        if (personsToBePaidList.isEmpty()) {","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"szelongq"},"content":"            throw new CommandException(MESSAGE_NO_ONE_TO_BE_PAID);","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"szelongq"},"content":"        // Pay all persons in the list only if they have not been paid","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"szelongq"},"content":"        for (Person personToPay: personsToBePaidList) {","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"szelongq"},"content":"            Person paidPerson \u003d createPaidPerson(personToPay);","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"szelongq"},"content":"            // Add changed persons to separate list first instead of","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"szelongq"},"content":"            // immediately replacing into the model","lastModifiedDate":"2021-11-07"},{"lineNumber":144,"author":{"gitId":"szelongq"},"content":"            paidPersonsList.add(paidPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":145,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":146,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":147,"author":{"gitId":"szelongq"},"content":"        assert personsToBePaidList.size() \u003d\u003d paidPersonsList.size();","lastModifiedDate":"2021-11-07"},{"lineNumber":148,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":149,"author":{"gitId":"szelongq"},"content":"        // After all payment is done successfully, replace the","lastModifiedDate":"2021-11-07"},{"lineNumber":150,"author":{"gitId":"szelongq"},"content":"        // changed persons into the model","lastModifiedDate":"2021-11-07"},{"lineNumber":151,"author":{"gitId":"szelongq"},"content":"        for (int i \u003d 0; i \u003c personsToBePaidList.size(); i++) {","lastModifiedDate":"2021-11-07"},{"lineNumber":152,"author":{"gitId":"szelongq"},"content":"            Person personToPay \u003d personsToBePaidList.get(i);","lastModifiedDate":"2021-11-07"},{"lineNumber":153,"author":{"gitId":"szelongq"},"content":"            Person paidPerson \u003d paidPersonsList.get(i);","lastModifiedDate":"2021-11-07"},{"lineNumber":154,"author":{"gitId":"szelongq"},"content":"            model.setPerson(personToPay, paidPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":155,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":156,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":157,"author":{"gitId":"szelongq"},"content":"        // View the first person in the list that has been paid","lastModifiedDate":"2021-10-27"},{"lineNumber":158,"author":{"gitId":"szelongq"},"content":"        model.setViewingPerson(paidPersonsList.get(0));","lastModifiedDate":"2021-11-07"},{"lineNumber":159,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":160,"author":{"gitId":"szelongq"},"content":"        // If there were persons who were already paid and was skipped,","lastModifiedDate":"2021-10-28"},{"lineNumber":161,"author":{"gitId":"szelongq"},"content":"        // add notifications on the persons skipped in the command result message","lastModifiedDate":"2021-10-28"},{"lineNumber":162,"author":{"gitId":"szelongq"},"content":"        String commandSuccessMessage;","lastModifiedDate":"2021-10-28"},{"lineNumber":163,"author":{"gitId":"szelongq"},"content":"        if (personsSkippedList.isEmpty()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":164,"author":{"gitId":"szelongq"},"content":"            commandSuccessMessage \u003d MESSAGE_PAY_ALL_SUCCESS;","lastModifiedDate":"2021-10-28"},{"lineNumber":165,"author":{"gitId":"szelongq"},"content":"        } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":166,"author":{"gitId":"szelongq"},"content":"            StringBuilder messageBuilder \u003d new StringBuilder(MESSAGE_PAY_ALL_SUCCESS).append(\"\\n\")","lastModifiedDate":"2021-10-28"},{"lineNumber":167,"author":{"gitId":"szelongq"},"content":"                    .append(MESSAGE_SKIP_ALREADY_PAID).append(\"\\n\");","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"szelongq"},"content":"            for (Person personSkipped: personsSkippedList) {","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"                messageBuilder.append(String.format(\"Skipped employee: %s\\n\", personSkipped.getName().toString()));","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"szelongq"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":171,"author":{"gitId":"szelongq"},"content":"            commandSuccessMessage \u003d messageBuilder.toString().trim();","lastModifiedDate":"2021-10-28"},{"lineNumber":172,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":173,"author":{"gitId":"szelongq"},"content":"        return new CommandResult(commandSuccessMessage);","lastModifiedDate":"2021-10-28"},{"lineNumber":174,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":175,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":176,"author":{"gitId":"1waykiat"},"content":"    private static Person createPaidPerson(Person personToPay) {","lastModifiedDate":"2021-10-13"},{"lineNumber":177,"author":{"gitId":"1waykiat"},"content":"        assert personToPay !\u003d null;","lastModifiedDate":"2021-10-13"},{"lineNumber":178,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":179,"author":{"gitId":"1waykiat"},"content":"        Name name \u003d personToPay.getName();","lastModifiedDate":"2021-10-13"},{"lineNumber":180,"author":{"gitId":"1waykiat"},"content":"        Phone phone \u003d personToPay.getPhone();","lastModifiedDate":"2021-10-13"},{"lineNumber":181,"author":{"gitId":"1waykiat"},"content":"        Email email \u003d personToPay.getEmail();","lastModifiedDate":"2021-10-13"},{"lineNumber":182,"author":{"gitId":"1waykiat"},"content":"        Address address \u003d personToPay.getAddress();","lastModifiedDate":"2021-10-13"},{"lineNumber":183,"author":{"gitId":"1waykiat"},"content":"        Role role \u003d personToPay.getRole();","lastModifiedDate":"2021-10-13"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaveBalance \u003d personToPay.getLeaveBalance();","lastModifiedDate":"2021-10-27"},{"lineNumber":185,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToPay.getLeavesTaken();","lastModifiedDate":"2021-10-22"},{"lineNumber":186,"author":{"gitId":"1waykiat"},"content":"        HourlySalary hourlySalary \u003d personToPay.getSalary();","lastModifiedDate":"2021-10-13"},{"lineNumber":187,"author":{"gitId":"szelongq"},"content":"        HoursWorked hoursWorked \u003d personToPay.getHoursWorked();","lastModifiedDate":"2021-11-01"},{"lineNumber":188,"author":{"gitId":"szelongq"},"content":"        Overtime overtime \u003d personToPay.getOvertime();","lastModifiedDate":"2021-11-01"},{"lineNumber":189,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":190,"author":{"gitId":"1waykiat"},"content":"        // set calcPay to 0 to represent as paid","lastModifiedDate":"2021-10-13"},{"lineNumber":191,"author":{"gitId":"szelongq"},"content":"        CalculatedPay newCalcPay \u003d new CalculatedPay(\"0.0\");","lastModifiedDate":"2021-10-21"},{"lineNumber":192,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"1waykiat"},"content":"        Set\u003cTag\u003e tags \u003d personToPay.getTags();","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, leaveBalance, leavesTaken, hourlySalary,","lastModifiedDate":"2021-10-27"},{"lineNumber":196,"author":{"gitId":"szelongq"},"content":"                hoursWorked, overtime, newCalcPay, tags);","lastModifiedDate":"2021-11-01"},{"lineNumber":197,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"1waykiat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"1waykiat"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"1waykiat"},"content":"                || (other instanceof PayCommand // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":203,"author":{"gitId":"1waykiat"},"content":"                \u0026\u0026 targetIndex.equals(((PayCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":204,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":205,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"danielsimre":14,"szelongq":118,"1waykiat":73}},{"path":"src/main/java/seedu/address/logic/commands/RemoveLeavesBeforeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * Removes all assigned leaves that occur before a given date","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" * from all employees according to a filtered list in HeRon.","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"public class RemoveLeavesBeforeCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public static final String COMMAND_WORD \u003d \"removeLeavesBefore\";","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"            + \": Removes all assigned leaves that occur before a given date \"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"            + \"from all employees according to a filtered list in HeRon. \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            + \"Parameter: DATE (of the format YYYY-MM-DD) \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"            + \" \" + PREFIX_DATE + \"2021-10-30\";","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_SUCCESS \u003d","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"            \"All assigned leaves with date before %1$s have been removed\";","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    private final LocalDate beforeDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"     * Creates a RemoveLeavesBeforeCommand instance.","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * @param beforeDate that corresponds to the assigned leaves that the user wants to remove","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    public RemoveLeavesBeforeCommand(LocalDate beforeDate) {","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(beforeDate);","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        this.beforeDate \u003d beforeDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        if (model.getFilteredPersonList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"            throw new CommandException(Messages.MESSAGE_EMPTY_FILTERED_LIST);","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        // Remove dates from all persons in the filtered list","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        for (Person personToEdit : lastShownList) {","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"            Person personWithDatesRemoved \u003d getUpdatedPerson(personToEdit);","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"            model.setPerson(personToEdit, personWithDatesRemoved);","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        // View the first person in the list","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        Index indexOfFirstPerson \u003d Index.fromZeroBased(0);","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        Person personToView \u003d lastShownList.get(indexOfFirstPerson.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        model.setViewingPerson(personToView);","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, beforeDate));","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"     * Returns a {@code Person} object that is a copy of the input person, except with an updated leaves taken list.","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     * @param personToEdit The person object that is to be edited.","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Person object.","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    private Person getUpdatedPerson(Person personToEdit) {","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        return new Person(","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getAddress(),","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getRole(), personToEdit.getLeaveBalance(),","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getLeavesTaken().removeDatesBefore(beforeDate), personToEdit.getSalary(),","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getHoursWorked(), personToEdit.getOvertime(), personToEdit.getCalculatedPay(),","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"                personToEdit.getTags());","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        // Short circuit if same object","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"            return true;","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        if (!(other instanceof RemoveLeavesBeforeCommand)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        // State check","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesBeforeCommand e \u003d (RemoveLeavesBeforeCommand) other;","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        return beforeDate.equals(e.beforeDate);","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"danielsimre":98}},{"path":"src/main/java/seedu/address/logic/commands/SetOvertimePayRateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":" * Sets the pay rate for overtime in future calculations for payroll.","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"public class SetOvertimePayRateCommand extends Command {","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"    public static final String COMMAND_WORD \u003d \"setOvertimePayRate\";","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"            + \": Sets the pay rate for overtime in future calculations for payroll.\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"            + \"Parameters: NEW_OVERTIME_PAY_RATE (must be a number from 1 to 10,\"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"            + \" with at most 5 decimal places)\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1.75\";","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_SET_RATE_SUCCESS \u003d \"New overtime pay rate: %1$s\";","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"    private final OvertimePayRate newOvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"    public SetOvertimePayRateCommand(OvertimePayRate newOvertimePayRate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"        this.newOvertimePayRate \u003d newOvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"        model.setOvertimePayRate(newOvertimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"        return new CommandResult(String.format(MESSAGE_SET_RATE_SUCCESS, newOvertimePayRate));","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"                || (other instanceof SetOvertimePayRateCommand // instanceof handles nulls","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"                \u0026\u0026 newOvertimePayRate.equals(((SetOvertimePayRateCommand) other).newOvertimePayRate)); // state check","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"szelongq":45}},{"path":"src/main/java/seedu/address/logic/commands/StartPayrollCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":" * Calculates the payroll for all employees in the address book according to the","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":" * how much work has been done at the current time.","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":" * After that, marks all employees as awaiting payment of the calculated amount","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":" * and resets their hours worked and overtime to zero.","lastModifiedDate":"2021-11-01"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"public class StartPayrollCommand extends Command {","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"    public static final String COMMAND_WORD \u003d \"startPayroll\";","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Calculates the payroll for all employees.\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_NOT_PAID \u003d \"There are employees who still have payment due: %1$s\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"            + \"Please pay all employees first before starting a new payroll.\";","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_START_PAYROLL_SUCCESS \u003d \"Payroll done.\";","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_NO_ONE_TO_PAY \u003d \"There are no employees to be paid. Maybe try adding employees?\";","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"        // Create a deep copy of the filtered list for viewing","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e(model.getFilteredPersonList());","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"        // Create a second list for storing changed persons","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"        List\u003cPerson\u003e calculatedPersonsList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"        // First, check if the employee list is empty","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"            throw new CommandException(MESSAGE_NO_ONE_TO_PAY);","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"        // Secondly, check if there are any unpaid employees","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"        for (Person personToCalculatePay: personList) {","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"            /*","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"             * An exception is thrown if the employee to be calculated for still","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"             * has a previous calculated pay that has not been paid yet.","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"szelongq"},"content":"             */","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"szelongq"},"content":"            if (!personToCalculatePay.isPaid()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"szelongq"},"content":"                throw new CommandException(String.format(MESSAGE_NOT_PAID, personToCalculatePay.getName()));","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"szelongq"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"szelongq"},"content":"        // Get the current set pay rate for overtime","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate overtimePayRate \u003d model.getOvertimePayRate();","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"szelongq"},"content":"        assert overtimePayRate !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"szelongq"},"content":"        // If there are no unpaid employees, proceed with calculating payroll","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"szelongq"},"content":"        for (Person personToCalculatePay: personList) {","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"szelongq"},"content":"            HourlySalary salary \u003d personToCalculatePay.getSalary();","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"szelongq"},"content":"            HoursWorked hoursWorked \u003d personToCalculatePay.getHoursWorked();","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"szelongq"},"content":"            Overtime overtime \u003d personToCalculatePay.getOvertime();","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"            CalculatedPay calculatedPay \u003d calculatePay(salary, hoursWorked, overtime, overtimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"            // Set the employee to be owed the calculated pay","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"szelongq"},"content":"            Person personWithCalculatedPay \u003d createPersonWithCalculatedPay(personToCalculatePay, calculatedPay);","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"szelongq"},"content":"            // and reset their hours worked and overtime to zero","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"szelongq"},"content":"            Person personWithPayrollDone \u003d createPersonWithZeroHoursWorkedAndOvertime(personWithCalculatedPay);","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"szelongq"},"content":"            // Store the changed person in a deep copy list first rather than","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"szelongq"},"content":"            // immediately replacing into the model","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"szelongq"},"content":"            calculatedPersonsList.add(personWithPayrollDone);","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"szelongq"},"content":"        assert personList.size() \u003d\u003d calculatedPersonsList.size();","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"szelongq"},"content":"        // After all calculations have been successfully done,","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"szelongq"},"content":"        // replace the persons with calculated payroll into the model","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"szelongq"},"content":"        for (int i \u003d 0; i \u003c personList.size(); i++) {","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"szelongq"},"content":"            Person personToCalculatePay \u003d personList.get(i);","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"szelongq"},"content":"            Person personWithPayrollDone \u003d calculatedPersonsList.get(i);","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"szelongq"},"content":"            model.setPerson(personToCalculatePay, personWithPayrollDone);","lastModifiedDate":"2021-11-01"},{"lineNumber":99,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"        // View the first person in the whole list of employees","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"szelongq"},"content":"        model.setViewingPerson(model.getFilteredPersonList().get(0));","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"szelongq"},"content":"        return new CommandResult(String.format(MESSAGE_START_PAYROLL_SUCCESS));","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"szelongq"},"content":"    private CalculatedPay calculatePay(HourlySalary salary, HoursWorked hoursWorked, Overtime overtime,","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"szelongq"},"content":"                                       OvertimePayRate overtimePayRate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"szelongq"},"content":"        assert salary !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"szelongq"},"content":"        assert hoursWorked !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"szelongq"},"content":"        assert overtime !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"szelongq"},"content":"        assert overtimePayRate !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":114,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":115,"author":{"gitId":"szelongq"},"content":"        double normalPay \u003d salary.value * hoursWorked.value;","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"szelongq"},"content":"        double overtimePay \u003d overtimePayRate.value * salary.value * overtime.value;","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"szelongq"},"content":"        // Check that the pay should not be negative","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"szelongq"},"content":"        assert normalPay \u003e\u003d 0;","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"szelongq"},"content":"        assert overtimePay \u003e\u003d 0;","lastModifiedDate":"2021-11-01"},{"lineNumber":121,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"szelongq"},"content":"        // Ensure that the total pay is rounded to 2 decimal places.","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"szelongq"},"content":"        String totalRoundedPay \u003d String.format(\"%.2f\", normalPay + overtimePay);","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"szelongq"},"content":"        return new CalculatedPay(totalRoundedPay);","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"szelongq"},"content":"    private Person createPersonWithCalculatedPay(Person person, CalculatedPay newCalculatedPay) {","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"szelongq"},"content":"        assert person !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"szelongq"},"content":"        assert newCalculatedPay !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"szelongq"},"content":"        Name name \u003d person.getName();","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"szelongq"},"content":"        Phone phone \u003d person.getPhone();","lastModifiedDate":"2021-11-01"},{"lineNumber":134,"author":{"gitId":"szelongq"},"content":"        Email email \u003d person.getEmail();","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"szelongq"},"content":"        Address address \u003d person.getAddress();","lastModifiedDate":"2021-11-01"},{"lineNumber":136,"author":{"gitId":"szelongq"},"content":"        Role role \u003d person.getRole();","lastModifiedDate":"2021-11-01"},{"lineNumber":137,"author":{"gitId":"szelongq"},"content":"        LeaveBalance leaves \u003d person.getLeaveBalance();","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"szelongq"},"content":"        LeavesTaken leavesTaken \u003d person.getLeavesTaken();","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"szelongq"},"content":"        HourlySalary hourlySalary \u003d person.getSalary();","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"szelongq"},"content":"        HoursWorked hoursWorked \u003d person.getHoursWorked();","lastModifiedDate":"2021-11-01"},{"lineNumber":141,"author":{"gitId":"szelongq"},"content":"        Overtime overtime \u003d person.getOvertime();","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"szelongq"},"content":"        // New calculatedPay taken from input parameter","lastModifiedDate":"2021-11-01"},{"lineNumber":143,"author":{"gitId":"szelongq"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();","lastModifiedDate":"2021-11-01"},{"lineNumber":144,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":145,"author":{"gitId":"szelongq"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken, hourlySalary,","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"szelongq"},"content":"                hoursWorked, overtime, newCalculatedPay, tags);","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"szelongq"},"content":"    private Person createPersonWithZeroHoursWorkedAndOvertime(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":150,"author":{"gitId":"szelongq"},"content":"        assert person !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"szelongq"},"content":"        Name name \u003d person.getName();","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"szelongq"},"content":"        Phone phone \u003d person.getPhone();","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"szelongq"},"content":"        Email email \u003d person.getEmail();","lastModifiedDate":"2021-11-01"},{"lineNumber":155,"author":{"gitId":"szelongq"},"content":"        Address address \u003d person.getAddress();","lastModifiedDate":"2021-11-01"},{"lineNumber":156,"author":{"gitId":"szelongq"},"content":"        Role role \u003d person.getRole();","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"szelongq"},"content":"        LeaveBalance leaves \u003d person.getLeaveBalance();","lastModifiedDate":"2021-11-01"},{"lineNumber":158,"author":{"gitId":"szelongq"},"content":"        LeavesTaken leavesTaken \u003d person.getLeavesTaken();","lastModifiedDate":"2021-11-01"},{"lineNumber":159,"author":{"gitId":"szelongq"},"content":"        HourlySalary hourlySalary \u003d person.getSalary();","lastModifiedDate":"2021-11-01"},{"lineNumber":160,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":161,"author":{"gitId":"szelongq"},"content":"        // reset hours worked and overtime to zero","lastModifiedDate":"2021-11-01"},{"lineNumber":162,"author":{"gitId":"szelongq"},"content":"        HoursWorked zeroHours \u003d new HoursWorked(\"0\");","lastModifiedDate":"2021-11-01"},{"lineNumber":163,"author":{"gitId":"szelongq"},"content":"        Overtime zeroOvertime \u003d new Overtime(\"0\");","lastModifiedDate":"2021-11-01"},{"lineNumber":164,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":165,"author":{"gitId":"szelongq"},"content":"        CalculatedPay calculatedPay \u003d person.getCalculatedPay();","lastModifiedDate":"2021-11-01"},{"lineNumber":166,"author":{"gitId":"szelongq"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();","lastModifiedDate":"2021-11-01"},{"lineNumber":167,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"szelongq"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken, hourlySalary,","lastModifiedDate":"2021-11-01"},{"lineNumber":169,"author":{"gitId":"szelongq"},"content":"                zeroHours, zeroOvertime, calculatedPay, tags);","lastModifiedDate":"2021-11-01"},{"lineNumber":170,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":173,"author":{"gitId":"szelongq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-06"},{"lineNumber":174,"author":{"gitId":"szelongq"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-06"},{"lineNumber":175,"author":{"gitId":"szelongq"},"content":"                || (other instanceof StartPayrollCommand); // instanceof handles nulls;","lastModifiedDate":"2021-10-22"},{"lineNumber":176,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":177,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"danielsimre":1,"szelongq":174,"boonhaii":1,"1waykiat":1}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":" * Views the details of the person identified using it\u0027s displayed index on the InfoPanel.","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"public class ViewCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"            + \": Views the details of the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2\";","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Viewing person: %1$s\";","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"    public ViewCommand(Index targetIndex) {","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"        Person personToView \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"        model.setViewingPerson(personToView);","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"        return new CommandResult(String.format(MESSAGE_VIEW_SUCCESS, personToView));","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"1waykiat":55}},{"path":"src/main/java/seedu/address/logic/commands/ViewOvertimePayRateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":" * Displays the currently set pay rate for overtime.","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"public class ViewOvertimePayRateCommand extends Command {","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"    public static final String COMMAND_WORD \u003d \"viewOvertimePayRate\";","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the currently set pay rate for overtime.\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    public static final String SHOWING_RATE_MESSAGE \u003d \"Current overtime pay rate: %1$s\";","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate overtimePayRate \u003d model.getOvertimePayRate();","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"        return new CommandResult(String.format(SHOWING_RATE_MESSAGE, overtimePayRate));","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"szelongq":23}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_ROLE,","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"                        PREFIX_LEAVE, PREFIX_HOURLYSALARY, PREFIX_HOURSWORKED, PREFIX_OVERTIME, PREFIX_TAG);","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ROLE,","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"                PREFIX_LEAVE, PREFIX_HOURLYSALARY, PREFIX_HOURSWORKED, PREFIX_OVERTIME)","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaveBalance \u003d ParserUtil.parseLeaveBalance(argMultimap.getValue(PREFIX_LEAVE).get());","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        // Add command does not allow adding of dates to leavesTaken","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d new LeavesTaken();","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        HourlySalary hourlySalary \u003d ParserUtil.parseSalary(argMultimap.getValue(PREFIX_HOURLYSALARY).get());","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"        HoursWorked hoursWorked \u003d ParserUtil.parseHoursWorked(argMultimap.getValue(PREFIX_HOURSWORKED).get());","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d ParserUtil.parseOvertime(argMultimap.getValue(PREFIX_OVERTIME).get());","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"        CalculatedPay calculatedPay \u003d new CalculatedPay(\"0\");","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        Person person \u003d new Person(name, phone, email, address, role, leaveBalance, leavesTaken,","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"                hourlySalary, hoursWorked, overtime, calculatedPay, tagList);","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"danielsimre":12,"boonhaii":12,"-":58,"1waykiat":2}},{"path":"src/main/java/seedu/address/logic/parser/AddHoursWorkedCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_HOURS_WORKED_INPUT;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_OVERTIME_INPUT;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.StringUtil.isNonNegativeInteger;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddHoursWorkedCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":" * Parses input arguments and creates a new AddHoursWorkedCommand object.","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"public class AddHoursWorkedCommandParser implements Parser\u003cAddHoursWorkedCommand\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} of arguments in the context of the AddHoursWorkedCommand","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * and returns a AddHoursWorkedCommand object for execution.","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @param args A string representing the user\u0027s input.","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @return A new AddHoursWorkedCommand object.","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     * or an invalid integer input for the number of hours is given.","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    public AddHoursWorkedCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"                PREFIX_HOURSWORKED, PREFIX_OVERTIME);","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"                    AddHoursWorkedCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        // If both prefixes are not present","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        if (argMultimap.getValue(PREFIX_HOURSWORKED).isEmpty()","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 argMultimap.getValue(PREFIX_OVERTIME).isEmpty()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"                    AddHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        // If either prefix contains a 0, reject the input","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        if (argMultimap.getValue(PREFIX_HOURSWORKED).isPresent()","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 argMultimap.getValue(PREFIX_HOURSWORKED).get().equals(\"0\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_HOURS_WORKED_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"                    AddHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        if (argMultimap.getValue(PREFIX_OVERTIME).isPresent()","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 argMultimap.getValue(PREFIX_OVERTIME).get().equals(\"0\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_OVERTIME_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"                    AddHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        String hoursWorkedString \u003d argMultimap.getValue(PREFIX_HOURSWORKED).orElse(\"0\");","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        String overtimeString \u003d argMultimap.getValue(PREFIX_OVERTIME).orElse(\"0\");","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        return new AddHoursWorkedCommand(index, parseHoursWorkedString(hoursWorkedString),","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"                parseOvertimeString(overtimeString));","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} that represents the number of hours worked into a","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     * HoursWorked object that contains that number of hours worked.","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     * @param hoursWorkedString A string representing the number of hours worked.","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     * @return A new HoursWorked object.","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if an invalid integer input for the hours worked is given.","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"    private HoursWorked parseHoursWorkedString(String hoursWorkedString) throws ParseException {","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        if (!isNonNegativeInteger(hoursWorkedString)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_HOURS_WORKED_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"                    AddHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hoursWorked;","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"            hoursWorked \u003d new HoursWorked(hoursWorkedString);","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_HOURS_WORKED_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"                    AddHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        return hoursWorked;","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} that represents the number of overtime hours worked into a","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"     * Overtime object that contains that number of overtime hours worked.","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"     * @param overtimeString A string representing the number of overtime hours worked.","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"     * @return A new Overtime object.","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if an invalid integer input for the overtime hours worked is given.","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    private Overtime parseOvertimeString(String overtimeString) throws ParseException {","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"        if (!isNonNegativeInteger(overtimeString)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_OVERTIME_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"                    AddHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime;","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"            overtime \u003d new Overtime(overtimeString);","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_OVERTIME_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"                    AddHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        return overtime;","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"danielsimre":118}},{"path":"src/main/java/seedu/address/logic/parser/AddLeaveBalanceCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_LEAVES_INPUT;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.StringUtil.isNonZeroUnsignedInteger;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddLeaveBalanceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * Parses input arguments and creates a new AddLeaveBalanceCommand object.","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class AddLeaveBalanceCommandParser implements Parser\u003cAddLeaveBalanceCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} of arguments in the context of the AddLeaveBalanceCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     * and returns a AddLeaveBalanceCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @param args A string representing the user\u0027s input.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @return A new AddLeaveBalanceCommand object.","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * or an invalid integer input for the number of leaves is given.","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public AddLeaveBalanceCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"                PREFIX_LEAVE);","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"                    AddLeaveBalanceCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"        String numberOfLeavesString \u003d argMultimap.getValue(PREFIX_LEAVE).orElse(\"\");","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        // If prefix is missing","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        if (numberOfLeavesString.equals(\"\")) {","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"                    AddLeaveBalanceCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        return new AddLeaveBalanceCommand(index, parseLeaveString(numberOfLeavesString));","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} that represents a number of leaves into a","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"     * LeaveBalance object that contains that number of leaves.","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"     * @param numberOfLeavesString A string representing the number of leaves.","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * @return A new LeaveBalance object.","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if an invalid integer input for the number of leaves is given.","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"    private LeaveBalance parseLeaveString(String numberOfLeavesString) throws ParseException {","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        // If a non-positive integer is given, reject the input","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        if (!isNonZeroUnsignedInteger(numberOfLeavesString)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_LEAVES_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"                    AddLeaveBalanceCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaveBalance;","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"            leaveBalance \u003d new LeaveBalance(numberOfLeavesString);","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_LEAVES_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"                    AddLeaveBalanceCommand.MESSAGE_USAGE), iae);","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        return leaveBalance;","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":72,"boonhaii":3}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddHoursWorkedCommand;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddLeaveBalanceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AssignLeaveCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.DeductHoursWorkedCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.DeductLeaveBalanceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"import seedu.address.logic.commands.PayCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.RemoveLeavesBeforeCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.SetOvertimePayRateCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.StartPayrollCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"import seedu.address.logic.commands.ViewCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.ViewOvertimePayRateCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        case AddLeaveBalanceCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"            return new AddLeaveBalanceCommandParser().parse(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        case DeductLeaveBalanceCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"            return new DeductLeaveBalanceCommandParser().parse(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"        case AssignLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"            return new AssignLeaveCommandParser().parse(arguments);","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        case RemoveLeavesBeforeCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"            return new RemoveLeavesBeforeCommandParser().parse(arguments);","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        case AddHoursWorkedCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"            return new AddHoursWorkedCommandParser().parse(arguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"        case DeductHoursWorkedCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"            return new DeductHoursWorkedCommandParser().parse(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"        case StartPayrollCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"szelongq"},"content":"            return new StartPayrollCommand();","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"1waykiat"},"content":"        case PayCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"1waykiat"},"content":"            return new PayCommandParser().parse(arguments);","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"        case ImportCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"            return new ImportCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"1waykiat"},"content":"        case ViewCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"1waykiat"},"content":"            return new ViewCommandParser().parse(arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"szelongq"},"content":"        case ViewOvertimePayRateCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"szelongq"},"content":"            return new ViewOvertimePayRateCommand();","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"szelongq"},"content":"        case SetOvertimePayRateCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"szelongq"},"content":"            return new SetOvertimePayRateCommandParser().parse(arguments);","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":24,"szelongq":12,"boonhaii":4,"-":76,"1waykiat":8}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"    public String toString() {","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"        return argMultimap.toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"beefham":5,"-":60}},{"path":"src/main/java/seedu/address/logic/parser/AssignLeaveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AssignLeaveCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" * Parses input arguments and creates a new AssignLeaveCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"public class AssignLeaveCommandParser implements Parser\u003cAssignLeaveCommand\u003e {","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} of arguments in the context of the AssignLeaveCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * and returns a AssignLeaveCommand object for execution.","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @param args A string representing the user\u0027s input.","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @return A new AssignLeaveCommand object.","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * or an invalid date input is given.","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    public AssignLeaveCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"                PREFIX_DATE);","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        Index index;","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"                    AssignLeaveCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        String dateString \u003d argMultimap.getValue(PREFIX_DATE).orElse(\"\");","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        // If prefix is missing","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        if (dateString.equals(\"\")) {","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"                    AssignLeaveCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        LocalDate date;","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"            date \u003d LocalDate.parse(dateString);","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATE_FORMAT,","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"                    AssignLeaveCommand.MESSAGE_USAGE), dtpe);","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        return new AssignLeaveCommand(index, date);","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"danielsimre":60}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    public static final Prefix PREFIX_LEAVE \u003d new Prefix(\"l/\");","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    public static final Prefix PREFIX_HOURLYSALARY \u003d new Prefix(\"s/\");","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"    public static final Prefix PREFIX_HOURSWORKED \u003d new Prefix(\"hw/\");","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    public static final Prefix PREFIX_OVERTIME \u003d new Prefix(\"o/\");","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"danielsimre":2,"boonhaii":4,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/DeductHoursWorkedCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_HOURS_WORKED_INPUT;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_OVERTIME_INPUT;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.StringUtil.isNonNegativeInteger;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.DeductHoursWorkedCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":" * Parses input arguments and creates a new DeductHoursWorkedCommand object.","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"public class DeductHoursWorkedCommandParser implements Parser\u003cDeductHoursWorkedCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} of arguments in the context of the DeductHoursWorkedCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * and returns a DeductHoursWorkedCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param args A string representing the user\u0027s input.","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @return A new DeductHoursWorkedCommand object.","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     * or an invalid integer input for the number of hours is given.","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    public DeductHoursWorkedCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"                PREFIX_HOURSWORKED, PREFIX_OVERTIME);","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        Index index;","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"                    DeductHoursWorkedCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        // If both prefixes are not present","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        if (argMultimap.getValue(PREFIX_HOURSWORKED).isEmpty()","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 argMultimap.getValue(PREFIX_OVERTIME).isEmpty()) {","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"                    DeductHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        // If either prefix contains a 0, reject the input","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        if (argMultimap.getValue(PREFIX_HOURSWORKED).isPresent()","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 argMultimap.getValue(PREFIX_HOURSWORKED).get().equals(\"0\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_HOURS_WORKED_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"                    DeductHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        if (argMultimap.getValue(PREFIX_OVERTIME).isPresent()","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 argMultimap.getValue(PREFIX_OVERTIME).get().equals(\"0\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_OVERTIME_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"                    DeductHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        String hoursWorkedString \u003d argMultimap.getValue(PREFIX_HOURSWORKED).orElse(\"0\");","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        String overtimeString \u003d argMultimap.getValue(PREFIX_OVERTIME).orElse(\"0\");","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        return new DeductHoursWorkedCommand(index, parseHoursWorkedString(hoursWorkedString),","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"                parseOvertimeString(overtimeString));","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} that represents the number of hours worked into a","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * HoursWorked object that contains that number of hours worked.","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * @param hoursWorkedString A string representing the number of hours worked.","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     * @return A new HoursWorked object.","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if an invalid integer input for the hours worked is given.","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"    private HoursWorked parseHoursWorkedString(String hoursWorkedString) throws ParseException {","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        if (!isNonNegativeInteger(hoursWorkedString)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_HOURS_WORKED_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"                    DeductHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hoursWorked;","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"            hoursWorked \u003d new HoursWorked(hoursWorkedString);","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_HOURS_WORKED_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"                    DeductHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        return hoursWorked;","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} that represents the number of overtime hours worked into a","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"     * Overtime object that contains that number of overtime hours worked.","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"     * @param overtimeString A string representing the number of overtime hours worked.","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"     * @return A new Overtime object.","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if an invalid integer input for the overtime hours worked is given.","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"    private Overtime parseOvertimeString(String overtimeString) throws ParseException {","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"        if (!isNonNegativeInteger(overtimeString)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_OVERTIME_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"                    DeductHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime;","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"            overtime \u003d new Overtime(overtimeString);","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_OVERTIME_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"                    DeductHoursWorkedCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        return overtime;","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"danielsimre":117}},{"path":"src/main/java/seedu/address/logic/parser/DeductLeaveBalanceCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_LEAVES_INPUT;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.StringUtil.isNonZeroUnsignedInteger;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.DeductLeaveBalanceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * Parses input arguments and creates a new DeductLeaveBalanceCommand object.","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class DeductLeaveBalanceCommandParser implements Parser\u003cDeductLeaveBalanceCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} of arguments in the context of the DeductLeaveBalanceCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     * and returns a DeductLeaveBalanceCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @param args A string representing the user\u0027s input.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @return A new DeductLeaveBalanceCommand object.","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * or an invalid integer input for the number of leaves is given.","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public DeductLeaveBalanceCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"                PREFIX_LEAVE);","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"                    DeductLeaveBalanceCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"        String numberOfLeavesString \u003d argMultimap.getValue(PREFIX_LEAVE).orElse(\"\");","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        // If prefix is missing","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        if (numberOfLeavesString.equals(\"\")) {","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"                    DeductLeaveBalanceCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        return new DeductLeaveBalanceCommand(index, parseLeaveString(numberOfLeavesString));","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} that represents a number of leaves into a","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"     * LeaveBalance object that contains that number of leaves.","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * @param numberOfLeavesString A string representing the number of leaves.","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     * @return A new LeaveBalance object.","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if an invalid integer input for the number of leaves is given.","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    private LeaveBalance parseLeaveString(String numberOfLeavesString) throws ParseException {","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        // If a non-positive integer is given, reject the input","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        if (!isNonZeroUnsignedInteger(numberOfLeavesString)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_LEAVES_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"                    DeductLeaveBalanceCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaveBalance;","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"            leaveBalance \u003d new LeaveBalance(numberOfLeavesString);","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_LEAVES_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"                    DeductLeaveBalanceCommand.MESSAGE_USAGE), iae);","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        return leaveBalance;","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":73,"boonhaii":3}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"                        PREFIX_ROLE, PREFIX_LEAVE, PREFIX_HOURLYSALARY, PREFIX_HOURSWORKED, PREFIX_OVERTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"                        PREFIX_TAG);","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"            editPersonDescriptor.setRole(ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get()));","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"        if (argMultimap.getValue(PREFIX_LEAVE).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"            editPersonDescriptor.setLeaves(ParserUtil.parseLeaveBalance(argMultimap.getValue(PREFIX_LEAVE).get()));","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"        if (argMultimap.getValue(PREFIX_HOURLYSALARY).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"            editPersonDescriptor.setSalary(ParserUtil.parseSalary(argMultimap.getValue(PREFIX_HOURLYSALARY).get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"        if (argMultimap.getValue(PREFIX_HOURSWORKED).isPresent()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"            editPersonDescriptor.setHoursWorked(","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"1waykiat"},"content":"                    ParserUtil.parseHoursWorked(argMultimap.getValue(PREFIX_HOURSWORKED).get()));","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        if (argMultimap.getValue(PREFIX_OVERTIME).isPresent()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"            editPersonDescriptor.setOvertime(","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"                    ParserUtil.parseOvertime(argMultimap.getValue(PREFIX_OVERTIME).get()));","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"danielsimre":8,"boonhaii":5,"-":81,"1waykiat":12}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FINDDATE_FORMAT;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"import javafx.util.Pair;","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.AddressContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.EmailContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursLessThanEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursLessThanPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursMoreThanEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursMoreThanPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveLessThanEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveLessThanPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveMoreThanEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveMoreThanPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.predicates.LeavesTakenContainsDatesPredicate;","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeLessThanEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeLessThanPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeMoreThanEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeMoreThanPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.PersonIsPaidPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.PhoneNumberMatchesPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.RoleContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsLessThanEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsLessThanPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsMoreThanEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsMoreThanPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.TagContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"    private enum CompareType {","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"        LESS_THAN_EQUAL, LESS_THAN, EQUAL, MORE_THAN, MORE_THAN_EQUAL","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"    private static final String UNPAID_PREDICATE_KEYWORD \u003d \"unpaid\";","lastModifiedDate":"2021-11-02"},{"lineNumber":67,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":76,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"beefham"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"beefham"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_ROLE,","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"                        PREFIX_LEAVE, PREFIX_DATE, PREFIX_HOURLYSALARY, PREFIX_HOURSWORKED, PREFIX_TAG,","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"                        PREFIX_OVERTIME);","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"beefham"},"content":"        String preamble \u003d argMultimap.getPreamble().trim();","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"beefham"},"content":"        if (trimmedArgs.isEmpty() \u0026\u0026 preamble.isEmpty()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"beefham"},"content":"            // no arguments provided to the command","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"beefham"},"content":"        if (!preamble.isBlank() \u0026\u0026 !preamble.equals(UNPAID_PREDICATE_KEYWORD)) { // preamble that is not \u0027unpaid\u0027","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"beefham"},"content":"            throw new ParseException(","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"beefham"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"beefham"},"content":"        ArrayList\u003cPredicate\u003cPerson\u003e\u003e filters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"beefham"},"content":"        // Check if prefix exists and add the relevant predicate into the list of filters","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"beefham"},"content":"        if (preamble.equals(UNPAID_PREDICATE_KEYWORD)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"beefham"},"content":"            filters.add(new PersonIsPaidPredicate());","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"beefham"},"content":"            String nameKeywordValue \u003d argMultimap.getValue(PREFIX_NAME).get();","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"beefham"},"content":"            checkNotBlankValue(nameKeywordValue);","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"beefham"},"content":"            String[] nameKeywords \u003d nameKeywordValue.split(\"\\\\s+\");","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"beefham"},"content":"            filters.add(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"beefham"},"content":"            String phoneKeywordValue \u003d argMultimap.getValue(PREFIX_PHONE).get();","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"beefham"},"content":"            checkNotBlankValue(phoneKeywordValue);","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"beefham"},"content":"            String[] phoneKeyNumbers \u003d phoneKeywordValue.split(\"\\\\s+\");","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"beefham"},"content":"            filters.add(new PhoneNumberMatchesPredicate(Arrays.asList(phoneKeyNumbers)));","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"beefham"},"content":"            String tagKeywordValue \u003d argMultimap.getValue(PREFIX_TAG).get();","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"beefham"},"content":"            checkNotBlankValue(tagKeywordValue);","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"beefham"},"content":"            String[] tagKeywords \u003d tagKeywordValue.split(\"\\\\s+\");","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"beefham"},"content":"            filters.add(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"beefham"},"content":"            String emailKeywordValue \u003d argMultimap.getValue(PREFIX_EMAIL).get();","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"beefham"},"content":"            checkNotBlankValue(emailKeywordValue);","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"beefham"},"content":"            String[] emailKeywords \u003d emailKeywordValue.split(\"\\\\s+\");","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"beefham"},"content":"            filters.add(new EmailContainsKeywordsPredicate(Arrays.asList(emailKeywords)));","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"beefham"},"content":"            String addressKeywordValue \u003d argMultimap.getValue(PREFIX_ADDRESS).get();","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"beefham"},"content":"            checkNotBlankValue(addressKeywordValue);","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"beefham"},"content":"            String[] addressKeywords \u003d addressKeywordValue.split(\"\\\\s+\");","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"beefham"},"content":"            filters.add(new AddressContainsKeywordsPredicate(Arrays.asList(addressKeywords)));","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"beefham"},"content":"            String roleKeywordValue \u003d argMultimap.getValue(PREFIX_ROLE).get();","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"beefham"},"content":"            checkNotBlankValue(roleKeywordValue);","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"beefham"},"content":"            String[] roleKeywords \u003d roleKeywordValue.split(\"\\\\s+\");","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"beefham"},"content":"            filters.add(new RoleContainsKeywordsPredicate(Arrays.asList(roleKeywords)));","lastModifiedDate":"2021-10-08"},{"lineNumber":134,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"            String[] dateStrings \u003d argMultimap.getValue(PREFIX_DATE).get().split(\"\\\\s+\");","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"            Predicate\u003cPerson\u003e leavesTakenPredicate \u003d getLeavesTakenPredicate(dateStrings);","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"            filters.add(leavesTakenPredicate);","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_HOURLYSALARY).isPresent()) {","lastModifiedDate":"2021-10-13"},{"lineNumber":141,"author":{"gitId":"beefham"},"content":"            String keyValue \u003d argMultimap.getValue(PREFIX_HOURLYSALARY).get();","lastModifiedDate":"2021-10-13"},{"lineNumber":142,"author":{"gitId":"beefham"},"content":"            Predicate\u003cPerson\u003e personPredicate \u003d getSalaryComparisonPredicate(keyValue);","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"beefham"},"content":"            filters.add(personPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":144,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_OVERTIME).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"beefham"},"content":"            String keyValue \u003d argMultimap.getValue(PREFIX_OVERTIME).get();","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"beefham"},"content":"            Predicate\u003cPerson\u003e personPredicate \u003d getOvertimeComparisonPredicate(keyValue);","lastModifiedDate":"2021-10-18"},{"lineNumber":148,"author":{"gitId":"beefham"},"content":"            filters.add(personPredicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":149,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":150,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_LEAVE).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"beefham"},"content":"            String keyValue \u003d argMultimap.getValue(PREFIX_LEAVE).get();","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"beefham"},"content":"            Predicate\u003cPerson\u003e personPredicate \u003d getLeaveComparisonPredicate(keyValue);","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"beefham"},"content":"            filters.add(personPredicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"beefham"},"content":"        if (argMultimap.getValue(PREFIX_HOURSWORKED).isPresent()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"beefham"},"content":"            String keyValue \u003d argMultimap.getValue(PREFIX_HOURSWORKED).get();","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"beefham"},"content":"            Predicate\u003cPerson\u003e personPredicate \u003d getHoursComparisonPredicate(keyValue);","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"beefham"},"content":"            filters.add(personPredicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":159,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"beefham"},"content":"        return new FindCommand(combinePredicates(filters));","lastModifiedDate":"2021-10-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":164,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":165,"author":{"gitId":"beefham"},"content":"     * Combines the list of predicates in a list to a single predicate for the FindCommand to take in","lastModifiedDate":"2021-10-06"},{"lineNumber":166,"author":{"gitId":"beefham"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":167,"author":{"gitId":"beefham"},"content":"     * @param predicateList The list of predicates to combine","lastModifiedDate":"2021-10-06"},{"lineNumber":168,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":169,"author":{"gitId":"beefham"},"content":"    private Predicate\u003cPerson\u003e combinePredicates(List\u003cPredicate\u003cPerson\u003e\u003e predicateList) {","lastModifiedDate":"2021-10-06"},{"lineNumber":170,"author":{"gitId":"beefham"},"content":"        return predicateList.stream()","lastModifiedDate":"2021-10-06"},{"lineNumber":171,"author":{"gitId":"beefham"},"content":"                .reduce(x -\u003e true, (predicate1, predicate2) -\u003e predicate1.and(predicate2));","lastModifiedDate":"2021-10-06"},{"lineNumber":172,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":174,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":175,"author":{"gitId":"danielsimre"},"content":"     * Parses the input given by the user for finding with respect to leaves taken.","lastModifiedDate":"2021-10-28"},{"lineNumber":176,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":177,"author":{"gitId":"danielsimre"},"content":"     * @param dateStrings An array of strings describing the condition for the salary of the person.","lastModifiedDate":"2021-10-28"},{"lineNumber":178,"author":{"gitId":"danielsimre"},"content":"     *                    It should take the form of either an individual date (YYYY-MM-DD)","lastModifiedDate":"2021-10-28"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"     *                    or a range of dates. (YYYY-MM-DD:YYYY-MM-DDDD)","lastModifiedDate":"2021-10-28"},{"lineNumber":180,"author":{"gitId":"danielsimre"},"content":"     * @return A Predicate which checks if the person passes the given condition as described in the input.","lastModifiedDate":"2021-10-28"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the dates or date ranges given are in an incorrect format","lastModifiedDate":"2021-10-28"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"    private Predicate\u003cPerson\u003e getLeavesTakenPredicate(String[] dateStrings) throws ParseException {","lastModifiedDate":"2021-10-28"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"        List\u003cLocalDate\u003e keyDates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":185,"author":{"gitId":"danielsimre"},"content":"        List\u003cPair\u003cLocalDate, LocalDate\u003e\u003e keyDateRanges \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":186,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":187,"author":{"gitId":"danielsimre"},"content":"            for (String dateString : dateStrings) {","lastModifiedDate":"2021-10-28"},{"lineNumber":188,"author":{"gitId":"danielsimre"},"content":"                // Parse date ranges","lastModifiedDate":"2021-10-28"},{"lineNumber":189,"author":{"gitId":"danielsimre"},"content":"                if (dateString.contains(\":\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":190,"author":{"gitId":"danielsimre"},"content":"                    String[] datePair \u003d dateString.split(\":\");","lastModifiedDate":"2021-10-28"},{"lineNumber":191,"author":{"gitId":"danielsimre"},"content":"                    if (datePair.length !\u003d 2) {","lastModifiedDate":"2021-10-28"},{"lineNumber":192,"author":{"gitId":"danielsimre"},"content":"                        throw new ParseException(","lastModifiedDate":"2021-10-28"},{"lineNumber":193,"author":{"gitId":"danielsimre"},"content":"                                String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-28"},{"lineNumber":194,"author":{"gitId":"danielsimre"},"content":"                    }","lastModifiedDate":"2021-10-28"},{"lineNumber":195,"author":{"gitId":"danielsimre"},"content":"                    LocalDate startDate \u003d LocalDate.parse(datePair[0]);","lastModifiedDate":"2021-10-28"},{"lineNumber":196,"author":{"gitId":"danielsimre"},"content":"                    LocalDate endDate \u003d LocalDate.parse(datePair[1]);","lastModifiedDate":"2021-10-28"},{"lineNumber":197,"author":{"gitId":"danielsimre"},"content":"                    keyDateRanges.add(new Pair\u003c\u003e(startDate, endDate));","lastModifiedDate":"2021-10-28"},{"lineNumber":198,"author":{"gitId":"danielsimre"},"content":"                    // Parse individual dates","lastModifiedDate":"2021-10-28"},{"lineNumber":199,"author":{"gitId":"danielsimre"},"content":"                } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":200,"author":{"gitId":"danielsimre"},"content":"                    keyDates.add(LocalDate.parse(dateString));","lastModifiedDate":"2021-10-28"},{"lineNumber":201,"author":{"gitId":"danielsimre"},"content":"                }","lastModifiedDate":"2021-10-28"},{"lineNumber":202,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":203,"author":{"gitId":"danielsimre"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-10-28"},{"lineNumber":204,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-28"},{"lineNumber":205,"author":{"gitId":"danielsimre"},"content":"                    String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-28"},{"lineNumber":206,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":207,"author":{"gitId":"danielsimre"},"content":"        return new LeavesTakenContainsDatesPredicate(keyDates, keyDateRanges);","lastModifiedDate":"2021-10-28"},{"lineNumber":208,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":209,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":210,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":211,"author":{"gitId":"beefham"},"content":"     * Used for parsing the input given by the user for finding with respect to salary","lastModifiedDate":"2021-10-13"},{"lineNumber":212,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":213,"author":{"gitId":"beefham"},"content":"     * @param input A string describing the condition for the salary of the person.","lastModifiedDate":"2021-10-13"},{"lineNumber":214,"author":{"gitId":"beefham"},"content":"     *              It should take the form of (comparator)(number), where the comparator is any of:","lastModifiedDate":"2021-10-13"},{"lineNumber":215,"author":{"gitId":"beefham"},"content":"     *              \"\u003e\", \"\u003c\", \"\u003e\u003d\", \"\u003c\u003d\", \"\u003d\"","lastModifiedDate":"2021-10-13"},{"lineNumber":216,"author":{"gitId":"beefham"},"content":"     *              Valid examples: \u003e\u003d5, \u003c3.25, \u003d6.00","lastModifiedDate":"2021-10-13"},{"lineNumber":217,"author":{"gitId":"beefham"},"content":"     *              Invalid examples: \u003d\u003e5, \u003d\u003d4.50, 6","lastModifiedDate":"2021-10-13"},{"lineNumber":218,"author":{"gitId":"beefham"},"content":"     * @return A Predicate which checks if the person passes the given condition as described in the input.","lastModifiedDate":"2021-10-13"},{"lineNumber":219,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":220,"author":{"gitId":"beefham"},"content":"    private Predicate\u003cPerson\u003e getSalaryComparisonPredicate(String input) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":221,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":222,"author":{"gitId":"beefham"},"content":"            CompareType compareType \u003d parseComparator(input);","lastModifiedDate":"2021-10-18"},{"lineNumber":223,"author":{"gitId":"beefham"},"content":"            double value \u003d Double.parseDouble(getComparisonValue(input, compareType));","lastModifiedDate":"2021-11-07"},{"lineNumber":224,"author":{"gitId":"beefham"},"content":"            if (compareType \u003d\u003d CompareType.MORE_THAN) {","lastModifiedDate":"2021-10-18"},{"lineNumber":225,"author":{"gitId":"beefham"},"content":"                return new SalaryIsMoreThanPredicate(value);","lastModifiedDate":"2021-10-13"},{"lineNumber":226,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.MORE_THAN_EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":227,"author":{"gitId":"beefham"},"content":"                return new SalaryIsMoreThanEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":228,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":229,"author":{"gitId":"beefham"},"content":"                return new SalaryIsEqualPredicate(value);","lastModifiedDate":"2021-10-13"},{"lineNumber":230,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.LESS_THAN) {","lastModifiedDate":"2021-10-18"},{"lineNumber":231,"author":{"gitId":"beefham"},"content":"                return new SalaryIsLessThanPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":232,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.LESS_THAN_EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":233,"author":{"gitId":"beefham"},"content":"                return new SalaryIsLessThanEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":234,"author":{"gitId":"beefham"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":235,"author":{"gitId":"beefham"},"content":"                throw new ParseException(\"Invalid comparison type!\");","lastModifiedDate":"2021-10-18"},{"lineNumber":236,"author":{"gitId":"beefham"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":237,"author":{"gitId":"beefham"},"content":"        } catch (NumberFormatException | StringIndexOutOfBoundsException | ParseException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":238,"author":{"gitId":"beefham"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-18"},{"lineNumber":239,"author":{"gitId":"beefham"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":240,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":243,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":244,"author":{"gitId":"beefham"},"content":"     * Used for parsing the input given by the user for finding with respect to overtime.","lastModifiedDate":"2021-10-18"},{"lineNumber":245,"author":{"gitId":"beefham"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":246,"author":{"gitId":"beefham"},"content":"     * @param input A string describing the condition for the overtime of the person.","lastModifiedDate":"2021-10-18"},{"lineNumber":247,"author":{"gitId":"beefham"},"content":"     * @return A Predicate which checks if the person passes the given condition as described in the input.","lastModifiedDate":"2021-10-18"},{"lineNumber":248,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":249,"author":{"gitId":"beefham"},"content":"    private Predicate\u003cPerson\u003e getOvertimeComparisonPredicate(String input) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":250,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":251,"author":{"gitId":"beefham"},"content":"            CompareType compareType \u003d parseComparator(input);","lastModifiedDate":"2021-10-18"},{"lineNumber":252,"author":{"gitId":"beefham"},"content":"            int value \u003d Integer.parseInt(getComparisonValue(input, compareType));","lastModifiedDate":"2021-10-18"},{"lineNumber":253,"author":{"gitId":"beefham"},"content":"            if (compareType \u003d\u003d CompareType.MORE_THAN) {","lastModifiedDate":"2021-10-18"},{"lineNumber":254,"author":{"gitId":"beefham"},"content":"                return new OvertimeMoreThanPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":255,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.MORE_THAN_EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":256,"author":{"gitId":"beefham"},"content":"                return new OvertimeMoreThanEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":257,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":258,"author":{"gitId":"beefham"},"content":"                return new OvertimeEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":259,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.LESS_THAN) {","lastModifiedDate":"2021-10-18"},{"lineNumber":260,"author":{"gitId":"beefham"},"content":"                return new OvertimeLessThanPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":261,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.LESS_THAN_EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":262,"author":{"gitId":"beefham"},"content":"                return new OvertimeLessThanEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":263,"author":{"gitId":"beefham"},"content":"            } else {","lastModifiedDate":"2021-10-13"},{"lineNumber":264,"author":{"gitId":"beefham"},"content":"                throw new ParseException(\"Invalid comparison type!\");","lastModifiedDate":"2021-10-18"},{"lineNumber":265,"author":{"gitId":"beefham"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":266,"author":{"gitId":"beefham"},"content":"        } catch (NumberFormatException | StringIndexOutOfBoundsException | ParseException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":267,"author":{"gitId":"beefham"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-13"},{"lineNumber":268,"author":{"gitId":"beefham"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-13"},{"lineNumber":269,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":270,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":271,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":272,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":273,"author":{"gitId":"beefham"},"content":"     * Used for parsing the input given by the user for finding with respect to leaves.","lastModifiedDate":"2021-10-18"},{"lineNumber":274,"author":{"gitId":"beefham"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":275,"author":{"gitId":"beefham"},"content":"     * @param input A string describing the condition for the overtime of the person.","lastModifiedDate":"2021-10-18"},{"lineNumber":276,"author":{"gitId":"beefham"},"content":"     * @return A Predicate which checks if the person passes the given condition as described in the input.","lastModifiedDate":"2021-10-18"},{"lineNumber":277,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":278,"author":{"gitId":"beefham"},"content":"    private Predicate\u003cPerson\u003e getLeaveComparisonPredicate(String input) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":279,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":280,"author":{"gitId":"beefham"},"content":"            CompareType compareType \u003d parseComparator(input);","lastModifiedDate":"2021-10-18"},{"lineNumber":281,"author":{"gitId":"beefham"},"content":"            int value \u003d Integer.parseInt(getComparisonValue(input, compareType));","lastModifiedDate":"2021-10-18"},{"lineNumber":282,"author":{"gitId":"beefham"},"content":"            if (compareType \u003d\u003d CompareType.MORE_THAN) {","lastModifiedDate":"2021-10-18"},{"lineNumber":283,"author":{"gitId":"beefham"},"content":"                return new LeaveMoreThanPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":284,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.MORE_THAN_EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":285,"author":{"gitId":"beefham"},"content":"                return new LeaveMoreThanEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":286,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":287,"author":{"gitId":"beefham"},"content":"                return new LeaveEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":288,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.LESS_THAN) {","lastModifiedDate":"2021-10-18"},{"lineNumber":289,"author":{"gitId":"beefham"},"content":"                return new LeaveLessThanPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":290,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.LESS_THAN_EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":291,"author":{"gitId":"beefham"},"content":"                return new LeaveLessThanEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":292,"author":{"gitId":"beefham"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":293,"author":{"gitId":"beefham"},"content":"                throw new ParseException(\"Invalid comparison type!\");","lastModifiedDate":"2021-10-18"},{"lineNumber":294,"author":{"gitId":"beefham"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":295,"author":{"gitId":"beefham"},"content":"        } catch (NumberFormatException | StringIndexOutOfBoundsException | ParseException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":296,"author":{"gitId":"beefham"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-18"},{"lineNumber":297,"author":{"gitId":"beefham"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":298,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":299,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":300,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":301,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":302,"author":{"gitId":"beefham"},"content":"     * Used for parsing the input given by the user for finding with respect to leaves.","lastModifiedDate":"2021-10-18"},{"lineNumber":303,"author":{"gitId":"beefham"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":304,"author":{"gitId":"beefham"},"content":"     * @param input A string describing the condition for the overtime of the person.","lastModifiedDate":"2021-10-18"},{"lineNumber":305,"author":{"gitId":"beefham"},"content":"     * @return A Predicate which checks if the person passes the given condition as described in the input.","lastModifiedDate":"2021-10-18"},{"lineNumber":306,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":307,"author":{"gitId":"beefham"},"content":"    private Predicate\u003cPerson\u003e getHoursComparisonPredicate(String input) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":308,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":309,"author":{"gitId":"beefham"},"content":"            CompareType compareType \u003d parseComparator(input);","lastModifiedDate":"2021-10-18"},{"lineNumber":310,"author":{"gitId":"beefham"},"content":"            int value \u003d Integer.parseInt(getComparisonValue(input, compareType));","lastModifiedDate":"2021-10-18"},{"lineNumber":311,"author":{"gitId":"beefham"},"content":"            if (compareType \u003d\u003d CompareType.MORE_THAN) {","lastModifiedDate":"2021-10-18"},{"lineNumber":312,"author":{"gitId":"beefham"},"content":"                return new HoursMoreThanPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":313,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.MORE_THAN_EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":314,"author":{"gitId":"beefham"},"content":"                return new HoursMoreThanEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":315,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":316,"author":{"gitId":"beefham"},"content":"                return new HoursEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":317,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.LESS_THAN) {","lastModifiedDate":"2021-10-18"},{"lineNumber":318,"author":{"gitId":"beefham"},"content":"                return new HoursLessThanPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":319,"author":{"gitId":"beefham"},"content":"            } else if (compareType \u003d\u003d CompareType.LESS_THAN_EQUAL) {","lastModifiedDate":"2021-10-18"},{"lineNumber":320,"author":{"gitId":"beefham"},"content":"                return new HoursLessThanEqualPredicate(value);","lastModifiedDate":"2021-10-18"},{"lineNumber":321,"author":{"gitId":"beefham"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":322,"author":{"gitId":"beefham"},"content":"                throw new ParseException(\"Invalid comparison type!\");","lastModifiedDate":"2021-10-18"},{"lineNumber":323,"author":{"gitId":"beefham"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":324,"author":{"gitId":"beefham"},"content":"        } catch (NumberFormatException | StringIndexOutOfBoundsException | ParseException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":325,"author":{"gitId":"beefham"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-18"},{"lineNumber":326,"author":{"gitId":"beefham"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":327,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":328,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":329,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":330,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":331,"author":{"gitId":"beefham"},"content":"     * Parses the initial user input and gets the type of comparison the user wants to make.","lastModifiedDate":"2021-10-18"},{"lineNumber":332,"author":{"gitId":"beefham"},"content":"     * \"\u003e\u003d\" for more than or equal, \"\u003e\" for strictly more than","lastModifiedDate":"2021-10-18"},{"lineNumber":333,"author":{"gitId":"beefham"},"content":"     * \"\u003c\u003d\" for less than or equal, \"\u003c\" for strictly less than","lastModifiedDate":"2021-10-18"},{"lineNumber":334,"author":{"gitId":"beefham"},"content":"     * \"\u003d\" for exactly equal.","lastModifiedDate":"2021-10-18"},{"lineNumber":335,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":336,"author":{"gitId":"beefham"},"content":"     * If any of the single character comparisons are used, this parser checks if the character","lastModifiedDate":"2021-10-18"},{"lineNumber":337,"author":{"gitId":"beefham"},"content":"     * directly following it is an integer. Otherwise, the comparison is considered invalid.","lastModifiedDate":"2021-10-18"},{"lineNumber":338,"author":{"gitId":"beefham"},"content":"     * For example, \"\u003e5\" is valid but \"\u003d\u003d\" and \"\u003e\u003c\" are not.","lastModifiedDate":"2021-10-18"},{"lineNumber":339,"author":{"gitId":"beefham"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":340,"author":{"gitId":"beefham"},"content":"     * @param input The parsed user input from the argument multimap","lastModifiedDate":"2021-10-18"},{"lineNumber":341,"author":{"gitId":"beefham"},"content":"     * @return The relevant comparison type","lastModifiedDate":"2021-10-18"},{"lineNumber":342,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":343,"author":{"gitId":"beefham"},"content":"    private CompareType parseComparator(String input) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":344,"author":{"gitId":"beefham"},"content":"        String comparator \u003d input.substring(0, 2);","lastModifiedDate":"2021-10-18"},{"lineNumber":345,"author":{"gitId":"beefham"},"content":"        if (comparator.equals(\"\u003e\u003d\")) {","lastModifiedDate":"2021-10-18"},{"lineNumber":346,"author":{"gitId":"beefham"},"content":"            return CompareType.MORE_THAN_EQUAL;","lastModifiedDate":"2021-10-18"},{"lineNumber":347,"author":{"gitId":"beefham"},"content":"        } else if (comparator.equals(\"\u003c\u003d\")) {","lastModifiedDate":"2021-10-18"},{"lineNumber":348,"author":{"gitId":"beefham"},"content":"            return CompareType.LESS_THAN_EQUAL;","lastModifiedDate":"2021-10-18"},{"lineNumber":349,"author":{"gitId":"beefham"},"content":"        } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":350,"author":{"gitId":"beefham"},"content":"            try {","lastModifiedDate":"2021-10-18"},{"lineNumber":351,"author":{"gitId":"beefham"},"content":"                // checks that the character following a single character comparator is a number","lastModifiedDate":"2021-10-18"},{"lineNumber":352,"author":{"gitId":"beefham"},"content":"                Integer.parseInt(comparator.substring(1, 2));","lastModifiedDate":"2021-10-18"},{"lineNumber":353,"author":{"gitId":"beefham"},"content":"            } catch (NumberFormatException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-13"},{"lineNumber":354,"author":{"gitId":"beefham"},"content":"                throw new ParseException(","lastModifiedDate":"2021-10-13"},{"lineNumber":355,"author":{"gitId":"beefham"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-13"},{"lineNumber":356,"author":{"gitId":"beefham"},"content":"            }","lastModifiedDate":"2021-10-13"},{"lineNumber":357,"author":{"gitId":"beefham"},"content":"            char singleCharComparator \u003d comparator.charAt(0);","lastModifiedDate":"2021-10-18"},{"lineNumber":358,"author":{"gitId":"beefham"},"content":"            if (singleCharComparator \u003d\u003d \u0027\u003e\u0027) {","lastModifiedDate":"2021-10-18"},{"lineNumber":359,"author":{"gitId":"beefham"},"content":"                return CompareType.MORE_THAN;","lastModifiedDate":"2021-10-18"},{"lineNumber":360,"author":{"gitId":"beefham"},"content":"            } else if (singleCharComparator \u003d\u003d \u0027\u003c\u0027) {","lastModifiedDate":"2021-10-18"},{"lineNumber":361,"author":{"gitId":"beefham"},"content":"                return CompareType.LESS_THAN;","lastModifiedDate":"2021-10-18"},{"lineNumber":362,"author":{"gitId":"beefham"},"content":"            } else if (singleCharComparator \u003d\u003d \u0027\u003d\u0027) {","lastModifiedDate":"2021-10-18"},{"lineNumber":363,"author":{"gitId":"beefham"},"content":"                return CompareType.EQUAL;","lastModifiedDate":"2021-10-18"},{"lineNumber":364,"author":{"gitId":"beefham"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":365,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":366,"author":{"gitId":"beefham"},"content":"        throw new ParseException(\"Could not find comparison operator!\");","lastModifiedDate":"2021-10-18"},{"lineNumber":367,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":368,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":369,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":370,"author":{"gitId":"beefham"},"content":"     * Attempts to get the value to compare to as a String.","lastModifiedDate":"2021-10-18"},{"lineNumber":371,"author":{"gitId":"beefham"},"content":"     * The String is parsed based on the type of command it is parsing.","lastModifiedDate":"2021-10-18"},{"lineNumber":372,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":373,"author":{"gitId":"beefham"},"content":"     * @param input The parsed user input from the argument multimap","lastModifiedDate":"2021-10-18"},{"lineNumber":374,"author":{"gitId":"beefham"},"content":"     * @param type The comparison type","lastModifiedDate":"2021-10-18"},{"lineNumber":375,"author":{"gitId":"beefham"},"content":"     * @return A String representing the value to compare to","lastModifiedDate":"2021-10-18"},{"lineNumber":376,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":377,"author":{"gitId":"beefham"},"content":"    private String getComparisonValue(String input, CompareType type) {","lastModifiedDate":"2021-10-18"},{"lineNumber":378,"author":{"gitId":"beefham"},"content":"        String stringValue \u003d \"\";","lastModifiedDate":"2021-10-18"},{"lineNumber":379,"author":{"gitId":"beefham"},"content":"        switch (type) {","lastModifiedDate":"2021-10-18"},{"lineNumber":380,"author":{"gitId":"beefham"},"content":"        case MORE_THAN_EQUAL:","lastModifiedDate":"2021-10-18"},{"lineNumber":381,"author":{"gitId":"beefham"},"content":"            // Fallthrough","lastModifiedDate":"2021-11-05"},{"lineNumber":382,"author":{"gitId":"beefham"},"content":"        case LESS_THAN_EQUAL:","lastModifiedDate":"2021-10-18"},{"lineNumber":383,"author":{"gitId":"beefham"},"content":"            assert (input.length() \u003e 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":384,"author":{"gitId":"beefham"},"content":"            stringValue \u003d input.substring(2);","lastModifiedDate":"2021-10-18"},{"lineNumber":385,"author":{"gitId":"beefham"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":386,"author":{"gitId":"beefham"},"content":"        case LESS_THAN:","lastModifiedDate":"2021-10-18"},{"lineNumber":387,"author":{"gitId":"beefham"},"content":"            // Fallthrough","lastModifiedDate":"2021-11-05"},{"lineNumber":388,"author":{"gitId":"beefham"},"content":"        case MORE_THAN:","lastModifiedDate":"2021-10-18"},{"lineNumber":389,"author":{"gitId":"beefham"},"content":"            // Fallthrough","lastModifiedDate":"2021-11-05"},{"lineNumber":390,"author":{"gitId":"beefham"},"content":"        case EQUAL:","lastModifiedDate":"2021-10-18"},{"lineNumber":391,"author":{"gitId":"beefham"},"content":"            assert (input.length() \u003e 1);","lastModifiedDate":"2021-11-05"},{"lineNumber":392,"author":{"gitId":"beefham"},"content":"            stringValue \u003d input.substring(1);","lastModifiedDate":"2021-10-18"},{"lineNumber":393,"author":{"gitId":"beefham"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":394,"author":{"gitId":"beefham"},"content":"        default:","lastModifiedDate":"2021-10-18"},{"lineNumber":395,"author":{"gitId":"beefham"},"content":"            // Should not reach here as all 5 CompareTypes are accounted for","lastModifiedDate":"2021-11-05"},{"lineNumber":396,"author":{"gitId":"beefham"},"content":"            assert(false);","lastModifiedDate":"2021-11-05"},{"lineNumber":397,"author":{"gitId":"beefham"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":398,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":399,"author":{"gitId":"beefham"},"content":"        return stringValue;","lastModifiedDate":"2021-10-18"},{"lineNumber":400,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":401,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":402,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":403,"author":{"gitId":"beefham"},"content":"     * Checks if the user input provided into the Find Command is not blank.","lastModifiedDate":"2021-11-08"},{"lineNumber":404,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":405,"author":{"gitId":"beefham"},"content":"    public static void checkNotBlankValue(String value) throws ParseException {","lastModifiedDate":"2021-11-08"},{"lineNumber":406,"author":{"gitId":"beefham"},"content":"        if (value.isBlank()) {","lastModifiedDate":"2021-11-08"},{"lineNumber":407,"author":{"gitId":"beefham"},"content":"            throw new ParseException(","lastModifiedDate":"2021-11-08"},{"lineNumber":408,"author":{"gitId":"beefham"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":409,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":410,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":411,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"danielsimre":55,"boonhaii":2,"beefham":324,"-":30}},{"path":"src/main/java/seedu/address/logic/parser/ImportCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":" * Parses input arguments and creates a new ImportCommand object","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"public class ImportCommandParser implements Parser\u003cImportCommand\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"     * and returns an ImportCommand object for execution.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"    public ImportCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"        String[] input \u003d args.split(\" \");","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"        StringBuffer filepath;","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"        int inputLength \u003d input.length;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"        if (inputLength \u003c\u003d 1) {","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"            filepath \u003d new StringBuffer(input[1]);","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"            for (int i \u003d 2; i \u003c inputLength; i++) {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"                // StringBuffer.append has lower runtime than String.concat","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"                filepath \u003d filepath.append(\" \").append(input[i]);","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"        return new ImportCommand(filepath.toString());","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"boonhaii":34}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"     * Parses a {@code String roleName} into a {@code Role}.","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException if the given {@code roleName} is invalid.","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"    public static Role parseRole(String roleName) throws ParseException {","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(roleName);","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"        String trimmedRole \u003d roleName.trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"        if (!Role.isValidRole(trimmedRole)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"            throw new ParseException(Role.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"        return new Role(trimmedRole);","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"     * Parses a {@code String amount} into a {@code LeaveBalance}.","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the given {@code amount} is invalid.","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"    public static LeaveBalance parseLeaveBalance(String amount) throws ParseException {","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"        String trimmedAmount \u003d amount.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        if (!LeaveBalance.isValidLeaveBalance(trimmedAmount)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(LeaveBalance.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        return new LeaveBalance(trimmedAmount);","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"     * Parses a {@code String amount} into a {@code Salary}.","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"boonhaii"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException if the given {@code amount} is invalid.","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"    public static HourlySalary parseSalary(String amount) throws ParseException {","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"        String trimmedAmount \u003d amount.trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"szelongq"},"content":"        if (!HourlySalary.isValidHourlySalary(trimmedAmount)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"            throw new ParseException(HourlySalary.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"        return new HourlySalary(trimmedAmount);","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"     * Parses a {@code String amount} into a {@code HoursWorked}.","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"     * @throws ParseException if the given {@code amount} is invalid.","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"    public static HoursWorked parseHoursWorked(String amount) throws ParseException {","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"        String trimmedAmount \u003d amount.trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"        if (!HoursWorked.isValidHoursWorked(trimmedAmount)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"            throw new ParseException(HoursWorked.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"        return new HoursWorked(trimmedAmount);","lastModifiedDate":"2021-10-01"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"     * Parses a {@code String amount} into a {@code Overtime}.","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"danielsimre"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the given {@code amount} is invalid.","lastModifiedDate":"2021-10-14"},{"lineNumber":170,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":171,"author":{"gitId":"danielsimre"},"content":"    public static Overtime parseOvertime(String amount) throws ParseException {","lastModifiedDate":"2021-10-14"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-14"},{"lineNumber":173,"author":{"gitId":"danielsimre"},"content":"        String trimmedAmount \u003d amount.trim();","lastModifiedDate":"2021-10-14"},{"lineNumber":174,"author":{"gitId":"danielsimre"},"content":"        if (!HoursWorked.isValidHoursWorked(trimmedAmount)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":175,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(Overtime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-14"},{"lineNumber":176,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":177,"author":{"gitId":"danielsimre"},"content":"        return new Overtime(trimmedAmount);","lastModifiedDate":"2021-10-14"},{"lineNumber":178,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"danielsimre":33,"szelongq":1,"boonhaii":46,"-":126}},{"path":"src/main/java/seedu/address/logic/parser/PayCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import seedu.address.logic.commands.PayCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"public class PayCommandParser implements Parser\u003cPayCommand\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"     * Parses the given {@code String} of arguments in the context of the PayCommand","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"     * and returns a PayCommand object for execution.","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"    public PayCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"        if (trimmedArgs.equals(PayCommand.PAY_ALL_COMMAND_PHRASE)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"            return new PayCommand();","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"        } else {","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"            try {","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"                Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"                return new PayCommand(index);","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"                throw new ParseException(","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"            }","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"szelongq":5,"1waykiat":24}},{"path":"src/main/java/seedu/address/logic/parser/RemoveLeavesBeforeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.RemoveLeavesBeforeCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":" * Parses input arguments and creates a new RemoveLeavesBeforeCommand object.","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"public class RemoveLeavesBeforeCommandParser implements Parser\u003cRemoveLeavesBeforeCommand\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveLeavesBeforeCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     * and returns a RemoveLeavesBeforeCommand object for execution.","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * @param args A string representing the user\u0027s input.","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @return A new RemoveLeavesBeforeCommand object.","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     *                        or an invalid date input is given.","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    public RemoveLeavesBeforeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"                PREFIX_DATE);","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        String dateString \u003d argMultimap.getValue(PREFIX_DATE).orElse(\"\");","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        // If prefix is missing","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        if (dateString.equals(\"\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"                    RemoveLeavesBeforeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        LocalDate beforeDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"            beforeDate \u003d LocalDate.parse(dateString);","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATE_FORMAT,","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"                    RemoveLeavesBeforeCommand.MESSAGE_USAGE), dtpe);","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        return new RemoveLeavesBeforeCommand(beforeDate);","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"danielsimre":50}},{"path":"src/main/java/seedu/address/logic/parser/SetOvertimePayRateCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.SetOvertimePayRateCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":" * Parses input arguments and creates a new SetOvertimePayRateCommand object","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"public class SetOvertimePayRateCommandParser implements Parser\u003cSetOvertimePayRateCommand\u003e {","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"     * Parses the given {@code String} of arguments in the context of the SetOvertimePayRateCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"     * and returns a SetOvertimePayRateCommand object for execution.","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"    public SetOvertimePayRateCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"            OvertimePayRate overtimePayRate \u003d new OvertimePayRate(args);","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"            return new SetOvertimePayRateCommand(overtimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"        } catch (IllegalArgumentException iae) {","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"                            SetOvertimePayRateCommand.MESSAGE_USAGE), iae);","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"szelongq":29}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import seedu.address.logic.commands.ViewCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"     * and returns a ViewCommand object for execution.","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"    public ViewCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"            return new ViewCommand(index);","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"1waykiat":25}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"     * Returns true if a person with the phone number as {@code person} exists in the address book.","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"    public boolean hasDuplicatePhone(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"        return persons.hasDuplicatePhone(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"     * Returns true if a person with the same email as {@code person} exists in the address book.","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"    public boolean hasDuplicateEmail(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"        return persons.hasDuplicateEmail(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"boonhaii":16,"-":120}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.ObservablePerson;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"     * Sets the user prefs\u0027 pay rate for overtime.","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"    void setOvertimePayRate(OvertimePayRate overtimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"     * Returns the user prefs\u0027 pay rate for overtime.","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"    OvertimePayRate getOvertimePayRate();","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"     * Returns true if a person has the same phone number as {@code person} exists in the address book.","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"    boolean hasDuplicatePhone(Person person);","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"     * Returns true if a person has the same email as {@code person} exists in the address book.","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"    boolean hasDuplicateEmail(Person person);","lastModifiedDate":"2021-11-01"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":110,"author":{"gitId":"1waykiat"},"content":"     * Returns the person that is to be viewed in the InfoPanel","lastModifiedDate":"2021-11-02"},{"lineNumber":111,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"    ObservablePerson getViewingPerson();","lastModifiedDate":"2021-11-04"},{"lineNumber":113,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":115,"author":{"gitId":"1waykiat"},"content":"     * Sets the person to be viewed in the InfoPanel","lastModifiedDate":"2021-11-02"},{"lineNumber":116,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":117,"author":{"gitId":"1waykiat"},"content":"    void setViewingPerson(Person p);","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"1waykiat"},"content":"     * Returns true if the employee list is empty, otherwise false.","lastModifiedDate":"2021-11-02"},{"lineNumber":121,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"1waykiat"},"content":"    boolean isFilteredPersonListEmpty();","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"szelongq":10,"boonhaii":10,"-":87,"1waykiat":17}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import java.util.Optional;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.ObservablePerson;","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"    private final ObservablePerson viewingPerson;","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"        ObservableList\u003cPerson\u003e personList \u003d this.addressBook.getPersonList();","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"            // Set view to blank","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"            viewingPerson \u003d new ObservablePerson();","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"            // Default to view first person in employee list","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"            viewingPerson \u003d new ObservablePerson(this.addressBook.getPersonList().get(0));","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"szelongq"},"content":"    public OvertimePayRate getOvertimePayRate() {","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"szelongq"},"content":"        return userPrefs.getOvertimePayRate();","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"szelongq"},"content":"    public void setOvertimePayRate(OvertimePayRate overtimePayRate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"szelongq"},"content":"        requireNonNull(overtimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"szelongq"},"content":"        userPrefs.setOvertimePayRate(overtimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"    public boolean hasDuplicatePhone(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"        return addressBook.hasDuplicatePhone(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"    public boolean hasDuplicateEmail(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"boonhaii"},"content":"        return addressBook.hasDuplicateEmail(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":168,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":169,"author":{"gitId":"1waykiat"},"content":"    public boolean isFilteredPersonListEmpty() {","lastModifiedDate":"2021-11-02"},{"lineNumber":170,"author":{"gitId":"1waykiat"},"content":"        return filteredPersons.isEmpty();","lastModifiedDate":"2021-11-02"},{"lineNumber":171,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":172,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":173,"author":{"gitId":"1waykiat"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Viewing Person Details \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"1waykiat"},"content":"    public ObservablePerson getViewingPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":176,"author":{"gitId":"1waykiat"},"content":"        return viewingPerson;","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"1waykiat"},"content":"    public void setViewingPerson(Person p) {","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"1waykiat"},"content":"        Optional\u003cPerson\u003e toView \u003d Optional.ofNullable(p);","lastModifiedDate":"2021-11-04"},{"lineNumber":182,"author":{"gitId":"1waykiat"},"content":"        toView.ifPresentOrElse(","lastModifiedDate":"2021-11-04"},{"lineNumber":183,"author":{"gitId":"1waykiat"},"content":"                viewingPerson::setPerson,","lastModifiedDate":"2021-11-04"},{"lineNumber":184,"author":{"gitId":"1waykiat"},"content":"                viewingPerson::setEmptyPerson","lastModifiedDate":"2021-11-04"},{"lineNumber":185,"author":{"gitId":"1waykiat"},"content":"        );","lastModifiedDate":"2021-11-04"},{"lineNumber":186,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"szelongq":11,"boonhaii":12,"-":152,"1waykiat":32}},{"path":"src/main/java/seedu/address/model/OvertimePayRate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.model;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":" * Represents a pay rate for overtime used in the employee payroll calculations.","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidOvertimePayRate(String)}","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"public class OvertimePayRate implements Serializable {","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    public static final double MIN_OVERTIME_PAY_RATE \u003d 1;","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"    public static final double MAX_OVERTIME_PAY_RATE \u003d 10;","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"    public static final double DEFAULT_OVERTIME_PAY_RATE \u003d 1.5;","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"    public static final int MAX_DECIMAL_PLACES \u003d 5;","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"            \"Overtime pay rate should only be a number between 1 to 10, \"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"                    + \"with 5 or less decimal places and it should not be blank.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"    public final double value;","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"     * Constructs a {@code OvertimePayRate} with a default overtime pay rate of 1.5.","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"    public OvertimePayRate() {","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"        this.value \u003d DEFAULT_OVERTIME_PAY_RATE;","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"     * Constructs a {@code OvertimePayRate}.","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"     * @param rate A valid overtime pay rate.","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"    public OvertimePayRate(String rate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"        requireNonNull(rate);","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"        checkArgument(isValidOvertimePayRate(rate), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"        this.value \u003d Double.parseDouble(rate);","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"     * Returns true if a given string is a valid numerical string with","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"     * less than 5 decimal places and is within the bounds of overtime pay rate values.","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"    public static boolean isValidOvertimePayRate(String test) {","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"        requireNonNull(test);","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"        boolean isValidUnsignedDouble \u003d StringUtil.isNonNegativeUnsignedDouble(test);","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"        boolean hasFiveOrLessDecimalPlaces \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"        boolean isWithinBounds \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"        if (isValidUnsignedDouble) {","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"            hasFiveOrLessDecimalPlaces \u003d","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"                    StringUtil.isDoubleWithDpWithinLimit(test, MAX_DECIMAL_PLACES);","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"            double testValue \u003d Double.parseDouble(test);","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"            isWithinBounds \u003d isOvertimePayRateWithinBounds(testValue);","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"        return isValidUnsignedDouble \u0026\u0026 hasFiveOrLessDecimalPlaces \u0026\u0026 isWithinBounds;","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"szelongq"},"content":"     * Returns true if a given double is within the bounds of","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"szelongq"},"content":"     * MIN_OVERTIME_PAY_RATE and MAX_OVERTIME_PAY_RATE.","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"szelongq"},"content":"    private static boolean isOvertimePayRateWithinBounds(double testValue) {","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"szelongq"},"content":"        return (testValue \u003e\u003d MIN_OVERTIME_PAY_RATE) \u0026\u0026 (testValue \u003c\u003d MAX_OVERTIME_PAY_RATE);","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"szelongq"},"content":"    public String toString() {","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"szelongq"},"content":"        return String.format(\"%.5f\", value);","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"szelongq"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"szelongq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"szelongq"},"content":"                || (other instanceof OvertimePayRate // instanceof handles nulls","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"                \u0026\u0026 value \u003d\u003d ((OvertimePayRate) other).value); // state check","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"szelongq":86}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    OvertimePayRate getOvertimePayRate();","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"szelongq":1,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"HeRon.json\");","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"    private OvertimePayRate overtimePayRate \u003d new OvertimePayRate();","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"        setOvertimePayRate(newUserPrefs.getOvertimePayRate());","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"    public OvertimePayRate getOvertimePayRate() {","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"        return overtimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"szelongq"},"content":"    public void setOvertimePayRate(OvertimePayRate overtimePayRate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"szelongq"},"content":"        requireNonNull(overtimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"szelongq"},"content":"        this.overtimePayRate \u003d overtimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"szelongq"},"content":"                \u0026\u0026 overtimePayRate.equals(o.getOvertimePayRate());","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"szelongq":13,"boonhaii":1,"-":85}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"boonhaii":1,"-":56}},{"path":"src/main/java/seedu/address/model/person/CalculatedPay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"public class CalculatedPay {","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"    public static final int MAX_DECIMAL_PLACES \u003d 2;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"            \"Calculated pay should only contain non-negative numbers with two or less decimal places.\";","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"    public final double value;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"     * Constructs a {@code CalculatedPay}.","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"     * @param amount A valid calculated pay.","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"    public CalculatedPay(String amount) {","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"        checkArgument(isValidCalculatedPay(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"        this.value \u003d Double.parseDouble(amount);","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"     * Returns true if a given numerical string is unsigned, non-negative and has","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"     * two or less decimal places.","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"    public static boolean isValidCalculatedPay(String test) {","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"        requireNonNull(test);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"        boolean isNonNegativeUnsignedDouble \u003d StringUtil.isNonNegativeUnsignedDouble(test);","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"        boolean hasTwoOrLessDecimalPlaces \u003d","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"                    StringUtil.isDoubleWithDpWithinLimit(test, MAX_DECIMAL_PLACES);","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"        return isNonNegativeUnsignedDouble \u0026\u0026 hasTwoOrLessDecimalPlaces;","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"        return String.format(\"%.2f\", value);","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"                || (other instanceof CalculatedPay // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"                \u0026\u0026 value \u003d\u003d ((CalculatedPay) other).value); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"szelongq":12,"1waykiat":40}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 value.equalsIgnoreCase(((Email) other).value)); // state check","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"boonhaii":1,"-":70}},{"path":"src/main/java/seedu/address/model/person/HourlySalary.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":" * Represents a Person\u0027s Hourly Salary in HeRon.","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidHourlySalary(String)}","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"public class HourlySalary {","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"    public static final double MIN_HOURLY_SALARY \u003d 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"    public static final double MAX_HOURLY_SALARY \u003d 1000;","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    public static final int MAX_DECIMAL_PLACES \u003d 2;","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"            \"Hourly Salary should only contain non-negative numbers with two or less decimal places, \"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"                    + \"with a value between 0 to 1000, and it should not be blank.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"    public final double value;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"     * Constructs a {@code HourlySalary}.","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"     * @param amount A valid hourly salary amount.","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    public HourlySalary(String amount) {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"        checkArgument(isValidHourlySalary(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"        this.value \u003d Double.parseDouble(amount);","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"     * Returns true if a given numerical string is unsigned, non-negative, has","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"     * two or less decimal places and is within the bounds for hourly salary values.","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"    public static boolean isValidHourlySalary(String test) {","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(test);","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"        boolean isValidUnsignedDouble \u003d StringUtil.isNonNegativeUnsignedDouble(test);","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"        boolean hasTwoOrLessDecimalPlaces \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"        boolean isWithinBounds \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"        if (isValidUnsignedDouble) {","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"            hasTwoOrLessDecimalPlaces \u003d","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"                    StringUtil.isDoubleWithDpWithinLimit(test, MAX_DECIMAL_PLACES);","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"            double testValue \u003d Double.parseDouble(test);","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"            isWithinBounds \u003d isHourlySalaryWithinBounds(testValue);","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"        return isValidUnsignedDouble \u0026\u0026 hasTwoOrLessDecimalPlaces \u0026\u0026 isWithinBounds;","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"     * Returns true if a given double is within the bounds of","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"     * MIN_HOURLY_SALARY and MAX_HOURLY_SALARY.","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"    private static boolean isHourlySalaryWithinBounds(double testValue) {","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"        return (testValue \u003e\u003d MIN_HOURLY_SALARY) \u0026\u0026 (testValue \u003c\u003d MAX_HOURLY_SALARY);","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"    public String toString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        return String.format(\"%.2f\", value);","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"                || (other instanceof HourlySalary // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 value \u003d\u003d ((HourlySalary) other).value); // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"szelongq":36,"boonhaii":40}},{"path":"src/main/java/seedu/address/model/person/HoursWorked.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":" * Represents a Person\u0027s worked hours in the employee book.","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidHoursWorked(String)}","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"public class HoursWorked {","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    public static final int MIN_HOURS_WORKED \u003d 0;","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    public static final int MAX_HOURS_WORKED \u003d 744; // 24 hours * 31 days","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"            \"Hours Worked should only contain an integer value between \"","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"                    + MIN_HOURS_WORKED + \" and \" + MAX_HOURS_WORKED","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"                    + \" (both inclusive), and it should not be blank.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"    public final int value;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"     * Constructs a {@code HoursWorked}.","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"     * @param amount A valid value in hours.","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    public HoursWorked(String amount) {","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"        checkArgument(isValidHoursWorked(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"        this.value \u003d Integer.parseInt(amount);","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * Returns true if a given numerical string is non-negative","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * that is within bounds (between MIN_HOURS_WORKED and MAX_HOURS_WORKED, both inclusive).","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     * @param test The string input that is to be parsed into an integer.","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     * @return True if the string is a non-negative integer and within bounds, false otherwise.","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    public static boolean isValidHoursWorked(String test) {","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(test);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        // Valid integer check","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        if (!StringUtil.isNonNegativeInteger(test)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"            return false;","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        // Within bounds check","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        int amount \u003d Integer.parseInt(test);","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        return amount \u003e\u003d MIN_HOURS_WORKED \u0026\u0026 amount \u003c\u003d MAX_HOURS_WORKED;","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated HoursWorked object with the specified number of hours worked added.","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * @param hoursWorked The number of hours worked to be added.","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     * @return An updated HoursWorked object.","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * @throws IllegalArgumentException if the amount of hours worked to be added","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     * causes the total hours worked to exceed the maximum allowed hours worked .","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"    public HoursWorked addHoursWorked(HoursWorked hoursWorked) {","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        assert(hoursWorked.value \u003e 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        int updatedValue \u003d value + hoursWorked.value;","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        if (updatedValue \u003e MAX_HOURS_WORKED) {","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        return new HoursWorked(String.valueOf(updatedValue));","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated HoursWorked object with the specified number of hours worked removed.","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     * @param hoursWorked The number of hours worked to be removed.","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * @return An updated HoursWorked object.","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     * @throws IllegalArgumentException if the number of hours worked to be removed","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     * is greater than the current number of hours worked.","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"    public HoursWorked removeHoursWorked(HoursWorked hoursWorked) {","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        assert(hoursWorked.value \u003e 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        int updatedValue \u003d value - hoursWorked.value;","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        if (updatedValue \u003c MIN_HOURS_WORKED) {","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        return new HoursWorked(String.valueOf(updatedValue));","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"     * Returns an HoursWorked object that represents how many hours worked","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"     * can be added to this person without going over the hours worked limit.","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"     * @return An HoursWorked object containing the remaining hours worked capacity of the Person.","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"    public HoursWorked getRemainingHoursWorkedCapacity() {","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        int hoursWorkedCapacity \u003d MAX_HOURS_WORKED - value;","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        assert(hoursWorkedCapacity \u003e\u003d 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        return new HoursWorked(String.valueOf(hoursWorkedCapacity));","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"    public String toString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"        return Integer.toString(value);","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"                || (other instanceof HoursWorked // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 value \u003d\u003d ((HoursWorked) other).value); // state check","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"danielsimre":60,"boonhaii":47,"1waykiat":3}},{"path":"src/main/java/seedu/address/model/person/LeaveBalance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" * Represents a Person\u0027s remaining leaves in the employee book.","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLeaveBalance(String)}","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"public class LeaveBalance {","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    public static final int MIN_LEAVES \u003d 0;","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    public static final int MAX_LEAVES \u003d 365;","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"            \"Leave Balance should only contain an integer value between \"","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"                    + MIN_LEAVES + \" and \" + MAX_LEAVES","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"                    + \" (both inclusive), and it should not be blank.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public final int value;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Constructs a {@code LeaveBalance} object.","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param amount A valid leave amount in days.","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    public LeaveBalance(String amount) {","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        checkArgument(isValidLeaveBalance(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        this.value \u003d Integer.parseInt(amount);","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     * Returns true if a given numerical string is non-negative","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * that is within bounds (between MIN_LEAVES and MAX_LEAVES, both inclusive).","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * @param test The string input that is to be parsed into an integer.","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     * @return True if the string is a non-negative integer and within bounds, false otherwise.","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    public static boolean isValidLeaveBalance(String test) {","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(test);","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        // Valid integer check","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        if (!StringUtil.isNonNegativeInteger(test)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        // Within bounds check","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        int amount \u003d Integer.parseInt(test);","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        return amount \u003e\u003d MIN_LEAVES \u0026\u0026 amount \u003c\u003d MAX_LEAVES;","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated LeaveBalance object with the specified number of leaves added.","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"     * @param leaveBalance The amount of leaves to be added.","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * @return An updated LeaveBalance object.","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     * @throws IllegalArgumentException if the amount of leaves to be added","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * causes the total leaves to exceed the maximum allowed number of leaves.","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    public LeaveBalance addLeaves(LeaveBalance leaveBalance) {","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        assert(leaveBalance.value \u003e 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        int updatedValue \u003d value + leaveBalance.value;","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        if (updatedValue \u003e MAX_LEAVES) {","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        return new LeaveBalance(String.valueOf(updatedValue));","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated LeaveBalance object with the specified number of leaves removed.","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * @param leaveBalance The amount of leaves to be removed.","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     * @return An updated LeaveBalance object.","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * @throws IllegalArgumentException if the amount of leaves to be removed","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     * is greater than the current amount of leaves.","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"    public LeaveBalance removeLeaves(LeaveBalance leaveBalance) {","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        assert(leaveBalance.value \u003e 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        int updatedValue \u003d value - leaveBalance.value;","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        if (updatedValue \u003c MIN_LEAVES) {","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        return new LeaveBalance(String.valueOf(updatedValue));","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"     * Returns a LeaveBalance object that represents how many leaves","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"     * can be added to this person without going over the leave balance limit.","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"     * @return A LeaveBalance object containing the remaining leave capacity of the Person.","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    public LeaveBalance getRemainingLeaveCapacity() {","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        int leaveCapacity \u003d MAX_LEAVES - value;","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        assert(leaveCapacity \u003e\u003d 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        return new LeaveBalance(String.valueOf(leaveCapacity));","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        return Integer.toString(value);","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"                || (other instanceof LeaveBalance // instanceof handles nulls","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 value \u003d\u003d ((LeaveBalance) other).value); // state check","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":106,"boonhaii":1,"1waykiat":2}},{"path":"src/main/java/seedu/address/model/person/LeavesTaken.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import java.util.PriorityQueue;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":" * Represents a Person\u0027s taken leaves in the employee book.","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":" * Guarantees: immutable;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"public class LeavesTaken {","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"            \"Leaves should only contain non-negative integers, and it should not be blank.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    // Dates are sorted in ascending order","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public final PriorityQueue\u003cLocalDate\u003e value;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * Constructs a {@code LeavesTaken} object.","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    public LeavesTaken() {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"        this.value \u003d new PriorityQueue\u003c\u003e(LocalDate::compareTo);","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"     * Constructs a {@code LeavesTaken} object.","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"     * @param dates A list representing a sequence of dates.","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"    public LeavesTaken(List\u003cLocalDate\u003e dates) {","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(dates);","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        this.value \u003d new PriorityQueue\u003c\u003e(LocalDate::compareTo);","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        value.addAll(dates);","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated LeavesTaken object with the specified date added.","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     * @param date The date that is to be added.","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"     * @return An updated LeavesTaken object.","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"     * @throws IllegalArgumentException if the input date has already been","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"     *                                  assigned to this employee","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    public LeavesTaken addDate(LocalDate date) {","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        List\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e(value);","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        if (dates.contains(date)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        dates.add(date);","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        return new LeavesTaken(dates);","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated LeavesTaken object with all dates before","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"     * the input date removed, inclusive of the date itself.","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"     * E.g. if 2021-10-20 is the input, all dates before 2021-10-20","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"     * as well as 2021-10-20 itself will be removed.","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"     * @param beforeDate The date that is to be used.","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"     * @return An updated LeavesTaken object.","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"    public LeavesTaken removeDatesBefore(LocalDate beforeDate) {","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        List\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e(value);","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        List\u003cLocalDate\u003e newDates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        for (LocalDate date : dates) {","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"            // Only keep dates that are greater than the input date","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"            if (date.compareTo(beforeDate) \u003e 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"                newDates.add(date);","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        return new LeavesTaken(newDates);","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"     * Checks if the input date is contained within a given LeavesTaken object.","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"     * @param date The date that is to be checked.","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"     * @return True if the input date is contained, false otherwise.","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"    public boolean containsDate(LocalDate date) {","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        List\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e(value);","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        return dates.contains(date);","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"     * Checks if the LeavesTaken object contains at least one date within","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"     * a given date range. (start and end dates inclusive)","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"     * @param startDate The start date of the date range.","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"     * @param endDate The end date of the date range.","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"     * @return True if a date is contained within the input date range, false otherwise.","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    public boolean containsDateRange(LocalDate startDate, LocalDate endDate) {","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        List\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e(value);","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"        for (LocalDate date : dates) {","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"            // Check if the date is within the range","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"            if (date.compareTo(startDate) \u003e\u003d 0","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"                    \u0026\u0026 date.compareTo(endDate) \u003c\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"                return true;","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    public List\u003cLocalDate\u003e toList() {","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"        return new ArrayList\u003c\u003e(value);","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"        List\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e(value);","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        StringBuilder datesString \u003d new StringBuilder();","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        for (LocalDate date : dates) {","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"            datesString.append(date.toString()).append(\" \");","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"        return datesString.toString().trim();","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"1waykiat"},"content":"     * Builds a string to list the dates of the leaves taken better formatted to display to the user.","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"1waykiat"},"content":"     * Numbers the dates in order and adds newline per date.","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":129,"author":{"gitId":"1waykiat"},"content":"     * @return String to be displayed","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"1waykiat"},"content":"    public String toDisplayString() {","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"1waykiat"},"content":"        List\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e(value);","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"1waykiat"},"content":"        if (dates.isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"1waykiat"},"content":"            return \"No leaves assigned yet!\";","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"1waykiat"},"content":"        StringBuilder displayString \u003d new StringBuilder();","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"        displayString.append(\"Applied Leave Dates:\\n\");","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"1waykiat"},"content":"        for (int index \u003d 1; index \u003c\u003d dates.size(); index++) {","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"1waykiat"},"content":"            displayString.append(index).append(\". \");","lastModifiedDate":"2021-10-27"},{"lineNumber":141,"author":{"gitId":"1waykiat"},"content":"            displayString.append(dates.get(index - 1).toString()).append(\"\\n\");","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"1waykiat"},"content":"        return displayString.toString().trim();","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":145,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"                || (other instanceof LeavesTaken) // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 Arrays.equals(value.toArray(), ((LeavesTaken) other).value.toArray()); // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"danielsimre":132,"boonhaii":1,"1waykiat":19}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import org.apache.commons.lang3.StringUtils;","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"        fullName \u003d processName(name);","lastModifiedDate":"2021-11-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"     * Capitalizes the given name and removes excess whitespaces.","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"     * @param name The name given as an argument","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"     * @return The processed name, which is capitalized and has excess whitespaces removed.","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    public static String processName(String name) {","lastModifiedDate":"2021-11-01"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"        String[] words \u003d name.split(\" \");","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"        String word \u003d words[0];","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"        word \u003d StringUtils.capitalize(word);","lastModifiedDate":"2021-11-01"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"        StringBuffer processedName \u003d new StringBuffer(word);","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"        for (int i \u003d 1; i \u003c words.length; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"            if (words[i].equals(\"\")) {","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"                continue;","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"            word \u003d words[i];","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"            word \u003d word.trim();","lastModifiedDate":"2021-11-01"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"            word \u003d StringUtils.capitalize(word);","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"            processedName \u003d processedName.append(\" \").append(word);","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"        return processedName.toString();","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 fullName.equalsIgnoreCase(((Name) other).fullName)); // state check","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"boonhaii":27,"-":56}},{"path":"src/main/java/seedu/address/model/person/ObservablePerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import seedu.address.ui.UiObserver;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"/**","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":" * Observable class for Person to use Observer pattern to update InfoPanel.","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":" */","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"public class ObservablePerson {","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"    private Person personToView;","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"    private final ArrayList\u003cUiObserver\u003e uiObserverList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"     * Initialises the ObservablePerson object with the person to be viewed.","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"     * @param person Person to be viewed","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"    public ObservablePerson(Person person) {","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"        personToView \u003d person;","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"     * Initialises the ObservablePerson object with null as person to view,","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"     * representing that no person is to be viewed.","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"    public ObservablePerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"        personToView \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"     * Sets the new person to be viewed in the ObservablePerson object,","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"     * and updates the respective Ui components that are observing it.","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"     * @param person New person to be viewed","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"    public void setPerson(Person person) {","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"        personToView \u003d person;","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"        updateUi();","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"     * Sets person to be viewed as null, representing that no person is to be viewed,","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"     * and updates the respective Ui components that are observing it.","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"    public void setEmptyPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"        personToView \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"        updateUi();","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"    public Person getPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"        return personToView;","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"1waykiat"},"content":"     * Adds any {@code UiObserver} to the list of observers to be updated when","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"1waykiat"},"content":"     * {@code personToView} is updated through {@code setPerson}.","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"     * @param observer Observer to be updated upon change of viewing person","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"    public void addUiObserver(UiObserver observer) {","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"        uiObserverList.add(observer);","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"     * Updates all the {@code UiObserver} in the observer list with the current person to view.","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"    private void updateUi() {","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"        for (UiObserver obs : uiObserverList) {","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"            obs.update(personToView);","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"1waykiat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"1waykiat"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"1waykiat"},"content":"                || (other instanceof ObservablePerson // instanceof handles nulls","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"1waykiat"},"content":"                \u0026\u0026 personToView.equals(((ObservablePerson) other).getPerson()));","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"1waykiat":84}},{"path":"src/main/java/seedu/address/model/person/Overtime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" * Represents a Person\u0027s overtime in the employee book.","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidOvertime(String)}","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"public class Overtime {","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    public static final int MIN_OVERTIME \u003d 0;","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    public static final int MAX_OVERTIME \u003d 744; // 24 hours * 31 days","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"            \"Overtime should only contain an integer value between \"","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"                    + MIN_OVERTIME + \" and \" + MAX_OVERTIME","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"                    + \" (both inclusive), and it should not be blank.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public final int value;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Constructs an {@code Overtime} object.","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param amount A valid value in hours.","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    public Overtime(String amount) {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(amount);","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        checkArgument(isValidOvertime(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        this.value \u003d Integer.parseInt(amount);","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     * Returns true if a given numerical string is non-negative","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * that is within bounds (between MIN_OVERTIME and MAX_OVERTIME, both inclusive).","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * @param test The string input that is to be parsed into an integer.","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     * @return True if the string is a non-negative integer and within bounds, false otherwise.","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    public static boolean isValidOvertime(String test) {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        requireNonNull(test);","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        // Valid integer check","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        if (!StringUtil.isNonNegativeInteger(test)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"            return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        // Within bounds check","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        int amount \u003d Integer.parseInt(test);","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        return amount \u003e\u003d MIN_OVERTIME \u0026\u0026 amount \u003c\u003d MAX_OVERTIME;","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated Overtime object with the specified number of overtime hours added.","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"     * @param overtime The number of overtime hours to be added.","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Overtime object.","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     * @throws IllegalArgumentException if the amount of overtime to be added","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * causes the total overtime to exceed the maximum allowed overtime.","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    public Overtime addOvertime(Overtime overtime) {","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        assert(overtime.value \u003e 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        int updatedValue \u003d value + overtime.value;","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        if (updatedValue \u003e MAX_OVERTIME) {","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        return new Overtime(String.valueOf(updatedValue));","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     * Returns an updated Overtime object with the specified number of overtime hours removed.","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * @param overtime The number of overtime hours to be removed.","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     * @return An updated Overtime object.","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * @throws IllegalArgumentException if the number of overtime hours to be removed","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     * is greater than the current number of overtime hours.","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"    public Overtime removeOvertime(Overtime overtime) {","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        assert(overtime.value \u003e 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        int updatedValue \u003d value - overtime.value;","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        if (updatedValue \u003c MIN_OVERTIME) {","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        return new Overtime(String.valueOf(updatedValue));","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"     * Returns an Overtime object that represents how many overtime worked","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"     * can be added to this person without going over the overtime hours worked limit.","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"     * @return An Overtime object containing the remaining overtime hours worked capacity of the Person.","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    public Overtime getRemainingOvertimeCapacity() {","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        int overtimeWorkedCapacity \u003d MAX_OVERTIME - value;","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        assert(overtimeWorkedCapacity \u003e\u003d 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        return new Overtime(String.valueOf(overtimeWorkedCapacity));","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        return Integer.toString(value);","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"                || (other instanceof Overtime // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 value \u003d\u003d ((Overtime) other).value); // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"danielsimre":106,"boonhaii":1,"1waykiat":2}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    // Employee fields","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    private final Role role;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    private final LeaveBalance leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    private final LeavesTaken leavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"    private final HourlySalary hourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    private final HoursWorked hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    private final Overtime overtime;","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"    private final CalculatedPay calculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * Constructs a {@code Person} object.","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * All fields except for overtime and leavesTaken must be present and not null.","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Role role, LeaveBalance leaveBalance,","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"                  HourlySalary hourlySalary, HoursWorked hoursWorked, CalculatedPay pay, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(name, phone, email, address, role, leaveBalance, hourlySalary, hoursWorked, tags);","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"        this.role \u003d role;","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        this.leaveBalance \u003d leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        this.leavesTaken \u003d new LeavesTaken();","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"        this.hourlySalary \u003d hourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"        this.hoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        this.overtime \u003d new Overtime(\"0\");","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"        this.calculatedPay \u003d pay;","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * Constructs a {@code Person} object with overtime.","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     * All fields, including overtime and leavesTaken, must be present and not null.","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Role role, LeaveBalance leaveBalance,","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"                  LeavesTaken leavesTaken, HourlySalary salary, HoursWorked hoursWorked, Overtime overtime,","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"                  CalculatedPay pay, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        requireAllNonNull(name, phone, email, address, role, leaveBalance, salary, hoursWorked, tags);","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        this.email \u003d email;","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        this.address \u003d address;","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        this.role \u003d role;","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        this.leaveBalance \u003d leaveBalance;","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        this.leavesTaken \u003d leavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"beefham"},"content":"        this.hourlySalary \u003d salary;","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        this.hoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        this.overtime \u003d overtime;","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"        this.calculatedPay \u003d pay;","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"    public Role getRole() {","lastModifiedDate":"2021-10-01"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"        return role;","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    public LeaveBalance getLeaveBalance() {","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        return leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    public LeavesTaken getLeavesTaken() {","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"        return leavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"    public HourlySalary getSalary() {","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"        return hourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"    public HoursWorked getHoursWorked() {","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"        return hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"    public Overtime getOvertime() {","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        return overtime;","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"1waykiat"},"content":"    public CalculatedPay getCalculatedPay() {","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"1waykiat"},"content":"        return calculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":121,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":122,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"szelongq"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":132,"author":{"gitId":"szelongq"},"content":"     * Returns true if the person\u0027s {@code CalculatedPay} value is not zero.","lastModifiedDate":"2021-10-13"},{"lineNumber":133,"author":{"gitId":"szelongq"},"content":"     * This means that the person still has pay that has not been paid yet.","lastModifiedDate":"2021-10-13"},{"lineNumber":134,"author":{"gitId":"szelongq"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":135,"author":{"gitId":"szelongq"},"content":"    public boolean isPaid() {","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"szelongq"},"content":"        return calculatedPay.value \u003d\u003d 0;","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":138,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"     * Returns true if both persons have the same phone.","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"     * No two different employees should have the same phone number.","lastModifiedDate":"2021-11-01"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"    public boolean hasSamePhone(Person otherPerson) {","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2021-11-01"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"            return true;","lastModifiedDate":"2021-11-01"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2021-11-01"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone());","lastModifiedDate":"2021-11-01"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"     * Returns true if both persons have the same email.","lastModifiedDate":"2021-11-01"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"     * No two different employees should have the same email.","lastModifiedDate":"2021-11-01"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"    public boolean hasSameEmail(Person otherPerson) {","lastModifiedDate":"2021-11-01"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2021-11-01"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"            return true;","lastModifiedDate":"2021-11-01"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":172,"author":{"gitId":"boonhaii"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2021-11-01"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail());","lastModifiedDate":"2021-11-01"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":195,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 otherPerson.getRole().equals(getRole())","lastModifiedDate":"2021-10-01"},{"lineNumber":196,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 otherPerson.getLeaveBalance().equals(getLeaveBalance())","lastModifiedDate":"2021-10-27"},{"lineNumber":197,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 otherPerson.getLeavesTaken().equals(getLeavesTaken())","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 otherPerson.getSalary().equals(getSalary())","lastModifiedDate":"2021-10-08"},{"lineNumber":199,"author":{"gitId":"1waykiat"},"content":"                \u0026\u0026 otherPerson.getOvertime().equals(getOvertime())","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"1waykiat"},"content":"                \u0026\u0026 otherPerson.getCalculatedPay().equals(getCalculatedPay())","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":207,"author":{"gitId":"danielsimre"},"content":"        return Objects.hash(name, phone, email, address, role, leaveBalance, leavesTaken,","lastModifiedDate":"2021-10-27"},{"lineNumber":208,"author":{"gitId":"danielsimre"},"content":"                hourlySalary, hoursWorked, overtime, calculatedPay, tags);","lastModifiedDate":"2021-10-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":220,"author":{"gitId":"danielsimre"},"content":"                .append(getAddress())","lastModifiedDate":"2021-10-07"},{"lineNumber":221,"author":{"gitId":"boonhaii"},"content":"                .append(\"; Role: \")","lastModifiedDate":"2021-10-01"},{"lineNumber":222,"author":{"gitId":"boonhaii"},"content":"                .append(getRole())","lastModifiedDate":"2021-10-01"},{"lineNumber":223,"author":{"gitId":"boonhaii"},"content":"                .append(\"; Leaves: \")","lastModifiedDate":"2021-10-01"},{"lineNumber":224,"author":{"gitId":"danielsimre"},"content":"                .append(getLeaveBalance())","lastModifiedDate":"2021-10-27"},{"lineNumber":225,"author":{"gitId":"boonhaii"},"content":"                .append(\"; Salary: \")","lastModifiedDate":"2021-10-01"},{"lineNumber":226,"author":{"gitId":"boonhaii"},"content":"                .append(getSalary())","lastModifiedDate":"2021-10-01"},{"lineNumber":227,"author":{"gitId":"boonhaii"},"content":"                .append(\"; Hours Worked: \")","lastModifiedDate":"2021-10-01"},{"lineNumber":228,"author":{"gitId":"danielsimre"},"content":"                .append(getHoursWorked());","lastModifiedDate":"2021-11-03"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"danielsimre":50,"szelongq":8,"boonhaii":51,"beefham":1,"-":118,"1waykiat":10}},{"path":"src/main/java/seedu/address/model/person/PersonInput.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import com.opencsv.bean.CsvBindByName;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":" * Represents a PersonInput object with raw data taken from the csv file.","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":" * Used as an intermediate object before converting this object into a person object to be used by the AddressBook.","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"public class PersonInput {","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"    // Identity fields","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Name\", required \u003d true)","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"    private String name;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Contact Number\", required \u003d true)","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    private String phone;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Email\", required \u003d true)","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    private String email;","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"    // Data fields","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Residential Address\", required \u003d true)","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"    private String address;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Tags\", required \u003d false)","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    private String tags;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"    // Employee fields","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Role\", required \u003d true)","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    private String role;","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Leave Balance\", required \u003d false)","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    private String leave;","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Salary\", required \u003d false)","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    private String salary;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Hours Worked\", required \u003d false)","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    private String hoursWorked;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    @CsvBindByName(column \u003d \"Overtime\", required \u003d false)","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"    private String overtime;","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    public PersonInput(){};","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"    public String getName() {","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"        return name;","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    public String getPhone() {","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"        return phone;","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    public String getEmail() {","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"        return email;","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"    public String getAddress() {","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"        return address;","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"    public String getRole() {","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"        return role;","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"    public String getLeaves() {","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"        return leave;","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"    public String getSalary() {","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        return salary;","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"    public String getHoursWorked() {","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"        return hoursWorked;","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"    public String getOvertime() {","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"        return overtime;","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"    public String getTags() {","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"        return tags;","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"    public void setTags(String tags) {","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"        this.tags \u003d tags;","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"    public void setName(String name) {","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"    public void setPhone(String phone) {","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"boonhaii"},"content":"    public void setEmail(String email) {","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"        this.email \u003d email;","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"    public void setAddress(String address) {","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"        this.address \u003d address;","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"    public void setRole(String role) {","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"        this.role \u003d role;","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"    public void setLeaves(String leave) {","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"        this.leave \u003d leave;","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"    public void setSalary(String salary) {","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"        this.salary \u003d salary;","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"    public void setHoursWorked(String hoursWorked) {","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"        this.hoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"    public void setOvertime(String overtime) {","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"        this.overtime \u003d overtime;","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"boonhaii":122}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"boonhaii":1,"-":52}},{"path":"src/main/java/seedu/address/model/person/Role.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":" * Represents a Person\u0027s Role in the employee book.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"public class Role {","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"            \"Roles must start with an capital/non-capital alphabet, followed by any number of alphanumeric\"","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"                    + \" characters, and it should not be blank.\"","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"                    + \"Special characters such as brackets, hyphens, ampersands and slashes are allowed.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    /*","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"     * Role must start with an alphabet, which can be followed by any number of alphanumeric characters.","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"     * Special characters such as brackets, hyphens, ampersands and slashes are allowed.","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"     * Brackets are only allowed to have a nested depth of 2.","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"    public static final String VALIDATION_REGEX \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"            \"^[a-zA-Z][a-zA-Z0-9\u0026/\\\\-, ]*[\\\\[(]?[a-zA-Z0-9\u0026/\\\\-, ]*[\\\\[\\\\]()\u0026]?[a-zA-Z0-9/\u0026\\\\- ]*[)\\\\]]{0,2}\";","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"    public final String value;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"     * Constructs a {@code Role}.","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"     * @param roleName A valid Role Name.","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    public Role(String roleName) {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(roleName);","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"        checkArgument(isValidRole(roleName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"        this.value \u003d roleName;","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"     * Returns true if a given string is a valid name for a role.","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    public static boolean isValidRole(String test) {","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(test);","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    public String toString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"        return this.value;","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"                || (other instanceof Role // instanceof handles nulls","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"                \u0026\u0026 value.equals(((Role) other).value)); // state check","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"        return value.hashCode();","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"boonhaii":64}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.exceptions.DuplicateEmailException;","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.exceptions.DuplicatePhoneException;","lastModifiedDate":"2021-11-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"     * Returns true if the list contains an equivalent phone number used by another person.","lastModifiedDate":"2021-11-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    public boolean hasDuplicatePhone(Person toCheck) {","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"        return internalList.stream().anyMatch(toCheck::hasSamePhone);","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"     * Returns true if the list contains an equivalent email used by another person.","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"    public boolean hasDuplicateEmail(Person toCheck) {","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"        return internalList.stream().anyMatch(toCheck::hasSameEmail);","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"        int[] phonesCheckResult \u003d phonesAreUnique(persons);","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"        int[] emailCheckResult \u003d emailsAreUnique(persons);","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"        if (phonesCheckResult !\u003d null) {","lastModifiedDate":"2021-11-01"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"            throw new DuplicatePhoneException(phonesCheckResult);","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"        if (emailCheckResult !\u003d null) {","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"            throw new DuplicateEmailException(emailCheckResult);","lastModifiedDate":"2021-11-01"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"    private int[] emailsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2021-11-01"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"                if (persons.get(i).hasSameEmail(persons.get(j))) {","lastModifiedDate":"2021-11-01"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"                    return new int[]{i, j};","lastModifiedDate":"2021-11-01"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"                }","lastModifiedDate":"2021-11-01"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"        return null;","lastModifiedDate":"2021-11-01"},{"lineNumber":172,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"    private int[] phonesAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2021-11-01"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":176,"author":{"gitId":"boonhaii"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"                if (persons.get(i).hasSamePhone(persons.get(j))) {","lastModifiedDate":"2021-11-01"},{"lineNumber":178,"author":{"gitId":"boonhaii"},"content":"                    return new int[]{i, j};","lastModifiedDate":"2021-11-01"},{"lineNumber":179,"author":{"gitId":"boonhaii"},"content":"                }","lastModifiedDate":"2021-11-01"},{"lineNumber":180,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":181,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":182,"author":{"gitId":"boonhaii"},"content":"        return null;","lastModifiedDate":"2021-11-01"},{"lineNumber":183,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"boonhaii":48,"-":136}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateEmailException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2021-11-01"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":" * identity).","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"public class DuplicateEmailException extends RuntimeException {","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"    public DuplicateEmailException(int[] indices) {","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"        super(String.format(\"Duplicate emails detected in Rows %d and %d.\", indices[0] + 1, indices[1] + 1));","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-11-01"}],"authorContributionMap":{"boonhaii":11}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicatePhoneException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2021-11-01"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":" * identity).","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"public class DuplicatePhoneException extends RuntimeException {","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"    public DuplicatePhoneException(int[] indices) {","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"        super(String.format(\"Duplicate phone numbers detected in Rows %d and %d.\", indices[0] + 1, indices[1] + 1));","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-11-01"}],"authorContributionMap":{"boonhaii":11}},{"path":"src/main/java/seedu/address/model/person/predicates/AddressContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":" * Tests that a {@code Person}\u0027s {@code Address} contains any of the keywords given.","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":" * Addresses match if the specified keywords are present in the Address.","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"public class AddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"     * Tests if the person given contains the given keywords in their address. Not case sensitive.","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                .anyMatch(keyword -\u003e (person.getAddress().value.toLowerCase().contains(keyword.toLowerCase())));","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"boonhaii":4,"beefham":32}},{"path":"src/main/java/seedu/address/model/person/predicates/EmailContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":" * Tests that a {@code Person}\u0027s {@code Email} contains any of the keywords given.","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"public class EmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"     * Tests if the person given contains the given keywords in their email. Not case sensitive.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"                .anyMatch(keyword -\u003e (person.getEmail().value.toLowerCase().contains(keyword.toLowerCase())));","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"beefham":35}},{"path":"src/main/java/seedu/address/model/person/predicates/HoursEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class HoursEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public HoursEqualPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has worked a number of hours equal to the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose hours worked is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of hours worked is equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getHoursWorked().value \u003d\u003d this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof HoursEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((HoursEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/HoursLessThanEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class HoursLessThanEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final float value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public HoursLessThanEqualPredicate(float value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has worked a number of hours less than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose hours worked is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of hours worked is less than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getHoursWorked().value \u003c\u003d this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof HoursLessThanEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((HoursLessThanEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/HoursLessThanPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class HoursLessThanPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public HoursLessThanPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has worked a number of hours strictly less than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose hours worked is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of hours worked is strictly less than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getHoursWorked().value \u003c this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof HoursLessThanPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((HoursLessThanPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/HoursMoreThanEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class HoursMoreThanEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public HoursMoreThanEqualPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has worked a number of hours more than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose hours worked is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of hours worked is more than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getHoursWorked().value \u003e\u003d this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof HoursMoreThanEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((HoursMoreThanEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/HoursMoreThanPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class HoursMoreThanPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public HoursMoreThanPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has worked a number of hours strictly more than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose hours worked is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of hours worked is strictly more than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getHoursWorked().value \u003e this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof HoursMoreThanPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((HoursMoreThanPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/LeaveEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class LeaveEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public LeaveEqualPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a number of leaves equal to the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose number of leaves is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of leaves is equal to the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"        return person.getLeaveBalance().value \u003d\u003d this.value;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof LeaveEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((LeaveEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"danielsimre":1,"beefham":29}},{"path":"src/main/java/seedu/address/model/person/predicates/LeaveLessThanEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class LeaveLessThanEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final float value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public LeaveLessThanEqualPredicate(float value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a number of leaves less than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose number of leaves is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of leaves is less than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"        return person.getLeaveBalance().value \u003c\u003d this.value;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof LeaveLessThanEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((LeaveLessThanEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"danielsimre":1,"beefham":29}},{"path":"src/main/java/seedu/address/model/person/predicates/LeaveLessThanPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class LeaveLessThanPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public LeaveLessThanPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a number of leaves strictly less than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose number of leaves is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of leaves is strictly less than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"        return person.getLeaveBalance().value \u003c this.value;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof LeaveLessThanPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((LeaveLessThanPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"danielsimre":1,"beefham":29}},{"path":"src/main/java/seedu/address/model/person/predicates/LeaveMoreThanEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class LeaveMoreThanEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public LeaveMoreThanEqualPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a number of leaves more than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose number of leaves is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of leaves is more than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"        return person.getLeaveBalance().value \u003e\u003d this.value;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof LeaveMoreThanEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((LeaveMoreThanEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"danielsimre":1,"beefham":29}},{"path":"src/main/java/seedu/address/model/person/predicates/LeaveMoreThanPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class LeaveMoreThanPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public LeaveMoreThanPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a number of leaves strictly more than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose number of leaves is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s number of leaves is strictly more than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"        return person.getLeaveBalance().value \u003e this.value;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof LeaveMoreThanPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((LeaveMoreThanPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"danielsimre":1,"beefham":29}},{"path":"src/main/java/seedu/address/model/person/predicates/LeavesTakenContainsDatesPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import javafx.util.Pair;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":" * Tests that a {@code Person}\u0027s {@code LeavesTaken} contains any of the dates given,","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":" * as well as if the {@code LeavesTaken} object contains a date within the date ranges given.","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":" * A match is found if the specified date is present, or if the person has a","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":" * leave within the date range.","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"public class LeavesTakenContainsDatesPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    private final List\u003cLocalDate\u003e dates;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    private final List\u003cPair\u003cLocalDate, LocalDate\u003e\u003e dateRanges;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     * Creates a LeavesTakenContainsDatePredicate object.","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * @param dates List of dates that are to be checked by the predicate.","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @param dateRanges List of date ranges that are to be checked by the predicate.","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    public LeavesTakenContainsDatesPredicate(List\u003cLocalDate\u003e dates,","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"                                             List\u003cPair\u003cLocalDate, LocalDate\u003e\u003e dateRanges) {","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"        this.dates \u003d dates;","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        this.dateRanges \u003d dateRanges;","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"     * Tests if the person given contains the given dates in their assigned leaves,","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"     * or the person contains a date that is within the specified date ranges.","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * @return True if any tags that the person has contains any of the queried dates,","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * or the person contains a date that is within the specified date ranges.","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        boolean containsDate \u003d dates.stream()","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"                .anyMatch(date -\u003e person.getLeavesTaken().containsDate(date));","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        boolean isWithinDateRange \u003d dateRanges.stream()","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"                .anyMatch(datePair -\u003e person.getLeavesTaken()","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"                        .containsDateRange(datePair.getKey(), datePair.getValue()));","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        return containsDate || isWithinDateRange;","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"                || (other instanceof LeavesTakenContainsDatesPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 dates.equals(((LeavesTakenContainsDatesPredicate) other).dates)); // state check","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"danielsimre":55}},{"path":"src/main/java/seedu/address/model/person/predicates/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":" * Tests that a {@code Person}\u0027s {@code Name} contains any of the keywords given.","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":" * Names match if the specified keywords are present in the Name.","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"     * Tests if the person given contains the given keywords in their name. Not case sensitive.","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"boonhaii":7,"beefham":2,"-":28}},{"path":"src/main/java/seedu/address/model/person/predicates/OvertimeEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class OvertimeEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public OvertimeEqualPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"     * Tests if the person given has overtime equal to the given value.","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose overtime is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"     * @return true if the person\u0027s overtime is equal to the given value.","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getOvertime().value \u003d\u003d this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof OvertimeEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((OvertimeEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":28,"1waykiat":2}},{"path":"src/main/java/seedu/address/model/person/predicates/OvertimeLessThanEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class OvertimeLessThanEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final float value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public OvertimeLessThanEqualPredicate(float value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a overtime less than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose overtime is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s overtime is less than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getOvertime().value \u003c\u003d this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof OvertimeLessThanEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((OvertimeLessThanEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/OvertimeLessThanPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class OvertimeLessThanPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public OvertimeLessThanPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has overtime strictly less than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose overtime is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s overtime is strictly less than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getOvertime().value \u003c this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof OvertimeLessThanPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((OvertimeLessThanPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/OvertimeMoreThanEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class OvertimeMoreThanEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public OvertimeMoreThanEqualPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has overtime more than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose overtime is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s overtime is more than or equal the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getOvertime().value \u003e\u003d this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof OvertimeMoreThanEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((OvertimeMoreThanEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/OvertimeMoreThanPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class OvertimeMoreThanPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final int value;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public OvertimeMoreThanPredicate(int value) {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has overtime strictly more than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose overtime is to be tested","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s overtime is strictly more than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getOvertime().value \u003e this.value;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof OvertimeMoreThanPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((OvertimeMoreThanPredicate) other).value); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/PersonIsPaidPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class PersonIsPaidPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        return !person.isPaid();","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"                || (other instanceof PersonIsPaidPredicate);","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"beefham":19}},{"path":"src/main/java/seedu/address/model/person/predicates/PhoneNumberMatchesPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":" * Tests that a {@code Person}\u0027s {@code Phone} matches the specified phone number.","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":" * Phones match if their values are exactly the same.","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"public class PhoneNumberMatchesPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keyNumbers;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"    public PhoneNumberMatchesPredicate(List\u003cString\u003e keyNumbers) {","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        this.keyNumbers \u003d keyNumbers;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"     * Tests if the person given contains the given numbers in their Phone Number.","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"     * @return True if any tags that the person has contains the exact value.","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        String numberToTest \u003d person.getPhone().value;","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        return keyNumbers.stream()","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                .anyMatch(number -\u003e numberToTest.equals(number));","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"                || (other instanceof PhoneNumberMatchesPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keyNumbers.equals(((PhoneNumberMatchesPredicate) other).keyNumbers)); // state check","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"boonhaii":6,"beefham":31}},{"path":"src/main/java/seedu/address/model/person/predicates/RoleContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"/**","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":" * Tests that a {@code Person}\u0027s {@code Role} contains any of the keywords given.","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":" * Role match if the specified keywords are present in the role.","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":" */","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"public class RoleContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"    public RoleContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"     * Tests if the person given contains the given keywords in their role. Not case sensitive.","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                .anyMatch(keyword -\u003e (person.getRole().value.toLowerCase().contains(keyword.toLowerCase())));","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"                || (other instanceof RoleContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keywords.equals(((RoleContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"boonhaii":5,"beefham":31}},{"path":"src/main/java/seedu/address/model/person/predicates/SalaryIsEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class SalaryIsEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final double value;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    private final double threshold \u003d 0.01; // Salaries are 2 d.p","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    public SalaryIsEqualPredicate(double value) {","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a salary equal to the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     * @param person The person whose salary is to be tested","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s salary is equal to the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"        double salaryToCompare \u003d person.getSalary().value;","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        return (Math.abs(salaryToCompare - value) \u003c threshold);","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"                || (other instanceof SalaryIsEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((SalaryIsEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"beefham":33}},{"path":"src/main/java/seedu/address/model/person/predicates/SalaryIsLessThanEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class SalaryIsLessThanEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final double value;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public SalaryIsLessThanEqualPredicate(double value) {","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a salary less than or equal the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose salary is to be tested","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s salary is less than or equal the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getSalary().value \u003c\u003d this.value;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof SalaryIsLessThanEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((SalaryIsLessThanEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/SalaryIsLessThanPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class SalaryIsLessThanPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final double value;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public SalaryIsLessThanPredicate(double value) {","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a salary strictly less than or equal the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose salary is to be tested","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s salary is strictly less than or equal the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getSalary().value \u003c this.value;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof SalaryIsLessThanPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((SalaryIsLessThanPredicate) other).value); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/SalaryIsMoreThanEqualPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class SalaryIsMoreThanEqualPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final double value;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public SalaryIsMoreThanEqualPredicate(double value) {","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a salary more than or equal the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose salary is to be tested","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s salary is greater than or equal the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getSalary().value \u003e\u003d this.value;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof SalaryIsMoreThanEqualPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((SalaryIsMoreThanEqualPredicate) other).value); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/SalaryIsMoreThanPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"public class SalaryIsMoreThanPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"    private final double value;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"    public SalaryIsMoreThanPredicate(double value) {","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"     * Tests if the person given has a salary strictly more than the given value.","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"     * @param person The person whose salary is to be tested","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"     * @return true if the person\u0027s salary is strictly more than the given value.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        return person.getSalary().value \u003e this.value;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"                || (other instanceof SalaryIsMoreThanPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 value \u003d\u003d ((SalaryIsMoreThanPredicate) other).value); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"beefham":30}},{"path":"src/main/java/seedu/address/model/person/predicates/TagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} contains any of the keywords given.","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"     * Test if the person contains tags whose string value contains any of the keywords. Not case sensitive.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"     * This allows find to search for people tagged with \"friends\" with the command \"find t/friend\"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"     * This only works since tags are alphanumeric and contain no whitespaces unlike names.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"     * This implementation allows queries like find t/e to return every person with a tag that contains the letter e.","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"     * May not be intended but will need to find a better method of testing.","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"     * @param person The person whose tags are to be tested","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"     * @return True if any tags that the person has contains any of the queried keywords.","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"                .anyMatch(keyword -\u003e (person.getTags().stream()","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"                        .anyMatch(tag -\u003e tag.tagName.toLowerCase().contains(keyword.toLowerCase()))));","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"beefham":41}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Role(\"Admin Assistant\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(\"5\"), new HourlySalary(\"15.00\"), new HoursWorked(\"40\"),","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"                new CalculatedPay(\"0\"), getTagSet(\"friends\")),","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Role(\"Senior Software Engineer\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(\"14\"), new HourlySalary(\"25.00\"), new HoursWorked(\"60\"),","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"                new CalculatedPay(\"0\"), getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Role(\"HR Manager\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(\"9\"), new HourlySalary(\"18.00\"), new HoursWorked(\"55\"),","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"                new CalculatedPay(\"0\"), getTagSet(\"neighbours\")),","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"                new Role(\"Assistant Department Manager\"), new LeaveBalance(\"10\"), new HourlySalary(\"15.00\"),","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"                new HoursWorked(\"55\"), new CalculatedPay(\"0\"), getTagSet(\"family\")),","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Role(\"Logistics Officer\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(\"10\"), new HourlySalary(\"16.66\"), new HoursWorked(\"52\"),","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"                    new CalculatedPay(\"0\"), getTagSet(\"classmates\")),","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Role(\"Chief Operations Officer\"),","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(\"20\"), new HourlySalary(\"50\"), new HoursWorked(\"67\"),","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"                new CalculatedPay(\"0\"), getTagSet(\"colleagues\"))","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"danielsimre":7,"szelongq":6,"boonhaii":9,"-":49,"1waykiat":1}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    private final String role;","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"    private final String leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    private final List\u003cLocalDate\u003e leavesTaken;","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    private final String salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    private final String hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    private final String overtime;","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"    private final String calculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"            @JsonProperty(\"role\") String role, @JsonProperty(\"leaves\") String leaves,","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"            @JsonProperty(\"leavesTaken\") List\u003cLocalDate\u003e leavesTaken, @JsonProperty(\"salary\") String salary,","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"            @JsonProperty(\"hoursWorked\") String hoursWorked, @JsonProperty(\"overtime\") String overtime,","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"            @JsonProperty(\"calculatedPay\") String calculatedPay,","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"        this.role \u003d role;","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"        this.leaves \u003d leaves;","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        this.leavesTaken \u003d leavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"        this.salary \u003d salary;","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"        this.hoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        this.overtime \u003d overtime;","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"        this.calculatedPay \u003d calculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"        role \u003d source.getRole().value;","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        leaves \u003d source.getLeaveBalance().toString();","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        leavesTaken \u003d source.getLeavesTaken().toList();","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"        salary \u003d source.getSalary().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"        hoursWorked \u003d source.getHoursWorked().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        overtime \u003d source.getOvertime().toString();","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"1waykiat"},"content":"        calculatedPay \u003d source.getCalculatedPay().toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"        if (role \u003d\u003d null) {","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"        if (!Role.isValidRole(role)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"        final Role modelRole \u003d new Role(role);","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"        if (leaves \u003d\u003d null) {","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"                    LeaveBalance.class.getSimpleName()));","lastModifiedDate":"2021-10-27"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"        if (!LeaveBalance.isValidLeaveBalance(leaves)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalValueException(LeaveBalance.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"        final LeaveBalance modelLeaveBalance \u003d new LeaveBalance(leaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"        if (leavesTaken \u003d\u003d null) {","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"                    LeavesTaken.class.getSimpleName()));","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"        final LeavesTaken modelLeavesTaken \u003d new LeavesTaken(leavesTaken);","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"        if (salary \u003d\u003d null) {","lastModifiedDate":"2021-10-01"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"                    HourlySalary.class.getSimpleName()));","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"szelongq"},"content":"        if (!HourlySalary.isValidHourlySalary(salary)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(HourlySalary.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"        final HourlySalary modelHourlySalary \u003d new HourlySalary(salary);","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"        if (hoursWorked \u003d\u003d null) {","lastModifiedDate":"2021-10-01"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-01"},{"lineNumber":172,"author":{"gitId":"boonhaii"},"content":"                    HoursWorked.class.getSimpleName()));","lastModifiedDate":"2021-10-01"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"        if (!HoursWorked.isValidHoursWorked(hoursWorked)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"            throw new IllegalValueException(HoursWorked.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-01"},{"lineNumber":176,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"        final HoursWorked modelHoursWorked \u003d new HoursWorked(hoursWorked);","lastModifiedDate":"2021-10-01"},{"lineNumber":178,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"        if (overtime \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"                    Overtime.class.getSimpleName()));","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"        if (!Overtime.isValidOvertime(overtime)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"            throw new IllegalValueException(Overtime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"danielsimre"},"content":"        final Overtime modelOvertime \u003d new Overtime(overtime);","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"1waykiat"},"content":"        if (calculatedPay \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":189,"author":{"gitId":"1waykiat"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-13"},{"lineNumber":190,"author":{"gitId":"1waykiat"},"content":"                    CalculatedPay.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":191,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":192,"author":{"gitId":"1waykiat"},"content":"        if (!CalculatedPay.isValidCalculatedPay(calculatedPay)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"1waykiat"},"content":"            throw new IllegalValueException(CalculatedPay.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"1waykiat"},"content":"        final CalculatedPay modelCalculatedPay \u003d new CalculatedPay(calculatedPay);","lastModifiedDate":"2021-10-13"},{"lineNumber":196,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":198,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":199,"author":{"gitId":"danielsimre"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRole, modelLeaveBalance,","lastModifiedDate":"2021-10-27"},{"lineNumber":200,"author":{"gitId":"danielsimre"},"content":"                modelLeavesTaken, modelHourlySalary, modelHoursWorked, modelOvertime, modelCalculatedPay, modelTags);","lastModifiedDate":"2021-10-27"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"danielsimre":36,"szelongq":1,"boonhaii":44,"beefham":1,"-":108,"1waykiat":13}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103t-f11-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"danielsimre":1,"-":101}},{"path":"src/main/java/seedu/address/ui/InfoPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"import javafx.scene.text.TextAlignment;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.ObservablePerson;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":" * Display panel which shows the information and details of a Person.","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"public class InfoPanel extends UiPart\u003cRegion\u003e implements UiObserver {","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"    private static final String FXML \u003d \"InfoPanel.fxml\";","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"    // Icons","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"    private static final String EMAIL_ICON \u003d \"@ \";","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"    private static final String PHONE_ICON \u003d \"☎ \";","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"    private static final String ADDRESS_ICON \u003d \"\\uD83C\\uDFE0 \";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"    private static final String ROLE_ICON \u003d \"👤 \";","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"    private static final String SALARY_ICON \u003d \"\\uD83D\\uDCB2 \";","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"    private static final String HOURSWORKED_ICON \u003d \"\\uD83D\\uDD51 \";","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"    private static final String OVERTIME_ICON \u003d \"↷  \";","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"    private static final String LEAVES_ICON \u003d \"\\uD83C\\uDF42 \";","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"    private static final String DATES_ICON \u003d \"\\uD83D\\uDDD3 \";","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"    private static final String LIST_EMPTY_MSG \u003d \"No employee information to show! \\n\";","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"    private ScrollPane main;","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"    private Label name;","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"    private Label id;","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"    private Label phone;","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"    private Label address;","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"    private Label email;","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"    private Label role;","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    private Label leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"    private Label leaveDates;","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"    private Label salary;","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"    private Label hoursWorked;","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"    private Label overtime;","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"1waykiat"},"content":"    private Label salaryOwed;","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"1waykiat"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"1waykiat"},"content":"    private Label textOverlay;","lastModifiedDate":"2021-11-02"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"     * Creates an {@code InfoPanel} that displays information based on the given {@code ObservablePerson}.","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"     * @param p","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"    public InfoPanel(ObservablePerson p) {","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"        super(FXML);","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"        textOverlay.setText(LIST_EMPTY_MSG);","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"        textOverlay.setTextAlignment(TextAlignment.CENTER);","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"        updateInfoPanel(p.getPerson());","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"1waykiat"},"content":"        // Add InfoPanel to the ObserverList of the ObservablePerson","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"        p.addUiObserver(this);","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"1waykiat"},"content":"     * Removes the overlay on top of the InfoPanel.","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"1waykiat"},"content":"     * Overlay prevents user from viewing the contents of the InfoPanel,","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"1waykiat"},"content":"     * and displays {@code LIST_EMPTY_MSG} on top of it to notify user to start importing or adding employees.","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"1waykiat"},"content":"    private void unlock() {","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"1waykiat"},"content":"        main.setVisible(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"1waykiat"},"content":"        main.setManaged(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"1waykiat"},"content":"     * Applies the overlay on top of the InfoPanel.","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"1waykiat"},"content":"     * Overlay prevents user from viewing the contents of the InfoPanel,","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"1waykiat"},"content":"     * and displays {@code LIST_EMPTY_MSG} on top of it to notify user to start importing or adding employees.","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"1waykiat"},"content":"    private void lock() {","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"1waykiat"},"content":"        main.setVisible(false);","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"1waykiat"},"content":"        main.setManaged(false);","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"1waykiat"},"content":"     * Fills in the data of the person into the Info Panel fields.","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"1waykiat"},"content":"     * @param person Person to get the update info from","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"1waykiat"},"content":"    public void updateInfoPanel(Person person) {","lastModifiedDate":"2021-10-20"},{"lineNumber":105,"author":{"gitId":"1waykiat"},"content":"        if (person !\u003d null) {","lastModifiedDate":"2021-11-02"},{"lineNumber":106,"author":{"gitId":"1waykiat"},"content":"            unlock();","lastModifiedDate":"2021-11-02"},{"lineNumber":107,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":108,"author":{"gitId":"1waykiat"},"content":"            name.setText(person.getName().fullName);","lastModifiedDate":"2021-10-20"},{"lineNumber":109,"author":{"gitId":"1waykiat"},"content":"            phone.setText(PHONE_ICON + person.getPhone().value);","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"1waykiat"},"content":"            address.setText(ADDRESS_ICON + person.getAddress().value);","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"1waykiat"},"content":"            email.setText(EMAIL_ICON + person.getEmail().value);","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"            role.setText(ROLE_ICON + person.getRole().value);","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"1waykiat"},"content":"            leaveDates.setText(DATES_ICON + person.getLeavesTaken().toDisplayString());","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"1waykiat"},"content":"            leaveBalance.setText(","lastModifiedDate":"2021-11-02"},{"lineNumber":115,"author":{"gitId":"1waykiat"},"content":"                    String.format(LEAVES_ICON + \"Leaves Remaining: %s\", person.getLeaveBalance().toString()));","lastModifiedDate":"2021-11-02"},{"lineNumber":116,"author":{"gitId":"1waykiat"},"content":"            salary.setText(","lastModifiedDate":"2021-11-02"},{"lineNumber":117,"author":{"gitId":"1waykiat"},"content":"                    String.format(SALARY_ICON + \"Hourly salary: $%s\" + \" per hour\", person.getSalary().toString()));","lastModifiedDate":"2021-11-02"},{"lineNumber":118,"author":{"gitId":"1waykiat"},"content":"            hoursWorked.setText(","lastModifiedDate":"2021-11-02"},{"lineNumber":119,"author":{"gitId":"1waykiat"},"content":"                    String.format(HOURSWORKED_ICON + \"Hours Worked: %s\", person.getHoursWorked().toString()));","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"1waykiat"},"content":"            overtime.setText(","lastModifiedDate":"2021-11-02"},{"lineNumber":121,"author":{"gitId":"1waykiat"},"content":"                    String.format(OVERTIME_ICON + \"Overtime Hours Worked: %s\", person.getOvertime().toString()));","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"1waykiat"},"content":"            String salaryDue \u003d person.getCalculatedPay().toString(); // To be replaced by calculated salary","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"1waykiat"},"content":"            if (!salaryDue.equals(\"0.00\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":126,"author":{"gitId":"1waykiat"},"content":"                salaryOwed.setText(String.format(\"%s left unpaid!!\", salaryDue));","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"1waykiat"},"content":"            } else {","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"1waykiat"},"content":"                salaryOwed.setText(\"\");","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"1waykiat"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":130,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"1waykiat"},"content":"            tags.getChildren().clear();","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"1waykiat"},"content":"            person.getTags().stream()","lastModifiedDate":"2021-10-20"},{"lineNumber":133,"author":{"gitId":"1waykiat"},"content":"                    .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-10-20"},{"lineNumber":134,"author":{"gitId":"1waykiat"},"content":"                    .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"1waykiat"},"content":"        } else {","lastModifiedDate":"2021-11-02"},{"lineNumber":136,"author":{"gitId":"1waykiat"},"content":"            lock();","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":139,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":140,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":141,"author":{"gitId":"1waykiat"},"content":"     * Updates the InfoPanel display content with person provided.","lastModifiedDate":"2021-11-04"},{"lineNumber":142,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":143,"author":{"gitId":"1waykiat"},"content":"    @Override","lastModifiedDate":"2021-11-04"},{"lineNumber":144,"author":{"gitId":"1waykiat"},"content":"    public void update(Person person) {","lastModifiedDate":"2021-11-04"},{"lineNumber":145,"author":{"gitId":"1waykiat"},"content":"        updateInfoPanel(person);","lastModifiedDate":"2021-11-04"},{"lineNumber":146,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":147,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"danielsimre":1,"1waykiat":146}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"    private InfoPanel infoPanel;","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"    @FXML","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"    private StackPane infoPanelPlaceholder;","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"1waykiat"},"content":"        infoPanel \u003d new InfoPanel(logic.getViewingPerson());","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"1waykiat"},"content":"        infoPanelPlaceholder.getChildren().add(infoPanel.getRoot());","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":192,"1waykiat":7}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"    private static final String ROLE_ICON \u003d \"\\uD83D\\uDC64 \";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"    private static final String EMAIL_ICON \u003d \"@  \";","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    private Label role;","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    @FXML","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"    private VBox calculatedSalary;","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"        role.setText(person.getRole().value);","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"        String salaryDue \u003d person.getCalculatedPay().toString(); // To be replaced by calculated salary","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"        if (!salaryDue.equals(\"0.00\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"            Text overDueText \u003d new Text(String.format(\"NOT PAID [%s]\", salaryDue));","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"            overDueText.setFill(Color.WHITE);","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"            overDueText.setFont(Font.font(\"Open Sans Regular\", 20));","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"            calculatedSalary.getChildren().add(overDueText);","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"            calculatedSalary.setStyle(\"-fx-background-color: #C41E3A;\");","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"boonhaii":14,"-":71,"1waykiat":9}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/heron_icon.png\";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":88,"1waykiat":1}},{"path":"src/main/java/seedu/address/ui/UiObserver.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"/**","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":" * Dedicated observer class for Ui components","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":" */","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"public interface UiObserver {","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"    /** Updates the observer with {@code person} to view */","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"    void update(Person person);","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"1waykiat":13}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"* {","lastModifiedDate":"2021-10-30"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"    -fx-baseBack: #2C423F;","lastModifiedDate":"2021-10-30"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"    -fx-baseLight: #211A1D;","lastModifiedDate":"2021-10-30"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"    -fx-baseOdd: #98AE98;","lastModifiedDate":"2021-10-30"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"    -fx-baseEven: #AFC0AF;","lastModifiedDate":"2021-10-30"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"    -fx-baseDark: #20312F;","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"    -fx-base5: #f0f3bd;","lastModifiedDate":"2021-10-30"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"    background-color: -fx-baseBack; /* Used in the default.html file */","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":".label-base {","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseDark;","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseLight;","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":".label-role {","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"    -fx-font-size: 16pt;","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":".label-alert {","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"    -fx-font-size: 16pt;","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: #C41E3A;","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":".label-underlined {","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseLight;","lastModifiedDate":"2021-10-30"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"    -fx-underline: true;","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseLight;","lastModifiedDate":"2021-10-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"1waykiat"},"content":"    -fx-base: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":89,"author":{"gitId":"1waykiat"},"content":"    -fx-control-inner-background: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":90,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":91,"author":{"gitId":"1waykiat"},"content":"    -fx-table-cell-border-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":92,"author":{"gitId":"1waykiat"},"content":"    -fx-table-header-border-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"1waykiat"},"content":"        -fx-baseBack","lastModifiedDate":"2021-10-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":126,"author":{"gitId":"1waykiat"},"content":"    -fx-border-color: transparent transparent transparent -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":127,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":128,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":134,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":140,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":143,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"1waykiat"},"content":"    -fx-padding: 0;","lastModifiedDate":"2021-10-30"},{"lineNumber":147,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":148,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":149,"author":{"gitId":"1waykiat"},"content":"    -fx-border-width: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseEven","lastModifiedDate":"2021-10-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":156,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":157,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseOdd","lastModifiedDate":"2021-10-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":160,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":161,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: #00B4D8;","lastModifiedDate":"2021-10-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":164,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":167,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":170,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseLight;","lastModifiedDate":"2021-10-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":176,"author":{"gitId":"1waykiat"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2021-10-27"},{"lineNumber":177,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":183,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"1waykiat"},"content":".cell_role_label {","lastModifiedDate":"2021-10-27"},{"lineNumber":187,"author":{"gitId":"1waykiat"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-10-27"},{"lineNumber":188,"author":{"gitId":"1waykiat"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2021-10-27"},{"lineNumber":189,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2021-10-27"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":192,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":193,"author":{"gitId":"1waykiat"},"content":"     -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":194,"author":{"gitId":"1waykiat"},"content":"     -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":195,"author":{"gitId":"1waykiat"},"content":"     -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"1waykiat"},"content":"/*","lastModifiedDate":"2021-10-30"},{"lineNumber":199,"author":{"gitId":"1waykiat"},"content":"BACKGROUND COLOuR omg","lastModifiedDate":"2021-10-30"},{"lineNumber":200,"author":{"gitId":"1waykiat"},"content":"*/","lastModifiedDate":"2021-10-30"},{"lineNumber":201,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":202,"author":{"gitId":"1waykiat"},"content":"     -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":203,"author":{"gitId":"1waykiat"},"content":"     -fx-border-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseDark;","lastModifiedDate":"2021-10-30"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":211,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":215,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseLight;","lastModifiedDate":"2021-10-30"},{"lineNumber":216,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":217,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":218,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":221,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":234,"author":{"gitId":"1waykiat"},"content":"    -fx-border-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":237,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseLight;","lastModifiedDate":"2021-10-30"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":245,"author":{"gitId":"1waykiat"},"content":"    -fx-border-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":250,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":251,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":252,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseDark;","lastModifiedDate":"2021-10-30"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":309,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":322,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":326,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":327,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":340,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":341,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":342,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":344,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":351,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":352,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-30"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":355,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":356,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: derive(-fx-baseBack, 50%);","lastModifiedDate":"2021-10-30"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":358,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":360,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":363,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":365,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":367,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":369,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":371,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":373,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":375,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":377,"author":{"gitId":"1waykiat"},"content":".scroll-pane {","lastModifiedDate":"2021-10-27"},{"lineNumber":378,"author":{"gitId":"1waykiat"},"content":"    -fx-background: transparent;","lastModifiedDate":"2021-10-30"},{"lineNumber":379,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-30"},{"lineNumber":380,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":381,"author":{"gitId":"1waykiat"},"content":".scroll-pane-info {","lastModifiedDate":"2021-10-30"},{"lineNumber":382,"author":{"gitId":"1waykiat"},"content":"    -fx-background: -fx-baseEven;","lastModifiedDate":"2021-10-30"},{"lineNumber":383,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":384,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":385,"author":{"gitId":"1waykiat"},"content":"    -fx-padding: 2.1 2.5 2.5 2.5;","lastModifiedDate":"2021-10-30"},{"lineNumber":386,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":387,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":388,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":391,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":392,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":393,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":395,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":397,"author":{"gitId":"1waykiat"},"content":"    -fx-text-fill: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":398,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":400,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":403,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":405,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":409,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":410,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":411,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":413,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":415,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":416,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":417,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":419,"author":{"gitId":"1waykiat"},"content":"/* RESULT DISPLAY CHANGE COLOR */","lastModifiedDate":"2021-10-30"},{"lineNumber":420,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":421,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: transparent, -fx-baseOdd, transparent, -fx-baseOdd;","lastModifiedDate":"2021-10-30"},{"lineNumber":422,"author":{"gitId":"1waykiat"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":423,"author":{"gitId":"1waykiat"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-10-30"},{"lineNumber":424,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":425,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":427,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":430,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":432,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":434,"author":{"gitId":"1waykiat"},"content":"    -fx-background-color: #6475A6;","lastModifiedDate":"2021-10-30"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":437,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":438,"author":{"gitId":"1waykiat"},"content":"    -fx-font-size: 13;","lastModifiedDate":"2021-10-27"},{"lineNumber":439,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"-":312,"1waykiat":127}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"* {","lastModifiedDate":"2021-10-30"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"    -fx-baseBack: #2C423F;","lastModifiedDate":"2021-10-30"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"    -fx-baseLight: #211A1D;","lastModifiedDate":"2021-10-30"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"    -fx-baseOdd: #98AE98;","lastModifiedDate":"2021-10-30"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"    -fx-baseEven: #AFC0AF;","lastModifiedDate":"2021-10-30"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"    -fx-baseDark: #20312F;","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"    -fx-base5: #f0f3bd;","lastModifiedDate":"2021-10-30"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2017-03-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"    -fx-background: -fx-baseBack;","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":19,"1waykiat":9}},{"path":"src/main/resources/view/InfoPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.layout.BorderPane?\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\" styleClass\u003d\"stack-pane\"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"           xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxWidth\u003d\"Infinity\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"    \u003cScrollPane styleClass\u003d\"scroll-pane-info\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" /\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"    \u003cBorderPane\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"        \u003ccenter\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"            \u003cLabel fx:id\u003d\"textOverlay\" text\u003d\"The Employee List is Empty!!\" styleClass\u003d\"label-base\"","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"                   BorderPane.alignment\u003d\"CENTER\" /\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"        \u003c/center\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"    \u003c/BorderPane\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"    \u003cScrollPane fx:id\u003d\"main\" styleClass\u003d\"scroll-pane-info\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" \u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"        \u003cHBox styleClass\u003d\"scroll-pane-info\"\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"            \u003cVBox minWidth\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"label-header\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"label-role\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"                \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"                \u003cVBox minHeight\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel text\u003d\"🛈 Personal Information\" styleClass\u003d\"label-underlined\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"label-bright\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"label-bright\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"label-bright\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"                \u003cVBox minHeight\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel text\u003d\"Salary\" styleClass\u003d\"label-underlined\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"salary\" styleClass\u003d\"label-bright\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"hoursWorked\" styleClass\u003d\"label-bright\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"overtime\" styleClass\u003d\"label-bright\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"salaryOwed\" styleClass\u003d\"label-alert\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel text\u003d\"Leaves\" styleClass\u003d\"label-underlined\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"                \u003cLabel fx:id\u003d\"leaveBalance\" styleClass\u003d\"label-bright\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"                \u003cLabel fx:id\u003d\"leaveDates\" styleClass\u003d\"label-bright\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"danielsimre":1,"1waykiat":48}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"         title\u003d\"HeRon\" minWidth\u003d\"950\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"        \u003cHBox styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\" minWidth\u003d\"900\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"          \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"400\" prefWidth\u003d\"400\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"          \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"infoPanelPlaceholder\" maxWidth\u003d\"Infinity\"","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"1waykiat"},"content":"                     minWidth\u003d\"500\" prefWidth\u003d\"500\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"1waykiat"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"1waykiat"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"1waykiat"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":58,"1waykiat":11}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"        \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"        \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_role_label\" text\u003d\"\\$role\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"      \u003cVBox fx:id\u003d\"calculatedSalary\" minHeight\u003d\"13\" maxWidth\u003d\"40\" /\u003e","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"boonhaii":2,"-":32,"1waykiat":4}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2017-06-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"-":8,"1waykiat":1}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"        // EP: negative zero","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-0\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"    //---------------- Tests for isNonNegativeUnsignedDouble --------------------------------------","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"    public void isNonNegativeUnsignedDouble() {","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"        // EP: empty strings","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isNonNegativeUnsignedDouble(\"\")); // Boundary value","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isNonNegativeUnsignedDouble(\"  \"));","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"        // EP: not a number","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isNonNegativeUnsignedDouble(\"a\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isNonNegativeUnsignedDouble(\"aaa\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"        // EP: zero as prefix","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"szelongq"},"content":"        assertTrue(StringUtil.isNonNegativeUnsignedDouble(\"01.0\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"szelongq"},"content":"        // EP: signed numbers","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isNonNegativeUnsignedDouble(\"-0.0\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isNonNegativeUnsignedDouble(\"+0.0\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"szelongq"},"content":"        // EP: numbers with white space","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isNonNegativeUnsignedDouble(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"szelongq"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"szelongq"},"content":"        assertTrue(StringUtil.isNonNegativeUnsignedDouble(\"0.00\")); // Boundary value","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"szelongq"},"content":"        assertTrue(StringUtil.isNonNegativeUnsignedDouble(\"1\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"szelongq"},"content":"    //---------------- Tests for isDoubleWithDpWithinLimit( --------------------------------------","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"    public void isDoubleWithDpWithinLimit() {","lastModifiedDate":"2021-11-06"},{"lineNumber":83,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"szelongq"},"content":"        // EP: empty strings","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isDoubleWithDpWithinLimit(\"\", 2)); // Boundary value","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isDoubleWithDpWithinLimit(\"  \", 2));","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"szelongq"},"content":"        // EP: not a number","lastModifiedDate":"2021-11-06"},{"lineNumber":89,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isDoubleWithDpWithinLimit(\"a\", 2));","lastModifiedDate":"2021-11-06"},{"lineNumber":90,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isDoubleWithDpWithinLimit(\"aaa\", 2));","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"szelongq"},"content":"        // EP: zero as prefix","lastModifiedDate":"2021-11-06"},{"lineNumber":93,"author":{"gitId":"szelongq"},"content":"        assertTrue(StringUtil.isDoubleWithDpWithinLimit(\"01\", 2));","lastModifiedDate":"2021-11-06"},{"lineNumber":94,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":95,"author":{"gitId":"szelongq"},"content":"        // EP: numbers with white space","lastModifiedDate":"2021-11-06"},{"lineNumber":96,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isDoubleWithDpWithinLimit(\"1 0\", 2)); // Spaces in the middle","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"szelongq"},"content":"        // EP: number with more than specified decimal places","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isDoubleWithDpWithinLimit(\"1.000\", 2));","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"szelongq"},"content":"        assertFalse(StringUtil.isDoubleWithDpWithinLimit(\"6.789000\", 5));","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"szelongq"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"szelongq"},"content":"        assertTrue(StringUtil.isDoubleWithDpWithinLimit(\"0.01\", 2)); // Boundary value","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"szelongq"},"content":"        assertTrue(StringUtil.isDoubleWithDpWithinLimit(\"-1.0\", 1)); // Signed value","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"1waykiat"},"content":"    //---------------- Tests for isNonNegativeInteger --------------------------------------","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":110,"author":{"gitId":"1waykiat"},"content":"    public void isNonNegativeInteger() {","lastModifiedDate":"2021-11-04"},{"lineNumber":111,"author":{"gitId":"1waykiat"},"content":"        // EP: empty strings","lastModifiedDate":"2021-11-04"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\"\")); // Boundary value","lastModifiedDate":"2021-11-04"},{"lineNumber":113,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\"  \"));","lastModifiedDate":"2021-11-04"},{"lineNumber":114,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":115,"author":{"gitId":"1waykiat"},"content":"        // EP: not a number","lastModifiedDate":"2021-11-04"},{"lineNumber":116,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\"a\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":117,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\"aaa\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":118,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"1waykiat"},"content":"        // EP: zero","lastModifiedDate":"2021-11-04"},{"lineNumber":120,"author":{"gitId":"1waykiat"},"content":"        assertTrue(StringUtil.isNonNegativeInteger(\"0\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"1waykiat"},"content":"        // EP: negative zero","lastModifiedDate":"2021-11-04"},{"lineNumber":123,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\"-0\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":124,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":125,"author":{"gitId":"1waykiat"},"content":"        // EP: zero as prefix","lastModifiedDate":"2021-11-04"},{"lineNumber":126,"author":{"gitId":"1waykiat"},"content":"        assertTrue(StringUtil.isNonNegativeInteger(\"01\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":127,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":128,"author":{"gitId":"1waykiat"},"content":"        // EP: signed numbers","lastModifiedDate":"2021-11-04"},{"lineNumber":129,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\"-1\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":130,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\"+1\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":131,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":132,"author":{"gitId":"1waykiat"},"content":"        // EP: numbers with white space","lastModifiedDate":"2021-11-04"},{"lineNumber":133,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2021-11-04"},{"lineNumber":134,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2021-11-04"},{"lineNumber":135,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":136,"author":{"gitId":"1waykiat"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2021-11-04"},{"lineNumber":137,"author":{"gitId":"1waykiat"},"content":"        assertFalse(StringUtil.isNonNegativeInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":138,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":139,"author":{"gitId":"1waykiat"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2021-11-04"},{"lineNumber":140,"author":{"gitId":"szelongq"},"content":"        assertTrue(StringUtil.isNonNegativeInteger(\"1\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":141,"author":{"gitId":"1waykiat"},"content":"        assertTrue(StringUtil.isNonNegativeInteger(\"10\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":142,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":143,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":144,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"szelongq":58,"-":143,"1waykiat":39}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURLYSALARY_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURSWORKED_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEAVES_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OVERTIME_DESC_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"                + ADDRESS_DESC_AMY + ROLE_DESC_AMY + LEAVES_DESC_AMY + HOURLYSALARY_DESC_AMY + HOURSWORKED_DESC_AMY","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"                + OVERTIME_DESC_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"danielsimre":3,"boonhaii":4,"-":162}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE);","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"danielsimre":1,"boonhaii":1,"-":44}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.ObservablePerson;","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE, () -\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"                addCommand.execute(modelStub));","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"szelongq"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"szelongq"},"content":"        public OvertimePayRate getOvertimePayRate() {","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"szelongq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"szelongq"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"szelongq"},"content":"        public void setOvertimePayRate(OvertimePayRate overtimePayRate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"szelongq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"        public boolean hasDuplicatePhone(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"        public boolean hasDuplicateEmail(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"1waykiat"},"content":"        @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"1waykiat"},"content":"        public ObservablePerson getViewingPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":176,"author":{"gitId":"1waykiat"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"1waykiat"},"content":"        @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"1waykiat"},"content":"        public void setViewingPerson(Person p) {","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"1waykiat"},"content":"            /*","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"1waykiat"},"content":"            Although the class is meant to have all methods failing,","lastModifiedDate":"2021-10-21"},{"lineNumber":183,"author":{"gitId":"1waykiat"},"content":"            addCommand on execute is supposed to call function to update the InfoPanel.","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"1waykiat"},"content":"            */","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":186,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":187,"author":{"gitId":"1waykiat"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":188,"author":{"gitId":"1waykiat"},"content":"        public boolean isFilteredPersonListEmpty() {","lastModifiedDate":"2021-11-02"},{"lineNumber":189,"author":{"gitId":"1waykiat"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":190,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":210,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":211,"author":{"gitId":"boonhaii"},"content":"        public boolean hasDuplicatePhone(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":212,"author":{"gitId":"boonhaii"},"content":"            requireNonNull(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":213,"author":{"gitId":"boonhaii"},"content":"            return this.person.hasSamePhone(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":214,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":215,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":216,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":217,"author":{"gitId":"boonhaii"},"content":"        public boolean hasDuplicateEmail(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":218,"author":{"gitId":"boonhaii"},"content":"            requireNonNull(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":219,"author":{"gitId":"boonhaii"},"content":"            return this.person.hasSameEmail(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":220,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2021-10-11"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":235,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":236,"author":{"gitId":"boonhaii"},"content":"        public boolean hasDuplicatePhone(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":237,"author":{"gitId":"boonhaii"},"content":"            requireNonNull(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":238,"author":{"gitId":"boonhaii"},"content":"            return personsAdded.stream().anyMatch(person::hasSamePhone);","lastModifiedDate":"2021-11-01"},{"lineNumber":239,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":240,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":241,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":242,"author":{"gitId":"boonhaii"},"content":"        public boolean hasDuplicateEmail(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":243,"author":{"gitId":"boonhaii"},"content":"            requireNonNull(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":244,"author":{"gitId":"boonhaii"},"content":"            return personsAdded.stream().anyMatch(person::hasSameEmail);","lastModifiedDate":"2021-11-01"},{"lineNumber":245,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":246,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"danielsimre":2,"szelongq":9,"boonhaii":34,"-":195,"1waykiat":19}},{"path":"src/test/java/seedu/address/logic/commands/AddHoursWorkedCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_OVERTIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_OVERTIME_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"public class AddHoursWorkedCommandTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    private final HoursWorked addedHoursWorked \u003d new HoursWorked(\"10\");","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    private final Overtime addedOvertime \u003d new Overtime(\"10\");","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithAddedHours(Person personToAddHoursTo, HoursWorked hoursWorked,","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"                                              Overtime overtime) {","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToAddHoursTo.getName();","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToAddHoursTo.getPhone();","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToAddHoursTo.getEmail();","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToAddHoursTo.getAddress();","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToAddHoursTo.getRole();","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaves \u003d personToAddHoursTo.getLeaveBalance();","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToAddHoursTo.getLeavesTaken();","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToAddHoursTo.getSalary();","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToAddHoursTo.getCalculatedPay();","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToAddHoursTo.getTags();","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        HoursWorked newHours \u003d personToAddHoursTo.getHoursWorked().addHoursWorked(hoursWorked);","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        Overtime newOvertime \u003d personToAddHoursTo.getOvertime().addOvertime(overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken,","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"                salary, newHours, newOvertime, calculatedPay, tags);","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithMaxHoursWorked(Person personToAddHoursTo) {","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToAddHoursTo.getName();","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToAddHoursTo.getPhone();","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToAddHoursTo.getEmail();","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToAddHoursTo.getAddress();","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToAddHoursTo.getRole();","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaves \u003d personToAddHoursTo.getLeaveBalance();","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToAddHoursTo.getLeavesTaken();","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToAddHoursTo.getSalary();","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToAddHoursTo.getCalculatedPay();","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToAddHoursTo.getTags();","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        HoursWorked newHours \u003d new HoursWorked(String.valueOf(HoursWorked.MAX_HOURS_WORKED));","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d personToAddHoursTo.getOvertime();","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken,","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"                salary, newHours, overtime, calculatedPay, tags);","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithMaxOvertime(Person personToAddHoursTo) {","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToAddHoursTo.getName();","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToAddHoursTo.getPhone();","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToAddHoursTo.getEmail();","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToAddHoursTo.getAddress();","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToAddHoursTo.getRole();","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaves \u003d personToAddHoursTo.getLeaveBalance();","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToAddHoursTo.getLeavesTaken();","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToAddHoursTo.getSalary();","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToAddHoursTo.getCalculatedPay();","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToAddHoursTo.getTags();","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hours \u003d personToAddHoursTo.getHoursWorked();","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        Overtime newOvertime \u003d new Overtime(String.valueOf(Overtime.MAX_OVERTIME));","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken,","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"                salary, hours, newOvertime, calculatedPay, tags);","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"        Person personToAddHoursTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand addHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(INDEX_FIRST_PERSON, addedHoursWorked, addedOvertime);","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedHours \u003d createPersonWithAddedHours(personToAddHoursTo, addedHoursWorked, addedOvertime);","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(AddHoursWorkedCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"                        personWithAddedHours.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"                        personWithAddedHours.getHoursWorked().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"                        personWithAddedHours.getHoursWorked().toString().equals(\"1\") ? \"\" : \"s\",","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"                        personWithAddedHours.getOvertime().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"                        personWithAddedHours.getOvertime().toString().equals(\"1\") ? \"\" : \"s\");","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToAddHoursTo, personWithAddedHours);","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(addHoursWorkedCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand addHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(outOfBoundIndex, addedHoursWorked, addedOvertime);","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(addHoursWorkedCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"        Person personToAddHoursTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand addHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(INDEX_FIRST_PERSON, addedHoursWorked, addedOvertime);","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedHours \u003d createPersonWithAddedHours(personToAddHoursTo, addedHoursWorked, addedOvertime);","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(AddHoursWorkedCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"                personWithAddedHours.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"                personWithAddedHours.getHoursWorked().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"                personWithAddedHours.getHoursWorked().toString().equals(\"1\") ? \"\" : \"s\",","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"                personWithAddedHours.getOvertime().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"                personWithAddedHours.getOvertime().toString().equals(\"1\") ? \"\" : \"s\");","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToAddHoursTo, personWithAddedHours);","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(addHoursWorkedCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-14"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":161,"author":{"gitId":"danielsimre"},"content":"        // Ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-14"},{"lineNumber":162,"author":{"gitId":"danielsimre"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-14"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand addHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(outOfBoundIndex, addedHoursWorked, addedOvertime);","lastModifiedDate":"2021-10-14"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(addHoursWorkedCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":170,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":171,"author":{"gitId":"danielsimre"},"content":"    public void execute_exceedsMaxHoursWorked_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"        Person personToAddHoursWorkedTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":173,"author":{"gitId":"danielsimre"},"content":"        Person personWithMaxHoursWorked \u003d createPersonWithMaxHoursWorked(personToAddHoursWorkedTo);","lastModifiedDate":"2021-11-08"},{"lineNumber":174,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToAddHoursWorkedTo, personWithMaxHoursWorked);","lastModifiedDate":"2021-11-08"},{"lineNumber":175,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":176,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand addHoursWorkedCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":177,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(INDEX_FIRST_PERSON, addedHoursWorked, addedOvertime);","lastModifiedDate":"2021-11-08"},{"lineNumber":178,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"        String hoursWorkedCapacityString \u003d personWithMaxHoursWorked.getHoursWorked()","lastModifiedDate":"2021-11-08"},{"lineNumber":180,"author":{"gitId":"danielsimre"},"content":"                        .getRemainingHoursWorkedCapacity().toString();","lastModifiedDate":"2021-11-08"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_ADD_INPUT,","lastModifiedDate":"2021-11-08"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"                HoursWorked.MAX_HOURS_WORKED,","lastModifiedDate":"2021-11-08"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"                \"hours worked\", hoursWorkedCapacityString,","lastModifiedDate":"2021-11-08"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"                hoursWorkedCapacityString.equals(\"1\") ? \"hour worked\" : \"hours worked\");","lastModifiedDate":"2021-11-08"},{"lineNumber":185,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":186,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(addHoursWorkedCommand, model, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":187,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":188,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":189,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":190,"author":{"gitId":"danielsimre"},"content":"    public void execute_exceedsMaxOvertime_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":191,"author":{"gitId":"danielsimre"},"content":"        Person personToAddHoursWorkedTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":192,"author":{"gitId":"danielsimre"},"content":"        Person personWithMaxOvertime \u003d createPersonWithMaxOvertime(personToAddHoursWorkedTo);","lastModifiedDate":"2021-11-08"},{"lineNumber":193,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToAddHoursWorkedTo, personWithMaxOvertime);","lastModifiedDate":"2021-11-08"},{"lineNumber":194,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":195,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand addHoursWorkedCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":196,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(INDEX_FIRST_PERSON, addedHoursWorked, addedOvertime);","lastModifiedDate":"2021-11-08"},{"lineNumber":197,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":198,"author":{"gitId":"danielsimre"},"content":"        String overtimeCapacityString \u003d personWithMaxOvertime.getOvertime()","lastModifiedDate":"2021-11-08"},{"lineNumber":199,"author":{"gitId":"danielsimre"},"content":"                .getRemainingOvertimeCapacity().toString();","lastModifiedDate":"2021-11-08"},{"lineNumber":200,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_ADD_INPUT,","lastModifiedDate":"2021-11-08"},{"lineNumber":201,"author":{"gitId":"danielsimre"},"content":"                Overtime.MAX_OVERTIME,","lastModifiedDate":"2021-11-08"},{"lineNumber":202,"author":{"gitId":"danielsimre"},"content":"                \"overtime hours worked\", overtimeCapacityString,","lastModifiedDate":"2021-11-08"},{"lineNumber":203,"author":{"gitId":"danielsimre"},"content":"                overtimeCapacityString.equals(\"1\") ? \"overtime hour worked\" : \"overtime hours worked\");","lastModifiedDate":"2021-11-08"},{"lineNumber":204,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":205,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(addHoursWorkedCommand, model, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":206,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":207,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":208,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":209,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-10-14"},{"lineNumber":210,"author":{"gitId":"danielsimre"},"content":"        final AddHoursWorkedCommand standardCommand \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":211,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(INDEX_FIRST_PERSON, new HoursWorked(VALID_HOURSWORKED_AMY),","lastModifiedDate":"2021-10-14"},{"lineNumber":212,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(VALID_OVERTIME_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":213,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":214,"author":{"gitId":"danielsimre"},"content":"        // Same values -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":215,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand commandWithSameValues \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":216,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(INDEX_FIRST_PERSON, new HoursWorked(VALID_HOURSWORKED_AMY),","lastModifiedDate":"2021-10-14"},{"lineNumber":217,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(VALID_OVERTIME_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":218,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-14"},{"lineNumber":219,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":220,"author":{"gitId":"danielsimre"},"content":"        // Same object -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":221,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-14"},{"lineNumber":222,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":223,"author":{"gitId":"danielsimre"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":224,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-14"},{"lineNumber":225,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":226,"author":{"gitId":"danielsimre"},"content":"        // Different types -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":227,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-14"},{"lineNumber":228,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":229,"author":{"gitId":"danielsimre"},"content":"        // Different index -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":230,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new AddHoursWorkedCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":231,"author":{"gitId":"danielsimre"},"content":"                new HoursWorked(VALID_HOURSWORKED_AMY), new Overtime(VALID_OVERTIME_AMY))));","lastModifiedDate":"2021-10-14"},{"lineNumber":232,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":233,"author":{"gitId":"danielsimre"},"content":"        // Different number of leaves -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":234,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new AddHoursWorkedCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-14"},{"lineNumber":235,"author":{"gitId":"danielsimre"},"content":"                new HoursWorked(VALID_HOURSWORKED_BOB), new Overtime(VALID_OVERTIME_BOB))));","lastModifiedDate":"2021-10-14"},{"lineNumber":236,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":237,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"danielsimre":237}},{"path":"src/test/java/seedu/address/logic/commands/AddLeaveBalanceCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"public class AddLeaveBalanceCommandTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    private final LeaveBalance addedLeaves \u003d new LeaveBalance(\"3\");","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithAddedLeaves(Person personToAddLeavesTo, LeaveBalance addedLeaves) {","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToAddLeavesTo.getName();","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToAddLeavesTo.getPhone();","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToAddLeavesTo.getEmail();","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToAddLeavesTo.getAddress();","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToAddLeavesTo.getRole();","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToAddLeavesTo.getLeavesTaken();","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToAddLeavesTo.getSalary();","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hours \u003d personToAddLeavesTo.getHoursWorked();","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d personToAddLeavesTo.getOvertime();","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToAddLeavesTo.getCalculatedPay();","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToAddLeavesTo.getTags();","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance newLeaves \u003d personToAddLeavesTo.getLeaveBalance().addLeaves(addedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, newLeaves, leavesTaken,","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"                salary, hours, overtime, calculatedPay, tags);","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithMaxLeaveBalance(Person personToAddLeavesTo) {","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToAddLeavesTo.getName();","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToAddLeavesTo.getPhone();","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToAddLeavesTo.getEmail();","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToAddLeavesTo.getAddress();","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToAddLeavesTo.getRole();","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToAddLeavesTo.getLeavesTaken();","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToAddLeavesTo.getSalary();","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hours \u003d personToAddLeavesTo.getHoursWorked();","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d personToAddLeavesTo.getOvertime();","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToAddLeavesTo.getCalculatedPay();","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToAddLeavesTo.getTags();","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance newLeaves \u003d new LeaveBalance(String.valueOf(LeaveBalance.MAX_LEAVES));","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, newLeaves, leavesTaken,","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"                salary, hours, overtime, calculatedPay, tags);","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        Person personToAddLeavesTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand addLeaveBalanceCommand \u003d new AddLeaveBalanceCommand(INDEX_FIRST_PERSON, addedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedLeaves \u003d createPersonWithAddedLeaves(personToAddLeavesTo, addedLeaves);","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(AddLeaveBalanceCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"                personWithAddedLeaves.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"                personWithAddedLeaves.getLeaveBalance().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"                personWithAddedLeaves.getLeaveBalance().toString().equals(\"1\") ? \"\" : \"s\");","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToAddLeavesTo, personWithAddedLeaves);","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(addLeaveBalanceCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand addLeaveBalanceCommand \u003d new AddLeaveBalanceCommand(outOfBoundIndex, addedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(addLeaveBalanceCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"        Person personToAddLeavesTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand addLeaveBalanceCommand \u003d new AddLeaveBalanceCommand(INDEX_FIRST_PERSON, addedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedLeaves \u003d createPersonWithAddedLeaves(personToAddLeavesTo, addedLeaves);","lastModifiedDate":"2021-10-14"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(AddLeaveBalanceCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"                personWithAddedLeaves.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"                personWithAddedLeaves.getLeaveBalance().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"                personWithAddedLeaves.getLeaveBalance().toString().equals(\"1\") ? \"\" : \"s\");","lastModifiedDate":"2021-11-03"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToAddLeavesTo, personWithAddedLeaves);","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(addLeaveBalanceCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"        // Ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand addLeaveBalanceCommand \u003d new AddLeaveBalanceCommand(outOfBoundIndex, addedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(addLeaveBalanceCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"    public void execute_exceedsMaxLeaveBalance_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"danielsimre"},"content":"        Person personToAddLeavesTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":142,"author":{"gitId":"danielsimre"},"content":"        Person personWithMaxLeaveBalance \u003d createPersonWithMaxLeaveBalance(personToAddLeavesTo);","lastModifiedDate":"2021-11-08"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToAddLeavesTo, personWithMaxLeaveBalance);","lastModifiedDate":"2021-11-08"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand addLeaveBalanceCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"                new AddLeaveBalanceCommand(INDEX_FIRST_PERSON, addedLeaves);","lastModifiedDate":"2021-11-08"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"        String leaveCapacityString \u003d personWithMaxLeaveBalance.getLeaveBalance()","lastModifiedDate":"2021-11-08"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"                .getRemainingLeaveCapacity().toString();","lastModifiedDate":"2021-11-08"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_ADD_INPUT,","lastModifiedDate":"2021-11-08"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"                LeaveBalance.MAX_LEAVES,","lastModifiedDate":"2021-11-08"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"                \"leaves\", leaveCapacityString,","lastModifiedDate":"2021-11-08"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"                leaveCapacityString.equals(\"1\") ? \"leave\" : \"leaves\");","lastModifiedDate":"2021-11-08"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(addLeaveBalanceCommand, model, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":156,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"        final AddLeaveBalanceCommand standardCommand \u003d new AddLeaveBalanceCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-27"},{"lineNumber":161,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(VALID_LEAVES_AMY));","lastModifiedDate":"2021-10-27"},{"lineNumber":162,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"        // Same values -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand commandWithSameValues \u003d new AddLeaveBalanceCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-27"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(VALID_LEAVES_AMY));","lastModifiedDate":"2021-10-27"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"        // Same object -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"danielsimre"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"danielsimre"},"content":"        // Different types -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"danielsimre"},"content":"        // Different index -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":178,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new AddLeaveBalanceCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-27"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(VALID_LEAVES_AMY))));","lastModifiedDate":"2021-10-27"},{"lineNumber":180,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"        // Different number of leaves -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new AddLeaveBalanceCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-27"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(VALID_LEAVES_BOB))));","lastModifiedDate":"2021-10-27"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":185,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":180,"boonhaii":5}},{"path":"src/test/java/seedu/address/logic/commands/AssignLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import java.util.Set;","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"public class AssignLeaveCommandTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    private final LocalDate addedDate \u003d LocalDate.of(2021, 9, 9);","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithAddedDate(Person personToAddDateTo, LocalDate date) {","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToAddDateTo.getName();","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToAddDateTo.getPhone();","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToAddDateTo.getEmail();","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToAddDateTo.getAddress();","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToAddDateTo.getRole();","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToAddDateTo.getSalary();","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hoursWorked \u003d personToAddDateTo.getHoursWorked();","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d personToAddDateTo.getOvertime();","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToAddDateTo.getCalculatedPay();","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToAddDateTo.getTags();","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance newLeaveBalance \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"                personToAddDateTo.getLeaveBalance()","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"                        .removeLeaves(new LeaveBalance(\"1\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken newLeavesTaken \u003d personToAddDateTo.getLeavesTaken().addDate(date);","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, newLeaveBalance, newLeavesTaken,","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"                salary, hoursWorked, overtime, calculatedPay, tags);","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithNoLeaves(Person personToAddDateTo) {","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToAddDateTo.getName();","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToAddDateTo.getPhone();","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToAddDateTo.getEmail();","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToAddDateTo.getAddress();","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToAddDateTo.getRole();","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToAddDateTo.getSalary();","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hoursWorked \u003d personToAddDateTo.getHoursWorked();","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d personToAddDateTo.getOvertime();","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToAddDateTo.getLeavesTaken();","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToAddDateTo.getCalculatedPay();","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToAddDateTo.getTags();","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance newLeaveBalance \u003d new LeaveBalance(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, newLeaveBalance, leavesTaken,","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"                salary, hoursWorked, overtime, calculatedPay, tags);","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        Person personToAddDateTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        AssignLeaveCommand assignLeaveCommand \u003d new AssignLeaveCommand(INDEX_FIRST_PERSON, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedDate \u003d createPersonWithAddedDate(personToAddDateTo, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(AssignLeaveCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"                addedDate.toString(),","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"                personToAddDateTo.getName().toString());","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToAddDateTo, personWithAddedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(assignLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"        AssignLeaveCommand assignLeaveCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"                new AssignLeaveCommand(outOfBoundIndex, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(assignLeaveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"        Person personToAddDateTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        AssignLeaveCommand assignLeaveCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"                new AssignLeaveCommand(INDEX_FIRST_PERSON, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedDate \u003d createPersonWithAddedDate(personToAddDateTo, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(AssignLeaveCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"                addedDate.toString(),","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"                personToAddDateTo.getName().toString());","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToAddDateTo, personWithAddedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(assignLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"        // Ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-11-08"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"        AssignLeaveCommand assignLeaveCommand \u003d new AssignLeaveCommand(outOfBoundIndex, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(assignLeaveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-08"},{"lineNumber":142,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"    public void execute_insufficientLeaves_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"        Person personToAddDateTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"        Person personWithNoLeaves \u003d createPersonWithNoLeaves(personToAddDateTo);","lastModifiedDate":"2021-11-08"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToAddDateTo, personWithNoLeaves);","lastModifiedDate":"2021-11-08"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"        AssignLeaveCommand assignLeaveCommand \u003d new AssignLeaveCommand(INDEX_FIRST_PERSON, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INSUFFICIENT_LEAVES,","lastModifiedDate":"2021-11-08"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"                personWithNoLeaves.getName().toString());","lastModifiedDate":"2021-11-08"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(assignLeaveCommand, model, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":156,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"    public void execute_duplicateDate_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"        Person personToAddDateTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":161,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedDate \u003d createPersonWithAddedDate(personToAddDateTo, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":162,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToAddDateTo, personWithAddedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"        AssignLeaveCommand assignLeaveCommand \u003d new AssignLeaveCommand(INDEX_FIRST_PERSON, addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_DATE_ALREADY_ASSIGNED,","lastModifiedDate":"2021-11-08"},{"lineNumber":167,"author":{"gitId":"danielsimre"},"content":"                personWithAddedDate.getName().toString(), addedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(assignLeaveCommand, model, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":170,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":171,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":173,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-11-08"},{"lineNumber":174,"author":{"gitId":"danielsimre"},"content":"        final AssignLeaveCommand standardCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":175,"author":{"gitId":"danielsimre"},"content":"                new AssignLeaveCommand(INDEX_FIRST_PERSON, LocalDate.parse(VALID_DATE_AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":176,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":177,"author":{"gitId":"danielsimre"},"content":"        // Same values -\u003e returns true","lastModifiedDate":"2021-11-08"},{"lineNumber":178,"author":{"gitId":"danielsimre"},"content":"        AssignLeaveCommand commandWithSameValues \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"                new AssignLeaveCommand(INDEX_FIRST_PERSON, LocalDate.parse(VALID_DATE_AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":180,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-11-08"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"        // Same object -\u003e returns true","lastModifiedDate":"2021-11-08"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-11-08"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":185,"author":{"gitId":"danielsimre"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":186,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-11-08"},{"lineNumber":187,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":188,"author":{"gitId":"danielsimre"},"content":"        // Different types -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":189,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-11-08"},{"lineNumber":190,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":191,"author":{"gitId":"danielsimre"},"content":"        // Different index -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":192,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new AssignLeaveCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-11-08"},{"lineNumber":193,"author":{"gitId":"danielsimre"},"content":"                LocalDate.parse(VALID_DATE_AMY))));","lastModifiedDate":"2021-11-08"},{"lineNumber":194,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":195,"author":{"gitId":"danielsimre"},"content":"        // Different date -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":196,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new AssignLeaveCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-11-08"},{"lineNumber":197,"author":{"gitId":"danielsimre"},"content":"                LocalDate.parse(VALID_DATE_BOB))));","lastModifiedDate":"2021-11-08"},{"lineNumber":198,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":199,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"danielsimre":199}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"//import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"boonhaii":5,"-":27}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_ROLE_AMY \u003d \"Mobile App Developer\";","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_ROLE_BOB \u003d \"Front End Developer\";","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_LEAVES_AMY \u003d \"20\";","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_LEAVES_BOB \u003d \"15\";","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    public static final String VALID_DATE_AMY \u003d \"2021-10-10\";","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    public static final String VALID_DATE_BOB \u003d \"2021-09-09\";","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_HOURLYSALARY_AMY \u003d \"33.33\";","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_HOURLYSALARY_BOB \u003d \"9.33\";","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_HOURSWORKED_AMY \u003d \"80\";","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"    public static final String VALID_HOURSWORKED_BOB \u003d \"40\";","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    public static final String VALID_OVERTIME_AMY \u003d \"5\";","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"    public static final String VALID_OVERTIME_BOB \u003d \"0\";","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"    public static final String LEAVES_DESC_AMY \u003d \" \" + PREFIX_LEAVE + VALID_LEAVES_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"    public static final String LEAVES_DESC_BOB \u003d \" \" + PREFIX_LEAVE + VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"    public static final String HOURLYSALARY_DESC_AMY \u003d \" \" + PREFIX_HOURLYSALARY + VALID_HOURLYSALARY_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"    public static final String HOURLYSALARY_DESC_BOB \u003d \" \" + PREFIX_HOURLYSALARY + VALID_HOURLYSALARY_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"    public static final String HOURSWORKED_DESC_AMY \u003d \" \" + PREFIX_HOURSWORKED + VALID_HOURSWORKED_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"    public static final String HOURSWORKED_DESC_BOB \u003d \" \" + PREFIX_HOURSWORKED + VALID_HOURSWORKED_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    public static final String OVERTIME_DESC_AMY \u003d \" \" + PREFIX_OVERTIME + VALID_OVERTIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"    public static final String OVERTIME_DESC_BOB \u003d \" \" + PREFIX_OVERTIME + VALID_OVERTIME_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"4owerRanger\"; // non-alphabet as first character","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"    public static final String INVALID_LEAVES_DESC \u003d \" \" + PREFIX_LEAVE + \"12a\"; // \u0027a\u0027 not allowed in leaves","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"    public static final String INVALID_HOURLYSALARY_DESC \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"            \" \" + PREFIX_HOURLYSALARY + \"90%00\"; // \u0027%\u0027 not allowed in salary","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"    public static final String INVALID_HOURSWORKED_DESC \u003d \" \" + PREFIX_HOURSWORKED + \"90-00\"; // \u0027-\u0027 not allowed in HW","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"    public static final String INVALID_OVERTIME_DESC \u003d \" \" + PREFIX_OVERTIME + \"90-00\"; // \u0027-\u0027 not allowed in overtime","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\n\";","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"danielsimre":8,"boonhaii":26,"beefham":1,"-":126}},{"path":"src/test/java/seedu/address/logic/commands/DeductHoursWorkedCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_OVERTIME_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_OVERTIME_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"public class DeductHoursWorkedCommandTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    private final HoursWorked removedHoursWorked \u003d new HoursWorked(\"10\");","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    private final Overtime removedOvertime \u003d new Overtime(\"5\");","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    private final HoursWorked invalidRemovedHoursWorked \u003d new HoursWorked(\"100\");","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    private final Overtime invalidRemovedOvertime \u003d new Overtime(\"100\");","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithHoursRemoved(Person personToRemoveHoursFrom, HoursWorked hoursWorked,","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"                                                Overtime overtime) {","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToRemoveHoursFrom.getName();","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToRemoveHoursFrom.getPhone();","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToRemoveHoursFrom.getEmail();","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToRemoveHoursFrom.getAddress();","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToRemoveHoursFrom.getRole();","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaves \u003d personToRemoveHoursFrom.getLeaveBalance();","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToRemoveHoursFrom.getLeavesTaken();","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToRemoveHoursFrom.getSalary();","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToRemoveHoursFrom.getCalculatedPay();","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToRemoveHoursFrom.getTags();","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        HoursWorked newHours \u003d personToRemoveHoursFrom.getHoursWorked().removeHoursWorked(hoursWorked);","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        Overtime newOvertime \u003d personToRemoveHoursFrom.getOvertime().removeOvertime(overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken,","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"                salary, newHours, newOvertime, calculatedPay, tags);","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        Person personToRemoveHoursFrom \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand deductHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(INDEX_FIRST_PERSON, removedHoursWorked, removedOvertime);","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        Person personWithRemovedHours \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"                createPersonWithHoursRemoved(personToRemoveHoursFrom, removedHoursWorked, removedOvertime);","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(DeductHoursWorkedCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"                        personWithRemovedHours.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"                        personWithRemovedHours.getHoursWorked().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"                        personWithRemovedHours.getHoursWorked().toString().equals(\"1\") ? \"\" : \"s\",","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"                        personWithRemovedHours.getOvertime().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"                        personWithRemovedHours.getOvertime().toString().equals(\"1\") ? \"\" : \"s\");","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToRemoveHoursFrom, personWithRemovedHours);","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(deductHoursWorkedCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand deductHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(outOfBoundIndex, removedHoursWorked, removedOvertime);","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(deductHoursWorkedCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"        Person personToRemoveHoursFrom \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand deductHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(INDEX_FIRST_PERSON, removedHoursWorked, removedOvertime);","lastModifiedDate":"2021-10-27"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        Person personWithRemovedHours \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"                createPersonWithHoursRemoved(personToRemoveHoursFrom, removedHoursWorked, removedOvertime);","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(DeductHoursWorkedCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedHours.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedHours.getHoursWorked().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedHours.getHoursWorked().toString().equals(\"1\") ? \"\" : \"s\",","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedHours.getOvertime().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedHours.getOvertime().toString().equals(\"1\") ? \"\" : \"s\");","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToRemoveHoursFrom, personWithRemovedHours);","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(deductHoursWorkedCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        // Ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand deductHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(outOfBoundIndex, removedHoursWorked, removedOvertime);","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(deductHoursWorkedCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"    public void execute_notEnoughHoursWorked_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand deductHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(INDEX_FIRST_PERSON, invalidRemovedHoursWorked, removedOvertime);","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(deductHoursWorkedCommand, model,","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"                String.format(Messages.MESSAGE_INVALID_REMOVE_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"                        invalidRemovedHoursWorked.toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"                        invalidRemovedHoursWorked.toString().equals(\"1\") ? \"hour worked\" : \"hours worked\",","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"                        firstPerson.getHoursWorked().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"                        firstPerson.getHoursWorked().toString().equals(\"1\") ? \"hour worked\" : \"hours worked\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"    public void execute_notEnoughOvertime_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand deductHoursWorkedCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(INDEX_FIRST_PERSON, removedHoursWorked, invalidRemovedOvertime);","lastModifiedDate":"2021-10-27"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-03"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(deductHoursWorkedCommand, model,","lastModifiedDate":"2021-10-27"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"                String.format(Messages.MESSAGE_INVALID_REMOVE_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"                        invalidRemovedOvertime.toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"                        invalidRemovedOvertime.toString().equals(\"1\")","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"                                ? \"overtime hour worked\" : \"overtime hours worked\",","lastModifiedDate":"2021-11-03"},{"lineNumber":161,"author":{"gitId":"danielsimre"},"content":"                        firstPerson.getOvertime().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"danielsimre"},"content":"                        firstPerson.getOvertime().toString().equals(\"1\")","lastModifiedDate":"2021-11-03"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"                                ? \"overtime hour worked\" : \"overtime hours worked\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-10-14"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"        final DeductHoursWorkedCommand standardCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(INDEX_FIRST_PERSON, new HoursWorked(VALID_HOURSWORKED_AMY),","lastModifiedDate":"2021-10-27"},{"lineNumber":170,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(VALID_OVERTIME_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":171,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"        // Same values -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":173,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand commandWithSameValues \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":174,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(INDEX_FIRST_PERSON, new HoursWorked(VALID_HOURSWORKED_AMY),","lastModifiedDate":"2021-10-27"},{"lineNumber":175,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(VALID_OVERTIME_AMY));","lastModifiedDate":"2021-10-14"},{"lineNumber":176,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-14"},{"lineNumber":177,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":178,"author":{"gitId":"danielsimre"},"content":"        // Same object -\u003e returns true","lastModifiedDate":"2021-10-14"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-14"},{"lineNumber":180,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-14"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"        // Different types -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":185,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-14"},{"lineNumber":186,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":187,"author":{"gitId":"danielsimre"},"content":"        // Different index -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":188,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new DeductHoursWorkedCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-27"},{"lineNumber":189,"author":{"gitId":"danielsimre"},"content":"                new HoursWorked(VALID_HOURSWORKED_AMY), new Overtime(VALID_OVERTIME_AMY))));","lastModifiedDate":"2021-10-14"},{"lineNumber":190,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":191,"author":{"gitId":"danielsimre"},"content":"        // Different number of leaves -\u003e returns false","lastModifiedDate":"2021-10-14"},{"lineNumber":192,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new DeductHoursWorkedCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-27"},{"lineNumber":193,"author":{"gitId":"danielsimre"},"content":"                new HoursWorked(VALID_HOURSWORKED_BOB), new Overtime(VALID_OVERTIME_BOB))));","lastModifiedDate":"2021-10-14"},{"lineNumber":194,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":195,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"danielsimre":195}},{"path":"src/test/java/seedu/address/logic/commands/DeductLeaveBalanceCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"public class DeductLeaveBalanceCommandTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    private final LeaveBalance removedLeaves \u003d new LeaveBalance(\"3\");","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    private final LeaveBalance invalidRemovedLeaves \u003d new LeaveBalance(\"100\");","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithRemovedLeaves(Person personToRemoveLeavesFrom, LeaveBalance removedLeaves) {","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToRemoveLeavesFrom.getName();","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToRemoveLeavesFrom.getPhone();","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToRemoveLeavesFrom.getEmail();","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToRemoveLeavesFrom.getAddress();","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToRemoveLeavesFrom.getRole();","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToRemoveLeavesFrom.getLeavesTaken();","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToRemoveLeavesFrom.getSalary();","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hours \u003d personToRemoveLeavesFrom.getHoursWorked();","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d personToRemoveLeavesFrom.getOvertime();","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToRemoveLeavesFrom.getCalculatedPay();","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToRemoveLeavesFrom.getTags();","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance newLeaves \u003d personToRemoveLeavesFrom.getLeaveBalance().removeLeaves(removedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, newLeaves, leavesTaken,","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"                salary, hours, overtime, calculatedPay, tags);","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        Person personToRemoveLeavesFrom \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand deductLeaveBalanceCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"                new DeductLeaveBalanceCommand(INDEX_FIRST_PERSON, removedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        Person personWithRemovedLeaves \u003d createPersonWithRemovedLeaves(personToRemoveLeavesFrom, removedLeaves);","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(DeductLeaveBalanceCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedLeaves.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedLeaves.getLeaveBalance().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedLeaves.getLeaveBalance().toString().equals(\"1\") ? \"\" : \"s\");","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToRemoveLeavesFrom, personWithRemovedLeaves);","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(deductLeaveBalanceCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand deductLeaveBalanceCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"                new DeductLeaveBalanceCommand(outOfBoundIndex, removedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(deductLeaveBalanceCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-14"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        Person personToRemoveLeavesFrom \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand deductLeaveBalanceCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"                new DeductLeaveBalanceCommand(INDEX_FIRST_PERSON, removedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"        Person personWithRemovedLeaves \u003d createPersonWithRemovedLeaves(personToRemoveLeavesFrom, removedLeaves);","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(DeductLeaveBalanceCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedLeaves.getName().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedLeaves.getLeaveBalance().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"                personWithRemovedLeaves.getLeaveBalance().toString().equals(\"1\") ? \"\" : \"s\");","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personToRemoveLeavesFrom, personWithRemovedLeaves);","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(deductLeaveBalanceCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-14"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        // Ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-14"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand deductLeaveBalanceCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"                new DeductLeaveBalanceCommand(outOfBoundIndex, removedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(deductLeaveBalanceCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"    public void execute_notEnoughLeaves_throwsCommandException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand deductLeaveBalanceCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"                new DeductLeaveBalanceCommand(INDEX_FIRST_PERSON, invalidRemovedLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-03"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(deductLeaveBalanceCommand, model,","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"                String.format(Messages.MESSAGE_INVALID_REMOVE_INPUT,","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"                        invalidRemovedLeaves.toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"                        invalidRemovedLeaves.toString().equals(\"1\") ? \"leave\" : \"leaves\",","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"                        firstPerson.getLeaveBalance().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"                        firstPerson.getLeaveBalance().toString().equals(\"1\") ? \"leave\" : \"leaves\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"danielsimre"},"content":"        final DeductLeaveBalanceCommand standardCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"danielsimre"},"content":"                new DeductLeaveBalanceCommand(INDEX_FIRST_PERSON, new LeaveBalance(VALID_LEAVES_AMY));","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"        // Same values -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand commandWithSameValues \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"                new DeductLeaveBalanceCommand(INDEX_FIRST_PERSON, new LeaveBalance(VALID_LEAVES_AMY));","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"        // Same object -\u003e returns true","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"        // Different types -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"        // Different index -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new DeductLeaveBalanceCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2021-10-27"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(VALID_LEAVES_AMY))));","lastModifiedDate":"2021-10-27"},{"lineNumber":161,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"danielsimre"},"content":"        // Different number of leaves -\u003e returns false","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new DeductLeaveBalanceCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-27"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"                new LeaveBalance(VALID_LEAVES_BOB))));","lastModifiedDate":"2021-10-27"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":161,"boonhaii":5}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"                personToDelete.getName().toString());","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"                personToDelete.getName().toString());","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"danielsimre":4,"-":107}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURLYSALARY_BOB;","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"                .withHourlySalary(VALID_HOURLYSALARY_BOB).build();","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-11-01"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"                .withTags(VALID_TAG_HUSBAND).withSalary(VALID_HOURLYSALARY_BOB).build();","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB)","lastModifiedDate":"2021-11-01"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-11-01"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"                    .withEmail(VALID_EMAIL_BOB).build());","lastModifiedDate":"2021-11-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"boonhaii":10,"-":169}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.AddressContainsKeywordsPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.EmailContainsKeywordsPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursMoreThanEqualPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveMoreThanPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeEqualPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.PhoneNumberMatchesPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.RoleContainsKeywordsPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsLessThanPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"beefham"},"content":"    public void execute_zeroNameKeywords_noPersonFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"beefham"},"content":"        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"beefham"},"content":"    public void execute_multipleNameKeywords_multiplePersonsFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":85,"author":{"gitId":"beefham"},"content":"        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":92,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"beefham"},"content":"    public void execute_multipleRoleKeywords_multiplePersonsFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"beefham"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"beefham"},"content":"        RoleContainsKeywordsPredicate predicate \u003d prepareRolePredicate(\"Manager developer\");","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"beefham"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"beefham"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"beefham"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"beefham"},"content":"        assertEquals(Arrays.asList(BENSON, FIONA, GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"beefham"},"content":"    public void execute_nameAndRolePredicates_bensonFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"beefham"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"beefham"},"content":"        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\"Meier\");","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"beefham"},"content":"        RoleContainsKeywordsPredicate rolePredicate \u003d prepareRolePredicate(\"Developer\");","lastModifiedDate":"2021-11-05"},{"lineNumber":107,"author":{"gitId":"beefham"},"content":"        Predicate\u003cPerson\u003e predicate \u003d combinePredicates(Arrays.asList(namePredicate, rolePredicate));","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"beefham"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"beefham"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"beefham"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"beefham"},"content":"        assertEquals(Arrays.asList(BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"beefham"},"content":"    public void execute_addressAndLeavesMoreThan10_multiplePersonsFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"beefham"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"beefham"},"content":"        AddressContainsKeywordsPredicate addressPredicate \u003d prepareAddressPredicate(\"Street\");","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanPredicate leavePredicate \u003d new LeaveMoreThanPredicate(10);","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"beefham"},"content":"        Predicate\u003cPerson\u003e predicate \u003d combinePredicates(Arrays.asList(addressPredicate, leavePredicate));","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"beefham"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"beefham"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":122,"author":{"gitId":"beefham"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":123,"author":{"gitId":"beefham"},"content":"        assertEquals(Arrays.asList(CARL, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":125,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":126,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"beefham"},"content":"    public void execute_hoursWorkedMoreThanEqual60AndHourlySalaryLessThan16_multiplePersonsFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":128,"author":{"gitId":"beefham"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":129,"author":{"gitId":"beefham"},"content":"        HoursMoreThanEqualPredicate hoursWorkedPredicate \u003d new HoursMoreThanEqualPredicate(60);","lastModifiedDate":"2021-11-05"},{"lineNumber":130,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanPredicate salaryPredicate \u003d new SalaryIsLessThanPredicate(16);","lastModifiedDate":"2021-11-05"},{"lineNumber":131,"author":{"gitId":"beefham"},"content":"        Predicate\u003cPerson\u003e predicate \u003d combinePredicates(Arrays.asList(hoursWorkedPredicate, salaryPredicate));","lastModifiedDate":"2021-11-05"},{"lineNumber":132,"author":{"gitId":"beefham"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":133,"author":{"gitId":"beefham"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":134,"author":{"gitId":"beefham"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":135,"author":{"gitId":"beefham"},"content":"        assertEquals(Arrays.asList(ALICE, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":136,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":137,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":138,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":139,"author":{"gitId":"beefham"},"content":"    public void execute_multipleEmailAndPhoneKeywords_multiplePersonsFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":140,"author":{"gitId":"beefham"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"beefham"},"content":"        EmailContainsKeywordsPredicate emailPredicate \u003d prepareEmailPredicate(\"alice johnd anna\");","lastModifiedDate":"2021-11-05"},{"lineNumber":142,"author":{"gitId":"beefham"},"content":"        PhoneNumberMatchesPredicate phonePredicate \u003d preparePhonePredicate(\"94351253 98765432\");","lastModifiedDate":"2021-11-05"},{"lineNumber":143,"author":{"gitId":"beefham"},"content":"        Predicate\u003cPerson\u003e predicate \u003d combinePredicates(Arrays.asList(emailPredicate, phonePredicate));","lastModifiedDate":"2021-11-05"},{"lineNumber":144,"author":{"gitId":"beefham"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":145,"author":{"gitId":"beefham"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":146,"author":{"gitId":"beefham"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":147,"author":{"gitId":"beefham"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":148,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":150,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":151,"author":{"gitId":"beefham"},"content":"    public void execute_overtimeHoursEqual8_noPersonFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":152,"author":{"gitId":"beefham"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-11-05"},{"lineNumber":153,"author":{"gitId":"beefham"},"content":"        OvertimeEqualPredicate predicate \u003d new OvertimeEqualPredicate(8);","lastModifiedDate":"2021-11-05"},{"lineNumber":154,"author":{"gitId":"beefham"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":155,"author":{"gitId":"beefham"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":156,"author":{"gitId":"beefham"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":157,"author":{"gitId":"beefham"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":158,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":159,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":163,"author":{"gitId":"beefham"},"content":"    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {","lastModifiedDate":"2021-11-05"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":166,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":167,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":168,"author":{"gitId":"beefham"},"content":"     * Parses {@code userInput} into a {@code RoleContainsKeywordsPredicate}.","lastModifiedDate":"2021-11-05"},{"lineNumber":169,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":170,"author":{"gitId":"beefham"},"content":"    private RoleContainsKeywordsPredicate prepareRolePredicate(String userInput) {","lastModifiedDate":"2021-11-05"},{"lineNumber":171,"author":{"gitId":"beefham"},"content":"        return new RoleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-11-05"},{"lineNumber":172,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":173,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":174,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":175,"author":{"gitId":"beefham"},"content":"     * Parses {@code userInput} into a {@code AddressContainsKeywordsPredicate}.","lastModifiedDate":"2021-11-05"},{"lineNumber":176,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":177,"author":{"gitId":"beefham"},"content":"    private AddressContainsKeywordsPredicate prepareAddressPredicate(String userInput) {","lastModifiedDate":"2021-11-05"},{"lineNumber":178,"author":{"gitId":"beefham"},"content":"        return new AddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-11-05"},{"lineNumber":179,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":180,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":181,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":182,"author":{"gitId":"beefham"},"content":"     * Parses {@code userInput} into a {@code RoleContainsKeywordsPredicate}.","lastModifiedDate":"2021-11-05"},{"lineNumber":183,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":184,"author":{"gitId":"beefham"},"content":"    private PhoneNumberMatchesPredicate preparePhonePredicate(String userInput) {","lastModifiedDate":"2021-11-05"},{"lineNumber":185,"author":{"gitId":"beefham"},"content":"        return new PhoneNumberMatchesPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-11-05"},{"lineNumber":186,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":187,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":188,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":189,"author":{"gitId":"beefham"},"content":"     * Parses {@code userInput} into a {@code RoleContainsKeywordsPredicate}.","lastModifiedDate":"2021-11-05"},{"lineNumber":190,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":191,"author":{"gitId":"beefham"},"content":"    private EmailContainsKeywordsPredicate prepareEmailPredicate(String userInput) {","lastModifiedDate":"2021-11-05"},{"lineNumber":192,"author":{"gitId":"beefham"},"content":"        return new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-11-05"},{"lineNumber":193,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":194,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":195,"author":{"gitId":"beefham"},"content":"     * Combines multiple predicates together into a single predicate.","lastModifiedDate":"2021-11-05"},{"lineNumber":196,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":197,"author":{"gitId":"beefham"},"content":"    private Predicate\u003cPerson\u003e combinePredicates(List\u003cPredicate\u003cPerson\u003e\u003e predicateList) {","lastModifiedDate":"2021-11-05"},{"lineNumber":198,"author":{"gitId":"beefham"},"content":"        return predicateList.stream().reduce((predicate -\u003e true), (first, second) -\u003e first.and(second));","lastModifiedDate":"2021-11-05"},{"lineNumber":199,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"beefham":123,"-":77}},{"path":"src/test/java/seedu/address/logic/commands/ImportCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_FIELD_INVALID_ERROR;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_FIELD_MISSING_ERROR;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_IMPORT_FAILURE;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_IMPORT_FORMAT_ERROR;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_IMPORT_MISSING_FILE;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_IMPORT_SUCCESS;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.ObservablePerson;","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"public class ImportCommandTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvImportTest\");","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    private static final Path ALL_COLUMNS_PRESENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"AllColumnsPresent.csv\");","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    private static final Path MIXED_COLUMN_ORDERING_FILE \u003d TEST_DATA_FOLDER.resolve(\"MixedColumnOrdering.csv\");","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"    private static final Path WRONG_HEADERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"WrongHeaders.csv\");","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    private static final Path DUPLICATE_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"DuplicatePersons.csv\");","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    private static final Path DUPLICATE_EMAILS_FILE \u003d TEST_DATA_FOLDER.resolve(\"DuplicateEmails.csv\");","lastModifiedDate":"2021-11-01"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    private static final Path DUPLICATE_PHONE_NUMBERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"DuplicatePhoneNumbers.csv\");","lastModifiedDate":"2021-11-01"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"    private static final Path MISSING_NAME_COLUMN_FILE \u003d TEST_DATA_FOLDER.resolve(\"MissingNameColumn.csv\");","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    private static final Path EMPTY_ENTRY_FILE \u003d TEST_DATA_FOLDER.resolve(\"EmptyColumn.csv\");","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    private static final Path ENTRY_WITH_MISSING_NAME_FILE \u003d TEST_DATA_FOLDER.resolve(\"EntryWithMissingName.csv\");","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    private static final Path INVALID_FIELD_PRESENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"InvalidDataPresent.csv\");","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    private static final Path MISSING_LEAVES_SALARY_HOURSWORKED_TAGS_FILE \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"            TEST_DATA_FOLDER.resolve(\"MissingLeavesSalaryHoursWorkedTags.csv\");","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    private Model modelWithDefaultAddressBook;","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    private Model model;","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"        modelWithDefaultAddressBook \u003d new ModelStubWithDefaultAddressBook();","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"        model \u003d new ModelStubWithDefaultAddressBook();","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"    // Invalid file path.","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"    public void import_invalidFilePath_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, MESSAGE_IMPORT_MISSING_FILE, () -\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"            new ImportCommand(\"notAValidPath.csv\").execute(model));","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"    // Files with all fields, following the order of declaration of fields in Person.","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"    public void import_csvAllColumnsPresent_success() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d ALL_COLUMNS_PRESENT_FILE.toString();","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"        CommandResult result \u003d new ImportCommand(filePathString).importData(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"        boolean isDifferent \u003d false;","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"        ObservableList\u003cPerson\u003e original \u003d model.getAddressBook().getPersonList();","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"        ObservableList\u003cPerson\u003e imported \u003d modelWithDefaultAddressBook.getAddressBook().getPersonList();","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"        for (Person person : original) {","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"            if (!imported.contains(person)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"                isDifferent \u003d true;","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"        assertEquals(MESSAGE_IMPORT_SUCCESS, result.getFeedbackToUser());","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"        assertTrue(isDifferent);","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"    // File with all fields, in mixed order.","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"    public void import_csvMixedColumnOrdering_success() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d MIXED_COLUMN_ORDERING_FILE.toString();","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"        CommandResult result \u003d new ImportCommand(filePathString).importData(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"        boolean isDifferent \u003d false;","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"        ObservableList\u003cPerson\u003e original \u003d model.getAddressBook().getPersonList();","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"        ObservableList\u003cPerson\u003e imported \u003d modelWithDefaultAddressBook.getAddressBook().getPersonList();","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"        for (Person person : original) {","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"boonhaii"},"content":"            if (!imported.contains(person)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"                isDifferent \u003d true;","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"        assertEquals(MESSAGE_IMPORT_SUCCESS, result.getFeedbackToUser());","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"        assertTrue(isDifferent);","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"    // File missing non-compulsory fields.","lastModifiedDate":"2021-11-01"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"    public void import_csvMissingLeavesSalaryHoursWorkedTags_success() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d MISSING_LEAVES_SALARY_HOURSWORKED_TAGS_FILE.toString();","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"        CommandResult result \u003d new ImportCommand(filePathString).importData(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"        boolean isDifferent \u003d false;","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"        ObservableList\u003cPerson\u003e original \u003d model.getAddressBook().getPersonList();","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"        ObservableList\u003cPerson\u003e imported \u003d modelWithDefaultAddressBook.getAddressBook().getPersonList();","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"        for (Person person : original) {","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"            if (!imported.contains(person)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"                isDifferent \u003d true;","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"        assertEquals(MESSAGE_IMPORT_SUCCESS, result.getFeedbackToUser());","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"        assertTrue(isDifferent);","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"    // File with wrong headers.","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"    public void import_csvWithWrongHeaders_failure() throws Exception {","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d WRONG_HEADERS_FILE.toString();","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d MESSAGE_IMPORT_FORMAT_ERROR;","lastModifiedDate":"2021-11-01"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"        Command command \u003d new ImportCommand(filePathString);","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"boonhaii"},"content":"    // File with duplicate persons.","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"    public void import_csvWithDuplicatePersons_failure() throws Exception {","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d DUPLICATE_PERSONS_FILE.toString();","lastModifiedDate":"2021-11-01"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d MESSAGE_IMPORT_FAILURE + \"Operation would result in duplicate persons\";","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"        Command command \u003d new ImportCommand(filePathString);","lastModifiedDate":"2021-11-01"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-01"},{"lineNumber":137,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"    // File with duplicate emails.","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"    public void import_csvWithDuplicateEmails_failure() throws Exception {","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d DUPLICATE_EMAILS_FILE.toString();","lastModifiedDate":"2021-11-01"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d MESSAGE_IMPORT_FAILURE + \"Duplicate emails detected in Rows 1 and 8.\";","lastModifiedDate":"2021-11-01"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"        Command command \u003d new ImportCommand(filePathString);","lastModifiedDate":"2021-11-01"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"    // File with duplicate phone numbers.","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"    public void import_csvWithDuplicatePhoneNumbers_failure() throws Exception {","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d DUPLICATE_PHONE_NUMBERS_FILE.toString();","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d MESSAGE_IMPORT_FAILURE + \"Duplicate phone numbers detected in Rows 1 and 8.\";","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"        Command command \u003d new ImportCommand(filePathString);","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-01"},{"lineNumber":155,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"    // File with missing name column.","lastModifiedDate":"2021-11-05"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"    public void import_csvWithMissingNameColumn_failure() throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d MISSING_NAME_COLUMN_FILE.toString();","lastModifiedDate":"2021-11-05"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d MESSAGE_IMPORT_FORMAT_ERROR;","lastModifiedDate":"2021-11-05"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"        Command command \u003d new ImportCommand(filePathString);","lastModifiedDate":"2021-11-05"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-05"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"    // File with an empty entry","lastModifiedDate":"2021-11-05"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"    public void import_csvWithEmptyEntry_failure() throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d EMPTY_ENTRY_FILE.toString();","lastModifiedDate":"2021-11-05"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d MESSAGE_IMPORT_FORMAT_ERROR;","lastModifiedDate":"2021-11-05"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"        Command command \u003d new ImportCommand(filePathString);","lastModifiedDate":"2021-11-05"},{"lineNumber":172,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-05"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"    // File with an invalid entry","lastModifiedDate":"2021-11-05"},{"lineNumber":176,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"    public void import_csvWithInvalidData_failure() throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":178,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d INVALID_FIELD_PRESENT_FILE.toString();","lastModifiedDate":"2021-11-05"},{"lineNumber":179,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FIELD_INVALID_ERROR, 1, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-05"},{"lineNumber":180,"author":{"gitId":"boonhaii"},"content":"        Command command \u003d new ImportCommand(filePathString);","lastModifiedDate":"2021-11-05"},{"lineNumber":181,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-05"},{"lineNumber":182,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":183,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":184,"author":{"gitId":"boonhaii"},"content":"    // File with an entry missing name input.","lastModifiedDate":"2021-11-05"},{"lineNumber":185,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":186,"author":{"gitId":"boonhaii"},"content":"    public void import_csvWithEntryMissingName_failure() throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":187,"author":{"gitId":"boonhaii"},"content":"        String filePathString \u003d ENTRY_WITH_MISSING_NAME_FILE.toString();","lastModifiedDate":"2021-11-05"},{"lineNumber":188,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FIELD_MISSING_ERROR, 1, \"Name\");","lastModifiedDate":"2021-11-05"},{"lineNumber":189,"author":{"gitId":"boonhaii"},"content":"        Command command \u003d new ImportCommand(filePathString);","lastModifiedDate":"2021-11-05"},{"lineNumber":190,"author":{"gitId":"boonhaii"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-05"},{"lineNumber":191,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":192,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":193,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":194,"author":{"gitId":"boonhaii"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-10-18"},{"lineNumber":195,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":196,"author":{"gitId":"boonhaii"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-10-18"},{"lineNumber":197,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":198,"author":{"gitId":"boonhaii"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-18"},{"lineNumber":199,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":200,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":201,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":202,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":203,"author":{"gitId":"boonhaii"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-10-18"},{"lineNumber":204,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":205,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":206,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":207,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":208,"author":{"gitId":"boonhaii"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-10-18"},{"lineNumber":209,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":210,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":211,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":212,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":213,"author":{"gitId":"boonhaii"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-10-18"},{"lineNumber":214,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":215,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":216,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":217,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":218,"author":{"gitId":"boonhaii"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2021-10-18"},{"lineNumber":219,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":220,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":221,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":222,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":223,"author":{"gitId":"boonhaii"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-10-18"},{"lineNumber":224,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":225,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":226,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":227,"author":{"gitId":"szelongq"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":228,"author":{"gitId":"szelongq"},"content":"        public OvertimePayRate getOvertimePayRate() {","lastModifiedDate":"2021-10-22"},{"lineNumber":229,"author":{"gitId":"szelongq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-22"},{"lineNumber":230,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":231,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":232,"author":{"gitId":"szelongq"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":233,"author":{"gitId":"szelongq"},"content":"        public void setOvertimePayRate(OvertimePayRate overtimePayRate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":234,"author":{"gitId":"szelongq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-22"},{"lineNumber":235,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":236,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":237,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":238,"author":{"gitId":"boonhaii"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":239,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":240,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":241,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":242,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":243,"author":{"gitId":"boonhaii"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-10-18"},{"lineNumber":244,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":245,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":246,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":247,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":248,"author":{"gitId":"boonhaii"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-18"},{"lineNumber":249,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":250,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":251,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":252,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":253,"author":{"gitId":"boonhaii"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-10-18"},{"lineNumber":254,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":255,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":256,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":257,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":258,"author":{"gitId":"boonhaii"},"content":"        public boolean hasDuplicatePhone(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":259,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":260,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":261,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":262,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":263,"author":{"gitId":"boonhaii"},"content":"        public boolean hasDuplicateEmail(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":264,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":265,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":266,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":267,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":268,"author":{"gitId":"boonhaii"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-10-18"},{"lineNumber":269,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":270,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":271,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":272,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":273,"author":{"gitId":"boonhaii"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-10-18"},{"lineNumber":274,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":275,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":276,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":277,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":278,"author":{"gitId":"boonhaii"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-10-18"},{"lineNumber":279,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":280,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":281,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":282,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":283,"author":{"gitId":"boonhaii"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-10-18"},{"lineNumber":284,"author":{"gitId":"boonhaii"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":285,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":286,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":287,"author":{"gitId":"1waykiat"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":288,"author":{"gitId":"1waykiat"},"content":"        public ObservablePerson getViewingPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":289,"author":{"gitId":"1waykiat"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-22"},{"lineNumber":290,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":291,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":292,"author":{"gitId":"1waykiat"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":293,"author":{"gitId":"1waykiat"},"content":"        public void setViewingPerson(Person p) {","lastModifiedDate":"2021-10-22"},{"lineNumber":294,"author":{"gitId":"1waykiat"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-22"},{"lineNumber":295,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":296,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":297,"author":{"gitId":"1waykiat"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":298,"author":{"gitId":"1waykiat"},"content":"        public boolean isFilteredPersonListEmpty() {","lastModifiedDate":"2021-11-02"},{"lineNumber":299,"author":{"gitId":"1waykiat"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":300,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":301,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":302,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":303,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":304,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":305,"author":{"gitId":"boonhaii"},"content":"     * A Model stub that contains the default address book.","lastModifiedDate":"2021-10-18"},{"lineNumber":306,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":307,"author":{"gitId":"boonhaii"},"content":"    private class ModelStubWithDefaultAddressBook extends ModelStub {","lastModifiedDate":"2021-10-18"},{"lineNumber":308,"author":{"gitId":"boonhaii"},"content":"        private ReadOnlyAddressBook addressBook;","lastModifiedDate":"2021-10-18"},{"lineNumber":309,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":310,"author":{"gitId":"boonhaii"},"content":"        ModelStubWithDefaultAddressBook() {","lastModifiedDate":"2021-10-18"},{"lineNumber":311,"author":{"gitId":"boonhaii"},"content":"            this.addressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2021-10-18"},{"lineNumber":312,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":313,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":314,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":315,"author":{"gitId":"boonhaii"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-18"},{"lineNumber":316,"author":{"gitId":"boonhaii"},"content":"            return this.addressBook;","lastModifiedDate":"2021-10-18"},{"lineNumber":317,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":318,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":319,"author":{"gitId":"boonhaii"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":320,"author":{"gitId":"boonhaii"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-10-18"},{"lineNumber":321,"author":{"gitId":"boonhaii"},"content":"            this.addressBook \u003d newData;","lastModifiedDate":"2021-10-18"},{"lineNumber":322,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":323,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":324,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":325,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":326,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"szelongq":11,"boonhaii":298,"1waykiat":17}},{"path":"src/test/java/seedu/address/logic/commands/PayCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"public class PayCommandTest {","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"    private Person createPersonWithCalculatedPay(Person person, CalculatedPay newCalculatedPay) {","lastModifiedDate":"2021-11-01"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"        assert person !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"        assert newCalculatedPay !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"        Name name \u003d person.getName();","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"        Phone phone \u003d person.getPhone();","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"        Email email \u003d person.getEmail();","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"        Address address \u003d person.getAddress();","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"        Role role \u003d person.getRole();","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"        LeaveBalance leaves \u003d person.getLeaveBalance();","lastModifiedDate":"2021-11-01"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"        LeavesTaken leavesTaken \u003d person.getLeavesTaken();","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"        HourlySalary hourlySalary \u003d person.getSalary();","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"        HoursWorked hoursWorked \u003d person.getHoursWorked();","lastModifiedDate":"2021-11-01"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"        Overtime overtime \u003d person.getOvertime();","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"        // New calculatedPay taken from input parameter","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken, hourlySalary,","lastModifiedDate":"2021-11-01"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"                hoursWorked, overtime, newCalculatedPay, tags);","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"1waykiat"},"content":"    private static Person createPaidPerson(Person personToPay) {","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"1waykiat"},"content":"        assert personToPay !\u003d null;","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"        Name name \u003d personToPay.getName();","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"        Phone phone \u003d personToPay.getPhone();","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"        Email email \u003d personToPay.getEmail();","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"        Address address \u003d personToPay.getAddress();","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"1waykiat"},"content":"        Role role \u003d personToPay.getRole();","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaveBalance \u003d personToPay.getLeaveBalance();","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken leavesTaken \u003d personToPay.getLeavesTaken();","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"        HourlySalary hourlySalary \u003d personToPay.getSalary();","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"szelongq"},"content":"        HoursWorked hoursWorked \u003d personToPay.getHoursWorked();","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"szelongq"},"content":"        Overtime overtime \u003d personToPay.getOvertime();","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"        // set calcPay to 0 to represent as paid","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"szelongq"},"content":"        CalculatedPay newCalcPay \u003d new CalculatedPay(\"0.0\");","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"        Set\u003cTag\u003e tags \u003d personToPay.getTags();","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, leaveBalance, leavesTaken, hourlySalary,","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"                hoursWorked, overtime, newCalcPay, tags);","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"1waykiat"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"szelongq"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"szelongq"},"content":"        CalculatedPay calculatedPay \u003d new CalculatedPay(\"500.00\");","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"szelongq"},"content":"        Person personToPay \u003d createPersonWithCalculatedPay(person, calculatedPay);","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"szelongq"},"content":"        model.setPerson(person, personToPay);","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"1waykiat"},"content":"        PayCommand payCommand \u003d new PayCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"szelongq"},"content":"        Person paidPerson \u003d createPaidPerson(personToPay);","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(PayCommand.MESSAGE_PAY_PERSON_SUCCESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"                personToPay.getCalculatedPay().toString(),","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"                paidPerson.getName().toString());","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"1waykiat"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"1waykiat"},"content":"        expectedModel.setPerson(personToPay, paidPerson);","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"1waykiat"},"content":"        assertCommandSuccess(payCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"1waykiat"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"1waykiat"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"1waykiat"},"content":"        PayCommand payCommand \u003d new PayCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"1waykiat"},"content":"        assertCommandFailure(payCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"1waykiat"},"content":"    public void execute_payAll_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"1waykiat"},"content":"        // Adds calculatedPay to all employees","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"1waykiat"},"content":"        for (int i \u003d 0; i \u003c model.getFilteredPersonList().size(); i++) {","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"1waykiat"},"content":"            Person person \u003d model.getFilteredPersonList().get(i);","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"1waykiat"},"content":"            Person personWithCalcPay \u003d createPersonWithCalculatedPay(person, new CalculatedPay(\"500\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"1waykiat"},"content":"            model.setPerson(person, personWithCalcPay);","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"1waykiat"},"content":"        // Sets all employees as paid","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"1waykiat"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"1waykiat"},"content":"        for (int i \u003d 0; i \u003c expectedModel.getFilteredPersonList().size(); i++) {","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"1waykiat"},"content":"            Person person \u003d expectedModel.getFilteredPersonList().get(i);","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"1waykiat"},"content":"            Person paidPerson \u003d createPaidPerson(person);","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"1waykiat"},"content":"            expectedModel.setPerson(person, paidPerson);","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"1waykiat"},"content":"        PayCommand payAllCommand \u003d new PayCommand();","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"1waykiat"},"content":"        String expectedString \u003d PayCommand.MESSAGE_PAY_ALL_SUCCESS;","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"1waykiat"},"content":"        assertCommandSuccess(payAllCommand, model, expectedString, expectedModel);","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"1waykiat"},"content":"    public void execute_payAllOnAlreadyPaidEmployees_throwsException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":137,"author":{"gitId":"1waykiat"},"content":"        PayCommand payAllCommand \u003d new PayCommand();","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"1waykiat"},"content":"        // Model initializes with everyone already paid","lastModifiedDate":"2021-11-08"},{"lineNumber":139,"author":{"gitId":"1waykiat"},"content":"        assertCommandFailure(payAllCommand, model, PayCommand.MESSAGE_NO_ONE_TO_BE_PAID);","lastModifiedDate":"2021-11-08"},{"lineNumber":140,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":142,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":143,"author":{"gitId":"1waykiat"},"content":"    public void equals() {","lastModifiedDate":"2021-10-13"},{"lineNumber":144,"author":{"gitId":"1waykiat"},"content":"        PayCommand payFirstCommand \u003d new PayCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-13"},{"lineNumber":145,"author":{"gitId":"1waykiat"},"content":"        PayCommand paySecondCommand \u003d new PayCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-13"},{"lineNumber":146,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":147,"author":{"gitId":"1waykiat"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-13"},{"lineNumber":148,"author":{"gitId":"1waykiat"},"content":"        assertTrue(payFirstCommand.equals(payFirstCommand));","lastModifiedDate":"2021-10-13"},{"lineNumber":149,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":150,"author":{"gitId":"1waykiat"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-13"},{"lineNumber":151,"author":{"gitId":"1waykiat"},"content":"        PayCommand payFirstCommandCopy \u003d new PayCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-13"},{"lineNumber":152,"author":{"gitId":"1waykiat"},"content":"        assertTrue(payFirstCommand.equals(payFirstCommandCopy));","lastModifiedDate":"2021-10-13"},{"lineNumber":153,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":154,"author":{"gitId":"1waykiat"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":155,"author":{"gitId":"1waykiat"},"content":"        assertFalse(payFirstCommand.equals(1));","lastModifiedDate":"2021-10-13"},{"lineNumber":156,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":157,"author":{"gitId":"1waykiat"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":158,"author":{"gitId":"1waykiat"},"content":"        assertFalse(payFirstCommand.equals(null));","lastModifiedDate":"2021-10-13"},{"lineNumber":159,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":160,"author":{"gitId":"1waykiat"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":161,"author":{"gitId":"1waykiat"},"content":"        assertFalse(payFirstCommand.equals(paySecondCommand));","lastModifiedDate":"2021-10-13"},{"lineNumber":162,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":163,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":164,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"danielsimre":8,"szelongq":33,"1waykiat":123}},{"path":"src/test/java/seedu/address/logic/commands/RemoveLeavesBeforeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import java.util.Set;","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"public class RemoveLeavesBeforeCommandTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    private final LocalDate filterDate \u003d LocalDate.of(2021, 9, 9);","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    private final LocalDate unfilteredDate \u003d LocalDate.of(2021, 9, 10);","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    private Person createPersonWithAddedDate(Person personToAddDateTo, LocalDate date) {","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        Name name \u003d personToAddDateTo.getName();","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        Phone phone \u003d personToAddDateTo.getPhone();","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        Email email \u003d personToAddDateTo.getEmail();","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        Address address \u003d personToAddDateTo.getAddress();","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        Role role \u003d personToAddDateTo.getRole();","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        HourlySalary salary \u003d personToAddDateTo.getSalary();","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hoursWorked \u003d personToAddDateTo.getHoursWorked();","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d personToAddDateTo.getOvertime();","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        CalculatedPay calculatedPay \u003d personToAddDateTo.getCalculatedPay();","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        Set\u003cTag\u003e tags \u003d personToAddDateTo.getTags();","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaveBalance \u003d personToAddDateTo.getLeaveBalance();","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        LeavesTaken newLeavesTaken \u003d personToAddDateTo.getLeavesTaken().addDate(date);","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, leaveBalance, newLeavesTaken,","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"                salary, hoursWorked, overtime, calculatedPay, tags);","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        Person personToAddDateTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedDate \u003d createPersonWithAddedDate(personToAddDateTo, filterDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        personWithAddedDate \u003d createPersonWithAddedDate(personWithAddedDate, unfilteredDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToAddDateTo, personWithAddedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesBeforeCommand removeLeavesBeforeCommand \u003d new RemoveLeavesBeforeCommand(filterDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        Person expectedPerson \u003d createPersonWithAddedDate(personToAddDateTo, unfilteredDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(RemoveLeavesBeforeCommand.MESSAGE_SUCCESS, filterDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personWithAddedDate, expectedPerson);","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(removeLeavesBeforeCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        Person personToAddDateTo \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        Person personWithAddedDate \u003d createPersonWithAddedDate(personToAddDateTo, filterDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        personWithAddedDate \u003d createPersonWithAddedDate(personWithAddedDate, unfilteredDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        model.setPerson(personToAddDateTo, personWithAddedDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesBeforeCommand removeLeavesBeforeCommand \u003d new RemoveLeavesBeforeCommand(filterDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        Person expectedPerson \u003d createPersonWithAddedDate(personToAddDateTo, unfilteredDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(RemoveLeavesBeforeCommand.MESSAGE_SUCCESS, filterDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"        expectedModel.setPerson(personWithAddedDate, expectedPerson);","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        assertCommandSuccess(removeLeavesBeforeCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"    public void execute_emptyFilteredList_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        // Get an empty filtered list","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(\"sajdklsajkldajkljakl\")));","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesBeforeCommand removeLeavesBeforeCommand \u003d new RemoveLeavesBeforeCommand(filterDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        assertCommandFailure(removeLeavesBeforeCommand, model, Messages.MESSAGE_EMPTY_FILTERED_LIST);","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        final RemoveLeavesBeforeCommand standardCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"                new RemoveLeavesBeforeCommand(LocalDate.parse(VALID_DATE_AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        // Same values -\u003e returns true","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        RemoveLeavesBeforeCommand commandWithSameValues \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"                new RemoveLeavesBeforeCommand(LocalDate.parse(VALID_DATE_AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"        // Same object -\u003e returns true","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        // Different types -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        // Different date -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"        assertFalse(standardCommand.equals(new RemoveLeavesBeforeCommand(LocalDate.parse(VALID_DATE_BOB))));","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"danielsimre":135}},{"path":"src/test/java/seedu/address/logic/commands/SetOvertimePayRateCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"public class SetOvertimePayRateCommandTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"    public void execute_validOvertimePayRate_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate newOvertimePayRate \u003d new OvertimePayRate(\"2.0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"        SetOvertimePayRateCommand setOvertimePayRateCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"                new SetOvertimePayRateCommand(newOvertimePayRate);","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"        String expectedMessage \u003d String.format(SetOvertimePayRateCommand.MESSAGE_SET_RATE_SUCCESS,","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"                newOvertimePayRate);","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"        expectedModel.setOvertimePayRate(newOvertimePayRate);","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"        assertCommandSuccess(setOvertimePayRateCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"    public void equals() {","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"        // Shorten OvertimePayRate to Opr for better readability","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate oprFirst \u003d new OvertimePayRate(\"2.0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate oprSecond \u003d new OvertimePayRate(\"2.5\");","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"        SetOvertimePayRateCommand setOprFirstCommand \u003d new SetOvertimePayRateCommand(oprFirst);","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"        SetOvertimePayRateCommand setOprSecondCommand \u003d new SetOvertimePayRateCommand(oprSecond);","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"        assertTrue(setOprFirstCommand.equals(setOprFirstCommand));","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"        SetOvertimePayRateCommand setOprFirstCommandCopy \u003d new SetOvertimePayRateCommand(oprFirst);","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"        assertTrue(setOprFirstCommand.equals(setOprFirstCommandCopy));","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"        assertFalse(setOprFirstCommand.equals(1));","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"        assertFalse(setOprFirstCommand.equals(null));","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"        // different overtime pay rate -\u003e returns false","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"        assertFalse(setOprFirstCommand.equals(setOprSecondCommand));","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"szelongq":62}},{"path":"src/test/java/seedu/address/logic/commands/StartPayrollCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"import java.util.List;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":" * {@code StartPayrollCommand}.","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"public class StartPayrollCommandTest {","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"    private CalculatedPay calculatePay(HourlySalary salary, HoursWorked hoursWorked, Overtime overtime,","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"                                       OvertimePayRate overtimePayRate) {","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"        double normalPay \u003d salary.value * hoursWorked.value;","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"        double overtimePay \u003d overtimePayRate.value * salary.value * overtime.value;","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"        // Ensure that the total pay is rounded to 2 decimal places.","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"        String totalRoundedPay \u003d String.format(\"%.2f\", normalPay + overtimePay);","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"        return new CalculatedPay(totalRoundedPay);","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"    private Person createPersonWithCalculatedPay(Person person, CalculatedPay newCalculatedPay) {","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"        assert person !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"        assert newCalculatedPay !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"        Name name \u003d person.getName();","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"        Phone phone \u003d person.getPhone();","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"        Email email \u003d person.getEmail();","lastModifiedDate":"2021-11-01"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"        Address address \u003d person.getAddress();","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"        Role role \u003d person.getRole();","lastModifiedDate":"2021-11-01"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"        LeaveBalance leaves \u003d person.getLeaveBalance();","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"        LeavesTaken leavesTaken \u003d person.getLeavesTaken();","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"        HourlySalary hourlySalary \u003d person.getSalary();","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"        HoursWorked hoursWorked \u003d person.getHoursWorked();","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"        Overtime overtime \u003d person.getOvertime();","lastModifiedDate":"2021-11-01"},{"lineNumber":64,"author":{"gitId":"szelongq"},"content":"        // new calculatedPay taken from input parameter","lastModifiedDate":"2021-11-01"},{"lineNumber":65,"author":{"gitId":"szelongq"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"szelongq"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken, hourlySalary,","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"szelongq"},"content":"                hoursWorked, overtime, newCalculatedPay, tags);","lastModifiedDate":"2021-11-01"},{"lineNumber":69,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"szelongq"},"content":"    private Person createPersonWithZeroHoursWorkedAndOvertime(Person person) {","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"szelongq"},"content":"        assert person !\u003d null;","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"szelongq"},"content":"        Name name \u003d person.getName();","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"szelongq"},"content":"        Phone phone \u003d person.getPhone();","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"szelongq"},"content":"        Email email \u003d person.getEmail();","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"szelongq"},"content":"        Address address \u003d person.getAddress();","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"szelongq"},"content":"        Role role \u003d person.getRole();","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"szelongq"},"content":"        LeaveBalance leaves \u003d person.getLeaveBalance();","lastModifiedDate":"2021-11-01"},{"lineNumber":80,"author":{"gitId":"szelongq"},"content":"        LeavesTaken leavesTaken \u003d person.getLeavesTaken();","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"szelongq"},"content":"        HourlySalary hourlySalary \u003d person.getSalary();","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":83,"author":{"gitId":"szelongq"},"content":"        // reset hours worked and overtime to zero","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"szelongq"},"content":"        HoursWorked zeroHours \u003d new HoursWorked(\"0\");","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"szelongq"},"content":"        Overtime zeroOvertime \u003d new Overtime(\"0\");","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"szelongq"},"content":"        CalculatedPay calculatedPay \u003d person.getCalculatedPay();","lastModifiedDate":"2021-11-01"},{"lineNumber":88,"author":{"gitId":"szelongq"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();","lastModifiedDate":"2021-11-01"},{"lineNumber":89,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"szelongq"},"content":"        return new Person(name, phone, email, address, role, leaves, leavesTaken, hourlySalary,","lastModifiedDate":"2021-11-01"},{"lineNumber":91,"author":{"gitId":"szelongq"},"content":"                zeroHours, zeroOvertime, calculatedPay, tags);","lastModifiedDate":"2021-11-01"},{"lineNumber":92,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"szelongq"},"content":"    public void execute_unfilteredList_success() {","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"szelongq"},"content":"        StartPayrollCommand startPayrollCommand \u003d new StartPayrollCommand();","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"szelongq"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"szelongq"},"content":"        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate overtimePayRate \u003d model.getOvertimePayRate();","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"szelongq"},"content":"        for (Person personToCalculatePay: personList) {","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"szelongq"},"content":"            HourlySalary salary \u003d personToCalculatePay.getSalary();","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"szelongq"},"content":"            HoursWorked hoursWorked \u003d personToCalculatePay.getHoursWorked();","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"szelongq"},"content":"            Overtime overtime \u003d personToCalculatePay.getOvertime();","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"szelongq"},"content":"            CalculatedPay calculatedPay \u003d calculatePay(salary, hoursWorked, overtime, overtimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"szelongq"},"content":"            Person personWithCalculatedPay \u003d createPersonWithCalculatedPay(personToCalculatePay, calculatedPay);","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"szelongq"},"content":"            Person personWithPayrollDone \u003d createPersonWithZeroHoursWorkedAndOvertime(personWithCalculatedPay);","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"szelongq"},"content":"            expectedModel.setPerson(personToCalculatePay, personWithPayrollDone);","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"szelongq"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"szelongq"},"content":"                String.format(StartPayrollCommand.MESSAGE_START_PAYROLL_SUCCESS);","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"szelongq"},"content":"        assertCommandSuccess(startPayrollCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"szelongq"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"szelongq"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"szelongq"},"content":"        StartPayrollCommand startPayrollCommand \u003d new StartPayrollCommand();","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"szelongq"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"szelongq"},"content":"        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"szelongq"},"content":"        List\u003cPerson\u003e personList \u003d expectedModel.getFilteredPersonList();","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate overtimePayRate \u003d model.getOvertimePayRate();","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"szelongq"},"content":"        for (Person personToCalculatePay: personList) {","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"szelongq"},"content":"            HourlySalary salary \u003d personToCalculatePay.getSalary();","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"szelongq"},"content":"            HoursWorked hoursWorked \u003d personToCalculatePay.getHoursWorked();","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"szelongq"},"content":"            Overtime overtime \u003d personToCalculatePay.getOvertime();","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"szelongq"},"content":"            CalculatedPay calculatedPay \u003d calculatePay(salary, hoursWorked, overtime, overtimePayRate);","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"szelongq"},"content":"            Person personWithCalculatedPay \u003d createPersonWithCalculatedPay(personToCalculatePay, calculatedPay);","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"szelongq"},"content":"            Person personWithPayrollDone \u003d createPersonWithZeroHoursWorkedAndOvertime(personWithCalculatedPay);","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"szelongq"},"content":"            expectedModel.setPerson(personToCalculatePay, personWithPayrollDone);","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"szelongq"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"szelongq"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"szelongq"},"content":"                String.format(StartPayrollCommand.MESSAGE_START_PAYROLL_SUCCESS);","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"szelongq"},"content":"        assertCommandSuccess(startPayrollCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":148,"author":{"gitId":"szelongq"},"content":"    public void execute_noOneToPay_throwsCommandException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":149,"author":{"gitId":"szelongq"},"content":"        Model emptyModel \u003d new ModelManager();","lastModifiedDate":"2021-11-08"},{"lineNumber":150,"author":{"gitId":"szelongq"},"content":"        StartPayrollCommand startPayrollCommand \u003d new StartPayrollCommand();","lastModifiedDate":"2021-11-08"},{"lineNumber":151,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":152,"author":{"gitId":"szelongq"},"content":"        String expectedMessage \u003d StartPayrollCommand.MESSAGE_NO_ONE_TO_PAY;","lastModifiedDate":"2021-11-08"},{"lineNumber":153,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":154,"author":{"gitId":"szelongq"},"content":"        assertCommandFailure(startPayrollCommand, emptyModel, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":155,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":156,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":157,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"szelongq"},"content":"    public void execute_personIsNotPaid_throwsCommandException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"szelongq"},"content":"        Person personToCalculatePay \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"szelongq"},"content":"        StartPayrollCommand startPayrollCommand \u003d new StartPayrollCommand();","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"szelongq"},"content":"        CalculatedPay calculatedPay \u003d new CalculatedPay(\"500.00\");","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"szelongq"},"content":"        Person personWithCalculatedPay \u003d createPersonWithCalculatedPay(personToCalculatePay, calculatedPay);","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"szelongq"},"content":"        model.setPerson(personToCalculatePay, personWithCalculatedPay);","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"szelongq"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"szelongq"},"content":"                String.format(StartPayrollCommand.MESSAGE_NOT_PAID, personToCalculatePay.getName());","lastModifiedDate":"2021-11-07"},{"lineNumber":169,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"szelongq"},"content":"        assertCommandFailure(startPayrollCommand, model, expectedMessage);","lastModifiedDate":"2021-10-22"},{"lineNumber":171,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"danielsimre":1,"szelongq":171}},{"path":"src/test/java/seedu/address/logic/commands/ViewCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"public class ViewCommandTest {","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"    public void execute_viewPersonValidIndex_success() throws Exception {","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"        model.setViewingPerson(person);","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"        CommandResult commandResult \u003d new ViewCommand(INDEX_SECOND_PERSON).execute(model);","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"        Person setToViewPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"        assertEquals(String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, setToViewPerson),","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"        assertEquals(model.getViewingPerson().getPerson(), setToViewPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"    public void execute_viewPersonInvalidIndex_throwsException() {","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"    public void execute_viewPersonValidIndexFilteredList_success() {","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"        Person personToView \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_SUCCESS,","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"                personToView);","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"1waykiat"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"        expectedModel.setViewingPerson(personToView);","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"1waykiat"},"content":"        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"    public void execute_viewPersonInvalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"1waykiat"},"content":"    public void equals() {","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"1waykiat"},"content":"        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"1waykiat"},"content":"        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"1waykiat"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"1waykiat"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommand));","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"1waykiat"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"1waykiat"},"content":"        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"1waykiat"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"1waykiat"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"1waykiat"},"content":"        assertFalse(viewFirstCommand.equals(2));","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"1waykiat"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"1waykiat"},"content":"        assertFalse(viewFirstCommand.equals(null));","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"1waykiat"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"1waykiat"},"content":"        assertFalse(viewFirstCommand.equals(viewSecondCommand));","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"1waykiat":98}},{"path":"src/test/java/seedu/address/logic/commands/ViewOvertimePayRateCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"public class ViewOvertimePayRateCommandTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    public void execute_viewOvertimePayRate_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate overtimePayRate \u003d model.getOvertimePayRate();","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"        String expectedMessage \u003d String.format(ViewOvertimePayRateCommand.SHOWING_RATE_MESSAGE, overtimePayRate);","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"        assertCommandSuccess(new ViewOvertimePayRateCommand(), model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"szelongq":22}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURLYSALARY_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURLYSALARY_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURSWORKED_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURSWORKED_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_HOURLYSALARY_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_HOURSWORKED_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVES_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_OVERTIME_DESC;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEAVES_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEAVES_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OVERTIME_DESC_AMY;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OVERTIME_DESC_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURLYSALARY_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"        // multiple role - last role accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"                + ROLE_DESC_AMY + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"        // multiple leaves - last leaves accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_AMY + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"        // multiple salary - last salary accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_AMY + HOURLYSALARY_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"        // multiple hoursWorked - last hoursWorked accepted","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_AMY","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"                + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        // multiple hoursWorked - last overtime accepted","lastModifiedDate":"2021-10-14"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"                + OVERTIME_DESC_AMY + OVERTIME_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"                + OVERTIME_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_AMY + LEAVES_DESC_AMY + HOURLYSALARY_DESC_AMY + HOURSWORKED_DESC_AMY + OVERTIME_DESC_AMY,","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"                        + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"                        + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"                        + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"                        + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"        // missing role prefix","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"                        + VALID_ROLE_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"        // missing leaves prefix","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"boonhaii"},"content":"                        + ROLE_DESC_BOB + VALID_LEAVES_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"        // missing salary prefix","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"                        + ROLE_DESC_BOB + LEAVES_DESC_BOB + VALID_HOURLYSALARY_BOB + HOURSWORKED_DESC_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"boonhaii"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"boonhaii"},"content":"        // missing hoursWorked prefix","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"boonhaii"},"content":"                        + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + VALID_HOURSWORKED_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":186,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"boonhaii"},"content":"                        + VALID_ROLE_BOB + VALID_LEAVES_BOB + VALID_HOURLYSALARY_BOB + VALID_HOURSWORKED_BOB,","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":191,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":196,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":201,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":206,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":211,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":214,"author":{"gitId":"boonhaii"},"content":"        // invalid role","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"danielsimre"},"content":"                + INVALID_ROLE_DESC + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":217,"author":{"gitId":"boonhaii"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Role.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":218,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"boonhaii"},"content":"        // invalid leaves","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + INVALID_LEAVES_DESC + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":222,"author":{"gitId":"danielsimre"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, LeaveBalance.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":223,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":224,"author":{"gitId":"boonhaii"},"content":"        // invalid salary","lastModifiedDate":"2021-10-11"},{"lineNumber":225,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":226,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + INVALID_HOURLYSALARY_DESC + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":227,"author":{"gitId":"boonhaii"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, HourlySalary.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":228,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":229,"author":{"gitId":"boonhaii"},"content":"        // invalid hoursWorked","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-11"},{"lineNumber":231,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + INVALID_HOURSWORKED_DESC + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":232,"author":{"gitId":"boonhaii"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, HoursWorked.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":233,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":234,"author":{"gitId":"danielsimre"},"content":"        // invalid overtime","lastModifiedDate":"2021-10-14"},{"lineNumber":235,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":236,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB + INVALID_OVERTIME_DESC","lastModifiedDate":"2021-10-14"},{"lineNumber":237,"author":{"gitId":"danielsimre"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Overtime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-14"},{"lineNumber":238,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":241,"author":{"gitId":"danielsimre"},"content":"                + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":245,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2021-10-11"},{"lineNumber":246,"author":{"gitId":"danielsimre"},"content":"                        + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + HOURSWORKED_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":247,"author":{"gitId":"danielsimre"},"content":"                        + OVERTIME_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-14"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":251,"author":{"gitId":"danielsimre"},"content":"                        + ADDRESS_DESC_BOB + ROLE_DESC_BOB + LEAVES_DESC_BOB + HOURLYSALARY_DESC_BOB + OVERTIME_DESC_BOB","lastModifiedDate":"2021-10-14"},{"lineNumber":252,"author":{"gitId":"boonhaii"},"content":"                        + HOURSWORKED_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-10-11"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":255,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"danielsimre":39,"boonhaii":90,"-":126}},{"path":"src/test/java/seedu/address/logic/parser/AddHoursWorkedCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_HOURS_WORKED_INPUT;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_OVERTIME_INPUT;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddHoursWorkedCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"public class AddHoursWorkedCommandParserTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    private final AddHoursWorkedCommandParser parser \u003d new AddHoursWorkedCommandParser();","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    private final String validHoursWorked \u003d \"10\";","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    private final String validOvertime \u003d \"5\";","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"        // Both HoursWorked and Overtime present","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_HOURSWORKED + validHoursWorked","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + validOvertime;","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        AddHoursWorkedCommand expectedCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(targetIndex, new HoursWorked(validHoursWorked),","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(validOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        // Only HoursWorked present","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_HOURSWORKED + validHoursWorked;","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        expectedCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"                new AddHoursWorkedCommand(targetIndex, new HoursWorked(validHoursWorked),","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(\"0\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        // Only Overtime present","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_OVERTIME + validOvertime;","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        expectedCommand \u003d new AddHoursWorkedCommand(targetIndex, new HoursWorked(\"0\"),","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(validOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHoursWorkedCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        // No parameters","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, \" \", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        // No index","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, PREFIX_HOURSWORKED + validHoursWorked","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + validOvertime, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        // No hours worked and overtime inputs","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, String.valueOf(INDEX_FIRST_PERSON.getOneBased()), expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        // Missing prefix","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"                + validHoursWorked, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"    public void parse_invalidHoursWorked_failure() {","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_HOURS_WORKED_INPUT, AddHoursWorkedCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_HOURSWORKED;","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1.1\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"aaa\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1abc\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        // Not a positive integer","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"-1\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        // Exceeds max hours worked","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1000\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        // Invalid hours worked with valid overtime","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\"","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + \"5\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\"","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + \"5\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        // Invalid hours worked with invalid overtime: will display error for hours worked","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\"","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + \"0\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\"","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + \"745\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    public void parse_invalidOvertime_failure() {","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_OVERTIME_INPUT, AddHoursWorkedCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_OVERTIME;","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1.1\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"aaa\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1abc\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        // Not a positive integer","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"-1\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"        // Exceeds max overtime","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1000\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        // Invalid overtime with valid hours worked","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_HOURSWORKED + \"5\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\"","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_HOURSWORKED + \"5\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"        // Invalid hours worked with invalid overtime: will display error for overtime","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"        // as the 0 input is caught before the 745 input in the code","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\"","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_HOURSWORKED + \"745\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"danielsimre":129}},{"path":"src/test/java/seedu/address/logic/parser/AddLeaveBalanceCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_LEAVES_INPUT;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddLeaveBalanceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"public class AddLeaveBalanceCommandParserTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    private final AddLeaveBalanceCommandParser parser \u003d new AddLeaveBalanceCommandParser();","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    private final String validNumberOfLeaves \u003d \"3\";","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_LEAVE + validNumberOfLeaves;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand expectedCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"                new AddLeaveBalanceCommand(targetIndex, new LeaveBalance(validNumberOfLeaves));","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLeaveBalanceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        // No parameters","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, \" \", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        // No index","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, PREFIX_LEAVE + \"\" + validNumberOfLeaves, expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        // No number of leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, String.valueOf(INDEX_FIRST_PERSON.getOneBased()), expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        // Missing prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"                + validNumberOfLeaves, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    public void parse_invalidInteger_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_LEAVES_INPUT, AddLeaveBalanceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1.1\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        // Not a positive integer","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"-1\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        // Exceeds max leave bounds","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"366\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1000\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":59,"boonhaii":4}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.AddLeaveBalanceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.DeductLeaveBalanceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.PayCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.SetOvertimePayRateCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.StartPayrollCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.ViewCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.ViewOvertimePayRateCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"    /*@Test","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"    }*/","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"    public void parseCommand_addLeaves() throws Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"        final LeaveBalance leaveBalance \u003d new LeaveBalance(\"3\");","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        AddLeaveBalanceCommand command \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"                (AddLeaveBalanceCommand) parser.parseCommand(AddLeaveBalanceCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_LEAVE + leaveBalance);","lastModifiedDate":"2021-10-27"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        assertEquals(new AddLeaveBalanceCommand(INDEX_FIRST_PERSON, leaveBalance), command);","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"    public void parseCommand_removeLeaves() throws Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        final LeaveBalance numberOfLeaves \u003d new LeaveBalance(\"3\");","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand command \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"                (DeductLeaveBalanceCommand) parser.parseCommand(DeductLeaveBalanceCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_LEAVE + numberOfLeaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"        assertEquals(new DeductLeaveBalanceCommand(INDEX_FIRST_PERSON, numberOfLeaves), command);","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"szelongq"},"content":"    public void parseCommand_startPayroll() throws Exception {","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"szelongq"},"content":"        assertTrue(parser.parseCommand(StartPayrollCommand.COMMAND_WORD) instanceof StartPayrollCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"szelongq"},"content":"        assertTrue(parser.parseCommand(StartPayrollCommand.COMMAND_WORD + \" 3\") instanceof StartPayrollCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"szelongq"},"content":"    public void parseCommand_pay() throws Exception {","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"szelongq"},"content":"        PayCommand paySingleCommand \u003d (PayCommand) parser.parseCommand(","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"szelongq"},"content":"                PayCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"szelongq"},"content":"        assertEquals(new PayCommand(INDEX_FIRST_PERSON), paySingleCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"szelongq"},"content":"        PayCommand payAllCommand \u003d (PayCommand) parser.parseCommand(","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"szelongq"},"content":"                PayCommand.COMMAND_WORD + \" \" + PayCommand.PAY_ALL_COMMAND_PHRASE);","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"szelongq"},"content":"        assertEquals(new PayCommand(), payAllCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"szelongq"},"content":"    public void parseCommand_viewCommand() throws Exception {","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"szelongq"},"content":"        ViewCommand command \u003d (ViewCommand) parser.parseCommand(","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"szelongq"},"content":"                ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"szelongq"},"content":"        assertEquals(new ViewCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":137,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":139,"author":{"gitId":"szelongq"},"content":"    public void parseCommand_viewOvertimePayRate() throws Exception {","lastModifiedDate":"2021-11-08"},{"lineNumber":140,"author":{"gitId":"szelongq"},"content":"        assertTrue(parser.parseCommand(ViewOvertimePayRateCommand.COMMAND_WORD) instanceof ViewOvertimePayRateCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"szelongq"},"content":"        assertTrue(parser.parseCommand(ViewOvertimePayRateCommand.COMMAND_WORD + \" 3\")","lastModifiedDate":"2021-11-08"},{"lineNumber":142,"author":{"gitId":"szelongq"},"content":"                instanceof ViewOvertimePayRateCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":143,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":144,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":145,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":146,"author":{"gitId":"szelongq"},"content":"    public void parseCommand_setOvertimePayRate() throws Exception {","lastModifiedDate":"2021-11-08"},{"lineNumber":147,"author":{"gitId":"szelongq"},"content":"        SetOvertimePayRateCommand command \u003d (SetOvertimePayRateCommand) parser.parseCommand(","lastModifiedDate":"2021-11-08"},{"lineNumber":148,"author":{"gitId":"szelongq"},"content":"                SetOvertimePayRateCommand.COMMAND_WORD + \" 1.5\");","lastModifiedDate":"2021-11-08"},{"lineNumber":149,"author":{"gitId":"szelongq"},"content":"        OvertimePayRate newOvertimePayRate \u003d new OvertimePayRate(\"1.5\");","lastModifiedDate":"2021-11-08"},{"lineNumber":150,"author":{"gitId":"szelongq"},"content":"        assertEquals(new SetOvertimePayRateCommand(newOvertimePayRate), command);","lastModifiedDate":"2021-11-08"},{"lineNumber":151,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":152,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"danielsimre":22,"szelongq":45,"boonhaii":3,"-":93}},{"path":"src/test/java/seedu/address/logic/parser/AssignLeaveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.commands.AssignLeaveCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"public class AssignLeaveCommandParserTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"    private static AssignLeaveCommandParser parser \u003d new AssignLeaveCommandParser();","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"    private static final String FIRST_INDEX \u003d \"1\";","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_INDEX \u003d \"-1\";","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_LEAP_YEAR_DATE \u003d \"2021-02-29\"; // 2021 is not a leap year.","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_MONTH_DATE \u003d \"2020-50-29\"; // 50 is not a valid month for a date","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_DAY_DATE \u003d \"2020-02-50\"; // 50 is not a valid day for a date","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_THREE_DIGIT_YEAR_DATE \u003d \"999-02-50\"; // Year must be in 4 digits","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_FIVE_DIGIT_YEAR_DATE \u003d \"20202-02-50\"; // Year must be in 4 digits","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_TYPICAL_DATE \u003d \"2020-02-20\";","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_LEAP_YEAR_DATE \u003d \"2020-02-29\";","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_DATE_NOT_GIVEN \u003d \" \" + FIRST_INDEX + \" \" + PREFIX_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INDEX_NOT_GIVEN \u003d \" \" + PREFIX_DATE + VALID_TYPICAL_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_INDEX \u003d \" \" + INVALID_INDEX + \" \" + PREFIX_DATE + VALID_TYPICAL_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_DAY \u003d \" \" + FIRST_INDEX + \" \" + PREFIX_DATE + INVALID_DAY_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_LEAP_YEAR \u003d \" \" + FIRST_INDEX + \" \" + PREFIX_DATE","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"            + INVALID_LEAP_YEAR_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_MONTH \u003d \" \" + FIRST_INDEX + \" \" + PREFIX_DATE + INVALID_MONTH_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_THREE_DIGIT_YEAR \u003d \" \" + FIRST_INDEX + \" \" + PREFIX_DATE","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"            + INVALID_THREE_DIGIT_YEAR_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_FIVE_DIGIT_YEAR \u003d \" \" + FIRST_INDEX + \" \" + PREFIX_DATE","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"            + INVALID_FIVE_DIGIT_YEAR_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_VALID_LEAP_YEAR \u003d \" \" + FIRST_INDEX + \" \" + PREFIX_DATE + VALID_LEAP_YEAR_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_VALID_TYPICAL_DATE \u003d \" \" + FIRST_INDEX + \" \" + PREFIX_DATE + VALID_TYPICAL_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"    // Missing Index -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"    public void parse_indexNotGiven_invalidCommandError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INDEX_NOT_GIVEN;","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"    // Missing Date -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"    public void parse_dateNotGiven_invalidCommandError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_DATE_NOT_GIVEN;","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"    // Invalid Index -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"    public void parse_invalidIndexGiven_invalidCommandError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_INDEX;","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"    // Invalid Month -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"    public void parse_givenDateMonthNotValid_invalidDateError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_MONTH;","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, AssignLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"    // Invalid Day -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"    public void parse_givenDateDayNotValid_invalidDateError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_DAY;","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, AssignLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"    // Non-existent Leap Date -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"    public void parse_invalidDateInLeapYear_failure() {","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_LEAP_YEAR;","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, AssignLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"    // Invalid Year -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"    public void parse_givenDateThreeDigitYearNotValid_invalidDateError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_THREE_DIGIT_YEAR;","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, AssignLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"boonhaii"},"content":"    // Invalid Year -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"    public void parse_givenDateFiveDigitYearNotValid_invalidDateError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_FIVE_DIGIT_YEAR;","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, AssignLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"boonhaii"},"content":"    // Valid and existing Leap Day -\u003e Success","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"boonhaii"},"content":"    public void parse_validDateInLeapYear_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_VALID_LEAP_YEAR;","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, input, new AssignLeaveCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"boonhaii"},"content":"                LocalDate.parse(VALID_LEAP_YEAR_DATE)));","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"boonhaii"},"content":"    // Valid Date -\u003e Success","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"boonhaii"},"content":"    public void parse_validTypicalDate_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_VALID_TYPICAL_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, input, new AssignLeaveCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"                LocalDate.parse(VALID_TYPICAL_DATE)));","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"boonhaii":129}},{"path":"src/test/java/seedu/address/logic/parser/DeductHoursWorkedCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_HOURS_WORKED_INPUT;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_OVERTIME_INPUT;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.DeductHoursWorkedCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"public class DeductHoursWorkedCommandParserTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    private final DeductHoursWorkedCommandParser parser \u003d new DeductHoursWorkedCommandParser();","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    private final String validHoursWorked \u003d \"10\";","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    private final String validOvertime \u003d \"5\";","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"        // Both HoursWorked and Overtime present","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_HOURSWORKED + validHoursWorked","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + validOvertime;","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        DeductHoursWorkedCommand expectedCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(targetIndex, new HoursWorked(validHoursWorked),","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(validOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        // Only HoursWorked present","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_HOURSWORKED + validHoursWorked;","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        expectedCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"                new DeductHoursWorkedCommand(targetIndex, new HoursWorked(validHoursWorked),","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"                        new Overtime(\"0\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        // Only Overtime present","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_OVERTIME + validOvertime;","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        expectedCommand \u003d new DeductHoursWorkedCommand(targetIndex, new HoursWorked(\"0\"),","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"                new Overtime(validOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeductHoursWorkedCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        // No parameters","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, \" \", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        // No index","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, PREFIX_HOURSWORKED + validHoursWorked","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + validOvertime, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        // No hours worked and overtime inputs","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, String.valueOf(INDEX_FIRST_PERSON.getOneBased()), expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        // Missing prefix","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"                + validHoursWorked, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    public void parse_invalidHoursWorked_failure() {","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_HOURS_WORKED_INPUT,","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"                DeductHoursWorkedCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_HOURSWORKED;","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1.1\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"aaa\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1abc\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        // Not a positive integer","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"-1\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        // Exceeds max hours worked","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1000\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        // Invalid hours worked with valid overtime","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\"","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + \"5\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\"","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + \"5\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        // Invalid hours worked with invalid overtime: will display error for hours worked","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\"","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + \"0\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\"","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_OVERTIME + \"745\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    public void parse_invalidOvertime_failure() {","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_OVERTIME_INPUT, DeductHoursWorkedCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_OVERTIME;","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1.1\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"aaa\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1abc\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        // Not a positive integer","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"-1\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"        // Exceeds max overtime","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1000\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        // Invalid overtime with valid hours worked","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_HOURSWORKED + \"5\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"745\"","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_HOURSWORKED + \"5\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"        // Invalid hours worked with invalid overtime: will display error for overtime","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"        // as the 0 input is caught before the 745 input in the code","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\"","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"                + \" \" + PREFIX_HOURSWORKED + \"745\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"danielsimre":129}},{"path":"src/test/java/seedu/address/logic/parser/DeductLeaveBalanceCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_LEAVES_INPUT;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import seedu.address.logic.commands.DeductLeaveBalanceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"public class DeductLeaveBalanceCommandParserTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    private final DeductLeaveBalanceCommandParser parser \u003d new DeductLeaveBalanceCommandParser();","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    private final String validNumberOfLeaves \u003d \"3\";","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_LEAVE + validNumberOfLeaves;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        DeductLeaveBalanceCommand expectedCommand \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"                new DeductLeaveBalanceCommand(targetIndex, new LeaveBalance(validNumberOfLeaves));","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeductLeaveBalanceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        // No parameters","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, \" \", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        // No index","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, PREFIX_LEAVE + \"\" + validNumberOfLeaves, expectedMessage);","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        // No number of leaves","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, String.valueOf(INDEX_FIRST_PERSON.getOneBased()), expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        // Missing prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"                + validNumberOfLeaves, expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    public void parse_invalidInteger_failure() {","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_LEAVES_INPUT, DeductLeaveBalanceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_LEAVE;","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1.1\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        // Not a positive integer","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"0\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"-1\", expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        // Exceeds max leave bounds","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"366\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, userInput + \"1000\", expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"danielsimre":59,"boonhaii":4}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURLYSALARY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURLYSALARY_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURSWORKED_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.HOURSWORKED_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_HOURLYSALARY_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_HOURSWORKED_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVES_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEAVES_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEAVES_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURLYSALARY_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURLYSALARY_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS); // invalid role","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LEAVES_DESC, LeaveBalance.MESSAGE_CONSTRAINTS); // invalid leaves","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \"1\" + INVALID_HOURLYSALARY_DESC, HourlySalary.MESSAGE_CONSTRAINTS); // invalid salary","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"1waykiat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_HOURSWORKED_DESC, HoursWorked.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"1waykiat"},"content":"        // invalid hours worked","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":141,"author":{"gitId":"1waykiat"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"beefham"},"content":"                + ROLE_DESC_AMY + LEAVES_DESC_AMY + HOURLYSALARY_DESC_AMY + HOURSWORKED_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"1waykiat"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withRole(VALID_ROLE_AMY)","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"beefham"},"content":"                .withLeaves(VALID_LEAVES_AMY).withSalary(VALID_HOURLYSALARY_AMY)","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"1waykiat"},"content":"                .withHoursWorked(VALID_HOURSWORKED_AMY).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"1waykiat"},"content":"        // role","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"1waykiat"},"content":"        userInput \u003d targetIndex.getOneBased() + ROLE_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"1waykiat"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withRole(VALID_ROLE_AMY).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"1waykiat"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"1waykiat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"1waykiat"},"content":"        // leave","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"1waykiat"},"content":"        userInput \u003d targetIndex.getOneBased() + LEAVES_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"1waykiat"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withLeaves(VALID_LEAVES_AMY).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"1waykiat"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"1waykiat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"1waykiat"},"content":"        // salary","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"beefham"},"content":"        userInput \u003d targetIndex.getOneBased() + HOURLYSALARY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":207,"author":{"gitId":"beefham"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withSalary(VALID_HOURLYSALARY_AMY).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":208,"author":{"gitId":"1waykiat"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"1waykiat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"1waykiat"},"content":"        // hours worked","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"1waykiat"},"content":"        userInput \u003d targetIndex.getOneBased() + HOURSWORKED_DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"1waykiat"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withHoursWorked(VALID_HOURSWORKED_AMY).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"1waykiat"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"1waykiat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":229,"author":{"gitId":"1waykiat"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"beefham"},"content":"                + HOURLYSALARY_DESC_AMY + LEAVES_DESC_AMY + ROLE_DESC_AMY + HOURSWORKED_DESC_AMY","lastModifiedDate":"2021-10-12"},{"lineNumber":231,"author":{"gitId":"beefham"},"content":"                + HOURLYSALARY_DESC_BOB + LEAVES_DESC_BOB + ROLE_DESC_BOB + HOURSWORKED_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":235,"author":{"gitId":"beefham"},"content":"                .withRole(VALID_ROLE_BOB).withLeaves(VALID_LEAVES_BOB).withSalary(VALID_HOURLYSALARY_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":236,"author":{"gitId":"1waykiat"},"content":"                .withHoursWorked(VALID_HOURSWORKED_BOB).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":270,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"danielsimre":2,"beefham":14,"-":207,"1waykiat":47}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FINDDATE_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURLYSALARY_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_AMY;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_AMY;","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_OVERTIME_AMY;","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"import javafx.util.Pair;","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.AddressContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.EmailContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursEqualPredicate;","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursLessThanPredicate;","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.HoursMoreThanEqualPredicate;","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveEqualPredicate;","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveLessThanPredicate;","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeaveMoreThanEqualPredicate;","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.LeavesTakenContainsDatesPredicate;","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeEqualPredicate;","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeLessThanEqualPredicate;","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.OvertimeMoreThanPredicate;","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.PersonIsPaidPredicate;","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.PhoneNumberMatchesPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.RoleContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsEqualPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsLessThanEqualPredicate;","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.SalaryIsMoreThanPredicate;","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.TagContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"    private static void assertPredicatesAreEqual(FindCommand expectedCommand, FindCommand testCommand, Person p) {","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"        assertEquals(expectedCommand.getPredicate().test(p), testCommand.getPredicate().test(p));","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"beefham"},"content":"    public void parse_invalidPreamble_throwsParseException() {","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" asdfpw\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"beefham"},"content":"    public void parse_noComparisonOperatorSalaryArg_throwsParseException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_HOURLYSALARY + \"5\",","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"beefham"},"content":"    public void parse_invalidComparisonOperatorSalaryArg_throwsParseException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_HOURLYSALARY + \"\u003e\u003c5\",","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"beefham"},"content":"    public void parse_invalidComparisonOperatorSalaryArg2_throwsParseException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_HOURLYSALARY + \"\u003d\u003e5\",","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"beefham"},"content":"    public void parse_invalidSalaryTooManyArgs_throwsParseException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_HOURLYSALARY + \"\u003e5 \u003c10\",","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"beefham"},"content":"    public void parse_invalidSingleDate_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE + \"0\",","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"beefham"},"content":"    public void parse_invalidStartDates_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE + \"0:2021-09-12\",","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"beefham"},"content":"    public void parse_invalidEndDates_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE + \"2021-09-12:0\",","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"beefham"},"content":"    public void parse_invalidDateMonth_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE + \"2021-04-12:2021-21-12\",","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"beefham"},"content":"    public void parse_invalidDateDay_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE + \"2021-04-12:2021-05-32\",","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"beefham"},"content":"    public void parse_invalidDateRangeFormat_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE + \"2021-04-12-2021-21-12\",","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":137,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":139,"author":{"gitId":"beefham"},"content":"    public void parse_tooManyDates_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":140,"author":{"gitId":"beefham"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE + \"2021-01-01:2022-01-01:2022-01-01\",","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"beefham"},"content":"                String.format(MESSAGE_INVALID_FINDDATE_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":142,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":143,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":144,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":145,"author":{"gitId":"beefham"},"content":"     * Since FindCommandParser now combines all predicates together with Stream::reduce,","lastModifiedDate":"2021-10-13"},{"lineNumber":146,"author":{"gitId":"beefham"},"content":"     * the FindCommands given cannot be directly tested for equality.","lastModifiedDate":"2021-10-13"},{"lineNumber":147,"author":{"gitId":"beefham"},"content":"     * Current workaround: test both predicates of FindCommand with given","lastModifiedDate":"2021-10-13"},{"lineNumber":148,"author":{"gitId":"beefham"},"content":"     * inputs and see if both predicates return the same result for the inputs.","lastModifiedDate":"2021-10-13"},{"lineNumber":149,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":150,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":151,"author":{"gitId":"beefham"},"content":"    public void parse_validPreamble_returnsFindCommand() {","lastModifiedDate":"2021-11-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-11-02"},{"lineNumber":153,"author":{"gitId":"beefham"},"content":"                new FindCommand(new PersonIsPaidPredicate());","lastModifiedDate":"2021-11-02"},{"lineNumber":154,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":155,"author":{"gitId":"beefham"},"content":"            // parsedFindCommand returns true for unpaid person","lastModifiedDate":"2021-11-07"},{"lineNumber":156,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\"unpaid\");","lastModifiedDate":"2021-11-02"},{"lineNumber":157,"author":{"gitId":"beefham"},"content":"            Person unpaidPerson \u003d new PersonBuilder().withCalculatedPay(\"100\").build();","lastModifiedDate":"2021-11-02"},{"lineNumber":158,"author":{"gitId":"beefham"},"content":"            Person paidPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2021-11-02"},{"lineNumber":159,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, unpaidPerson);","lastModifiedDate":"2021-11-02"},{"lineNumber":160,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, paidPerson);","lastModifiedDate":"2021-11-02"},{"lineNumber":161,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(unpaidPerson));","lastModifiedDate":"2021-11-07"},{"lineNumber":162,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(paidPerson));","lastModifiedDate":"2021-11-07"},{"lineNumber":163,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-11-02"},{"lineNumber":164,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-11-02"},{"lineNumber":165,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":166,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":168,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":169,"author":{"gitId":"beefham"},"content":"    public void parse_validNameArgs_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":170,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":171,"author":{"gitId":"beefham"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Amy\", \"Bryan\")));","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":173,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_NAME + \"Amy Bryan\");","lastModifiedDate":"2021-10-13"},{"lineNumber":174,"author":{"gitId":"beefham"},"content":"            // Amy\u0027s name contains Amy \u003d\u003e true","lastModifiedDate":"2021-11-07"},{"lineNumber":175,"author":{"gitId":"beefham"},"content":"            // Bob\u0027s name does not contain Amy or Bryan \u003d\u003e false","lastModifiedDate":"2021-11-07"},{"lineNumber":176,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":177,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-07"},{"lineNumber":178,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":179,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":180,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":181,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":182,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":185,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":186,"author":{"gitId":"beefham"},"content":"    public void parse_validPhoneArgs_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":187,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":188,"author":{"gitId":"beefham"},"content":"                new FindCommand(new PhoneNumberMatchesPredicate(Arrays.asList(VALID_PHONE_AMY)));","lastModifiedDate":"2021-10-13"},{"lineNumber":189,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":190,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_PHONE + \"11111111\");","lastModifiedDate":"2021-10-13"},{"lineNumber":191,"author":{"gitId":"beefham"},"content":"            // Amy\u0027s phone number \u003d \"11111111\" \u003d\u003e true","lastModifiedDate":"2021-10-13"},{"lineNumber":192,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":196,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":197,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"beefham"},"content":"    public void parse_validRoleArgs_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":203,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":204,"author":{"gitId":"beefham"},"content":"                new FindCommand(new RoleContainsKeywordsPredicate(Arrays.asList(\"Mobile\", \"Front\")));","lastModifiedDate":"2021-11-07"},{"lineNumber":205,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":206,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_ROLE + \"Mobile Front\");","lastModifiedDate":"2021-11-07"},{"lineNumber":207,"author":{"gitId":"beefham"},"content":"            // Amy\u0027s Role is Mobile App Developer (contains \"Mobile\") \u003d\u003e true","lastModifiedDate":"2021-11-07"},{"lineNumber":208,"author":{"gitId":"beefham"},"content":"            // Bob\u0027s Role is Front-End Developer (contains \"Front\") \u003d\u003e true","lastModifiedDate":"2021-11-07"},{"lineNumber":209,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-10-13"},{"lineNumber":210,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-10-13"},{"lineNumber":211,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":212,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":213,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":214,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":215,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":216,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":217,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":218,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":219,"author":{"gitId":"beefham"},"content":"    public void parse_validSharedRoleArgs_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":220,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":221,"author":{"gitId":"beefham"},"content":"                new FindCommand(new RoleContainsKeywordsPredicate(Arrays.asList(\"Developer\")));","lastModifiedDate":"2021-10-13"},{"lineNumber":222,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":223,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_ROLE + \"Developer\");","lastModifiedDate":"2021-10-13"},{"lineNumber":224,"author":{"gitId":"beefham"},"content":"            // Amy\u0027s Role is Mobile App Developer \u003d\u003e true","lastModifiedDate":"2021-10-13"},{"lineNumber":225,"author":{"gitId":"beefham"},"content":"            // Bob\u0027s Role is Front End Developer \u003d\u003e true","lastModifiedDate":"2021-10-13"},{"lineNumber":226,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-10-13"},{"lineNumber":227,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-10-13"},{"lineNumber":228,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":229,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":230,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":231,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":232,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":233,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":234,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":235,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":236,"author":{"gitId":"beefham"},"content":"    public void parse_validRoleArgsAmyOnly_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":237,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":238,"author":{"gitId":"beefham"},"content":"                new FindCommand(new RoleContainsKeywordsPredicate(Arrays.asList(\"Mobile\")));","lastModifiedDate":"2021-10-13"},{"lineNumber":239,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":240,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_ROLE + \"Mobile\");","lastModifiedDate":"2021-10-13"},{"lineNumber":241,"author":{"gitId":"beefham"},"content":"            // Amy\u0027s Role is Mobile App Developer \u003d\u003e true","lastModifiedDate":"2021-10-13"},{"lineNumber":242,"author":{"gitId":"beefham"},"content":"            // Bob\u0027s Role is Front End Developer \u003d\u003e false","lastModifiedDate":"2021-11-07"},{"lineNumber":243,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-10-13"},{"lineNumber":244,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-10-13"},{"lineNumber":245,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":246,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":247,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":248,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":249,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":250,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":251,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":252,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":253,"author":{"gitId":"beefham"},"content":"    public void parse_validAddressArgs_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":254,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":255,"author":{"gitId":"beefham"},"content":"                new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"Street\")));","lastModifiedDate":"2021-10-13"},{"lineNumber":256,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":257,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_ADDRESS + \"Street\");","lastModifiedDate":"2021-10-13"},{"lineNumber":258,"author":{"gitId":"beefham"},"content":"            // Amy\u0027s address contains \"Street\" \u003d\u003e true","lastModifiedDate":"2021-10-13"},{"lineNumber":259,"author":{"gitId":"beefham"},"content":"            // Bob\u0027s address contains \"Street\" \u003d\u003e true","lastModifiedDate":"2021-10-13"},{"lineNumber":260,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-10-13"},{"lineNumber":261,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-10-13"},{"lineNumber":262,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":263,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":264,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":265,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":266,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":267,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":268,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":269,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":270,"author":{"gitId":"beefham"},"content":"    public void parse_validAddressArgsAmyOnly_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":271,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":272,"author":{"gitId":"beefham"},"content":"                new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"312\")));","lastModifiedDate":"2021-10-13"},{"lineNumber":273,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":274,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_ADDRESS + \"312\");","lastModifiedDate":"2021-10-13"},{"lineNumber":275,"author":{"gitId":"beefham"},"content":"            // Amy\u0027s address contains \"312\" \u003d\u003e true","lastModifiedDate":"2021-10-13"},{"lineNumber":276,"author":{"gitId":"beefham"},"content":"            // Bob\u0027s address does not contain \"312\" \u003d\u003e false","lastModifiedDate":"2021-10-13"},{"lineNumber":277,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-10-13"},{"lineNumber":278,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-10-13"},{"lineNumber":279,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":280,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":281,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":282,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":283,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":284,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":285,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":286,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":287,"author":{"gitId":"beefham"},"content":"    public void parse_validSalary_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":288,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":289,"author":{"gitId":"beefham"},"content":"                new FindCommand(new SalaryIsEqualPredicate(Double.parseDouble(VALID_HOURLYSALARY_AMY)));","lastModifiedDate":"2021-11-07"},{"lineNumber":290,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":291,"author":{"gitId":"beefham"},"content":"            // Test equals comparison","lastModifiedDate":"2021-11-07"},{"lineNumber":292,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_HOURLYSALARY + \"\u003d\" + VALID_HOURLYSALARY_AMY);","lastModifiedDate":"2021-10-13"},{"lineNumber":293,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-10-13"},{"lineNumber":294,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-10-13"},{"lineNumber":295,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":296,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":297,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":298,"author":{"gitId":"beefham"},"content":"            // Test more than comparison","lastModifiedDate":"2021-11-07"},{"lineNumber":299,"author":{"gitId":"beefham"},"content":"            parsedFindCommand \u003d parser.parse(\" \" + PREFIX_HOURLYSALARY + \"\u003e\" + VALID_HOURLYSALARY_AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":300,"author":{"gitId":"beefham"},"content":"            expectedFindCommand \u003d","lastModifiedDate":"2021-11-07"},{"lineNumber":301,"author":{"gitId":"beefham"},"content":"                    new FindCommand(new SalaryIsMoreThanPredicate(Double.parseDouble(VALID_HOURLYSALARY_AMY)));","lastModifiedDate":"2021-11-07"},{"lineNumber":302,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":303,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-07"},{"lineNumber":304,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":305,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":306,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":307,"author":{"gitId":"beefham"},"content":"            // Test less than equal comparison","lastModifiedDate":"2021-11-07"},{"lineNumber":308,"author":{"gitId":"beefham"},"content":"            parsedFindCommand \u003d parser.parse(\" \" + PREFIX_HOURLYSALARY + \"\u003c\u003d\" + VALID_HOURLYSALARY_AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":309,"author":{"gitId":"beefham"},"content":"            expectedFindCommand \u003d","lastModifiedDate":"2021-11-07"},{"lineNumber":310,"author":{"gitId":"beefham"},"content":"                    new FindCommand(new SalaryIsLessThanEqualPredicate(Double.parseDouble(VALID_HOURLYSALARY_AMY)));","lastModifiedDate":"2021-11-07"},{"lineNumber":311,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":312,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-07"},{"lineNumber":313,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":314,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":315,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-11-07"},{"lineNumber":316,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-11-07"},{"lineNumber":317,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":318,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":319,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":320,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":321,"author":{"gitId":"beefham"},"content":"    public void parse_validHoursWorked_returnsFindCommand() {","lastModifiedDate":"2021-11-07"},{"lineNumber":322,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-11-07"},{"lineNumber":323,"author":{"gitId":"beefham"},"content":"                new FindCommand(new HoursEqualPredicate(Integer.parseInt(VALID_HOURSWORKED_AMY)));","lastModifiedDate":"2021-11-07"},{"lineNumber":324,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":325,"author":{"gitId":"beefham"},"content":"            // Test equals comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":326,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_HOURSWORKED + \"\u003d\" + VALID_HOURSWORKED_AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":327,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":328,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-07"},{"lineNumber":329,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":330,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":331,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":332,"author":{"gitId":"beefham"},"content":"            // Test more than equal comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":333,"author":{"gitId":"beefham"},"content":"            parsedFindCommand \u003d parser.parse(\" \" + PREFIX_HOURSWORKED + \"\u003e\u003d\" + VALID_HOURSWORKED_AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":334,"author":{"gitId":"beefham"},"content":"            expectedFindCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":335,"author":{"gitId":"beefham"},"content":"                    new FindCommand(new HoursMoreThanEqualPredicate(Integer.parseInt(VALID_HOURSWORKED_AMY)));","lastModifiedDate":"2021-11-08"},{"lineNumber":336,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":337,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-08"},{"lineNumber":338,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":339,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-08"},{"lineNumber":340,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":341,"author":{"gitId":"beefham"},"content":"            // Test less than comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":342,"author":{"gitId":"beefham"},"content":"            parsedFindCommand \u003d parser.parse(\" \" + PREFIX_HOURSWORKED + \"\u003c\" + VALID_HOURSWORKED_AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":343,"author":{"gitId":"beefham"},"content":"            expectedFindCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":344,"author":{"gitId":"beefham"},"content":"                    new FindCommand(new HoursLessThanPredicate(Integer.parseInt(VALID_HOURSWORKED_AMY)));","lastModifiedDate":"2021-11-08"},{"lineNumber":345,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":346,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-08"},{"lineNumber":347,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":348,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-08"},{"lineNumber":349,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-11-07"},{"lineNumber":350,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-11-07"},{"lineNumber":351,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":352,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":353,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":354,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":355,"author":{"gitId":"beefham"},"content":"    public void parse_validLeavesLeft_returnsFindCommand() {","lastModifiedDate":"2021-11-07"},{"lineNumber":356,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-11-07"},{"lineNumber":357,"author":{"gitId":"beefham"},"content":"                new FindCommand(new LeaveEqualPredicate(Integer.parseInt(VALID_LEAVES_AMY)));","lastModifiedDate":"2021-11-07"},{"lineNumber":358,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":359,"author":{"gitId":"beefham"},"content":"            // Test equals comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":360,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_LEAVE + \"\u003d\" + VALID_LEAVES_AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":361,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":362,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-07"},{"lineNumber":363,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":364,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":365,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":366,"author":{"gitId":"beefham"},"content":"            // Test more than equal comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":367,"author":{"gitId":"beefham"},"content":"            parsedFindCommand \u003d parser.parse(\" \" + PREFIX_LEAVE + \"\u003e\u003d\" + VALID_LEAVES_AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":368,"author":{"gitId":"beefham"},"content":"            expectedFindCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":369,"author":{"gitId":"beefham"},"content":"                    new FindCommand(new LeaveMoreThanEqualPredicate(Integer.parseInt(VALID_LEAVES_AMY)));","lastModifiedDate":"2021-11-08"},{"lineNumber":370,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":371,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-08"},{"lineNumber":372,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":373,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-08"},{"lineNumber":374,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":375,"author":{"gitId":"beefham"},"content":"            // Test less than comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":376,"author":{"gitId":"beefham"},"content":"            parsedFindCommand \u003d parser.parse(\" \" + PREFIX_LEAVE + \"\u003c\" + VALID_LEAVES_AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":377,"author":{"gitId":"beefham"},"content":"            expectedFindCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":378,"author":{"gitId":"beefham"},"content":"                    new FindCommand(new LeaveLessThanPredicate(Integer.parseInt(VALID_LEAVES_AMY)));","lastModifiedDate":"2021-11-08"},{"lineNumber":379,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":380,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-08"},{"lineNumber":381,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":382,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-08"},{"lineNumber":383,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-11-07"},{"lineNumber":384,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-11-07"},{"lineNumber":385,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":386,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":387,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":388,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":389,"author":{"gitId":"beefham"},"content":"    public void parse_validOvertime_returnsFindCommand() {","lastModifiedDate":"2021-11-07"},{"lineNumber":390,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-11-07"},{"lineNumber":391,"author":{"gitId":"beefham"},"content":"                new FindCommand(new OvertimeEqualPredicate(Integer.parseInt(VALID_OVERTIME_AMY)));","lastModifiedDate":"2021-11-07"},{"lineNumber":392,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":393,"author":{"gitId":"beefham"},"content":"            // Test equals comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":394,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_OVERTIME + \"\u003d\" + VALID_OVERTIME_AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":395,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":396,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-07"},{"lineNumber":397,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":398,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":399,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":400,"author":{"gitId":"beefham"},"content":"            // Test less than equal comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":401,"author":{"gitId":"beefham"},"content":"            parsedFindCommand \u003d parser.parse(\" \" + PREFIX_OVERTIME + \"\u003c\u003d\" + VALID_OVERTIME_AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":402,"author":{"gitId":"beefham"},"content":"            expectedFindCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":403,"author":{"gitId":"beefham"},"content":"                    new FindCommand(new OvertimeLessThanEqualPredicate(Integer.parseInt(VALID_OVERTIME_AMY)));","lastModifiedDate":"2021-11-08"},{"lineNumber":404,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":405,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-08"},{"lineNumber":406,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":407,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-08"},{"lineNumber":408,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":409,"author":{"gitId":"beefham"},"content":"            // Test more than comparison","lastModifiedDate":"2021-11-08"},{"lineNumber":410,"author":{"gitId":"beefham"},"content":"            parsedFindCommand \u003d parser.parse(\" \" + PREFIX_OVERTIME + \"\u003e\" + VALID_OVERTIME_AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":411,"author":{"gitId":"beefham"},"content":"            expectedFindCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":412,"author":{"gitId":"beefham"},"content":"                    new FindCommand(new OvertimeMoreThanPredicate(Integer.parseInt(VALID_OVERTIME_AMY)));","lastModifiedDate":"2021-11-08"},{"lineNumber":413,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-08"},{"lineNumber":414,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-08"},{"lineNumber":415,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-08"},{"lineNumber":416,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-08"},{"lineNumber":417,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":418,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":419,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":420,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":421,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":422,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":423,"author":{"gitId":"beefham"},"content":"    public void parse_validEmailArgs_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":424,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":425,"author":{"gitId":"beefham"},"content":"                new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(\"amy\", \"bill\")));","lastModifiedDate":"2021-10-13"},{"lineNumber":426,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":427,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_EMAIL + \"amy bill\");","lastModifiedDate":"2021-10-13"},{"lineNumber":428,"author":{"gitId":"beefham"},"content":"            // Amy\u0027s email contains amy \u003d\u003e true","lastModifiedDate":"2021-11-07"},{"lineNumber":429,"author":{"gitId":"beefham"},"content":"            // Bob\u0027s email does not contain either amy or bill \u003d\u003e false","lastModifiedDate":"2021-11-07"},{"lineNumber":430,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":431,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-07"},{"lineNumber":432,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":433,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":434,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":435,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":436,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":437,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":438,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":439,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":440,"author":{"gitId":"beefham"},"content":"    public void parse_validTagArgs_returnsFindCommand() {","lastModifiedDate":"2021-10-13"},{"lineNumber":441,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":442,"author":{"gitId":"beefham"},"content":"                new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"husband\")));","lastModifiedDate":"2021-10-13"},{"lineNumber":443,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":444,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_TAG + \"husband\");","lastModifiedDate":"2021-10-13"},{"lineNumber":445,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, AMY);","lastModifiedDate":"2021-11-07"},{"lineNumber":446,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, BOB);","lastModifiedDate":"2021-11-07"},{"lineNumber":447,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(AMY));","lastModifiedDate":"2021-11-07"},{"lineNumber":448,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(BOB));","lastModifiedDate":"2021-11-07"},{"lineNumber":449,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-13"},{"lineNumber":450,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":451,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":452,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":453,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":454,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":455,"author":{"gitId":"beefham"},"content":"    public void parse_validSingleDateLeave_returnsFindCommand() {","lastModifiedDate":"2021-11-08"},{"lineNumber":456,"author":{"gitId":"beefham"},"content":"        String validDateString \u003d \"2021-02-28\";","lastModifiedDate":"2021-11-08"},{"lineNumber":457,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":458,"author":{"gitId":"beefham"},"content":"        ArrayList\u003cLocalDate\u003e testLeaveDates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-08"},{"lineNumber":459,"author":{"gitId":"beefham"},"content":"        testLeaveDates.add(LocalDate.parse(validDateString));","lastModifiedDate":"2021-11-08"},{"lineNumber":460,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":461,"author":{"gitId":"beefham"},"content":"        ArrayList\u003cLocalDate\u003e personLeaveDates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-08"},{"lineNumber":462,"author":{"gitId":"beefham"},"content":"        personLeaveDates.add(LocalDate.parse(validDateString));","lastModifiedDate":"2021-11-08"},{"lineNumber":463,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":464,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":465,"author":{"gitId":"beefham"},"content":"                new FindCommand(new LeavesTakenContainsDatesPredicate(testLeaveDates, new ArrayList\u003c\u003e()));","lastModifiedDate":"2021-11-08"},{"lineNumber":466,"author":{"gitId":"beefham"},"content":"        Person personWithNoLeave \u003d new PersonBuilder().build();","lastModifiedDate":"2021-11-08"},{"lineNumber":467,"author":{"gitId":"beefham"},"content":"        Person personWithLeaveOnDate \u003d new PersonBuilder().withLeavesTaken(personLeaveDates).build();","lastModifiedDate":"2021-11-08"},{"lineNumber":468,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":469,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_DATE + \"2021-02-28\");","lastModifiedDate":"2021-11-08"},{"lineNumber":470,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, personWithNoLeave);","lastModifiedDate":"2021-11-08"},{"lineNumber":471,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, personWithLeaveOnDate);","lastModifiedDate":"2021-11-08"},{"lineNumber":472,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(personWithLeaveOnDate));","lastModifiedDate":"2021-11-08"},{"lineNumber":473,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(personWithNoLeave));","lastModifiedDate":"2021-11-08"},{"lineNumber":474,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-11-08"},{"lineNumber":475,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-11-08"},{"lineNumber":476,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":477,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":478,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":479,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":480,"author":{"gitId":"beefham"},"content":"    public void parse_validDateRangeLeave_returnsFindCommand() {","lastModifiedDate":"2021-11-08"},{"lineNumber":481,"author":{"gitId":"beefham"},"content":"        String validDateInRange \u003d \"2021-03-19\";","lastModifiedDate":"2021-11-08"},{"lineNumber":482,"author":{"gitId":"beefham"},"content":"        String validDateOutsideRange \u003d \"2021-05-20\";","lastModifiedDate":"2021-11-08"},{"lineNumber":483,"author":{"gitId":"beefham"},"content":"        String validDateRangeString \u003d \"2021-02-28:2021-03-28\";","lastModifiedDate":"2021-11-08"},{"lineNumber":484,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":485,"author":{"gitId":"beefham"},"content":"        // Create expected find command","lastModifiedDate":"2021-11-08"},{"lineNumber":486,"author":{"gitId":"beefham"},"content":"        ArrayList\u003cPair\u003cLocalDate, LocalDate\u003e\u003e testLeaveDateRange \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-08"},{"lineNumber":487,"author":{"gitId":"beefham"},"content":"        testLeaveDateRange.add(new Pair\u003c\u003e(LocalDate.parse(\"2021-02-28\"), LocalDate.parse(\"2021-03-28\")));","lastModifiedDate":"2021-11-08"},{"lineNumber":488,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":489,"author":{"gitId":"beefham"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-11-08"},{"lineNumber":490,"author":{"gitId":"beefham"},"content":"                new FindCommand(new LeavesTakenContainsDatesPredicate(new ArrayList\u003c\u003e(), testLeaveDateRange));","lastModifiedDate":"2021-11-08"},{"lineNumber":491,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":492,"author":{"gitId":"beefham"},"content":"        // Create test people","lastModifiedDate":"2021-11-08"},{"lineNumber":493,"author":{"gitId":"beefham"},"content":"        ArrayList\u003cLocalDate\u003e personLeaveInRangeDates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-08"},{"lineNumber":494,"author":{"gitId":"beefham"},"content":"        personLeaveInRangeDates.add(LocalDate.parse(validDateInRange));","lastModifiedDate":"2021-11-08"},{"lineNumber":495,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":496,"author":{"gitId":"beefham"},"content":"        ArrayList\u003cLocalDate\u003e personLeaveOutsideRangeDates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-08"},{"lineNumber":497,"author":{"gitId":"beefham"},"content":"        personLeaveOutsideRangeDates.add(LocalDate.parse(validDateOutsideRange));","lastModifiedDate":"2021-11-08"},{"lineNumber":498,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":499,"author":{"gitId":"beefham"},"content":"        Person personWithNoLeave \u003d new PersonBuilder().build();","lastModifiedDate":"2021-11-08"},{"lineNumber":500,"author":{"gitId":"beefham"},"content":"        Person personWithLeaveInRange \u003d new PersonBuilder().withLeavesTaken(personLeaveInRangeDates).build();","lastModifiedDate":"2021-11-08"},{"lineNumber":501,"author":{"gitId":"beefham"},"content":"        Person personWithLeaveOutsideRange \u003d new PersonBuilder().withLeavesTaken(personLeaveOutsideRangeDates).build();","lastModifiedDate":"2021-11-08"},{"lineNumber":502,"author":{"gitId":"beefham"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":503,"author":{"gitId":"beefham"},"content":"            FindCommand parsedFindCommand \u003d parser.parse(\" \" + PREFIX_DATE + validDateRangeString);","lastModifiedDate":"2021-11-08"},{"lineNumber":504,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, personWithNoLeave);","lastModifiedDate":"2021-11-08"},{"lineNumber":505,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, personWithLeaveInRange);","lastModifiedDate":"2021-11-08"},{"lineNumber":506,"author":{"gitId":"beefham"},"content":"            assertPredicatesAreEqual(expectedFindCommand, parsedFindCommand, personWithLeaveOutsideRange);","lastModifiedDate":"2021-11-08"},{"lineNumber":507,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":508,"author":{"gitId":"beefham"},"content":"            // no leave at all \u003d\u003e false","lastModifiedDate":"2021-11-08"},{"lineNumber":509,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(personWithNoLeave));","lastModifiedDate":"2021-11-08"},{"lineNumber":510,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":511,"author":{"gitId":"beefham"},"content":"            // leave in range \u003d\u003e true","lastModifiedDate":"2021-11-08"},{"lineNumber":512,"author":{"gitId":"beefham"},"content":"            assertTrue(parsedFindCommand.getPredicate().test(personWithLeaveInRange));","lastModifiedDate":"2021-11-08"},{"lineNumber":513,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":514,"author":{"gitId":"beefham"},"content":"            // leave outside range \u003d\u003e false","lastModifiedDate":"2021-11-08"},{"lineNumber":515,"author":{"gitId":"beefham"},"content":"            assertFalse(parsedFindCommand.getPredicate().test(personWithLeaveOutsideRange));","lastModifiedDate":"2021-11-08"},{"lineNumber":516,"author":{"gitId":"beefham"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-11-08"},{"lineNumber":517,"author":{"gitId":"beefham"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-11-08"},{"lineNumber":518,"author":{"gitId":"beefham"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":519,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":520,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"beefham":491,"-":29}},{"path":"src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"public class ImportCommandParserTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"    private static ImportCommandParser parser \u003d new ImportCommandParser();","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    private static final String TEST_FILEPATH_WITH_SPACE \u003d \"/Users/Owner/Desktop/New Folder/Employees.csv\";","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    // Displays error message if no file path is specified.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"    public void parse_missingFilePath_failure() {","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"        String input \u003d ImportCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"    // Able to read filepath with directories utilising space character.","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    public void parse_filepathWithSpace_success() {","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"        String input \u003d ImportCommand.COMMAND_WORD + \" \" + TEST_FILEPATH_WITH_SPACE;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"            ImportCommand command \u003d parser.parse(input);","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"            assertTrue(command.getFilepathString().equals(TEST_FILEPATH_WITH_SPACE));","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"            assertTrue(false);","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"boonhaii":39}},{"path":"src/test/java/seedu/address/logic/parser/PayCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.PayCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"public class PayCommandParserTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"    private PayCommandParser parser \u003d new PayCommandParser();","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"    public void parsePaySingle_validArgs_returnsPayCommand() {","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"        assertParseSuccess(parser, \"1\", new PayCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"    public void parsePayAll_validArgs_returnsPayCommand() {","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"        assertParseSuccess(parser, PayCommand.PAY_ALL_COMMAND_PHRASE, new PayCommand());","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"szelongq":30}},{"path":"src/test/java/seedu/address/logic/parser/RemoveLeavesBeforeCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"import seedu.address.logic.commands.RemoveLeavesBeforeCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"public class RemoveLeavesBeforeCommandParserTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    private static RemoveLeavesBeforeCommandParser parser \u003d new RemoveLeavesBeforeCommandParser();","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_LEAP_YEAR_DATE \u003d \"2021-02-29\"; // 2021 is not a leap year.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_MONTH_DATE \u003d \"2020-50-29\"; // 50 is not a valid month for a date","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_DAY_DATE \u003d \"2020-02-50\"; // 50 is not a valid day for a date","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_THREE_DIGIT_YEAR_DATE \u003d \"999-02-50\"; // Year must be in 4 digits","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_FIVE_DIGIT_YEAR_DATE \u003d \"20202-02-50\"; // Year must be in 4 digits","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_TYPICAL_DATE \u003d \"2020-02-20\";","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_LEAP_YEAR_DATE \u003d \"2020-02-29\";","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_DATE_NOT_GIVEN \u003d \" \" + PREFIX_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_LEAP_YEAR \u003d \" \" + PREFIX_DATE + INVALID_LEAP_YEAR_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_MONTH \u003d \" \" + PREFIX_DATE + INVALID_MONTH_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_DAY \u003d \" \" + PREFIX_DATE + INVALID_DAY_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_THREE_DIGIT_YEAR \u003d \" \" + PREFIX_DATE + INVALID_THREE_DIGIT_YEAR_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_INVALID_FIVE_DIGIT_YEAR \u003d \" \" + PREFIX_DATE + INVALID_FIVE_DIGIT_YEAR_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_VALID_LEAP_YEAR \u003d \" \" + PREFIX_DATE + VALID_LEAP_YEAR_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    private static final String INPUT_VALID_TYPICAL_DATE \u003d \" \" + PREFIX_DATE + VALID_TYPICAL_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"    // Missing Date -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"    public void parse_dateNotGiven_invalidCommandError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_DATE_NOT_GIVEN;","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveLeavesBeforeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"    // Invalid Month -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"    public void parse_givenDateMonthNotValid_invalidDateError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_MONTH;","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, RemoveLeavesBeforeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"    // Invalid Day -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"    public void parse_givenDateDayNotValid_invalidDateError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_DAY;","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, RemoveLeavesBeforeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"    // Non-existent Leap Date -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"    public void parse_invalidDateInLeapYear_failure() {","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_LEAP_YEAR;","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, RemoveLeavesBeforeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"    // Invalid Year -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"    public void parse_givenDateThreeDigitYearNotValid_invalidDateError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_THREE_DIGIT_YEAR;","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, RemoveLeavesBeforeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"boonhaii"},"content":"    // Invalid Year -\u003e Failure","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"    public void parse_givenDateFiveDigitYearNotValid_invalidDateError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_INVALID_FIVE_DIGIT_YEAR;","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE_FORMAT, RemoveLeavesBeforeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"boonhaii"},"content":"        assertParseFailure(parser, input, expectedMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"boonhaii"},"content":"    // Valid and existing Leap Day -\u003e Success","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"    public void parse_validDateInLeapYear_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_VALID_LEAP_YEAR;","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, input, new RemoveLeavesBeforeCommand(LocalDate.parse(VALID_LEAP_YEAR_DATE)));","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"    // Valid Date -\u003e Success","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"    public void parse_validTypicalDate_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"        String input \u003d INPUT_VALID_TYPICAL_DATE;","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"        assertParseSuccess(parser, input, new RemoveLeavesBeforeCommand(LocalDate.parse(VALID_TYPICAL_DATE)));","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"boonhaii":98}},{"path":"src/test/java/seedu/address/logic/parser/SetOvertimePayRateCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"import seedu.address.logic.commands.SetOvertimePayRateCommand;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"import seedu.address.model.OvertimePayRate;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"public class SetOvertimePayRateCommandParserTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"    private SetOvertimePayRateCommandParser parser \u003d new SetOvertimePayRateCommandParser();","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"    public void parse_validArgs_returnsSetOvertimePayRateCommand() {","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"        assertParseSuccess(parser, \"1.5\", new SetOvertimePayRateCommand(","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"                new OvertimePayRate(\"1.5\")));","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"                SetOvertimePayRateCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"szelongq":27}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"beefham":1,"-":131}},{"path":"src/test/java/seedu/address/model/OvertimePayRateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"szelongq"},"content":"package seedu.address.model;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"szelongq"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"szelongq"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"szelongq"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"szelongq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"szelongq"},"content":"public class OvertimePayRateTest {","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"szelongq"},"content":"    // Reused test cases from HourlySalaryTest by @boonhai","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"szelongq"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"szelongq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new OvertimePayRate(null));","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"szelongq"},"content":"    public void constructor_negativeOvertimePayRate_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"szelongq"},"content":"        String negativeOvertimePayRate \u003d \"-3.123\";","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"szelongq"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new OvertimePayRate(negativeOvertimePayRate));","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"szelongq"},"content":"    public void constructor_alphanumericOvertimePayRate_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"szelongq"},"content":"        String alphanumericOvertimePayRate \u003d \"3.1k\";","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"szelongq"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new OvertimePayRate(alphanumericOvertimePayRate));","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"szelongq"},"content":"    // Over 5 decimal places (dp)","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"szelongq"},"content":"    public void constructor_overFiveDpOvertimePayRate_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"szelongq"},"content":"        String overFiveDpOvertimePayRate \u003d \"-3.1232314\";","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"szelongq"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new OvertimePayRate(overFiveDpOvertimePayRate));","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"szelongq"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"    public void isValidOvertimePayRate() {","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"szelongq"},"content":"        // null overtime pay rate","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"        assertThrows(NullPointerException.class, () -\u003e OvertimePayRate.isValidOvertimePayRate(null));","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"        // invalid overtime pay rate from formatting","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"\")); // empty string","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\" \")); // spaces only","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"power-ranger\")); // contains non-numeric characters only","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"1.123m\")); // contains alphanumeric characters","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"-3.00\")); // contains negative values","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"0.000001\")); // contains more than 5 decimal places","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"        // valid values in equivalence partition [1.00000, 10.00000]","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"        assertTrue(OvertimePayRate.isValidOvertimePayRate(\"5\")); // numeric characters as integers only","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"        assertTrue(OvertimePayRate.isValidOvertimePayRate(\"5.99\")); // numeric characters as floating values only","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"        // boundary values for equivalence partition [1.00000, 10.00000]","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"0.99999\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"        assertTrue(OvertimePayRate.isValidOvertimePayRate(\"1\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"        assertTrue(OvertimePayRate.isValidOvertimePayRate(\"10\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"10.00001\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"        // invalid values in equivalence partitions [-MAX_DOUBLE, 0.99999] and [10.00001, MAX_DOUBLE]","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"-50\")); // Below lower bound","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"szelongq"},"content":"        assertFalse(OvertimePayRate.isValidOvertimePayRate(\"50\")); // Above upper bound","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"szelongq"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"szelongq"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"szelongq":63}},{"path":"src/test/java/seedu/address/model/person/HourlySalaryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"public class HourlySalaryTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"        assertThrows(NullPointerException.class, () -\u003e new HourlySalary(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"    public void constructor_negativeSalary_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"        String negativeSalary \u003d \"-3.12342563\";","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new HourlySalary(negativeSalary));","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"    public void constructor_negativeZeroSalary_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"        String negativeZeroSalary \u003d \"-000\";","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new HourlySalary(negativeZeroSalary));","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    public void constructor_alphanumericSalary_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"        String alphanumericSalary \u003d \"3.1k\";","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new HourlySalary(alphanumericSalary));","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"szelongq"},"content":"    public void isValidHourlySalary() {","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"        // null hourlySalary","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"        assertThrows(NullPointerException.class, () -\u003e HourlySalary.isValidHourlySalary(null));","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"szelongq"},"content":"        // invalid hourlySalary from formatting","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"\")); // empty string","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\" \")); // spaces only","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"power-ranger\")); // contains non-numeric characters only","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"1.123m\")); // contains alphanumeric characters","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"-0.00\")); // contains negative values","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"0.001\")); // contains more than 2 decimal places","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"szelongq"},"content":"        // valid values in equivalence partition [0.00, 1000.00]","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"szelongq"},"content":"        assertTrue(HourlySalary.isValidHourlySalary(\"123\")); // numeric characters as integers only","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"szelongq"},"content":"        assertTrue(HourlySalary.isValidHourlySalary(\"9.99\")); // numeric characters as floating values only","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"szelongq"},"content":"        // boundary values for equivalence partition [0.00, 1000.00]","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"-0.01\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"szelongq"},"content":"        assertTrue(HourlySalary.isValidHourlySalary(\"0\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"szelongq"},"content":"        assertTrue(HourlySalary.isValidHourlySalary(\"1000\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"1000.01\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"szelongq"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"szelongq"},"content":"        // invalid values in equivalence partitions [-MAX_DOUBLE, -0.01] and [1000.01, MAX_DOUBLE]","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"-500\")); // Below lower bound","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"szelongq"},"content":"        assertFalse(HourlySalary.isValidHourlySalary(\"1500\")); // Above upper bound","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"szelongq":23,"boonhaii":32,"1waykiat":6}},{"path":"src/test/java/seedu/address/model/person/HoursWorkedTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"public class HoursWorkedTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"        assertThrows(NullPointerException.class, () -\u003e new HoursWorked(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"    public void constructor_negativeHours_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"        String negativeHours \u003d \"-3.12\";","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new HoursWorked(negativeHours));","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"    public void constructor_negativeZeroHours_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"        String negativeZeroHours \u003d \"-000\";","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new HoursWorked(negativeZeroHours));","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    public void constructor_alphanumericHours_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"        String alphanumericHours \u003d \"3h\";","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new HoursWorked(alphanumericHours));","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    public void constructor_floatingPointHours_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"        String floatingPointHours \u003d \"3.5\";","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"                HoursWorked.MESSAGE_CONSTRAINTS, () -\u003e new HoursWorked(floatingPointHours));","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"    public void isValidHoursWorked() {","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"        // null hoursWorked","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"        assertThrows(NullPointerException.class, () -\u003e HoursWorked.isValidHoursWorked(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        // invalid hoursWorked (formatting)","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"\")); // empty string","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\" \")); // spaces only","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"seven\")); // contains non-numeric characters only","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"7h\")); // contains alphanumeric characters","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"-0\")); // contains negative 0","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"boonhaii"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"1.1\")); // contains floating point values","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        // invalid hoursWorked (equivalence partitions: [INTEGER_MIN, -1], [745, INTEGER_MAX])","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"745\")); // boundary value","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"-1\")); // boundary value","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"12345\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        assertFalse(HoursWorked.isValidHoursWorked(\"-12345\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        // valid hoursWorked (equivalence partition: [0, 744])","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        assertTrue(HoursWorked.isValidHoursWorked(\"744\")); // max boundary","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        assertTrue(HoursWorked.isValidHoursWorked(\"0\")); // min boundary","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        assertTrue(HoursWorked.isValidHoursWorked(\"087\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        assertTrue(HoursWorked.isValidHoursWorked(\"367\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"    public void addHoursWorked_addZeroHoursWorked_throwsAssertionError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validHoursWorked \u003d new HoursWorked(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        // Negative values are caught by isValidHoursWorked, so 0 is the only possible value to cause an assertion error","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        HoursWorked noHoursWorked \u003d new HoursWorked(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        assertThrows(AssertionError.class, () -\u003e validHoursWorked.addHoursWorked(noHoursWorked));","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    public void addHoursWorked_exceedMaxHoursWorked_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validHoursWorked \u003d new HoursWorked(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validOtherHoursWorked \u003d new HoursWorked(\"735\");","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e validHoursWorked.addHoursWorked(validOtherHoursWorked));","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"    public void addHoursWorked_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validHoursWorked \u003d new HoursWorked(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validOtherHoursWorked \u003d new HoursWorked(\"20\");","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validTotalHoursWorked \u003d new HoursWorked(\"30\");","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        assertEquals(validTotalHoursWorked, validHoursWorked.addHoursWorked(validOtherHoursWorked));","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"    public void removeHoursWorked_removeZeroHoursWorked_throwsAssertionError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validHoursWorked \u003d new HoursWorked(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        // Negative values are caught by isValidHoursWorked, so 0 is the only possible value to cause an assertion error","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        HoursWorked noHoursWorked \u003d new HoursWorked(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        assertThrows(AssertionError.class, () -\u003e validHoursWorked.removeHoursWorked(noHoursWorked));","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    public void removeHoursWorked_insufficientHoursWorked_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validHoursWorked \u003d new HoursWorked(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validOtherHoursWorked \u003d new HoursWorked(\"11\");","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e validHoursWorked.removeHoursWorked(validOtherHoursWorked));","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"    public void removeHoursWorked_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validHoursWorked \u003d new HoursWorked(\"30\");","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validOtherHoursWorked \u003d new HoursWorked(\"20\");","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validFinalHoursWorked \u003d new HoursWorked(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        assertEquals(validFinalHoursWorked, validHoursWorked.removeHoursWorked(validOtherHoursWorked));","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"    public void getRemainingHoursWorkedCapacity_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validHoursWorked \u003d new HoursWorked(\"100\");","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        HoursWorked validOtherHoursWorked \u003d new HoursWorked(\"744\");","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hoursWorkedCapacity \u003d new HoursWorked(\"644\");","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        HoursWorked otherHoursWorkedCapacity \u003d new HoursWorked(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"        assertEquals(hoursWorkedCapacity, validHoursWorked.getRemainingHoursWorkedCapacity());","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        assertEquals(otherHoursWorkedCapacity, validOtherHoursWorked.getRemainingHoursWorkedCapacity());","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        HoursWorked hoursWorked \u003d new HoursWorked(\"3\");","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        HoursWorked sameHoursWorked \u003d hoursWorked;","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        assertTrue(hoursWorked.equals(sameHoursWorked)); // Same object","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"        assertTrue(hoursWorked.equals(new HoursWorked(\"3\"))); // Same number of hours worked","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        assertFalse(hoursWorked.equals(null)); // Null object","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"        assertFalse(hoursWorked.equals(new Overtime(\"3\"))); // Not an HoursWorked object","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"        assertFalse(hoursWorked.equals(new HoursWorked(\"2\"))); // Different number of hours worked","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"danielsimre":90,"boonhaii":41,"1waykiat":5}},{"path":"src/test/java/seedu/address/model/person/LeaveBalanceTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"public class LeaveBalanceTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LeaveBalance(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    public void constructor_invalidLeaveBalance_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"        // Not an integer","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, LeaveBalance.MESSAGE_CONSTRAINTS, () -\u003e new LeaveBalance(\".\"));","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, LeaveBalance.MESSAGE_CONSTRAINTS, () -\u003e new LeaveBalance(\"1.1\"));","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        // Negative integer","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, LeaveBalance.MESSAGE_CONSTRAINTS, () -\u003e new LeaveBalance(\"-1\"));","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"        // Negative Zero","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"        assertThrows(IllegalArgumentException.class, LeaveBalance.MESSAGE_CONSTRAINTS, () -\u003e new LeaveBalance(\"-0\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    public void isValidLeaveBalance() {","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        // null leaveBalance","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        assertThrows(NullPointerException.class, () -\u003e LeaveBalance.isValidLeaveBalance(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        // invalid leaveBalance (formatting)","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"\")); // empty string","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\" \")); // spaces only","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"seven\")); // contains non-numeric characters only","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"7h\")); // contains alphanumeric characters","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"-0\")); // contains negative 0","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"1.1\")); // contains floating point values","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        // invalid leaveBalance (equivalence partitions: [INTEGER_MIN, -1], [366, INTEGER_MAX])","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"366\")); // boundary value","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"-1\")); // boundary value","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"12345\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        assertFalse(LeaveBalance.isValidLeaveBalance(\"-12345\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        // valid leaveBalance (equivalence partition: [0, 365])","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        assertTrue(LeaveBalance.isValidLeaveBalance(\"365\")); // max boundary","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        assertTrue(LeaveBalance.isValidLeaveBalance(\"0\")); // min boundary","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        assertTrue(LeaveBalance.isValidLeaveBalance(\"087\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        assertTrue(LeaveBalance.isValidLeaveBalance(\"220\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"    public void addLeaves_addZeroLeaves_throwsAssertionError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validLeaveBalance \u003d new LeaveBalance(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        // Negative values are caught by isValidLeaves, so 0 is the only possible value to cause an assertion error","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance noLeaveBalance \u003d new LeaveBalance(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        assertThrows(AssertionError.class, () -\u003e validLeaveBalance.addLeaves(noLeaveBalance));","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    public void addLeaves_exceedMaxLeaveBalance_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validLeaveBalance \u003d new LeaveBalance(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validOtherLeaveBalance \u003d new LeaveBalance(\"356\");","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e validLeaveBalance.addLeaves(validOtherLeaveBalance));","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"    public void addLeaves_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validLeaveBalance \u003d new LeaveBalance(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validOtherLeaveBalance \u003d new LeaveBalance(\"20\");","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validTotalLeaveBalance \u003d new LeaveBalance(\"30\");","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"        assertEquals(validTotalLeaveBalance, validLeaveBalance.addLeaves(validOtherLeaveBalance));","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    public void removeLeaves_removeZeroLeaves_throwsAssertionError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validLeaveBalance \u003d new LeaveBalance(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        // Negative values are caught by isValidLeaves, so 0 is the only possible value to cause an assertion error","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance noLeaveBalance \u003d new LeaveBalance(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        assertThrows(AssertionError.class, () -\u003e validLeaveBalance.removeLeaves(noLeaveBalance));","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"    public void removeLeaves_insufficientLeaveBalance_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validLeaveBalance \u003d new LeaveBalance(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validOtherLeaveBalance \u003d new LeaveBalance(\"11\");","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e validLeaveBalance.removeLeaves(validOtherLeaveBalance));","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"    public void removeLeaves_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validLeaveBalance \u003d new LeaveBalance(\"30\");","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validOtherLeaveBalance \u003d new LeaveBalance(\"20\");","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validFinalLeaveBalance \u003d new LeaveBalance(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"        assertEquals(validFinalLeaveBalance, validLeaveBalance.removeLeaves(validOtherLeaveBalance));","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    public void getRemainingLeaveCapacity_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validLeaveBalance \u003d new LeaveBalance(\"101\");","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance validOtherLeaveBalance \u003d new LeaveBalance(\"365\");","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaveBalanceCapacity \u003d new LeaveBalance(\"264\");","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance otherLeaveBalanceCapacity \u003d new LeaveBalance(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"        assertEquals(leaveBalanceCapacity, validLeaveBalance.getRemainingLeaveCapacity());","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        assertEquals(otherLeaveBalanceCapacity, validOtherLeaveBalance.getRemainingLeaveCapacity());","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance leaveBalance \u003d new LeaveBalance(\"3\");","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        LeaveBalance sameLeaveBalance \u003d leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        assertTrue(leaveBalance.equals(sameLeaveBalance)); // Same object","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"        assertTrue(leaveBalance.equals(new LeaveBalance(\"3\"))); // Same number of leaves","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        assertFalse(leaveBalance.equals(null)); // Null object","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"        assertFalse(leaveBalance.equals(new Name(\"test\"))); // Not a leaves object","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"        assertFalse(leaveBalance.equals(new LeaveBalance(\"2\"))); // Different number of leaves","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"danielsimre":122,"1waykiat":3}},{"path":"src/test/java/seedu/address/model/person/ObservablePersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"1waykiat"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"1waykiat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"1waykiat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"1waykiat"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"1waykiat"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"1waykiat"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"1waykiat"},"content":"import seedu.address.ui.UiObserver;","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"1waykiat"},"content":"public class ObservablePersonTest {","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"1waykiat"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"1waykiat"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ObservablePerson(null));","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"1waykiat"},"content":"    public void constructor_noArgs_returnNullAsViewingPerson() {","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"1waykiat"},"content":"        ObservablePerson emptyPerson \u003d new ObservablePerson();","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"1waykiat"},"content":"        assertNull(emptyPerson.getPerson());","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"1waykiat"},"content":"    public void setEmptyPerson_success() {","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"1waykiat"},"content":"        Person currPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"1waykiat"},"content":"        UiObserverStub observer \u003d new UiObserverStub(currPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"1waykiat"},"content":"        ObservablePerson obsPerson \u003d new ObservablePerson(currPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"1waykiat"},"content":"        obsPerson.addUiObserver(observer);","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"1waykiat"},"content":"        obsPerson.setEmptyPerson();","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"1waykiat"},"content":"        // Observable person should be set to null","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"1waykiat"},"content":"        assertNull(obsPerson.getPerson());","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"1waykiat"},"content":"        // Observer should be updated to same value as Observable on change","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"1waykiat"},"content":"        assertEquals(obsPerson.getPerson(), observer.getViewPerson());","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"    public void setViewPerson_success() {","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"1waykiat"},"content":"        Person currPerson \u003d TypicalPersons.ALICE;","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"1waykiat"},"content":"        Person nextPersonToView \u003d TypicalPersons.CARL;","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"1waykiat"},"content":"        UiObserverStub observer \u003d new UiObserverStub(currPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"1waykiat"},"content":"        ObservablePerson obsPerson \u003d new ObservablePerson(currPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"        obsPerson.addUiObserver(observer);","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"        obsPerson.setPerson(nextPersonToView);","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"1waykiat"},"content":"        // Observable person should be set to null","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"1waykiat"},"content":"        assertEquals(obsPerson.getPerson(), nextPersonToView);","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"1waykiat"},"content":"        // Observer should be updated to same value as Observable on change","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"1waykiat"},"content":"        assertEquals(obsPerson.getPerson(), observer.getViewPerson());","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"1waykiat"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"1waykiat"},"content":"    public void equals() {","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"1waykiat"},"content":"        ObservablePerson emptyObsPerson \u003d new ObservablePerson();","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"1waykiat"},"content":"        ObservablePerson aliceObsPerson \u003d new ObservablePerson(new PersonBuilder().withName(\"Alice\").build());","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"1waykiat"},"content":"        ObservablePerson bobObsPerson \u003d new ObservablePerson(new PersonBuilder().withName(\"Bob\").build());","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"1waykiat"},"content":"        // same object","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"1waykiat"},"content":"        assertTrue(aliceObsPerson.equals(aliceObsPerson));","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"1waykiat"},"content":"        assertTrue(emptyObsPerson.equals(emptyObsPerson));","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"1waykiat"},"content":"        // same value","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"1waykiat"},"content":"        ObservablePerson anotherAliceObsPerson \u003d new ObservablePerson(new PersonBuilder().withName(\"Alice\").build());","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"1waykiat"},"content":"        assertTrue(aliceObsPerson.equals(anotherAliceObsPerson));","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"1waykiat"},"content":"        // different types","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"1waykiat"},"content":"        assertFalse(aliceObsPerson.equals(3));","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"1waykiat"},"content":"        // null case","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"1waykiat"},"content":"        assertNotNull(aliceObsPerson);","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"1waykiat"},"content":"        // different viewing person","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"1waykiat"},"content":"        assertFalse(aliceObsPerson.equals(bobObsPerson));","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"1waykiat"},"content":"    private class UiObserverStub implements UiObserver {","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"1waykiat"},"content":"        private Person personToView;","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"1waykiat"},"content":"        public UiObserverStub(Person p) {","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"1waykiat"},"content":"            requireNonNull(p);","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"1waykiat"},"content":"            this.personToView \u003d p;","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"1waykiat"},"content":"        @Override","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"1waykiat"},"content":"        public void update(Person person) {","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"1waykiat"},"content":"            this.personToView \u003d person;","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"1waykiat"},"content":"        public Person getViewPerson() {","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"1waykiat"},"content":"            return personToView;","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"1waykiat"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"1waykiat"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"1waykiat":103}},{"path":"src/test/java/seedu/address/model/person/OvertimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"public class OvertimeTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Overtime(null));","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    public void constructor_negativeOvertime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"        String negativeOvertime \u003d \"-3.12\";","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Overtime(negativeOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    public void constructor_negativeZeroOvertime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        String negativeZeroOvertime \u003d \"-000\";","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Overtime(negativeZeroOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public void constructor_alphanumericOvertime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        String alphanumericOvertime \u003d \"3h\";","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Overtime(alphanumericOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    public void constructor_floatingPointOvertime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        String floatingPointOvertime \u003d \"3.5\";","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"                Overtime.MESSAGE_CONSTRAINTS, () -\u003e new Overtime(floatingPointOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    public void isValidOvertime() {","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        // null overtime","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        assertThrows(NullPointerException.class, () -\u003e Overtime.isValidOvertime(null));","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        // invalid overtime (formatting)","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"\")); // empty string","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\" \")); // spaces only","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"seven\")); // contains non-numeric characters only","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"7h\")); // contains alphanumeric characters","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"-0\")); // contains negative 0","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"1.1\")); // contains floating point values","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        // invalid overtime (equivalence partitions: [INTEGER_MIN, -1], [745, INTEGER_MAX])","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"745\")); // boundary value","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"-1\")); // boundary value","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"12345\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        assertFalse(Overtime.isValidOvertime(\"-12345\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        // valid overtime (equivalence partition: [0, 744])","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        assertTrue(Overtime.isValidOvertime(\"744\")); // max boundary","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        assertTrue(Overtime.isValidOvertime(\"0\")); // min boundary","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        assertTrue(Overtime.isValidOvertime(\"087\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        assertTrue(Overtime.isValidOvertime(\"367\")); // value inside equivalence partition","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"    public void addOvertime_addZeroOvertime_throwsAssertionError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        Overtime validOvertime \u003d new Overtime(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        // Negative values are caught by isValidOvertime, so 0 is the only possible value to cause an assertion error","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        Overtime noOvertime \u003d new Overtime(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        assertThrows(AssertionError.class, () -\u003e validOvertime.addOvertime(noOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    public void addOvertime_exceedMaxOvertime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        Overtime validOvertime \u003d new Overtime(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        Overtime validOtherOvertime \u003d new Overtime(\"735\");","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e validOvertime.addOvertime(validOtherOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"    public void addOvertime_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        Overtime validOvertime \u003d new Overtime(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        Overtime validOtherOvertime \u003d new Overtime(\"20\");","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        Overtime validTotalOvertime \u003d new Overtime(\"30\");","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        assertEquals(validTotalOvertime, validOvertime.addOvertime(validOtherOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"    public void removeOvertime_removeZeroOvertime_throwsAssertionError() {","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        Overtime validOvertime \u003d new Overtime(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        // Negative values are caught by isValidOvertime, so 0 is the only possible value to cause an assertion error","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        Overtime noOvertime \u003d new Overtime(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        assertThrows(AssertionError.class, () -\u003e validOvertime.removeOvertime(noOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    public void removeOvertime_insufficientOvertime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        Overtime validOvertime \u003d new Overtime(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"        Overtime validOtherOvertime \u003d new Overtime(\"11\");","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e validOvertime.removeOvertime(validOtherOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"    public void removeOvertime_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        Overtime validOvertime \u003d new Overtime(\"30\");","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        Overtime validOtherOvertime \u003d new Overtime(\"20\");","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"        Overtime validFinalOvertime \u003d new Overtime(\"10\");","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"        assertEquals(validFinalOvertime, validOvertime.removeOvertime(validOtherOvertime));","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"    public void getRemainingOvertimeCapacity_success() {","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        Overtime validOvertime \u003d new Overtime(\"100\");","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        Overtime validOtherOvertime \u003d new Overtime(\"744\");","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"        Overtime overtimeCapacity \u003d new Overtime(\"644\");","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"        Overtime otherOvertimeCapacity \u003d new Overtime(\"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"        assertEquals(overtimeCapacity, validOvertime.getRemainingOvertimeCapacity());","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        assertEquals(otherOvertimeCapacity, validOtherOvertime.getRemainingOvertimeCapacity());","lastModifiedDate":"2021-11-08"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"    public void equals() {","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        Overtime overtime \u003d new Overtime(\"3\");","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"        Overtime sameOvertime \u003d overtime;","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        assertTrue(overtime.equals(sameOvertime)); // Same object","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"        assertTrue(overtime.equals(new Overtime(\"3\"))); // Same number of overtime hours","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        assertFalse(overtime.equals(null)); // Null object","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"        assertFalse(overtime.equals(new HoursWorked(\"3\"))); // Not an Overtime object","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"        assertFalse(overtime.equals(new Overtime(\"2\"))); // Different number of overtime hours","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"danielsimre":136}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURLYSALARY_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"boonhaii"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-11-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"boonhaii"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns true","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"boonhaii"},"content":"        // different role -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"boonhaii"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ROLE_BOB).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"boonhaii"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"boonhaii"},"content":"        // different leaves -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"boonhaii"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_LEAVES_BOB).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"boonhaii"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"boonhaii"},"content":"        // different salary -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"boonhaii"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_HOURLYSALARY_BOB).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"boonhaii"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"boonhaii":19,"-":87}},{"path":"src/test/java/seedu/address/model/person/RoleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"boonhaii"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"boonhaii"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"public class RoleTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Role(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"boonhaii"},"content":"    public void constructor_invalidRole_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"        String invalidRole \u003d \"\";","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Role(invalidRole));","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"boonhaii"},"content":"    public void isValidRole() {","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"        // null role","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"boonhaii"},"content":"        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"boonhaii"},"content":"        // invalid role","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"boonhaii"},"content":"        assertFalse(Role.isValidRole(\"\")); // empty string","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"boonhaii"},"content":"        assertFalse(Role.isValidRole(\" \")); // spaces only","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"        assertFalse(Role.isValidRole(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"        assertFalse(Role.isValidRole(\"0pProgrammers\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"boonhaii"},"content":"        assertFalse(Role.isValidRole(\" pProgrammers\")); // starts with whitespace","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"        assertFalse(Role.isValidRole(\"Apple slicer \u003cYO\u003e\")); // contains unsupported character \u0027\u003e\u0027","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"        // valid role","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"        assertTrue(Role.isValidRole(\"software engineer smol\")); // alphabets only","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"boonhaii"},"content":"        assertTrue(Role.isValidRole(\"UI/UX Designer\")); // Supports \u0027/\u0027","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"        assertTrue(Role.isValidRole(\"Front-End Programmer\")); // Supports \u0027-\u0027","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"boonhaii"},"content":"        assertTrue(Role.isValidRole(\"R\u0026D Team Manager\")); // Supports \u0027\u0026\u0027","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"        assertTrue(Role.isValidRole(\"Team Leader, Front-End Team (Git)\")); // Supports \u0027,\u0027 , \u0027-\u0027, \u0027(\u0027 and \u0027)\u0027","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"        assertTrue(Role.isValidRole(\"Junior Developer Stage 2\")); // alphanumeric characters","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"        assertTrue(Role.isValidRole(\"Software Engineer\")); // with capital letters","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"        assertTrue(Role.isValidRole(\"Software Engineer with 10 years experience and 20 years knowledge\")); // long names","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"boonhaii":44}},{"path":"src/test/java/seedu/address/model/person/predicates/AddressContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"class AddressContainsKeywordsPredicateTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(\"Tampines\", \"Clementi\");","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Tampines\", \"Boon Lay\");","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        AddressContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        AddressContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        AddressContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                new AddressContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // different keyword list -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_addressContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        // One keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"        AddressContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"                new AddressContainsKeywordsPredicate(Collections.singletonList(\"Tampines\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 93, Tampines Street 82, #02-19\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Tampines\", \"Street\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 93, Tampines Street 82, #02-19\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"        // One matching keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 12, Bedok Street 23, #09-30\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"beDOk\", \"taMPineS\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 93, Tampines Street 82, #02-19\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 12, Bedok Street 23, #09-30\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"beefham"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"beefham"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"beefham"},"content":"        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Main Street\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"beefham"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"beefham"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Avenue\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Blk 157, Lorong 15\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"beefham":77}},{"path":"src/test/java/seedu/address/model/person/predicates/EmailContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"class EmailContainsKeywordsPredicateTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    void equals() {","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(\"gmail\", \"yahoo\");","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"gmail\");","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        EmailContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"                new EmailContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        EmailContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"                new EmailContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        EmailContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                new EmailContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // different keyword list -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    void test_emailContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        // One keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"        EmailContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"gmail\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"alice@gmail.com\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bob\", \"example\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"bob@example.com\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"        // One matching keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"charles@bob.com\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"charles@example.com\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bOb\", \"gMail\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"davie123@gmail.com\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"bob321@example.com\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"beefham"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"beefham"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"beefham"},"content":"        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"alice@example.com\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"beefham"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"beefham"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"gmail\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"alex@example.com\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"beefham":78}},{"path":"src/test/java/seedu/address/model/person/predicates/HoursEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class HoursEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        HoursEqualPredicate firstPredicate \u003d new HoursEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        HoursEqualPredicate secondPredicate \u003d new HoursEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        HoursEqualPredicate thirdPredicate \u003d new HoursEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        HoursEqualPredicate predicate \u003d new HoursEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal hours","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHoursWorked(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedNotEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        HoursEqualPredicate predicate \u003d new HoursEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // More hours","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHoursWorked(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less hours","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHoursWorked(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/HoursLessThanEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class HoursLessThanEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        HoursLessThanEqualPredicate firstPredicate \u003d new HoursLessThanEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        HoursLessThanEqualPredicate secondPredicate \u003d new HoursLessThanEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        HoursLessThanEqualPredicate thirdPredicate \u003d new HoursLessThanEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedLessOrEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        HoursLessThanEqualPredicate predicate \u003d new HoursLessThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal hours","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHoursWorked(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        // Less hours","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHoursWorked(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedNotLessOrEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        HoursLessThanEqualPredicate predicate \u003d new HoursLessThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // More hours","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHoursWorked(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":57}},{"path":"src/test/java/seedu/address/model/person/predicates/HoursLessThanPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class HoursLessThanPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        HoursLessThanPredicate firstPredicate \u003d new HoursLessThanPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        HoursLessThanPredicate secondPredicate \u003d new HoursLessThanPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        HoursLessThanPredicate thirdPredicate \u003d new HoursLessThanPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedLessThan_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        HoursLessThanPredicate predicate \u003d new HoursLessThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Less hours","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHoursWorked(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedNotLessThan_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        HoursLessThanPredicate predicate \u003d new HoursLessThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // Equal hours","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHoursWorked(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // More hours","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHoursWorked(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":57}},{"path":"src/test/java/seedu/address/model/person/predicates/HoursMoreThanEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class HoursMoreThanEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        HoursMoreThanEqualPredicate firstPredicate \u003d new HoursMoreThanEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        HoursMoreThanEqualPredicate secondPredicate \u003d new HoursMoreThanEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        HoursMoreThanEqualPredicate thirdPredicate \u003d new HoursMoreThanEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedMoreThanEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"        HoursMoreThanEqualPredicate predicate \u003d new HoursMoreThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"        // Equal hours","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHoursWorked(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"        // More hours","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHoursWorked(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedNotMoreThanEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        HoursMoreThanEqualPredicate predicate \u003d new HoursMoreThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"        // Less hours","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHoursWorked(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":55}},{"path":"src/test/java/seedu/address/model/person/predicates/HoursMoreThanPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class HoursMoreThanPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        HoursMoreThanPredicate firstPredicate \u003d new HoursMoreThanPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        HoursMoreThanPredicate secondPredicate \u003d new HoursMoreThanPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        HoursMoreThanPredicate thirdPredicate \u003d new HoursMoreThanPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        HoursMoreThanPredicate predicate \u003d new HoursMoreThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // More hours","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHoursWorked(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_hoursWorkedNotEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        HoursMoreThanPredicate predicate \u003d new HoursMoreThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // Equal hours","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHoursWorked(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less hours","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHoursWorked(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/LeaveEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class LeaveEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        LeaveEqualPredicate firstPredicate \u003d new LeaveEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        LeaveEqualPredicate secondPredicate \u003d new LeaveEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        LeaveEqualPredicate thirdPredicate \u003d new LeaveEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_leaveEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        LeaveEqualPredicate predicate \u003d new LeaveEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLeaves(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_leaveNotEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        LeaveEqualPredicate predicate \u003d new LeaveEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // More leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLeaves(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLeaves(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/LeaveLessThanEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class LeaveLessThanEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        LeaveLessThanEqualPredicate firstPredicate \u003d new LeaveLessThanEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        LeaveLessThanEqualPredicate secondPredicate \u003d new LeaveLessThanEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        LeaveLessThanEqualPredicate thirdPredicate \u003d new LeaveLessThanEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_leaveLessThanEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        LeaveLessThanEqualPredicate predicate \u003d new LeaveLessThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLeaves(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        // Less leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLeaves(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"    public void test_leaveNotLessThanEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        LeaveLessThanEqualPredicate predicate \u003d new LeaveLessThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // More leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLeaves(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/LeaveLessThanPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class LeaveLessThanPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        LeaveLessThanPredicate firstPredicate \u003d new LeaveLessThanPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        LeaveLessThanPredicate secondPredicate \u003d new LeaveLessThanPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        LeaveLessThanPredicate thirdPredicate \u003d new LeaveLessThanPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_leaveLessThan_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        LeaveLessThanPredicate predicate \u003d new LeaveLessThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Less leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLeaves(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_leaveNotLessThan_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        LeaveLessThanPredicate predicate \u003d new LeaveLessThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // Equal leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLeaves(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // More leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLeaves(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/LeaveMoreThanEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class LeaveMoreThanEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanEqualPredicate firstPredicate \u003d new LeaveMoreThanEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanEqualPredicate secondPredicate \u003d new LeaveMoreThanEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanEqualPredicate thirdPredicate \u003d new LeaveMoreThanEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_leaveMoreThanEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanEqualPredicate predicate \u003d new LeaveMoreThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLeaves(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        // More leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLeaves(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"    public void test_leaveNotMoreThanEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanEqualPredicate predicate \u003d new LeaveMoreThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLeaves(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/LeaveMoreThanPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class LeaveMoreThanPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanPredicate firstPredicate \u003d new LeaveMoreThanPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanPredicate secondPredicate \u003d new LeaveMoreThanPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanPredicate thirdPredicate \u003d new LeaveMoreThanPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_leaveMoreThan_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanPredicate predicate \u003d new LeaveMoreThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // More leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLeaves(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_leaveNotMoreThan_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        LeaveMoreThanPredicate predicate \u003d new LeaveMoreThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // Equal leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLeaves(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less leaves","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLeaves(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"beefham":1,"-":74}},{"path":"src/test/java/seedu/address/model/person/predicates/OvertimeEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class OvertimeEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        OvertimeEqualPredicate firstPredicate \u003d new OvertimeEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        OvertimeEqualPredicate secondPredicate \u003d new OvertimeEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        OvertimeEqualPredicate thirdPredicate \u003d new OvertimeEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_overtimeEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        OvertimeEqualPredicate predicate \u003d new OvertimeEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withOvertime(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_overtimeNotEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        OvertimeEqualPredicate predicate \u003d new OvertimeEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // More overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withOvertime(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withOvertime(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/OvertimeLessThanEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class OvertimeLessThanEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanEqualPredicate firstPredicate \u003d new OvertimeLessThanEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanEqualPredicate secondPredicate \u003d new OvertimeLessThanEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanEqualPredicate thirdPredicate \u003d new OvertimeLessThanEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_overtimeLessThanEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanEqualPredicate predicate \u003d new OvertimeLessThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withOvertime(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        // Less overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withOvertime(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"    public void test_overtimeNotLessThanEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanEqualPredicate predicate \u003d new OvertimeLessThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // More overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withOvertime(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/OvertimeLessThanPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class OvertimeLessThanPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanPredicate firstPredicate \u003d new OvertimeLessThanPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanPredicate secondPredicate \u003d new OvertimeLessThanPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanPredicate thirdPredicate \u003d new OvertimeLessThanPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_overtimeLessThan_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanPredicate predicate \u003d new OvertimeLessThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Less overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withOvertime(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_overtimeNotLessThan_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        OvertimeLessThanPredicate predicate \u003d new OvertimeLessThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // Equal overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withOvertime(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // More overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withOvertime(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/OvertimeMoreThanEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class OvertimeMoreThanEqualPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanEqualPredicate firstPredicate \u003d new OvertimeMoreThanEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanEqualPredicate secondPredicate \u003d new OvertimeMoreThanEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanEqualPredicate thirdPredicate \u003d new OvertimeMoreThanEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_overtimeMoreThanEqual_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanEqualPredicate predicate \u003d new OvertimeMoreThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withOvertime(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        // More overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withOvertime(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"    public void test_overtimeNotMoreThanEqual_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanEqualPredicate predicate \u003d new OvertimeMoreThanEqualPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        // Less overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withOvertime(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":57}},{"path":"src/test/java/seedu/address/model/person/predicates/OvertimeMoreThanPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class OvertimeMoreThanPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        int firstPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        int secondPredicateValue \u003d 5;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        int thirdPredicateValue \u003d 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanPredicate firstPredicate \u003d new OvertimeMoreThanPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanPredicate secondPredicate \u003d new OvertimeMoreThanPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanPredicate thirdPredicate \u003d new OvertimeMoreThanPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_overtimeMoreThan_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanPredicate predicate \u003d new OvertimeMoreThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // More overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withOvertime(\"6\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_overtimeNotMoreThan_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        OvertimeMoreThanPredicate predicate \u003d new OvertimeMoreThanPredicate(5);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // Equal overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withOvertime(\"5\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less overtime","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withOvertime(\"4\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/PhoneNumberMatchesPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"class PhoneNumberMatchesPredicateTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(\"91234567\", \"81828384\");","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"81828384\");","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        PhoneNumberMatchesPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"                new PhoneNumberMatchesPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        PhoneNumberMatchesPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"                new PhoneNumberMatchesPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        PhoneNumberMatchesPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                new PhoneNumberMatchesPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // different keyword list -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_phoneNumberMatches_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        // One keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"        PhoneNumberMatchesPredicate predicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"                new PhoneNumberMatchesPredicate(Collections.singletonList(\"91234567\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        predicate \u003d new PhoneNumberMatchesPredicate(Arrays.asList(\"91234567\", \"98765432\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"    public void test_phoneDoesNotMatch_returnsFalse() {","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"        PhoneNumberMatchesPredicate predicate \u003d new PhoneNumberMatchesPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"62353535\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"beefham"},"content":"        predicate \u003d new PhoneNumberMatchesPredicate(Arrays.asList(\"91234567\", \"94435589\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"90283138\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"beefham":71}},{"path":"src/test/java/seedu/address/model/person/predicates/RoleContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"class RoleContainsKeywordsPredicateTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(\"Admin\", \"IT\");","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"IT\");","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        RoleContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"                new RoleContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        RoleContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"                new RoleContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        RoleContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                new RoleContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // different keyword list -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_roleContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        // One keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"        RoleContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"                new RoleContainsKeywordsPredicate(Collections.singletonList(\"Admin\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRole(\"Admin Assistant\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRole(\"Chief Admin\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Technician\", \"Finance\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRole(\"Finance System Technician\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"beefham"},"content":"        // One matching keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRole(\"Finance Manager\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"aDMin\", \"finANce\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRole(\"Chief Finance\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRole(\"IT Admin\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"beefham"},"content":"    public void test_roleDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"beefham"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"beefham"},"content":"        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withRole(\"Software Engineer\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"beefham"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"beefham"},"content":"        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Finance\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withRole(\"Software Engineer\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"beefham":78}},{"path":"src/test/java/seedu/address/model/person/predicates/SalaryIsEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class SalaryIsEqualPredicateTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        float firstPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        float secondPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        float thirdPredicateValue \u003d 10.0F;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        SalaryIsEqualPredicate firstPredicate \u003d new SalaryIsEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        SalaryIsEqualPredicate secondPredicate \u003d new SalaryIsEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        SalaryIsEqualPredicate thirdPredicate \u003d new SalaryIsEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsEqual_returnsTrue() {","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        SalaryIsEqualPredicate predicate \u003d new SalaryIsEqualPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHourlySalary(\"5.5\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsNotEqual_returnsFalse() {","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        SalaryIsEqualPredicate predicate \u003d new SalaryIsEqualPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // More hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHourlySalary(\"5.6\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHourlySalary(\"5.4\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/SalaryIsLessThanEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class SalaryIsLessThanEqualPredicateTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        float firstPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        float secondPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        float thirdPredicateValue \u003d 10.0F;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanEqualPredicate firstPredicate \u003d new SalaryIsLessThanEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanEqualPredicate secondPredicate \u003d new SalaryIsLessThanEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanEqualPredicate thirdPredicate \u003d new SalaryIsLessThanEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsLessThanEqual_returnsTrue() {","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanEqualPredicate predicate \u003d new SalaryIsLessThanEqualPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHourlySalary(\"5.5\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        // Less hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHourlySalary(\"5.4\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsNotLessThanEqual_returnsFalse() {","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanEqualPredicate predicate \u003d new SalaryIsLessThanEqualPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // More hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHourlySalary(\"5.6\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/SalaryIsLessThanPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class SalaryIsLessThanPredicateTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        float firstPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        float secondPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        float thirdPredicateValue \u003d 10.0F;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanPredicate firstPredicate \u003d new SalaryIsLessThanPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanPredicate secondPredicate \u003d new SalaryIsLessThanPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanPredicate thirdPredicate \u003d new SalaryIsLessThanPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsLessThan_returnsTrue() {","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanPredicate predicate \u003d new SalaryIsLessThanPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Less hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHourlySalary(\"5.4\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsNotLessThan_returnsFalse() {","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        SalaryIsLessThanPredicate predicate \u003d new SalaryIsLessThanPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // Equal hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHourlySalary(\"5.5\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // More hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHourlySalary(\"5.6\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/SalaryIsMoreThanEqualPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class SalaryIsMoreThanEqualPredicateTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        float firstPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        float secondPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        float thirdPredicateValue \u003d 10.0F;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanEqualPredicate firstPredicate \u003d new SalaryIsMoreThanEqualPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanEqualPredicate secondPredicate \u003d new SalaryIsMoreThanEqualPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanEqualPredicate thirdPredicate \u003d new SalaryIsMoreThanEqualPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsMoreThanEqual_returnsTrue() {","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanEqualPredicate predicate \u003d new SalaryIsMoreThanEqualPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // Equal hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHourlySalary(\"5.5\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"        // More hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHourlySalary(\"5.6\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsNotMoreThanEqual_returnsFalse() {","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanEqualPredicate predicate \u003d new SalaryIsMoreThanEqualPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHourlySalary(\"5.4\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/SalaryIsMoreThanPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"class SalaryIsMoreThanPredicateTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"        float firstPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"        float secondPredicateValue \u003d 5.5F;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"        float thirdPredicateValue \u003d 10.0F;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanPredicate firstPredicate \u003d new SalaryIsMoreThanPredicate(firstPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanPredicate secondPredicate \u003d new SalaryIsMoreThanPredicate(secondPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanPredicate thirdPredicate \u003d new SalaryIsMoreThanPredicate(thirdPredicateValue);","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        // same value -\u003e return true","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(5));","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // different value -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertFalse(secondPredicate.equals(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsMoreThan_returnsTrue() {","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanPredicate predicate \u003d new SalaryIsMoreThanPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // More hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withHourlySalary(\"5.6\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_hourlySalaryIsNotMoreThan_returnsFalse() {","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        SalaryIsMoreThanPredicate predicate \u003d new SalaryIsMoreThanPredicate(5.5F); // value \u003d 5.5","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"        // Equal hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHourlySalary(\"5.5\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Less hourly salary","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withHourlySalary(\"5.4\").build()));","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"beefham":56}},{"path":"src/test/java/seedu/address/model/person/predicates/TagContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"beefham"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"beefham"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"beefham"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"beefham"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"beefham"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"beefham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"beefham"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"beefham"},"content":"class TagContainsKeywordsPredicateTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"beefham"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(\"friend\", \"colleague\");","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"beefham"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"friend\");","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"beefham"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"beefham"},"content":"                new TagContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"beefham"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"beefham"},"content":"                new TagContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"beefham"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"beefham"},"content":"                new TagContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"beefham"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"beefham"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"beefham"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"beefham"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"        // different keyword list -\u003e returns false","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"beefham"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    public void test_tagContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"beefham"},"content":"        // One keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"beefham"},"content":"        TagContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"beefham"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"friend\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"boss\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"beefham"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"beefham"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friend\", \"intern\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"intern\", \"classmate\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"beefham"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"beefham"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"group1\", \"frIENd\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"GROUP1\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"beefham"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Friend\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"beefham"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"beefham"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"beefham"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"beefham"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\", \"intern\", \"classmate\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"beefham"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"beefham"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friend\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"beefham"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"late\", \"fried\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"beefham"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"beefham":75}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_CALCULATEDPAY_CHAR \u003d \"a\";","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_CALCULATEDPAY_NEGATIVE \u003d \"-1\";","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_HOURLYSALARY_CHAR \u003d \"yolo\";","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_HOURLYSALARY_NEGATIVE \u003d \"-3000\";","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_HOURSWORKED_CHAR \u003d \"A day\";","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_HOURSWORKED_NEGATIVE \u003d \"-27\";","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"beefham"},"content":"    private static final String INVALID_LEAVES_CHAR \u003d \"a\";","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"beefham"},"content":"    private static final String INVALID_LEAVES_NEGATIVE \u003d \"-14\";","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"beefham"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_OVERTIME_CHAR \u003d \"one\";","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"    private static final String INVALID_OVERTIME_NEGATIVE \u003d \"-2\";","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"beefham"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"beefham"},"content":"    private static final String INVALID_ROLE \u003d \"Pro \u003cJunior\u003e Java Expert\";","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"beefham"},"content":"    private static final String VALID_CALCULATEDPAY \u003d BENSON.getCalculatedPay().toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"beefham"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_HOURLYSALARY \u003d BENSON.getSalary().toString();","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_HOURSWORKED \u003d BENSON.getHoursWorked().toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    private static final String VALID_LEAVES \u003d BENSON.getLeaveBalance().toString();","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"    private static final List\u003cLocalDate\u003e VALID_LEAVES_TAKEN \u003d BENSON.getLeavesTaken().toList();","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"boonhaii"},"content":"    private static final String VALID_OVERTIME \u003d BENSON.getOvertime().toString();","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"beefham"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"                VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"                        VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"                VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"boonhaii"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"                        VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"                        VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"                VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"                VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"boonhaii"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"                        VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"1waykiat"},"content":"                        VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"                VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"                VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"boonhaii"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"                        VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"1waykiat"},"content":"                        VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_ROLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"                VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"                VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_nullRole_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"                VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"                VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_invalidRole_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"                INVALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"                VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d Role.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":159,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":161,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_nullLeaves_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, null, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"                VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LeaveBalance.class.getSimpleName());","lastModifiedDate":"2021-10-27"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_negativeLeaves_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, INVALID_LEAVES_NEGATIVE, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-21"},{"lineNumber":173,"author":{"gitId":"danielsimre"},"content":"                VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d LeaveBalance.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_characterInLeaves_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, INVALID_LEAVES_CHAR, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"                VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"        String expectedMessage \u003d LeaveBalance.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":184,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_nullSalary_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, null, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"1waykiat"},"content":"                VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-13"},{"lineNumber":192,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, HourlySalary.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_negativeSalary_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, INVALID_HOURLYSALARY_NEGATIVE, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"danielsimre"},"content":"                VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":201,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d HourlySalary.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_characterInSalary_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, INVALID_HOURLYSALARY_CHAR, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-21"},{"lineNumber":209,"author":{"gitId":"danielsimre"},"content":"                VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":210,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d HourlySalary.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_nullHoursWorked_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, null,","lastModifiedDate":"2021-10-21"},{"lineNumber":218,"author":{"gitId":"danielsimre"},"content":"                VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, HoursWorked.class.getSimpleName());","lastModifiedDate":"2021-10-11"},{"lineNumber":220,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":222,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":223,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":224,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_negativeHoursWorked_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":225,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":226,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, INVALID_HOURSWORKED_NEGATIVE,","lastModifiedDate":"2021-10-21"},{"lineNumber":227,"author":{"gitId":"danielsimre"},"content":"                VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":228,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d HoursWorked.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":229,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":231,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":232,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":233,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_characterInHoursWorked_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":234,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-11"},{"lineNumber":235,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, INVALID_HOURSWORKED_CHAR,","lastModifiedDate":"2021-10-21"},{"lineNumber":236,"author":{"gitId":"danielsimre"},"content":"                VALID_OVERTIME, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d HoursWorked.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-11"},{"lineNumber":238,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":239,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":240,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":241,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":242,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_negativeOvertime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":243,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-12"},{"lineNumber":244,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"danielsimre"},"content":"                INVALID_OVERTIME_NEGATIVE, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":246,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d Overtime.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-12"},{"lineNumber":247,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-12"},{"lineNumber":248,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":249,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":250,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":251,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_characterInOvertime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":252,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-12"},{"lineNumber":253,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED,","lastModifiedDate":"2021-10-21"},{"lineNumber":254,"author":{"gitId":"danielsimre"},"content":"                INVALID_OVERTIME_CHAR, VALID_CALCULATEDPAY, VALID_TAGS);","lastModifiedDate":"2021-10-21"},{"lineNumber":255,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d Overtime.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-12"},{"lineNumber":256,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-12"},{"lineNumber":257,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":258,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":259,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":260,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_negativeCalculatedPay_throwsIllegalValueException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":261,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-13"},{"lineNumber":262,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":263,"author":{"gitId":"boonhaii"},"content":"                INVALID_CALCULATEDPAY_NEGATIVE, VALID_TAGS);","lastModifiedDate":"2021-10-13"},{"lineNumber":264,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d CalculatedPay.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-13"},{"lineNumber":265,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-13"},{"lineNumber":266,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":267,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":268,"author":{"gitId":"boonhaii"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":269,"author":{"gitId":"boonhaii"},"content":"    public void toModelType_characterInCalculatedPay_throwsIllegalValueException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":270,"author":{"gitId":"boonhaii"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-10-13"},{"lineNumber":271,"author":{"gitId":"danielsimre"},"content":"                VALID_ROLE, VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":272,"author":{"gitId":"boonhaii"},"content":"                INVALID_CALCULATEDPAY_CHAR, VALID_TAGS);","lastModifiedDate":"2021-10-13"},{"lineNumber":273,"author":{"gitId":"boonhaii"},"content":"        String expectedMessage \u003d CalculatedPay.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-13"},{"lineNumber":274,"author":{"gitId":"boonhaii"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-13"},{"lineNumber":275,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":276,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2021-10-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2021-10-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2021-10-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":282,"author":{"gitId":"boonhaii"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE,","lastModifiedDate":"2021-10-11"},{"lineNumber":283,"author":{"gitId":"danielsimre"},"content":"                        VALID_LEAVES, VALID_LEAVES_TAKEN, VALID_HOURLYSALARY, VALID_HOURSWORKED, VALID_OVERTIME,","lastModifiedDate":"2021-10-21"},{"lineNumber":284,"author":{"gitId":"1waykiat"},"content":"                        VALID_CALCULATEDPAY, invalidTags);","lastModifiedDate":"2021-10-13"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2021-10-11"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":288,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"danielsimre":49,"boonhaii":129,"beefham":8,"-":98,"1waykiat":4}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":16,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":43,"author":{"gitId":"1waykiat"},"content":"        descriptor.setRole(person.getRole());","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        descriptor.setLeaves(person.getLeaveBalance());","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"1waykiat"},"content":"        descriptor.setSalary(person.getSalary());","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"1waykiat"},"content":"        descriptor.setHoursWorked(person.getHoursWorked());","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"1waykiat"},"content":"     * Sets the {@code Role} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"1waykiat"},"content":"    public EditPersonDescriptorBuilder withRole(String role) {","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"1waykiat"},"content":"        descriptor.setRole(new Role(role));","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"1waykiat"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"1waykiat"},"content":"     * Sets the {@code Leaves} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"1waykiat"},"content":"    public EditPersonDescriptorBuilder withLeaves(String leaves) {","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        descriptor.setLeaves(new LeaveBalance(leaves));","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"1waykiat"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"1waykiat"},"content":"     * Sets the {@code Salary} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"1waykiat"},"content":"    public EditPersonDescriptorBuilder withSalary(String salary) {","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"boonhaii"},"content":"        descriptor.setSalary(new HourlySalary(salary));","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"1waykiat"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"1waykiat"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"1waykiat"},"content":"     * Sets the {@code HoursWorked} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"1waykiat"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"1waykiat"},"content":"    public EditPersonDescriptorBuilder withHoursWorked(String hours) {","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"1waykiat"},"content":"        descriptor.setHoursWorked(new HoursWorked(hours));","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"1waykiat"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"1waykiat"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"danielsimre":3,"boonhaii":2,"-":87,"1waykiat":36}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"1waykiat"},"content":"import seedu.address.model.person.CalculatedPay;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.HoursWorked;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.LeavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import seedu.address.model.person.Overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"boonhaii"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"boonhaii"},"content":"    public static final String DEFAULT_ROLE \u003d \"HeRon Developer\";","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"boonhaii"},"content":"    public static final String DEFAULT_LEAVES \u003d \"0\";","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    public static final List\u003cLocalDate\u003e DEFAULT_LEAVES_TAKEN \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"szelongq"},"content":"    public static final String DEFAULT_SALARY \u003d \"15\";","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"    public static final String DEFAULT_HOURSWORKED \u003d \"70\";","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    public static final String DEFAULT_OVERTIME \u003d \"5\";","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"    private Role role;","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    private LeaveBalance leaveBalance;","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"    private LeavesTaken leavesTaken;","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"boonhaii"},"content":"    private HourlySalary hourlySalary;","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"boonhaii"},"content":"    private HoursWorked hoursWorked;","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    private Overtime overtime;","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"1waykiat"},"content":"    // When person initialized, always set pay to 0.","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"1waykiat"},"content":"    private CalculatedPay calculatedPay \u003d new CalculatedPay(\"0.00\");","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"1waykiat"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        role \u003d new Role(DEFAULT_ROLE);","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        leaveBalance \u003d new LeaveBalance(DEFAULT_LEAVES);","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        leavesTaken \u003d new LeavesTaken(DEFAULT_LEAVES_TAKEN);","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"boonhaii"},"content":"        hourlySalary \u003d new HourlySalary(DEFAULT_SALARY);","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"boonhaii"},"content":"        hoursWorked \u003d new HoursWorked(DEFAULT_HOURSWORKED);","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        overtime \u003d new Overtime(DEFAULT_OVERTIME);","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":82,"author":{"gitId":"boonhaii"},"content":"        role \u003d personToCopy.getRole();","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        leaveBalance \u003d personToCopy.getLeaveBalance();","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        leavesTaken \u003d personToCopy.getLeavesTaken();","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"boonhaii"},"content":"        hourlySalary \u003d personToCopy.getSalary();","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"boonhaii"},"content":"        hoursWorked \u003d personToCopy.getHoursWorked();","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        overtime \u003d personToCopy.getOvertime();","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":131,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"boonhaii"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"boonhaii"},"content":"    public PersonBuilder withRole(String role) {","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"boonhaii"},"content":"        this.role \u003d new Role(role);","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"boonhaii"},"content":"        return this;","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"boonhaii"},"content":"     * Sets the {@code Leaves} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"boonhaii"},"content":"    public PersonBuilder withLeaves(String leaves) {","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"        this.leaveBalance \u003d new LeaveBalance(leaves);","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"boonhaii"},"content":"        return this;","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"     * Sets the {@code LeavesTaken} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"    public PersonBuilder withLeavesTaken(List\u003cLocalDate\u003e dates) {","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"        this.leavesTaken \u003d new LeavesTaken(dates);","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"        return this;","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"beefham"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":156,"author":{"gitId":"beefham"},"content":"     * Sets the {@code CalculatedPay} of the {@code Person} that we are building.","lastModifiedDate":"2021-11-02"},{"lineNumber":157,"author":{"gitId":"beefham"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":158,"author":{"gitId":"beefham"},"content":"    public PersonBuilder withCalculatedPay(String pay) {","lastModifiedDate":"2021-11-02"},{"lineNumber":159,"author":{"gitId":"beefham"},"content":"        this.calculatedPay \u003d new CalculatedPay(pay);","lastModifiedDate":"2021-11-02"},{"lineNumber":160,"author":{"gitId":"beefham"},"content":"        return this;","lastModifiedDate":"2021-11-02"},{"lineNumber":161,"author":{"gitId":"beefham"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":162,"author":{"gitId":"beefham"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":163,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"boonhaii"},"content":"     * Sets the {@code Salary} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":166,"author":{"gitId":"boonhaii"},"content":"    public PersonBuilder withHourlySalary(String salary) {","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"boonhaii"},"content":"        this.hourlySalary \u003d new HourlySalary(salary);","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"boonhaii"},"content":"        return this;","lastModifiedDate":"2021-10-01"},{"lineNumber":169,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":170,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":171,"author":{"gitId":"boonhaii"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":172,"author":{"gitId":"boonhaii"},"content":"     * Sets the {@code HoursWorked} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-01"},{"lineNumber":173,"author":{"gitId":"boonhaii"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":174,"author":{"gitId":"boonhaii"},"content":"    public PersonBuilder withHoursWorked(String hoursWorked) {","lastModifiedDate":"2021-10-01"},{"lineNumber":175,"author":{"gitId":"boonhaii"},"content":"        this.hoursWorked \u003d new HoursWorked(hoursWorked);","lastModifiedDate":"2021-10-01"},{"lineNumber":176,"author":{"gitId":"boonhaii"},"content":"        return this;","lastModifiedDate":"2021-10-01"},{"lineNumber":177,"author":{"gitId":"boonhaii"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":178,"author":{"gitId":"boonhaii"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":180,"author":{"gitId":"danielsimre"},"content":"     * Sets the {@code Overtime} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-14"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"    public PersonBuilder withOvertime(String overtime) {","lastModifiedDate":"2021-10-14"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"        this.overtime \u003d new Overtime(overtime);","lastModifiedDate":"2021-10-14"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"        return this;","lastModifiedDate":"2021-10-14"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":187,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-10-14"},{"lineNumber":188,"author":{"gitId":"danielsimre"},"content":"     * Builds a {@code Person}.","lastModifiedDate":"2021-10-14"},{"lineNumber":189,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-10-14"},{"lineNumber":190,"author":{"gitId":"danielsimre"},"content":"    public Person build() {","lastModifiedDate":"2021-10-14"},{"lineNumber":191,"author":{"gitId":"danielsimre"},"content":"        return new Person(name, phone, email, address, role, leaveBalance, leavesTaken,","lastModifiedDate":"2021-10-27"},{"lineNumber":192,"author":{"gitId":"danielsimre"},"content":"                hourlySalary, hoursWorked, overtime, calculatedPay, tags);","lastModifiedDate":"2021-10-21"},{"lineNumber":193,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"danielsimre":39,"szelongq":1,"boonhaii":44,"beefham":8,"-":97,"1waykiat":5}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURLYSALARY;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURSWORKED;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OVERTIME;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"boonhaii"},"content":"        sb.append(PREFIX_ROLE + person.getRole().value + \" \");","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        sb.append(PREFIX_LEAVE + person.getLeaveBalance().toString() + \" \");","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"        sb.append(PREFIX_HOURLYSALARY + person.getSalary().toString() + \" \");","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"boonhaii"},"content":"        sb.append(PREFIX_HOURSWORKED + person.getHoursWorked().toString() + \" \");","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        sb.append(PREFIX_OVERTIME + person.getOvertime().toString() + \" \");","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"        descriptor.getRole().ifPresent(role -\u003e sb.append(PREFIX_ROLE).append(role.value).append(\" \"));","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"        descriptor.getLeaves().ifPresent(leaves -\u003e sb.append(PREFIX_LEAVE).append(leaves.value).append(\" \"));","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"boonhaii"},"content":"        descriptor.getSalary().ifPresent(salary-\u003e sb.append(PREFIX_HOURLYSALARY).append(salary.value).append(\" \"));","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"        descriptor.getHoursWorked().ifPresent(hoursWorked -\u003e sb.append(PREFIX_HOURSWORKED)","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"                .append(hoursWorked.value).append(\" \"));","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"danielsimre":3,"boonhaii":12,"-":62}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURLYSALARY_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURLYSALARY_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_HOURSWORKED_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVES_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_OVERTIME_BOB;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":18,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"boonhaii"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"boonhaii"},"content":"            .withPhone(\"94351253\").withRole(\"Quality Assurance\").withLeaves(\"14\").withHourlySalary(\"15.00\")","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"            .withHoursWorked(\"70\").withOvertime(\"5\").withTags(\"friends\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"boonhaii"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"boonhaii"},"content":"            .withRole(\"Software Developer\").withLeaves(\"20\").withHourlySalary(\"25.00\").withHoursWorked(\"60\")","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"            .withOvertime(\"0\").withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRole(\"Accountant\").withLeaves(\"11\")","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"            .withHourlySalary(\"18.00\").withHoursWorked(\"67\").withOvertime(\"0\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withRole(\"Legal Assistant\")","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"            .withLeaves(\"20\").withHourlySalary(\"15.00\").withHoursWorked(\"60\").withOvertime(\"0\").withTags(\"friends\")","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"            .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRole(\"UI/UX Designer\")","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"            .withLeaves(\"20\").withHourlySalary(\"16.66\").withHoursWorked(\"50\").withOvertime(\"0\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRole(\"HR Manager\")","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"            .withLeaves(\"15\").withHourlySalary(\"16.66\").withHoursWorked(\"40\").withOvertime(\"0\").build();","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"anna@example.com\").withRole(\"Team Manager (Web Design)\").withLeaves(\"8\")","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"boonhaii"},"content":"            .withHourlySalary(\"21.33\").withHoursWorked(\"55\").withOvertime(\"0\").withAddress(\"4th street\").build();","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":62,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withRole(\"Advertising Team Leader\")","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(\"20\").withHourlySalary(\"29.00\").withHoursWorked(\"20\").build();","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"boonhaii"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withRole(\"IT Assistant\")","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(\"20\").withHourlySalary(\"17.33\").withHoursWorked(\"60\").build();","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"boonhaii"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRole(VALID_ROLE_AMY)","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(VALID_LEAVES_AMY).withHourlySalary(VALID_HOURLYSALARY_AMY)","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"boonhaii"},"content":"            .withHoursWorked(VALID_HOURSWORKED_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":74,"author":{"gitId":"boonhaii"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRole(VALID_ROLE_BOB)","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"boonhaii"},"content":"            .withLeaves(VALID_LEAVES_BOB).withHourlySalary(VALID_HOURLYSALARY_BOB)","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"            .withHoursWorked(VALID_HOURSWORKED_BOB).withOvertime(VALID_OVERTIME_BOB)","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"danielsimre":10,"boonhaii":26,"-":61}}]
